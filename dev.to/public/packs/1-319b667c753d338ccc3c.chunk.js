webpackJsonp([1],Array(204).concat([
/* 204 */
/*!************************************************!*\
  !*** ./node_modules/twilio-video/es5/index.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar version = __webpack_require__(/*! ../package.json */ 219).version;\nvar Video = {};\n\nObject.defineProperties(Video, {\n  connect: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./connect */ 262)\n  },\n  createLocalAudioTrack: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./createlocaltrack */ 261).audio\n  },\n  createLocalTracks: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./createlocaltracks */ 221)\n  },\n  createLocalVideoTrack: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./createlocaltrack */ 261).video\n  },\n  isSupported: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./util/support */ 379)()\n  },\n  LocalAudioTrack: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./media/track/es5/localaudiotrack */ 216)\n  },\n  LocalDataTrack: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./media/track/es5/localdatatrack */ 217)\n  },\n  LocalVideoTrack: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./media/track/es5/localvideotrack */ 218)\n  },\n  version: {\n    enumerable: true,\n    value: version\n  }\n});\n\nmodule.exports = Video;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9pbmRleC5qcz80NGFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQywwQkFBaUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLG9CQUFXO0FBQzlCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLDZCQUFvQjtBQUN2QyxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyw4QkFBcUI7QUFDeEMsR0FBRztBQUNIO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsNkJBQW9CO0FBQ3ZDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLHlCQUFnQjtBQUNuQyxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyw0Q0FBbUM7QUFDdEQsR0FBRztBQUNIO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsMkNBQWtDO0FBQ3JELEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLDRDQUFtQztBQUN0RCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjIwNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHZlcnNpb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xudmFyIFZpZGVvID0ge307XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFZpZGVvLCB7XG4gIGNvbm5lY3Q6IHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiByZXF1aXJlKCcuL2Nvbm5lY3QnKVxuICB9LFxuICBjcmVhdGVMb2NhbEF1ZGlvVHJhY2s6IHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiByZXF1aXJlKCcuL2NyZWF0ZWxvY2FsdHJhY2snKS5hdWRpb1xuICB9LFxuICBjcmVhdGVMb2NhbFRyYWNrczoge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHJlcXVpcmUoJy4vY3JlYXRlbG9jYWx0cmFja3MnKVxuICB9LFxuICBjcmVhdGVMb2NhbFZpZGVvVHJhY2s6IHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiByZXF1aXJlKCcuL2NyZWF0ZWxvY2FsdHJhY2snKS52aWRlb1xuICB9LFxuICBpc1N1cHBvcnRlZDoge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHJlcXVpcmUoJy4vdXRpbC9zdXBwb3J0JykoKVxuICB9LFxuICBMb2NhbEF1ZGlvVHJhY2s6IHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiByZXF1aXJlKCcuL21lZGlhL3RyYWNrL2VzNS9sb2NhbGF1ZGlvdHJhY2snKVxuICB9LFxuICBMb2NhbERhdGFUcmFjazoge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHJlcXVpcmUoJy4vbWVkaWEvdHJhY2svZXM1L2xvY2FsZGF0YXRyYWNrJylcbiAgfSxcbiAgTG9jYWxWaWRlb1RyYWNrOiB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogcmVxdWlyZSgnLi9tZWRpYS90cmFjay9lczUvbG9jYWx2aWRlb3RyYWNrJylcbiAgfSxcbiAgdmVyc2lvbjoge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZlcnNpb25cbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVmlkZW87XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///204\n");

/***/ }),
/* 205 */,
/* 206 */
/*!*****************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/index.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals mozRTCPeerConnection, RTCRtpTransceiver */\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar constants = __webpack_require__(/*! ./constants */ 208);\n\n/**\n * Return the given {@link LocalTrack} or a new {@link LocalTrack} for the\n * given MediaStreamTrack.\n * @param {LocalTrack|MediaStreamTrack} track\n * @param {object} options\n * @returns {LocalTrack}\n * @throws {TypeError}\n */\nfunction asLocalTrack(track, options) {\n  if (track instanceof options.LocalAudioTrack || track instanceof options.LocalVideoTrack || track instanceof options.LocalDataTrack) {\n    return track;\n  }\n  if (track instanceof options.MediaStreamTrack) {\n    return track.kind === 'audio' ? new options.LocalAudioTrack(track, options) : new options.LocalVideoTrack(track, options);\n  }\n  throw constants.typeErrors.INVALID_TYPE('track', 'LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n}\n\n/**\n * Create a new {@link LocalTrackPublication} for the given {@link LocalTrack}.\n * @param {LocalTrack} track\n * @param {string} sid\n * @param {function(track: LocalTrackPublication): void} unpublish\n * @param {object} options\n */\nfunction asLocalTrackPublication(track, sid, unpublish, options) {\n  var LocalTrackPublication = {\n    audio: options.LocalAudioTrackPublication,\n    video: options.LocalVideoTrackPublication,\n    data: options.LocalDataTrackPublication\n  }[track.kind];\n  return new LocalTrackPublication(sid, track, unpublish, options);\n}\n\n/**\n * Capitalize a word.\n * @param {string} word\n * @returns {string} capitalized\n */\nfunction capitalize(word) {\n  return word[0].toUpperCase() + word.slice(1);\n}\n\n/**\n * Log deprecation warnings for the given events of an EventEmitter.\n * @param {string} name\n * @param {EventEmitter} emitter\n * @param {Map<string, string>} events\n * @param {Log} log\n */\nfunction deprecateEvents(name, emitter, events, log) {\n  var warningsShown = new Set();\n  emitter.on('newListener', function newListener(event) {\n    if (events.has(event) && !warningsShown.has(event)) {\n      log.deprecated(name + '#' + event + ' has been deprecated and scheduled for removal in twilio-video.js@2.0.0.' + (events.get(event) ? ' Use ' + name + '#' + events.get(event) + ' instead.' : ''));\n      warningsShown.add(event);\n    }\n    if (warningsShown.size >= events.size) {\n      emitter.removeListener('newListener', newListener);\n    }\n  });\n}\n\n/**\n * Finds the items in list1 that are not in list2.\n * @param {Array<*>|Map<*>|Set<*>} list1\n * @param {Array<*>|Map<*>|Set<*>} list2\n * @returns {Set}\n */\nfunction difference(list1, list2) {\n  list1 = Array.isArray(list1) ? new Set(list1) : new Set(list1.values());\n  list2 = Array.isArray(list2) ? new Set(list2) : new Set(list2.values());\n\n  var difference = new Set();\n\n  list1.forEach(function (item) {\n    if (!list2.has(item)) {\n      difference.add(item);\n    }\n  });\n\n  return difference;\n}\n\n/**\n * Filter out the keys in an object with a given value.\n * @param {object} object - Object to be filtered\n * @param {*} [filterValue] - Value to be filtered out; If not specified, then\n *   filters out all keys which have an explicit value of \"undefined\"\n * @returns {object} - Filtered object\n */\nfunction filterObject(object, filterValue) {\n  return Object.keys(object).reduce(function (filtered, key) {\n    if (object[key] !== filterValue) {\n      filtered[key] = object[key];\n    }\n    return filtered;\n  }, {});\n}\n\n/**\n * Map a list to an array of arrays, and return the flattened result.\n * @param {Array<*>|Set<*>|Map<*>} list\n * @param {function(*): Array<*>} [mapFn]\n * @returns Array<*>\n */\nfunction flatMap(list, mapFn) {\n  var listArray = list instanceof Map || list instanceof Set ? Array.from(list.values()) : list;\n\n  mapFn = mapFn || function mapFn(item) {\n    return item;\n  };\n\n  return listArray.reduce(function (flattened, item) {\n    var mapped = mapFn(item);\n    return flattened.concat(mapped);\n  }, []);\n}\n\n/**\n * Get the user agent string, or return \"Unknown\".\n * @returns {string}\n */\nfunction getUserAgent() {\n  return typeof navigator !== 'undefined' && navigator.userAgent ? navigator.userAgent : 'Unknown';\n}\n\n/**\n * Guess the browser.\n * @returns {?string} browser - \"chrome\", \"firefox\", \"safari\", or null\n */\nfunction guessBrowser() {\n  if (typeof webkitRTCPeerConnection !== 'undefined') {\n    return 'chrome';\n  } else if (typeof mozRTCPeerConnection !== 'undefined') {\n    return 'firefox';\n  } else if (typeof RTCPeerConnection !== 'undefined') {\n    if (getUserAgent().match(/AppleWebKit\\/(\\d+)\\./)) {\n      return 'safari';\n    }\n    // NOTE(mroberts): Could be Edge.\n  }\n  return null;\n}\n\n/**\n * Construct the SIP URI for a client.\n * @returns {string}\n */\nfunction makeClientSIPURI() {\n  /* eslint new-cap:0 */\n  return makeUUID() + '@' + constants.REGISTRAR_SERVER;\n}\n\n/**\n * Construct the SIP URI for the server.\n * @returns {string}\n */\nfunction makeServerSIPURI() {\n  /* eslint new-cap:0 */\n  return 'orchestrator@' + constants.REGISTRAR_SERVER;\n}\n\nfunction makeUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Ensure that the given function is called once per tick.\n * @param {function} fn - Function to be executed\n * @returns {function} - Schedules the given function to be called on the next tick\n */\nfunction oncePerTick(fn) {\n  var timeout = null;\n\n  function nextTick() {\n    timeout = null;\n    fn();\n  }\n\n  return function scheduleNextTick() {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(nextTick);\n  };\n}\n\nfunction promiseFromEvents(operation, eventEmitter, successEvent, failureEvent) {\n  return new Promise(function (resolve, reject) {\n    function onSuccess() {\n      var args = [].slice.call(arguments);\n      if (failureEvent) {\n        eventEmitter.removeListener(failureEvent, onFailure);\n      }\n      resolve.apply(undefined, _toConsumableArray(args));\n    }\n    function onFailure() {\n      var args = [].slice.call(arguments);\n      eventEmitter.removeListener(successEvent, onSuccess);\n      reject.apply(undefined, _toConsumableArray(args));\n    }\n    eventEmitter.once(successEvent, onSuccess);\n    if (failureEvent) {\n      eventEmitter.once(failureEvent, onFailure);\n    }\n    operation();\n  });\n}\n\n/**\n * Traverse down multiple nodes on an object and return null if\n * any link in the path is unavailable.\n * @param {Object} obj - Object to traverse\n * @param {String} path - Path to traverse. Period-separated.\n * @returns {Any|null}\n */\nfunction getOrNull(obj, path) {\n  return path.split('.').reduce(function (output, step) {\n    if (!output) {\n      return null;\n    }\n    return output[step];\n  }, obj);\n}\n\n/**\n * @typedef {object} Deferred\n * @property {Promise} promise\n * @property {function} reject\n * @property {function} resolve\n */\n\n/**\n * Create a {@link Deferred}.\n * @returns {Deferred}\n */\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Copy a method from a `source` prototype onto a `wrapper` prototype. Invoking\n * the method on the `wrapper` prototype will invoke the corresponding method\n * on an instance accessed by `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @param {string} methodName\n * @returns {undefined}\n */\nfunction delegateMethod(source, wrapper, target, methodName) {\n  if (methodName in wrapper) {\n    // Skip any methods already set.\n    return;\n  } else if (methodName.match(/^on[a-z]+$/)) {\n    // Skip EventHandlers (these are handled in the constructor).\n    return;\n  }\n\n  var type = void 0;\n  try {\n    type = _typeof(source[methodName]);\n  } catch (error) {\n    // NOTE(mroberts): Attempting to check the type of non-function members\n    // on the prototype throws an error for some types.\n  }\n\n  if (type !== 'function') {\n    // Skip non-function members.\n    return;\n  }\n\n  /* eslint no-loop-func:0 */\n  wrapper[methodName] = function () {\n    var _target;\n\n    return (_target = this[target])[methodName].apply(_target, arguments);\n  };\n}\n\n/**\n * Copy methods from a `source` prototype onto a `wrapper` prototype. Invoking\n * the methods on the `wrapper` prototype will invoke the corresponding method\n * on an instance accessed by `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @returns {undefined}\n */\nfunction delegateMethods(source, wrapper, target) {\n  for (var methodName in source) {\n    delegateMethod(source, wrapper, target, methodName);\n  }\n}\n\n/**\n * For each property name on the `source` prototype, add getters and/or setters\n * to `wrapper` that proxy to `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @returns {undefined}\n */\nfunction proxyProperties(source, wrapper, target) {\n  Object.getOwnPropertyNames(source).forEach(function (propertyName) {\n    proxyProperty(source, wrapper, target, propertyName);\n  });\n}\n\n/**\n * For the property name on the `source` prototype, add a getter and/or setter\n * to `wrapper` that proxies to `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @param {string} propertyName\n * @returns {undefined}\n */\nfunction proxyProperty(source, wrapper, target, propertyName) {\n  if (propertyName in wrapper) {\n    // Skip any properties already set.\n    return;\n  } else if (propertyName.match(/^on[a-z]+$/)) {\n    Object.defineProperty(wrapper, propertyName, {\n      value: null,\n      writable: true\n    });\n\n    target.addEventListener(propertyName.slice(2), function () {\n      wrapper.dispatchEvent.apply(wrapper, arguments);\n    });\n\n    return;\n  }\n\n  Object.defineProperty(wrapper, propertyName, {\n    enumerable: true,\n    get: function get() {\n      return target[propertyName];\n    }\n  });\n}\n\n/**\n * This is a function for turning a Promise into the kind referenced in the\n * Legacy Interface Extensions section of the WebRTC spec.\n * @param {Promise<*>} promise\n * @param {function<*>} onSuccess\n * @param {function<Error>} onFailure\n * @returns {Promise<undefined>}\n */\nfunction legacyPromise(promise, onSuccess, onFailure) {\n  if (onSuccess) {\n    return promise.then(function (result) {\n      onSuccess(result);\n    }, function (error) {\n      onFailure(error);\n    });\n  }\n  return promise;\n}\n\n/**\n * Build the {@link LogLevels} object.\n * @param {String|LogLevel} logLevel - Log level name or object\n * @returns {LogLevels}\n */\nfunction buildLogLevels(logLevel) {\n  if (typeof logLevel === 'string') {\n    return {\n      default: logLevel,\n      media: logLevel,\n      signaling: logLevel,\n      webrtc: logLevel\n    };\n  }\n  return logLevel;\n}\n\n/**\n * Get the {@link Track}'s derived class name\n * @param {Track} track\n * @param {?boolean} [local=undefined]\n * @returns {string}\n */\nfunction trackClass(track, local) {\n  local = local ? 'Local' : '';\n  return local + (track.kind || '').replace(/\\w{1}/, function (m) {\n    return m.toUpperCase();\n  }) + 'Track';\n}\n\n/**\n * Get the {@link TrackPublication}'s derived class name\n * @param {TrackPublication} publication\n * @param {?boolean} [local=undefined]\n * @returns {string}\n */\nfunction trackPublicationClass(publication, local) {\n  local = local ? 'Local' : '';\n  return local + (publication.kind || '').replace(/\\w{1}/, function (m) {\n    return m.toUpperCase();\n  }) + 'TrackPublication';\n}\n\n/**\n * Throw if the given track is not a {@link LocalAudioTrack}, a\n * {@link LocalVideoTrack} or a MediaStreamTrack.\n * @param {*} track\n * @param {object} options\n */\nfunction validateLocalTrack(track, options) {\n  if (!(track instanceof options.LocalAudioTrack || track instanceof options.LocalDataTrack || track instanceof options.LocalVideoTrack || track instanceof options.MediaStreamTrack)) {\n    throw constants.typeErrors.INVALID_TYPE('track', 'LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n  }\n}\n\n/**\n * @typedef {'plan-b' | 'unified-plan'} SdpSemantics\n */\n/**\n * @typedef {'planb' | 'unified'} SdpFormat\n */\n\n/**\n * Use unified plan SDP format on Firefox\n * @param {?SdpSemantics} [sdpSemantics]\n * @returns {SdpFormat} SDP format\n */\nfunction getSdpFormat(sdpSemantics) {\n  var browser = guessBrowser();\n  if (browser === 'firefox') {\n    return 'unified';\n  }\n  if (browser === 'safari') {\n    return 'currentDirection' in RTCRtpTransceiver.prototype ? 'unified' : 'planb';\n  }\n  if (checkIfSdpSemanticsIsSupported()) {\n    return {\n      'plan-b': 'planb',\n      'unified-plan': 'unified'\n    }[sdpSemantics || 'plan-b'];\n  }\n  // NOTE(mmalavalli): Once Chrome stops supporting \"plan-b\" SDPs, it will\n  // ignore the \"sdpSemantics\" flag. So, in order to differentiate between\n  // versions of Chrome which support only \"plan-b\" SDPs and versions of Chrome\n  // which support only \"unified-plan\" SDPs, which check whether PeerConnection's\n  // addStream() method is present.\n  return RTCPeerConnection.prototype.addStream ? 'planb' : 'unified';\n}\n\n// NOTE(mroberts): We need to cache this result so that we don't create too many\n// RTCPeerConnections.\nvar sdpSemanticsIsSupported = void 0;\n\n/**\n * Check whether or not `sdpSemantics` is supported.\n * @returns {boolean}\n */\nfunction checkIfSdpSemanticsIsSupported() {\n  if (typeof sdpSemanticsIsSupported === 'boolean') {\n    return sdpSemanticsIsSupported;\n  }\n  if (typeof RTCPeerConnection === 'undefined') {\n    sdpSemanticsIsSupported = false;\n    return sdpSemanticsIsSupported;\n  }\n  try {\n    new RTCPeerConnection({ sdpSemantics: 'bogus' });\n    sdpSemanticsIsSupported = false;\n    return sdpSemanticsIsSupported;\n  } catch (error) {\n    sdpSemanticsIsSupported = true;\n    return sdpSemanticsIsSupported;\n  }\n}\n\nexports.constants = constants;\nexports.asLocalTrack = asLocalTrack;\nexports.asLocalTrackPublication = asLocalTrackPublication;\nexports.capitalize = capitalize;\nexports.deprecateEvents = deprecateEvents;\nexports.difference = difference;\nexports.filterObject = filterObject;\nexports.flatMap = flatMap;\nexports.getUserAgent = getUserAgent;\nexports.guessBrowser = guessBrowser;\nexports.makeClientSIPURI = makeClientSIPURI;\nexports.makeServerSIPURI = makeServerSIPURI;\nexports.makeUUID = makeUUID;\nexports.oncePerTick = oncePerTick;\nexports.promiseFromEvents = promiseFromEvents;\nexports.getOrNull = getOrNull;\nexports.defer = defer;\nexports.delegateMethods = delegateMethods;\nexports.proxyProperties = proxyProperties;\nexports.legacyPromise = legacyPromise;\nexports.buildLogLevels = buildLogLevels;\nexports.trackClass = trackClass;\nexports.trackPublicationClass = trackPublicationClass;\nexports.validateLocalTrack = validateLocalTrack;\nexports.getSdpFormat = getSdpFormat;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///206\n");

/***/ }),
/* 207 */
/*!**********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/events/events.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///207\n");

/***/ }),
/* 208 */
/*!*********************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/constants.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports.DEFAULT_ENVIRONMENT = 'prod';\nmodule.exports.DEFAULT_REALM = 'us1';\nmodule.exports.DEFAULT_LOG_LEVEL = 'warn';\nmodule.exports.REGISTRAR_SERVER = 'endpoint.twilio.com';\nmodule.exports.WS_SERVER = function (environment, realm) {\n  switch (environment) {\n    case 'prod':\n      switch (realm) {\n        case 'us1':\n          return 'wss://endpoint.twilio.com';\n        default:\n          return 'wss://endpoint.' + realm + '.twilio.com';\n      }\n    default:\n      return 'wss://endpoint.' + environment + '-' + realm + '.twilio.com';\n  }\n};\nmodule.exports.ECS_SERVER = function (environment, realm) {\n  switch (environment) {\n    case 'prod':\n      return 'https://ecs.' + realm + '.twilio.com';\n    default:\n      return 'https://ecs.' + environment + '-' + realm + '.twilio.com';\n  }\n};\nmodule.exports.ECS_TIMEOUT = 60;\nmodule.exports.PUBLISH_MAX_ATTEMPTS = 5;\nmodule.exports.PUBLISH_BACKOFF_JITTER = 10;\nmodule.exports.PUBLISH_BACKOFF_MS = 20;\n\nmodule.exports.ICE_SERVERS_TIMEOUT_MS = 3000;\nmodule.exports.ICE_SERVERS_DEFAULT_TTL = 3600;\nmodule.exports.DEFAULT_ICE_SERVERS = function (environment) {\n  switch (environment) {\n    case 'prod':\n      return [{ urls: 'stun:global.stun.twilio.com:3478?transport=udp' }];\n    default:\n      return [{ urls: 'stun:global.stun.' + environment + '.twilio.com:3478?transport=udp' }];\n  }\n};\n\n// Headers\n/* eslint key-spacing:0 */\nmodule.exports.headers = {\n  X_TWILIO_ACCESSTOKEN: 'X-Twilio-AccessToken'\n};\n\n/**\n * Returns the appropriate indefinite article (\"a\" | \"an\").\n * @param {string} word - The word which determines whether \"a\" | \"an\" is returned\n * @returns {string} \"a\" if word's first letter is a vowel, \"an\" otherwise\n */\nfunction article(word) {\n  // NOTE(mmalavalli): This will not be accurate for words like \"hour\",\n  // which have consonants as their first character, but are pronounced like\n  // vowels. We can address this issue if the need arises.\n  return ['a', 'e', 'i', 'o', 'u'].includes(word.toLowerCase()[0]) ? 'an' : 'a';\n}\n\nmodule.exports.typeErrors = {\n  INVALID_TYPE: function INVALID_TYPE(name, type) {\n    return new TypeError(name + ' must be ' + article(type) + ' ' + type);\n  },\n  INVALID_VALUE: function INVALID_VALUE(name, values) {\n    return new RangeError(name + ' must be one of ', values.join(', '));\n  },\n  REQUIRED_ARGUMENT: function REQUIRED_ARGUMENT(name) {\n    return new TypeError(name + ' must be specified');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL2NvbnN0YW50cy5qcz8xMDhkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseURBQXlEO0FBQ3hFO0FBQ0EsZUFBZSw2RUFBNkU7QUFDNUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIwOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9FTlZJUk9OTUVOVCA9ICdwcm9kJztcbm1vZHVsZS5leHBvcnRzLkRFRkFVTFRfUkVBTE0gPSAndXMxJztcbm1vZHVsZS5leHBvcnRzLkRFRkFVTFRfTE9HX0xFVkVMID0gJ3dhcm4nO1xubW9kdWxlLmV4cG9ydHMuUkVHSVNUUkFSX1NFUlZFUiA9ICdlbmRwb2ludC50d2lsaW8uY29tJztcbm1vZHVsZS5leHBvcnRzLldTX1NFUlZFUiA9IGZ1bmN0aW9uIChlbnZpcm9ubWVudCwgcmVhbG0pIHtcbiAgc3dpdGNoIChlbnZpcm9ubWVudCkge1xuICAgIGNhc2UgJ3Byb2QnOlxuICAgICAgc3dpdGNoIChyZWFsbSkge1xuICAgICAgICBjYXNlICd1czEnOlxuICAgICAgICAgIHJldHVybiAnd3NzOi8vZW5kcG9pbnQudHdpbGlvLmNvbSc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICd3c3M6Ly9lbmRwb2ludC4nICsgcmVhbG0gKyAnLnR3aWxpby5jb20nO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ3dzczovL2VuZHBvaW50LicgKyBlbnZpcm9ubWVudCArICctJyArIHJlYWxtICsgJy50d2lsaW8uY29tJztcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzLkVDU19TRVJWRVIgPSBmdW5jdGlvbiAoZW52aXJvbm1lbnQsIHJlYWxtKSB7XG4gIHN3aXRjaCAoZW52aXJvbm1lbnQpIHtcbiAgICBjYXNlICdwcm9kJzpcbiAgICAgIHJldHVybiAnaHR0cHM6Ly9lY3MuJyArIHJlYWxtICsgJy50d2lsaW8uY29tJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdodHRwczovL2Vjcy4nICsgZW52aXJvbm1lbnQgKyAnLScgKyByZWFsbSArICcudHdpbGlvLmNvbSc7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cy5FQ1NfVElNRU9VVCA9IDYwO1xubW9kdWxlLmV4cG9ydHMuUFVCTElTSF9NQVhfQVRURU1QVFMgPSA1O1xubW9kdWxlLmV4cG9ydHMuUFVCTElTSF9CQUNLT0ZGX0pJVFRFUiA9IDEwO1xubW9kdWxlLmV4cG9ydHMuUFVCTElTSF9CQUNLT0ZGX01TID0gMjA7XG5cbm1vZHVsZS5leHBvcnRzLklDRV9TRVJWRVJTX1RJTUVPVVRfTVMgPSAzMDAwO1xubW9kdWxlLmV4cG9ydHMuSUNFX1NFUlZFUlNfREVGQVVMVF9UVEwgPSAzNjAwO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9JQ0VfU0VSVkVSUyA9IGZ1bmN0aW9uIChlbnZpcm9ubWVudCkge1xuICBzd2l0Y2ggKGVudmlyb25tZW50KSB7XG4gICAgY2FzZSAncHJvZCc6XG4gICAgICByZXR1cm4gW3sgdXJsczogJ3N0dW46Z2xvYmFsLnN0dW4udHdpbGlvLmNvbTozNDc4P3RyYW5zcG9ydD11ZHAnIH1dO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW3sgdXJsczogJ3N0dW46Z2xvYmFsLnN0dW4uJyArIGVudmlyb25tZW50ICsgJy50d2lsaW8uY29tOjM0Nzg/dHJhbnNwb3J0PXVkcCcgfV07XG4gIH1cbn07XG5cbi8vIEhlYWRlcnNcbi8qIGVzbGludCBrZXktc3BhY2luZzowICovXG5tb2R1bGUuZXhwb3J0cy5oZWFkZXJzID0ge1xuICBYX1RXSUxJT19BQ0NFU1NUT0tFTjogJ1gtVHdpbGlvLUFjY2Vzc1Rva2VuJ1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcHByb3ByaWF0ZSBpbmRlZmluaXRlIGFydGljbGUgKFwiYVwiIHwgXCJhblwiKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkIC0gVGhlIHdvcmQgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIFwiYVwiIHwgXCJhblwiIGlzIHJldHVybmVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBcImFcIiBpZiB3b3JkJ3MgZmlyc3QgbGV0dGVyIGlzIGEgdm93ZWwsIFwiYW5cIiBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gYXJ0aWNsZSh3b3JkKSB7XG4gIC8vIE5PVEUobW1hbGF2YWxsaSk6IFRoaXMgd2lsbCBub3QgYmUgYWNjdXJhdGUgZm9yIHdvcmRzIGxpa2UgXCJob3VyXCIsXG4gIC8vIHdoaWNoIGhhdmUgY29uc29uYW50cyBhcyB0aGVpciBmaXJzdCBjaGFyYWN0ZXIsIGJ1dCBhcmUgcHJvbm91bmNlZCBsaWtlXG4gIC8vIHZvd2Vscy4gV2UgY2FuIGFkZHJlc3MgdGhpcyBpc3N1ZSBpZiB0aGUgbmVlZCBhcmlzZXMuXG4gIHJldHVybiBbJ2EnLCAnZScsICdpJywgJ28nLCAndSddLmluY2x1ZGVzKHdvcmQudG9Mb3dlckNhc2UoKVswXSkgPyAnYW4nIDogJ2EnO1xufVxuXG5tb2R1bGUuZXhwb3J0cy50eXBlRXJyb3JzID0ge1xuICBJTlZBTElEX1RZUEU6IGZ1bmN0aW9uIElOVkFMSURfVFlQRShuYW1lLCB0eXBlKSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IobmFtZSArICcgbXVzdCBiZSAnICsgYXJ0aWNsZSh0eXBlKSArICcgJyArIHR5cGUpO1xuICB9LFxuICBJTlZBTElEX1ZBTFVFOiBmdW5jdGlvbiBJTlZBTElEX1ZBTFVFKG5hbWUsIHZhbHVlcykge1xuICAgIHJldHVybiBuZXcgUmFuZ2VFcnJvcihuYW1lICsgJyBtdXN0IGJlIG9uZSBvZiAnLCB2YWx1ZXMuam9pbignLCAnKSk7XG4gIH0sXG4gIFJFUVVJUkVEX0FSR1VNRU5UOiBmdW5jdGlvbiBSRVFVSVJFRF9BUkdVTUVOVChuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IobmFtZSArICcgbXVzdCBiZSBzcGVjaWZpZWQnKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3V0aWwvY29uc3RhbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///208\n");

/***/ }),
/* 209 */
/*!*******************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/twilio-video-errors.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// NOTE: Do not edit this file. This code is auto-generated. Contact the\n// Twilio SDK Team for more information.\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TwilioError = __webpack_require__(/*! ./twilioerror */ 296);\nvar TwilioErrorByCode = {};\n\n/**\n * Create a {@link TwilioError} for a given code and message.\n * @private\n * @param {number} [code] - Error code\n * @param {string} [message] - Error message\n * @returns {TwilioError}\n */\nexports.createTwilioError = function createTwilioError(code, message) {\n  code = typeof code === 'number' ? code : 0;\n  message = typeof message === 'string' && message ? message : 'Unknown error';\n  return TwilioErrorByCode[code] ? new TwilioErrorByCode[code]() : new TwilioError(code, message);\n};\n\n/**\n * @class AccessTokenInvalidError\n * @classdesc Raised whenever the AccessToken used for connecting to Room is invalid.\n * @extends TwilioError\n * @property {number} code - 20101\n * @property {string} message - 'Invalid Access Token'\n */\n\nvar AccessTokenInvalidError = function (_TwilioError) {\n  _inherits(AccessTokenInvalidError, _TwilioError);\n\n  function AccessTokenInvalidError() {\n    _classCallCheck(this, AccessTokenInvalidError);\n\n    return _possibleConstructorReturn(this, (AccessTokenInvalidError.__proto__ || Object.getPrototypeOf(AccessTokenInvalidError)).call(this, 20101, 'Invalid Access Token'));\n  }\n\n  return AccessTokenInvalidError;\n}(TwilioError);\n\nexports.AccessTokenInvalidError = AccessTokenInvalidError;\nObject.defineProperty(TwilioErrorByCode, 20101, { value: AccessTokenInvalidError });\n\n/**\n * @class AccessTokenHeaderInvalidError\n * @classdesc Raised whenever the AccessToken used for connecting to Room has an invalid header.\n * @extends TwilioError\n * @property {number} code - 20102\n * @property {string} message - 'Invalid Access Token header'\n */\n\nvar AccessTokenHeaderInvalidError = function (_TwilioError2) {\n  _inherits(AccessTokenHeaderInvalidError, _TwilioError2);\n\n  function AccessTokenHeaderInvalidError() {\n    _classCallCheck(this, AccessTokenHeaderInvalidError);\n\n    return _possibleConstructorReturn(this, (AccessTokenHeaderInvalidError.__proto__ || Object.getPrototypeOf(AccessTokenHeaderInvalidError)).call(this, 20102, 'Invalid Access Token header'));\n  }\n\n  return AccessTokenHeaderInvalidError;\n}(TwilioError);\n\nexports.AccessTokenHeaderInvalidError = AccessTokenHeaderInvalidError;\nObject.defineProperty(TwilioErrorByCode, 20102, { value: AccessTokenHeaderInvalidError });\n\n/**\n * @class AccessTokenIssuerInvalidError\n * @classdesc Raised whenever the AccessToken used for connecting to Room contains an invalid issuer or subject.\n * @extends TwilioError\n * @property {number} code - 20103\n * @property {string} message - 'Invalid Access Token issuer/subject'\n */\n\nvar AccessTokenIssuerInvalidError = function (_TwilioError3) {\n  _inherits(AccessTokenIssuerInvalidError, _TwilioError3);\n\n  function AccessTokenIssuerInvalidError() {\n    _classCallCheck(this, AccessTokenIssuerInvalidError);\n\n    return _possibleConstructorReturn(this, (AccessTokenIssuerInvalidError.__proto__ || Object.getPrototypeOf(AccessTokenIssuerInvalidError)).call(this, 20103, 'Invalid Access Token issuer/subject'));\n  }\n\n  return AccessTokenIssuerInvalidError;\n}(TwilioError);\n\nexports.AccessTokenIssuerInvalidError = AccessTokenIssuerInvalidError;\nObject.defineProperty(TwilioErrorByCode, 20103, { value: AccessTokenIssuerInvalidError });\n\n/**\n * @class AccessTokenExpiredError\n * @classdesc Raised whenever the AccessToken used for connecting to Room has expired.\n * @extends TwilioError\n * @property {number} code - 20104\n * @property {string} message - 'Access Token expired or expiration date invalid'\n */\n\nvar AccessTokenExpiredError = function (_TwilioError4) {\n  _inherits(AccessTokenExpiredError, _TwilioError4);\n\n  function AccessTokenExpiredError() {\n    _classCallCheck(this, AccessTokenExpiredError);\n\n    return _possibleConstructorReturn(this, (AccessTokenExpiredError.__proto__ || Object.getPrototypeOf(AccessTokenExpiredError)).call(this, 20104, 'Access Token expired or expiration date invalid'));\n  }\n\n  return AccessTokenExpiredError;\n}(TwilioError);\n\nexports.AccessTokenExpiredError = AccessTokenExpiredError;\nObject.defineProperty(TwilioErrorByCode, 20104, { value: AccessTokenExpiredError });\n\n/**\n * @class AccessTokenNotYetValidError\n * @classdesc Raised whenever the AccessToken used for connecting to Room is not yet valid.\n * @extends TwilioError\n * @property {number} code - 20105\n * @property {string} message - 'Access Token not yet valid'\n */\n\nvar AccessTokenNotYetValidError = function (_TwilioError5) {\n  _inherits(AccessTokenNotYetValidError, _TwilioError5);\n\n  function AccessTokenNotYetValidError() {\n    _classCallCheck(this, AccessTokenNotYetValidError);\n\n    return _possibleConstructorReturn(this, (AccessTokenNotYetValidError.__proto__ || Object.getPrototypeOf(AccessTokenNotYetValidError)).call(this, 20105, 'Access Token not yet valid'));\n  }\n\n  return AccessTokenNotYetValidError;\n}(TwilioError);\n\nexports.AccessTokenNotYetValidError = AccessTokenNotYetValidError;\nObject.defineProperty(TwilioErrorByCode, 20105, { value: AccessTokenNotYetValidError });\n\n/**\n * @class AccessTokenGrantsInvalidError\n * @classdesc Raised whenever the AccessToken used for connecting to Room has invalid grants.\n * @extends TwilioError\n * @property {number} code - 20106\n * @property {string} message - 'Invalid Access Token grants'\n */\n\nvar AccessTokenGrantsInvalidError = function (_TwilioError6) {\n  _inherits(AccessTokenGrantsInvalidError, _TwilioError6);\n\n  function AccessTokenGrantsInvalidError() {\n    _classCallCheck(this, AccessTokenGrantsInvalidError);\n\n    return _possibleConstructorReturn(this, (AccessTokenGrantsInvalidError.__proto__ || Object.getPrototypeOf(AccessTokenGrantsInvalidError)).call(this, 20106, 'Invalid Access Token grants'));\n  }\n\n  return AccessTokenGrantsInvalidError;\n}(TwilioError);\n\nexports.AccessTokenGrantsInvalidError = AccessTokenGrantsInvalidError;\nObject.defineProperty(TwilioErrorByCode, 20106, { value: AccessTokenGrantsInvalidError });\n\n/**\n * @class AccessTokenSignatureInvalidError\n * @classdesc Raised whenever the AccessToken used for connecting to Room has an invalid signature.\n * @extends TwilioError\n * @property {number} code - 20107\n * @property {string} message - 'Invalid Access Token signature'\n */\n\nvar AccessTokenSignatureInvalidError = function (_TwilioError7) {\n  _inherits(AccessTokenSignatureInvalidError, _TwilioError7);\n\n  function AccessTokenSignatureInvalidError() {\n    _classCallCheck(this, AccessTokenSignatureInvalidError);\n\n    return _possibleConstructorReturn(this, (AccessTokenSignatureInvalidError.__proto__ || Object.getPrototypeOf(AccessTokenSignatureInvalidError)).call(this, 20107, 'Invalid Access Token signature'));\n  }\n\n  return AccessTokenSignatureInvalidError;\n}(TwilioError);\n\nexports.AccessTokenSignatureInvalidError = AccessTokenSignatureInvalidError;\nObject.defineProperty(TwilioErrorByCode, 20107, { value: AccessTokenSignatureInvalidError });\n\n/**\n * @class SignalingConnectionError\n * @classdesc Raised whenever a signaling connection error occurs that is not covered by a more specific error code.\n * @extends TwilioError\n * @property {number} code - 53000\n * @property {string} message - 'Signaling connection error'\n */\n\nvar SignalingConnectionError = function (_TwilioError8) {\n  _inherits(SignalingConnectionError, _TwilioError8);\n\n  function SignalingConnectionError() {\n    _classCallCheck(this, SignalingConnectionError);\n\n    return _possibleConstructorReturn(this, (SignalingConnectionError.__proto__ || Object.getPrototypeOf(SignalingConnectionError)).call(this, 53000, 'Signaling connection error'));\n  }\n\n  return SignalingConnectionError;\n}(TwilioError);\n\nexports.SignalingConnectionError = SignalingConnectionError;\nObject.defineProperty(TwilioErrorByCode, 53000, { value: SignalingConnectionError });\n\n/**\n * @class SignalingConnectionDisconnectedError\n * @classdesc Raised whenever the signaling connection is unexpectedly disconnected.\n * @extends TwilioError\n * @property {number} code - 53001\n * @property {string} message - 'Signaling connection disconnected'\n */\n\nvar SignalingConnectionDisconnectedError = function (_TwilioError9) {\n  _inherits(SignalingConnectionDisconnectedError, _TwilioError9);\n\n  function SignalingConnectionDisconnectedError() {\n    _classCallCheck(this, SignalingConnectionDisconnectedError);\n\n    return _possibleConstructorReturn(this, (SignalingConnectionDisconnectedError.__proto__ || Object.getPrototypeOf(SignalingConnectionDisconnectedError)).call(this, 53001, 'Signaling connection disconnected'));\n  }\n\n  return SignalingConnectionDisconnectedError;\n}(TwilioError);\n\nexports.SignalingConnectionDisconnectedError = SignalingConnectionDisconnectedError;\nObject.defineProperty(TwilioErrorByCode, 53001, { value: SignalingConnectionDisconnectedError });\n\n/**\n * @class SignalingConnectionTimeoutError\n * @classdesc Raised whenever the signaling connection times out.\n * @extends TwilioError\n * @property {number} code - 53002\n * @property {string} message - 'Signaling connection timed out'\n */\n\nvar SignalingConnectionTimeoutError = function (_TwilioError10) {\n  _inherits(SignalingConnectionTimeoutError, _TwilioError10);\n\n  function SignalingConnectionTimeoutError() {\n    _classCallCheck(this, SignalingConnectionTimeoutError);\n\n    return _possibleConstructorReturn(this, (SignalingConnectionTimeoutError.__proto__ || Object.getPrototypeOf(SignalingConnectionTimeoutError)).call(this, 53002, 'Signaling connection timed out'));\n  }\n\n  return SignalingConnectionTimeoutError;\n}(TwilioError);\n\nexports.SignalingConnectionTimeoutError = SignalingConnectionTimeoutError;\nObject.defineProperty(TwilioErrorByCode, 53002, { value: SignalingConnectionTimeoutError });\n\n/**\n * @class SignalingIncomingMessageInvalidError\n * @classdesc Raised whenever the Client receives a message from the Server that the Client cannot handle.\n * @extends TwilioError\n * @property {number} code - 53003\n * @property {string} message - 'Client received an invalid signaling message'\n */\n\nvar SignalingIncomingMessageInvalidError = function (_TwilioError11) {\n  _inherits(SignalingIncomingMessageInvalidError, _TwilioError11);\n\n  function SignalingIncomingMessageInvalidError() {\n    _classCallCheck(this, SignalingIncomingMessageInvalidError);\n\n    return _possibleConstructorReturn(this, (SignalingIncomingMessageInvalidError.__proto__ || Object.getPrototypeOf(SignalingIncomingMessageInvalidError)).call(this, 53003, 'Client received an invalid signaling message'));\n  }\n\n  return SignalingIncomingMessageInvalidError;\n}(TwilioError);\n\nexports.SignalingIncomingMessageInvalidError = SignalingIncomingMessageInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53003, { value: SignalingIncomingMessageInvalidError });\n\n/**\n * @class SignalingOutgoingMessageInvalidError\n * @classdesc Raised whenever the Client sends a message to the Server that the Server cannot handle.\n * @extends TwilioError\n * @property {number} code - 53004\n * @property {string} message - 'Client sent an invalid signaling message'\n */\n\nvar SignalingOutgoingMessageInvalidError = function (_TwilioError12) {\n  _inherits(SignalingOutgoingMessageInvalidError, _TwilioError12);\n\n  function SignalingOutgoingMessageInvalidError() {\n    _classCallCheck(this, SignalingOutgoingMessageInvalidError);\n\n    return _possibleConstructorReturn(this, (SignalingOutgoingMessageInvalidError.__proto__ || Object.getPrototypeOf(SignalingOutgoingMessageInvalidError)).call(this, 53004, 'Client sent an invalid signaling message'));\n  }\n\n  return SignalingOutgoingMessageInvalidError;\n}(TwilioError);\n\nexports.SignalingOutgoingMessageInvalidError = SignalingOutgoingMessageInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53004, { value: SignalingOutgoingMessageInvalidError });\n\n/**\n * @class RoomNameInvalidError\n * @classdesc Raised whenever a Room name is invalid, and the scenario is not covered by a more specific error code.\n * @extends TwilioError\n * @property {number} code - 53100\n * @property {string} message - 'Room name is invalid'\n */\n\nvar RoomNameInvalidError = function (_TwilioError13) {\n  _inherits(RoomNameInvalidError, _TwilioError13);\n\n  function RoomNameInvalidError() {\n    _classCallCheck(this, RoomNameInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomNameInvalidError.__proto__ || Object.getPrototypeOf(RoomNameInvalidError)).call(this, 53100, 'Room name is invalid'));\n  }\n\n  return RoomNameInvalidError;\n}(TwilioError);\n\nexports.RoomNameInvalidError = RoomNameInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53100, { value: RoomNameInvalidError });\n\n/**\n * @class RoomNameTooLongError\n * @classdesc Raised whenever a Room name is too long.\n * @extends TwilioError\n * @property {number} code - 53101\n * @property {string} message - 'Room name is too long'\n */\n\nvar RoomNameTooLongError = function (_TwilioError14) {\n  _inherits(RoomNameTooLongError, _TwilioError14);\n\n  function RoomNameTooLongError() {\n    _classCallCheck(this, RoomNameTooLongError);\n\n    return _possibleConstructorReturn(this, (RoomNameTooLongError.__proto__ || Object.getPrototypeOf(RoomNameTooLongError)).call(this, 53101, 'Room name is too long'));\n  }\n\n  return RoomNameTooLongError;\n}(TwilioError);\n\nexports.RoomNameTooLongError = RoomNameTooLongError;\nObject.defineProperty(TwilioErrorByCode, 53101, { value: RoomNameTooLongError });\n\n/**\n * @class RoomNameCharsInvalidError\n * @classdesc Raised whenever a Room name contains invalid characters.\n * @extends TwilioError\n * @property {number} code - 53102\n * @property {string} message - 'Room name contains invalid characters'\n */\n\nvar RoomNameCharsInvalidError = function (_TwilioError15) {\n  _inherits(RoomNameCharsInvalidError, _TwilioError15);\n\n  function RoomNameCharsInvalidError() {\n    _classCallCheck(this, RoomNameCharsInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomNameCharsInvalidError.__proto__ || Object.getPrototypeOf(RoomNameCharsInvalidError)).call(this, 53102, 'Room name contains invalid characters'));\n  }\n\n  return RoomNameCharsInvalidError;\n}(TwilioError);\n\nexports.RoomNameCharsInvalidError = RoomNameCharsInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53102, { value: RoomNameCharsInvalidError });\n\n/**\n * @class RoomCreateFailedError\n * @classdesc Raised whenever the Server is unable to create a Room.\n * @extends TwilioError\n * @property {number} code - 53103\n * @property {string} message - 'Unable to create Room'\n */\n\nvar RoomCreateFailedError = function (_TwilioError16) {\n  _inherits(RoomCreateFailedError, _TwilioError16);\n\n  function RoomCreateFailedError() {\n    _classCallCheck(this, RoomCreateFailedError);\n\n    return _possibleConstructorReturn(this, (RoomCreateFailedError.__proto__ || Object.getPrototypeOf(RoomCreateFailedError)).call(this, 53103, 'Unable to create Room'));\n  }\n\n  return RoomCreateFailedError;\n}(TwilioError);\n\nexports.RoomCreateFailedError = RoomCreateFailedError;\nObject.defineProperty(TwilioErrorByCode, 53103, { value: RoomCreateFailedError });\n\n/**\n * @class RoomConnectFailedError\n * @classdesc Raised whenever a Client is unable to connect to a Room, and the scenario is not covered by a more specific error code.\n * @extends TwilioError\n * @property {number} code - 53104\n * @property {string} message - 'Unable to connect to Room'\n */\n\nvar RoomConnectFailedError = function (_TwilioError17) {\n  _inherits(RoomConnectFailedError, _TwilioError17);\n\n  function RoomConnectFailedError() {\n    _classCallCheck(this, RoomConnectFailedError);\n\n    return _possibleConstructorReturn(this, (RoomConnectFailedError.__proto__ || Object.getPrototypeOf(RoomConnectFailedError)).call(this, 53104, 'Unable to connect to Room'));\n  }\n\n  return RoomConnectFailedError;\n}(TwilioError);\n\nexports.RoomConnectFailedError = RoomConnectFailedError;\nObject.defineProperty(TwilioErrorByCode, 53104, { value: RoomConnectFailedError });\n\n/**\n * @class RoomMaxParticipantsExceededError\n * @classdesc Raised whenever a Client is unable to connect to a Room because the Room contains too many Participants.\n * @extends TwilioError\n * @property {number} code - 53105\n * @property {string} message - 'Room contains too many Participants'\n */\n\nvar RoomMaxParticipantsExceededError = function (_TwilioError18) {\n  _inherits(RoomMaxParticipantsExceededError, _TwilioError18);\n\n  function RoomMaxParticipantsExceededError() {\n    _classCallCheck(this, RoomMaxParticipantsExceededError);\n\n    return _possibleConstructorReturn(this, (RoomMaxParticipantsExceededError.__proto__ || Object.getPrototypeOf(RoomMaxParticipantsExceededError)).call(this, 53105, 'Room contains too many Participants'));\n  }\n\n  return RoomMaxParticipantsExceededError;\n}(TwilioError);\n\nexports.RoomMaxParticipantsExceededError = RoomMaxParticipantsExceededError;\nObject.defineProperty(TwilioErrorByCode, 53105, { value: RoomMaxParticipantsExceededError });\n\n/**\n * @class RoomNotFoundError\n * @classdesc Raised whenever attempting operation on a non-existent Room.\n * @extends TwilioError\n * @property {number} code - 53106\n * @property {string} message - 'Room not found'\n */\n\nvar RoomNotFoundError = function (_TwilioError19) {\n  _inherits(RoomNotFoundError, _TwilioError19);\n\n  function RoomNotFoundError() {\n    _classCallCheck(this, RoomNotFoundError);\n\n    return _possibleConstructorReturn(this, (RoomNotFoundError.__proto__ || Object.getPrototypeOf(RoomNotFoundError)).call(this, 53106, 'Room not found'));\n  }\n\n  return RoomNotFoundError;\n}(TwilioError);\n\nexports.RoomNotFoundError = RoomNotFoundError;\nObject.defineProperty(TwilioErrorByCode, 53106, { value: RoomNotFoundError });\n\n/**\n * @class RoomMaxParticipantsOutOfRangeError\n * @classdesc Raised in the REST API when MaxParticipants is set out of range.\n * @extends TwilioError\n * @property {number} code - 53107\n * @property {string} message - 'MaxParticipants is out of range'\n */\n\nvar RoomMaxParticipantsOutOfRangeError = function (_TwilioError20) {\n  _inherits(RoomMaxParticipantsOutOfRangeError, _TwilioError20);\n\n  function RoomMaxParticipantsOutOfRangeError() {\n    _classCallCheck(this, RoomMaxParticipantsOutOfRangeError);\n\n    return _possibleConstructorReturn(this, (RoomMaxParticipantsOutOfRangeError.__proto__ || Object.getPrototypeOf(RoomMaxParticipantsOutOfRangeError)).call(this, 53107, 'MaxParticipants is out of range'));\n  }\n\n  return RoomMaxParticipantsOutOfRangeError;\n}(TwilioError);\n\nexports.RoomMaxParticipantsOutOfRangeError = RoomMaxParticipantsOutOfRangeError;\nObject.defineProperty(TwilioErrorByCode, 53107, { value: RoomMaxParticipantsOutOfRangeError });\n\n/**\n * @class RoomTypeInvalidError\n * @classdesc Raised in the REST API when the user attempts to create a Room with an invalid RoomType\n * @extends TwilioError\n * @property {number} code - 53108\n * @property {string} message - 'RoomType is not valid'\n */\n\nvar RoomTypeInvalidError = function (_TwilioError21) {\n  _inherits(RoomTypeInvalidError, _TwilioError21);\n\n  function RoomTypeInvalidError() {\n    _classCallCheck(this, RoomTypeInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomTypeInvalidError.__proto__ || Object.getPrototypeOf(RoomTypeInvalidError)).call(this, 53108, 'RoomType is not valid'));\n  }\n\n  return RoomTypeInvalidError;\n}(TwilioError);\n\nexports.RoomTypeInvalidError = RoomTypeInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53108, { value: RoomTypeInvalidError });\n\n/**\n * @class RoomTimeoutOutOfRangeError\n * @classdesc Raised in the REST API when Timeout is set out of range.\n * @extends TwilioError\n * @property {number} code - 53109\n * @property {string} message - 'Timeout is out of range'\n */\n\nvar RoomTimeoutOutOfRangeError = function (_TwilioError22) {\n  _inherits(RoomTimeoutOutOfRangeError, _TwilioError22);\n\n  function RoomTimeoutOutOfRangeError() {\n    _classCallCheck(this, RoomTimeoutOutOfRangeError);\n\n    return _possibleConstructorReturn(this, (RoomTimeoutOutOfRangeError.__proto__ || Object.getPrototypeOf(RoomTimeoutOutOfRangeError)).call(this, 53109, 'Timeout is out of range'));\n  }\n\n  return RoomTimeoutOutOfRangeError;\n}(TwilioError);\n\nexports.RoomTimeoutOutOfRangeError = RoomTimeoutOutOfRangeError;\nObject.defineProperty(TwilioErrorByCode, 53109, { value: RoomTimeoutOutOfRangeError });\n\n/**\n * @class RoomStatusCallbackMethodInvalidError\n * @classdesc Raised in the REST API when StatusCallbackMethod is set to an invalid value.\n * @extends TwilioError\n * @property {number} code - 53110\n * @property {string} message - 'StatusCallbackMethod is invalid'\n */\n\nvar RoomStatusCallbackMethodInvalidError = function (_TwilioError23) {\n  _inherits(RoomStatusCallbackMethodInvalidError, _TwilioError23);\n\n  function RoomStatusCallbackMethodInvalidError() {\n    _classCallCheck(this, RoomStatusCallbackMethodInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomStatusCallbackMethodInvalidError.__proto__ || Object.getPrototypeOf(RoomStatusCallbackMethodInvalidError)).call(this, 53110, 'StatusCallbackMethod is invalid'));\n  }\n\n  return RoomStatusCallbackMethodInvalidError;\n}(TwilioError);\n\nexports.RoomStatusCallbackMethodInvalidError = RoomStatusCallbackMethodInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53110, { value: RoomStatusCallbackMethodInvalidError });\n\n/**\n * @class RoomStatusCallbackInvalidError\n * @classdesc Raised in the REST API when StatusCallback is not a valid URL or the url is too long.\n * @extends TwilioError\n * @property {number} code - 53111\n * @property {string} message - 'StatusCallback is invalid'\n */\n\nvar RoomStatusCallbackInvalidError = function (_TwilioError24) {\n  _inherits(RoomStatusCallbackInvalidError, _TwilioError24);\n\n  function RoomStatusCallbackInvalidError() {\n    _classCallCheck(this, RoomStatusCallbackInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomStatusCallbackInvalidError.__proto__ || Object.getPrototypeOf(RoomStatusCallbackInvalidError)).call(this, 53111, 'StatusCallback is invalid'));\n  }\n\n  return RoomStatusCallbackInvalidError;\n}(TwilioError);\n\nexports.RoomStatusCallbackInvalidError = RoomStatusCallbackInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53111, { value: RoomStatusCallbackInvalidError });\n\n/**\n * @class RoomStatusInvalidError\n * @classdesc Raised in the REST API when Status is not valid or the Room is not in-progress.\n * @extends TwilioError\n * @property {number} code - 53112\n * @property {string} message - 'Status is invalid'\n */\n\nvar RoomStatusInvalidError = function (_TwilioError25) {\n  _inherits(RoomStatusInvalidError, _TwilioError25);\n\n  function RoomStatusInvalidError() {\n    _classCallCheck(this, RoomStatusInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomStatusInvalidError.__proto__ || Object.getPrototypeOf(RoomStatusInvalidError)).call(this, 53112, 'Status is invalid'));\n  }\n\n  return RoomStatusInvalidError;\n}(TwilioError);\n\nexports.RoomStatusInvalidError = RoomStatusInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53112, { value: RoomStatusInvalidError });\n\n/**\n * @class RoomRoomExistsError\n * @classdesc Raised in the REST API when the Room creation fails because a Room exists with the same name.\n * @extends TwilioError\n * @property {number} code - 53113\n * @property {string} message - 'Room exists'\n */\n\nvar RoomRoomExistsError = function (_TwilioError26) {\n  _inherits(RoomRoomExistsError, _TwilioError26);\n\n  function RoomRoomExistsError() {\n    _classCallCheck(this, RoomRoomExistsError);\n\n    return _possibleConstructorReturn(this, (RoomRoomExistsError.__proto__ || Object.getPrototypeOf(RoomRoomExistsError)).call(this, 53113, 'Room exists'));\n  }\n\n  return RoomRoomExistsError;\n}(TwilioError);\n\nexports.RoomRoomExistsError = RoomRoomExistsError;\nObject.defineProperty(TwilioErrorByCode, 53113, { value: RoomRoomExistsError });\n\n/**\n * @class RoomInvalidParametersError\n * @classdesc Raised in the REST API when one or more Room creation parameter is incompatible with the Room type.\n * @extends TwilioError\n * @property {number} code - 53114\n * @property {string} message - 'Room creation parameter(s) incompatible with the Room type'\n */\n\nvar RoomInvalidParametersError = function (_TwilioError27) {\n  _inherits(RoomInvalidParametersError, _TwilioError27);\n\n  function RoomInvalidParametersError() {\n    _classCallCheck(this, RoomInvalidParametersError);\n\n    return _possibleConstructorReturn(this, (RoomInvalidParametersError.__proto__ || Object.getPrototypeOf(RoomInvalidParametersError)).call(this, 53114, 'Room creation parameter(s) incompatible with the Room type'));\n  }\n\n  return RoomInvalidParametersError;\n}(TwilioError);\n\nexports.RoomInvalidParametersError = RoomInvalidParametersError;\nObject.defineProperty(TwilioErrorByCode, 53114, { value: RoomInvalidParametersError });\n\n/**\n * @class RoomMediaRegionInvalidError\n * @classdesc Raised in the REST API when MediaRegion is set to an invalid value.\n * @extends TwilioError\n * @property {number} code - 53115\n * @property {string} message - 'MediaRegion is invalid'\n */\n\nvar RoomMediaRegionInvalidError = function (_TwilioError28) {\n  _inherits(RoomMediaRegionInvalidError, _TwilioError28);\n\n  function RoomMediaRegionInvalidError() {\n    _classCallCheck(this, RoomMediaRegionInvalidError);\n\n    return _possibleConstructorReturn(this, (RoomMediaRegionInvalidError.__proto__ || Object.getPrototypeOf(RoomMediaRegionInvalidError)).call(this, 53115, 'MediaRegion is invalid'));\n  }\n\n  return RoomMediaRegionInvalidError;\n}(TwilioError);\n\nexports.RoomMediaRegionInvalidError = RoomMediaRegionInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53115, { value: RoomMediaRegionInvalidError });\n\n/**\n * @class RoomMediaRegionUnavailableError\n * @classdesc Raised in the REST API when MediaRegion is set to a valid value but no media servers are available.\n * @extends TwilioError\n * @property {number} code - 53116\n * @property {string} message - 'There are no media servers available in the MediaRegion'\n */\n\nvar RoomMediaRegionUnavailableError = function (_TwilioError29) {\n  _inherits(RoomMediaRegionUnavailableError, _TwilioError29);\n\n  function RoomMediaRegionUnavailableError() {\n    _classCallCheck(this, RoomMediaRegionUnavailableError);\n\n    return _possibleConstructorReturn(this, (RoomMediaRegionUnavailableError.__proto__ || Object.getPrototypeOf(RoomMediaRegionUnavailableError)).call(this, 53116, 'There are no media servers available in the MediaRegion'));\n  }\n\n  return RoomMediaRegionUnavailableError;\n}(TwilioError);\n\nexports.RoomMediaRegionUnavailableError = RoomMediaRegionUnavailableError;\nObject.defineProperty(TwilioErrorByCode, 53116, { value: RoomMediaRegionUnavailableError });\n\n/**\n * @class RoomSubscriptionOperationNotSupportedError\n * @classdesc Raised whenever the subscription operation requested is not supported for the Room type.\n * @extends TwilioError\n * @property {number} code - 53117\n * @property {string} message - 'The subscription operation requested is not supported for the Room type'\n */\n\nvar RoomSubscriptionOperationNotSupportedError = function (_TwilioError30) {\n  _inherits(RoomSubscriptionOperationNotSupportedError, _TwilioError30);\n\n  function RoomSubscriptionOperationNotSupportedError() {\n    _classCallCheck(this, RoomSubscriptionOperationNotSupportedError);\n\n    return _possibleConstructorReturn(this, (RoomSubscriptionOperationNotSupportedError.__proto__ || Object.getPrototypeOf(RoomSubscriptionOperationNotSupportedError)).call(this, 53117, 'The subscription operation requested is not supported for the Room type'));\n  }\n\n  return RoomSubscriptionOperationNotSupportedError;\n}(TwilioError);\n\nexports.RoomSubscriptionOperationNotSupportedError = RoomSubscriptionOperationNotSupportedError;\nObject.defineProperty(TwilioErrorByCode, 53117, { value: RoomSubscriptionOperationNotSupportedError });\n\n/**\n * @class RoomCompletedError\n * @classdesc Raised whenever a Room is completed via the REST API.\n * @extends TwilioError\n * @property {number} code - 53118\n * @property {string} message - 'Room completed'\n */\n\nvar RoomCompletedError = function (_TwilioError31) {\n  _inherits(RoomCompletedError, _TwilioError31);\n\n  function RoomCompletedError() {\n    _classCallCheck(this, RoomCompletedError);\n\n    return _possibleConstructorReturn(this, (RoomCompletedError.__proto__ || Object.getPrototypeOf(RoomCompletedError)).call(this, 53118, 'Room completed'));\n  }\n\n  return RoomCompletedError;\n}(TwilioError);\n\nexports.RoomCompletedError = RoomCompletedError;\nObject.defineProperty(TwilioErrorByCode, 53118, { value: RoomCompletedError });\n\n/**\n * @class ParticipantIdentityInvalidError\n * @classdesc Raised whenever a Participant identity is invalid, and the scenario is not covered by a more specific error code.\n * @extends TwilioError\n * @property {number} code - 53200\n * @property {string} message - 'Participant identity is invalid'\n */\n\nvar ParticipantIdentityInvalidError = function (_TwilioError32) {\n  _inherits(ParticipantIdentityInvalidError, _TwilioError32);\n\n  function ParticipantIdentityInvalidError() {\n    _classCallCheck(this, ParticipantIdentityInvalidError);\n\n    return _possibleConstructorReturn(this, (ParticipantIdentityInvalidError.__proto__ || Object.getPrototypeOf(ParticipantIdentityInvalidError)).call(this, 53200, 'Participant identity is invalid'));\n  }\n\n  return ParticipantIdentityInvalidError;\n}(TwilioError);\n\nexports.ParticipantIdentityInvalidError = ParticipantIdentityInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53200, { value: ParticipantIdentityInvalidError });\n\n/**\n * @class ParticipantIdentityTooLongError\n * @classdesc Raised whenever a Participant identity is too long.\n * @extends TwilioError\n * @property {number} code - 53201\n * @property {string} message - 'Participant identity is too long'\n */\n\nvar ParticipantIdentityTooLongError = function (_TwilioError33) {\n  _inherits(ParticipantIdentityTooLongError, _TwilioError33);\n\n  function ParticipantIdentityTooLongError() {\n    _classCallCheck(this, ParticipantIdentityTooLongError);\n\n    return _possibleConstructorReturn(this, (ParticipantIdentityTooLongError.__proto__ || Object.getPrototypeOf(ParticipantIdentityTooLongError)).call(this, 53201, 'Participant identity is too long'));\n  }\n\n  return ParticipantIdentityTooLongError;\n}(TwilioError);\n\nexports.ParticipantIdentityTooLongError = ParticipantIdentityTooLongError;\nObject.defineProperty(TwilioErrorByCode, 53201, { value: ParticipantIdentityTooLongError });\n\n/**\n * @class ParticipantIdentityCharsInvalidError\n * @classdesc Raised whenever a Participant identity contains invalid characters.\n * @extends TwilioError\n * @property {number} code - 53202\n * @property {string} message - 'Participant identity contains invalid characters'\n */\n\nvar ParticipantIdentityCharsInvalidError = function (_TwilioError34) {\n  _inherits(ParticipantIdentityCharsInvalidError, _TwilioError34);\n\n  function ParticipantIdentityCharsInvalidError() {\n    _classCallCheck(this, ParticipantIdentityCharsInvalidError);\n\n    return _possibleConstructorReturn(this, (ParticipantIdentityCharsInvalidError.__proto__ || Object.getPrototypeOf(ParticipantIdentityCharsInvalidError)).call(this, 53202, 'Participant identity contains invalid characters'));\n  }\n\n  return ParticipantIdentityCharsInvalidError;\n}(TwilioError);\n\nexports.ParticipantIdentityCharsInvalidError = ParticipantIdentityCharsInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53202, { value: ParticipantIdentityCharsInvalidError });\n\n/**\n * @class ParticipantMaxTracksExceededError\n * @classdesc Raised whenever a Participant has too many Tracks.\n * @extends TwilioError\n * @property {number} code - 53203\n * @property {string} message - 'Participant has too many Tracks'\n */\n\nvar ParticipantMaxTracksExceededError = function (_TwilioError35) {\n  _inherits(ParticipantMaxTracksExceededError, _TwilioError35);\n\n  function ParticipantMaxTracksExceededError() {\n    _classCallCheck(this, ParticipantMaxTracksExceededError);\n\n    return _possibleConstructorReturn(this, (ParticipantMaxTracksExceededError.__proto__ || Object.getPrototypeOf(ParticipantMaxTracksExceededError)).call(this, 53203, 'Participant has too many Tracks'));\n  }\n\n  return ParticipantMaxTracksExceededError;\n}(TwilioError);\n\nexports.ParticipantMaxTracksExceededError = ParticipantMaxTracksExceededError;\nObject.defineProperty(TwilioErrorByCode, 53203, { value: ParticipantMaxTracksExceededError });\n\n/**\n * @class ParticipantNotFoundError\n * @classdesc Raised whenever attempting operation on a non-existent Participant.\n * @extends TwilioError\n * @property {number} code - 53204\n * @property {string} message - 'Participant not found'\n */\n\nvar ParticipantNotFoundError = function (_TwilioError36) {\n  _inherits(ParticipantNotFoundError, _TwilioError36);\n\n  function ParticipantNotFoundError() {\n    _classCallCheck(this, ParticipantNotFoundError);\n\n    return _possibleConstructorReturn(this, (ParticipantNotFoundError.__proto__ || Object.getPrototypeOf(ParticipantNotFoundError)).call(this, 53204, 'Participant not found'));\n  }\n\n  return ParticipantNotFoundError;\n}(TwilioError);\n\nexports.ParticipantNotFoundError = ParticipantNotFoundError;\nObject.defineProperty(TwilioErrorByCode, 53204, { value: ParticipantNotFoundError });\n\n/**\n * @class ParticipantDuplicateIdentityError\n * @classdesc Raised by the server to the existing Participant when a new Participant joins a Room with the same identity as the existing Participant.\n * @extends TwilioError\n * @property {number} code - 53205\n * @property {string} message - 'Participant disconnected because of duplicate identity'\n */\n\nvar ParticipantDuplicateIdentityError = function (_TwilioError37) {\n  _inherits(ParticipantDuplicateIdentityError, _TwilioError37);\n\n  function ParticipantDuplicateIdentityError() {\n    _classCallCheck(this, ParticipantDuplicateIdentityError);\n\n    return _possibleConstructorReturn(this, (ParticipantDuplicateIdentityError.__proto__ || Object.getPrototypeOf(ParticipantDuplicateIdentityError)).call(this, 53205, 'Participant disconnected because of duplicate identity'));\n  }\n\n  return ParticipantDuplicateIdentityError;\n}(TwilioError);\n\nexports.ParticipantDuplicateIdentityError = ParticipantDuplicateIdentityError;\nObject.defineProperty(TwilioErrorByCode, 53205, { value: ParticipantDuplicateIdentityError });\n\n/**\n * @class TrackInvalidError\n * @classdesc Raised whenever a Track is invalid, and the scenario is not covered by a more specific error code.\n * @extends TwilioError\n * @property {number} code - 53300\n * @property {string} message - 'Track is invalid'\n */\n\nvar TrackInvalidError = function (_TwilioError38) {\n  _inherits(TrackInvalidError, _TwilioError38);\n\n  function TrackInvalidError() {\n    _classCallCheck(this, TrackInvalidError);\n\n    return _possibleConstructorReturn(this, (TrackInvalidError.__proto__ || Object.getPrototypeOf(TrackInvalidError)).call(this, 53300, 'Track is invalid'));\n  }\n\n  return TrackInvalidError;\n}(TwilioError);\n\nexports.TrackInvalidError = TrackInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53300, { value: TrackInvalidError });\n\n/**\n * @class TrackNameInvalidError\n * @classdesc Raised whenever a Track name is invalid, and the scenario is not covered by a more specific error code.\n * @extends TwilioError\n * @property {number} code - 53301\n * @property {string} message - 'Track name is invalid'\n */\n\nvar TrackNameInvalidError = function (_TwilioError39) {\n  _inherits(TrackNameInvalidError, _TwilioError39);\n\n  function TrackNameInvalidError() {\n    _classCallCheck(this, TrackNameInvalidError);\n\n    return _possibleConstructorReturn(this, (TrackNameInvalidError.__proto__ || Object.getPrototypeOf(TrackNameInvalidError)).call(this, 53301, 'Track name is invalid'));\n  }\n\n  return TrackNameInvalidError;\n}(TwilioError);\n\nexports.TrackNameInvalidError = TrackNameInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53301, { value: TrackNameInvalidError });\n\n/**\n * @class TrackNameTooLongError\n * @classdesc Raised whenever a Track name is too long.\n * @extends TwilioError\n * @property {number} code - 53302\n * @property {string} message - 'Track name is too long'\n */\n\nvar TrackNameTooLongError = function (_TwilioError40) {\n  _inherits(TrackNameTooLongError, _TwilioError40);\n\n  function TrackNameTooLongError() {\n    _classCallCheck(this, TrackNameTooLongError);\n\n    return _possibleConstructorReturn(this, (TrackNameTooLongError.__proto__ || Object.getPrototypeOf(TrackNameTooLongError)).call(this, 53302, 'Track name is too long'));\n  }\n\n  return TrackNameTooLongError;\n}(TwilioError);\n\nexports.TrackNameTooLongError = TrackNameTooLongError;\nObject.defineProperty(TwilioErrorByCode, 53302, { value: TrackNameTooLongError });\n\n/**\n * @class TrackNameCharsInvalidError\n * @classdesc Raised whenever a Track name contains invalid characters.\n * @extends TwilioError\n * @property {number} code - 53303\n * @property {string} message - 'Track name contains invalid characters'\n */\n\nvar TrackNameCharsInvalidError = function (_TwilioError41) {\n  _inherits(TrackNameCharsInvalidError, _TwilioError41);\n\n  function TrackNameCharsInvalidError() {\n    _classCallCheck(this, TrackNameCharsInvalidError);\n\n    return _possibleConstructorReturn(this, (TrackNameCharsInvalidError.__proto__ || Object.getPrototypeOf(TrackNameCharsInvalidError)).call(this, 53303, 'Track name contains invalid characters'));\n  }\n\n  return TrackNameCharsInvalidError;\n}(TwilioError);\n\nexports.TrackNameCharsInvalidError = TrackNameCharsInvalidError;\nObject.defineProperty(TwilioErrorByCode, 53303, { value: TrackNameCharsInvalidError });\n\n/**\n * @class TrackNameIsDuplicatedError\n * @classdesc Raised whenever a Participant is currently publishing a Track with the same name.\n * @extends TwilioError\n * @property {number} code - 53304\n * @property {string} message - 'Track name is duplicated'\n */\n\nvar TrackNameIsDuplicatedError = function (_TwilioError42) {\n  _inherits(TrackNameIsDuplicatedError, _TwilioError42);\n\n  function TrackNameIsDuplicatedError() {\n    _classCallCheck(this, TrackNameIsDuplicatedError);\n\n    return _possibleConstructorReturn(this, (TrackNameIsDuplicatedError.__proto__ || Object.getPrototypeOf(TrackNameIsDuplicatedError)).call(this, 53304, 'Track name is duplicated'));\n  }\n\n  return TrackNameIsDuplicatedError;\n}(TwilioError);\n\nexports.TrackNameIsDuplicatedError = TrackNameIsDuplicatedError;\nObject.defineProperty(TwilioErrorByCode, 53304, { value: TrackNameIsDuplicatedError });\n\n/**\n * @class TrackServerTrackCapacityReachedError\n * @classdesc The server does not have enough resources available to create a new Track.\n * @extends TwilioError\n * @property {number} code - 53305\n * @property {string} message - 'The server has reached capacity and cannot fulfill this request.'\n */\n\nvar TrackServerTrackCapacityReachedError = function (_TwilioError43) {\n  _inherits(TrackServerTrackCapacityReachedError, _TwilioError43);\n\n  function TrackServerTrackCapacityReachedError() {\n    _classCallCheck(this, TrackServerTrackCapacityReachedError);\n\n    return _possibleConstructorReturn(this, (TrackServerTrackCapacityReachedError.__proto__ || Object.getPrototypeOf(TrackServerTrackCapacityReachedError)).call(this, 53305, 'The server has reached capacity and cannot fulfill this request.'));\n  }\n\n  return TrackServerTrackCapacityReachedError;\n}(TwilioError);\n\nexports.TrackServerTrackCapacityReachedError = TrackServerTrackCapacityReachedError;\nObject.defineProperty(TwilioErrorByCode, 53305, { value: TrackServerTrackCapacityReachedError });\n\n/**\n * @class MediaClientLocalDescFailedError\n * @classdesc Raised whenever a Client is unable to create or apply a local media description.\n * @extends TwilioError\n * @property {number} code - 53400\n * @property {string} message - 'Client is unable to create or apply a local media description'\n */\n\nvar MediaClientLocalDescFailedError = function (_TwilioError44) {\n  _inherits(MediaClientLocalDescFailedError, _TwilioError44);\n\n  function MediaClientLocalDescFailedError() {\n    _classCallCheck(this, MediaClientLocalDescFailedError);\n\n    return _possibleConstructorReturn(this, (MediaClientLocalDescFailedError.__proto__ || Object.getPrototypeOf(MediaClientLocalDescFailedError)).call(this, 53400, 'Client is unable to create or apply a local media description'));\n  }\n\n  return MediaClientLocalDescFailedError;\n}(TwilioError);\n\nexports.MediaClientLocalDescFailedError = MediaClientLocalDescFailedError;\nObject.defineProperty(TwilioErrorByCode, 53400, { value: MediaClientLocalDescFailedError });\n\n/**\n * @class MediaServerLocalDescFailedError\n * @classdesc Raised whenever the Server is unable to create or apply a local media description.\n * @extends TwilioError\n * @property {number} code - 53401\n * @property {string} message - 'Server is unable to create or apply a local media description'\n */\n\nvar MediaServerLocalDescFailedError = function (_TwilioError45) {\n  _inherits(MediaServerLocalDescFailedError, _TwilioError45);\n\n  function MediaServerLocalDescFailedError() {\n    _classCallCheck(this, MediaServerLocalDescFailedError);\n\n    return _possibleConstructorReturn(this, (MediaServerLocalDescFailedError.__proto__ || Object.getPrototypeOf(MediaServerLocalDescFailedError)).call(this, 53401, 'Server is unable to create or apply a local media description'));\n  }\n\n  return MediaServerLocalDescFailedError;\n}(TwilioError);\n\nexports.MediaServerLocalDescFailedError = MediaServerLocalDescFailedError;\nObject.defineProperty(TwilioErrorByCode, 53401, { value: MediaServerLocalDescFailedError });\n\n/**\n * @class MediaClientRemoteDescFailedError\n * @classdesc Raised whenever the Client receives a remote media description but is unable to apply it.\n * @extends TwilioError\n * @property {number} code - 53402\n * @property {string} message - 'Client is unable to apply a remote media description'\n */\n\nvar MediaClientRemoteDescFailedError = function (_TwilioError46) {\n  _inherits(MediaClientRemoteDescFailedError, _TwilioError46);\n\n  function MediaClientRemoteDescFailedError() {\n    _classCallCheck(this, MediaClientRemoteDescFailedError);\n\n    return _possibleConstructorReturn(this, (MediaClientRemoteDescFailedError.__proto__ || Object.getPrototypeOf(MediaClientRemoteDescFailedError)).call(this, 53402, 'Client is unable to apply a remote media description'));\n  }\n\n  return MediaClientRemoteDescFailedError;\n}(TwilioError);\n\nexports.MediaClientRemoteDescFailedError = MediaClientRemoteDescFailedError;\nObject.defineProperty(TwilioErrorByCode, 53402, { value: MediaClientRemoteDescFailedError });\n\n/**\n * @class MediaServerRemoteDescFailedError\n * @classdesc Raised whenever the Server receives a remote media description but is unable to apply it.\n * @extends TwilioError\n * @property {number} code - 53403\n * @property {string} message - 'Server is unable to apply a remote media description'\n */\n\nvar MediaServerRemoteDescFailedError = function (_TwilioError47) {\n  _inherits(MediaServerRemoteDescFailedError, _TwilioError47);\n\n  function MediaServerRemoteDescFailedError() {\n    _classCallCheck(this, MediaServerRemoteDescFailedError);\n\n    return _possibleConstructorReturn(this, (MediaServerRemoteDescFailedError.__proto__ || Object.getPrototypeOf(MediaServerRemoteDescFailedError)).call(this, 53403, 'Server is unable to apply a remote media description'));\n  }\n\n  return MediaServerRemoteDescFailedError;\n}(TwilioError);\n\nexports.MediaServerRemoteDescFailedError = MediaServerRemoteDescFailedError;\nObject.defineProperty(TwilioErrorByCode, 53403, { value: MediaServerRemoteDescFailedError });\n\n/**\n * @class MediaNoSupportedCodecError\n * @classdesc Raised whenever the intersection of codecs supported by the Client and the Server (or, in peer-to-peer, the Client and another Participant) is empty.\n * @extends TwilioError\n * @property {number} code - 53404\n * @property {string} message - 'No supported codec'\n */\n\nvar MediaNoSupportedCodecError = function (_TwilioError48) {\n  _inherits(MediaNoSupportedCodecError, _TwilioError48);\n\n  function MediaNoSupportedCodecError() {\n    _classCallCheck(this, MediaNoSupportedCodecError);\n\n    return _possibleConstructorReturn(this, (MediaNoSupportedCodecError.__proto__ || Object.getPrototypeOf(MediaNoSupportedCodecError)).call(this, 53404, 'No supported codec'));\n  }\n\n  return MediaNoSupportedCodecError;\n}(TwilioError);\n\nexports.MediaNoSupportedCodecError = MediaNoSupportedCodecError;\nObject.defineProperty(TwilioErrorByCode, 53404, { value: MediaNoSupportedCodecError });\n\n/**\n * @class MediaConnectionError\n * @classdesc Raised by the Client or Server whenever a media connection fails.\n * @extends TwilioError\n * @property {number} code - 53405\n * @property {string} message - 'Media connection failed'\n */\n\nvar MediaConnectionError = function (_TwilioError49) {\n  _inherits(MediaConnectionError, _TwilioError49);\n\n  function MediaConnectionError() {\n    _classCallCheck(this, MediaConnectionError);\n\n    return _possibleConstructorReturn(this, (MediaConnectionError.__proto__ || Object.getPrototypeOf(MediaConnectionError)).call(this, 53405, 'Media connection failed'));\n  }\n\n  return MediaConnectionError;\n}(TwilioError);\n\nexports.MediaConnectionError = MediaConnectionError;\nObject.defineProperty(TwilioErrorByCode, 53405, { value: MediaConnectionError });\n\n/**\n * @class ConfigurationAcquireFailedError\n * @classdesc Raised whenever the Client is unable to acquire configuration information from the Server.\n * @extends TwilioError\n * @property {number} code - 53500\n * @property {string} message - 'Unable to acquire configuration'\n */\n\nvar ConfigurationAcquireFailedError = function (_TwilioError50) {\n  _inherits(ConfigurationAcquireFailedError, _TwilioError50);\n\n  function ConfigurationAcquireFailedError() {\n    _classCallCheck(this, ConfigurationAcquireFailedError);\n\n    return _possibleConstructorReturn(this, (ConfigurationAcquireFailedError.__proto__ || Object.getPrototypeOf(ConfigurationAcquireFailedError)).call(this, 53500, 'Unable to acquire configuration'));\n  }\n\n  return ConfigurationAcquireFailedError;\n}(TwilioError);\n\nexports.ConfigurationAcquireFailedError = ConfigurationAcquireFailedError;\nObject.defineProperty(TwilioErrorByCode, 53500, { value: ConfigurationAcquireFailedError });\n\n/**\n * @class ConfigurationAcquireTurnFailedError\n * @classdesc Raised whenever the Server is unable to return TURN credentials to the Client\n * @extends TwilioError\n * @property {number} code - 53501\n * @property {string} message - 'Unable to acquire TURN credentials'\n */\n\nvar ConfigurationAcquireTurnFailedError = function (_TwilioError51) {\n  _inherits(ConfigurationAcquireTurnFailedError, _TwilioError51);\n\n  function ConfigurationAcquireTurnFailedError() {\n    _classCallCheck(this, ConfigurationAcquireTurnFailedError);\n\n    return _possibleConstructorReturn(this, (ConfigurationAcquireTurnFailedError.__proto__ || Object.getPrototypeOf(ConfigurationAcquireTurnFailedError)).call(this, 53501, 'Unable to acquire TURN credentials'));\n  }\n\n  return ConfigurationAcquireTurnFailedError;\n}(TwilioError);\n\nexports.ConfigurationAcquireTurnFailedError = ConfigurationAcquireTurnFailedError;\nObject.defineProperty(TwilioErrorByCode, 53501, { value: ConfigurationAcquireTurnFailedError });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///209\n");

/***/ }),
/* 210 */
/*!*******************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/util/index.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Create a {@link Deferred}.\n * @returns {Deferred}\n */\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function(resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Copy a method from a `source` prototype onto a `wrapper` prototype. Invoking\n * the method on the `wrapper` prototype will invoke the corresponding method\n * on an instance accessed by `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @param {string} methodName\n * @returns {undefined}\n */\nfunction delegateMethod(source, wrapper, target, methodName) {\n  if (methodName in wrapper) {\n    // Skip any methods already set.\n    return;\n  } else if (methodName.match(/^on[a-z]+$/)) {\n    // Skip EventHandlers (these are handled in the constructor).\n    return;\n  }\n\n  var type;\n  try {\n    type = typeof source[methodName];\n  } catch (error) {\n    // NOTE(mroberts): Attempting to check the type of non-function members\n    // on the prototype throws an error for some types.\n  }\n\n  if (type !== 'function') {\n    // Skip non-function members.\n    return;\n  }\n\n  /* eslint no-loop-func:0 */\n  wrapper[methodName] = function() {\n    return this[target][methodName].apply(this[target], arguments);\n  };\n}\n\n/**\n * Copy methods from a `source` prototype onto a `wrapper` prototype. Invoking\n * the methods on the `wrapper` prototype will invoke the corresponding method\n * on an instance accessed by `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @returns {undefined}\n */\nfunction delegateMethods(source, wrapper, target) {\n  for (var methodName in source) {\n    delegateMethod(source, wrapper, target, methodName);\n  }\n}\n\n/**\n * Finds the items in list1 that are not in list2.\n * @param {Array<*>|Map<*>|Set<*>} list1\n * @param {Array<*>|Map<*>|Set<*>} list2\n * @returns {Set}\n */\nfunction difference(list1, list2) {\n  list1 = Array.isArray(list1) ? new Set(list1) : new Set(list1.values());\n  list2 = Array.isArray(list2) ? new Set(list2) : new Set(list2.values());\n\n  var difference = new Set();\n\n  list1.forEach(function(item) {\n    if (!list2.has(item)) {\n      difference.add(item);\n    }\n  });\n\n  return difference;\n}\n\n/**\n * Map a list to an array of arrays, and return the flattened result.\n * @param {Array<*>|Set<*>|Map<*>} list\n * @param {function(*): Array<*>} mapFn\n * @returns Array<*>\n */\nfunction flatMap(list, mapFn) {\n  var listArray = list instanceof Map || list instanceof Set\n    ? Array.from(list.values())\n    : list;\n\n  return listArray.reduce(function(flattened, item) {\n    var mapped = mapFn(item);\n    return flattened.concat(mapped);\n  }, []);\n}\n\n/**\n * Guess the browser.\n * @returns {?string} browser - \"chrome\", \"firefox\", \"safari\", or null\n */\nfunction guessBrowser() {\n  if (typeof webkitRTCPeerConnection !== 'undefined') {\n    return 'chrome';\n  } else if (typeof mozRTCPeerConnection !== 'undefined') {\n    return 'firefox';\n  } else if (typeof RTCPeerConnection !== 'undefined') {\n    if (typeof navigator !== 'undefined' && navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n      return 'safari';\n    }\n    // NOTE(mroberts): Could be Edge.\n  }\n  return null;\n}\n\n/**\n * Intercept an event that might otherwise be proxied on an EventTarget.\n * @param {EventTarget} target\n * @param {string} type\n * @returns {void}\n */\nfunction interceptEvent(target, type) {\n  var currentListener = null;\n  Object.defineProperty(target, 'on' + type, {\n    get: function() {\n      return currentListener;\n    },\n    set: function(newListener) {\n      if (currentListener) {\n        this.removeEventListener(type, currentListener);\n      }\n\n      if (typeof newListener === 'function') {\n        currentListener = newListener;\n        this.addEventListener(type, currentListener);\n      } else {\n        currentListener = null;\n      }\n    }\n  });\n}\n\n/**\n * This is a function for turning a Promise into the kind referenced in the\n * Legacy Interface Extensions section of the WebRTC spec.\n * @param {Promise<*>} promise\n * @param {function<*>} onSuccess\n * @param {function<Error>} onFailure\n * @returns {Promise<undefined>}\n */\nfunction legacyPromise(promise, onSuccess, onFailure) {\n  if (onSuccess) {\n    return promise.then(function(result) {\n      onSuccess(result);\n    }, function(error) {\n      onFailure(error);\n    });\n  }\n  return promise;\n}\n\n/**\n * Make a unique ID.\n * @return {string}\n */\nfunction makeUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * For each property name on the `source` prototype, add getters and/or setters\n * to `wrapper` that proxy to `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @returns {undefined}\n */\nfunction proxyProperties(source, wrapper, target) {\n  Object.getOwnPropertyNames(source).forEach(function(propertyName) {\n    proxyProperty(source, wrapper, target, propertyName);\n  });\n}\n\n/**\n * For the property name on the `source` prototype, add a getter and/or setter\n * to `wrapper` that proxies to `target`.\n * @param {object} source\n * @param {object} wrapper\n * @param {string} target\n * @param {string} propertyName\n * @returns {undefined}\n */\nfunction proxyProperty(source, wrapper, target, propertyName) {\n  if (propertyName in wrapper) {\n    // Skip any properties already set.\n    return;\n  } else if (propertyName.match(/^on[a-z]+$/)) {\n    Object.defineProperty(wrapper, propertyName, {\n      value: null,\n      writable: true\n    });\n\n    target.addEventListener(propertyName.slice(2), function() {\n      wrapper.dispatchEvent.apply(wrapper, arguments);\n    });\n\n    return;\n  }\n\n  Object.defineProperty(wrapper, propertyName, {\n    enumerable: true,\n    get: function() {\n      return target[propertyName];\n    }\n  });\n}\n\n/**\n * @typedef {object} Deferred\n * @property {Promise} promise\n * @property {function} reject\n * @property {function} resolve\n */\n\nexports.defer = defer;\nexports.delegateMethods = delegateMethods;\nexports.difference = difference;\nexports.flatMap = flatMap;\nexports.guessBrowser = guessBrowser;\nexports.interceptEvent = interceptEvent;\nexports.legacyPromise = legacyPromise;\nexports.makeUUID = makeUUID;\nexports.proxyProperties = proxyProperties;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3V0aWwvaW5kZXguanM/ZTk1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFdBQVcsdUJBQXVCO0FBQ2xDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxzQkFBc0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsZ0JBQWdCO0FBQzNCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFNBQVM7QUFDdkIsY0FBYyxTQUFTO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlIGEge0BsaW5rIERlZmVycmVkfS5cbiAqIEByZXR1cm5zIHtEZWZlcnJlZH1cbiAqL1xuZnVuY3Rpb24gZGVmZXIoKSB7XG4gIHZhciBkZWZlcnJlZCA9IHt9O1xuICBkZWZlcnJlZC5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVmZXJyZWQucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgZGVmZXJyZWQucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgcmV0dXJuIGRlZmVycmVkO1xufVxuXG4vKipcbiAqIENvcHkgYSBtZXRob2QgZnJvbSBhIGBzb3VyY2VgIHByb3RvdHlwZSBvbnRvIGEgYHdyYXBwZXJgIHByb3RvdHlwZS4gSW52b2tpbmdcbiAqIHRoZSBtZXRob2Qgb24gdGhlIGB3cmFwcGVyYCBwcm90b3R5cGUgd2lsbCBpbnZva2UgdGhlIGNvcnJlc3BvbmRpbmcgbWV0aG9kXG4gKiBvbiBhbiBpbnN0YW5jZSBhY2Nlc3NlZCBieSBgdGFyZ2V0YC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzb3VyY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSB3cmFwcGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZVxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gZGVsZWdhdGVNZXRob2Qoc291cmNlLCB3cmFwcGVyLCB0YXJnZXQsIG1ldGhvZE5hbWUpIHtcbiAgaWYgKG1ldGhvZE5hbWUgaW4gd3JhcHBlcikge1xuICAgIC8vIFNraXAgYW55IG1ldGhvZHMgYWxyZWFkeSBzZXQuXG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKG1ldGhvZE5hbWUubWF0Y2goL15vblthLXpdKyQvKSkge1xuICAgIC8vIFNraXAgRXZlbnRIYW5kbGVycyAodGhlc2UgYXJlIGhhbmRsZWQgaW4gdGhlIGNvbnN0cnVjdG9yKS5cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHlwZTtcbiAgdHJ5IHtcbiAgICB0eXBlID0gdHlwZW9mIHNvdXJjZVttZXRob2ROYW1lXTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBOT1RFKG1yb2JlcnRzKTogQXR0ZW1wdGluZyB0byBjaGVjayB0aGUgdHlwZSBvZiBub24tZnVuY3Rpb24gbWVtYmVyc1xuICAgIC8vIG9uIHRoZSBwcm90b3R5cGUgdGhyb3dzIGFuIGVycm9yIGZvciBzb21lIHR5cGVzLlxuICB9XG5cbiAgaWYgKHR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBTa2lwIG5vbi1mdW5jdGlvbiBtZW1iZXJzLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGVzbGludCBuby1sb29wLWZ1bmM6MCAqL1xuICB3cmFwcGVyW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbdGFyZ2V0XVttZXRob2ROYW1lXS5hcHBseSh0aGlzW3RhcmdldF0sIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogQ29weSBtZXRob2RzIGZyb20gYSBgc291cmNlYCBwcm90b3R5cGUgb250byBhIGB3cmFwcGVyYCBwcm90b3R5cGUuIEludm9raW5nXG4gKiB0aGUgbWV0aG9kcyBvbiB0aGUgYHdyYXBwZXJgIHByb3RvdHlwZSB3aWxsIGludm9rZSB0aGUgY29ycmVzcG9uZGluZyBtZXRob2RcbiAqIG9uIGFuIGluc3RhbmNlIGFjY2Vzc2VkIGJ5IGB0YXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IHNvdXJjZVxuICogQHBhcmFtIHtvYmplY3R9IHdyYXBwZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIGRlbGVnYXRlTWV0aG9kcyhzb3VyY2UsIHdyYXBwZXIsIHRhcmdldCkge1xuICBmb3IgKHZhciBtZXRob2ROYW1lIGluIHNvdXJjZSkge1xuICAgIGRlbGVnYXRlTWV0aG9kKHNvdXJjZSwgd3JhcHBlciwgdGFyZ2V0LCBtZXRob2ROYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBpdGVtcyBpbiBsaXN0MSB0aGF0IGFyZSBub3QgaW4gbGlzdDIuXG4gKiBAcGFyYW0ge0FycmF5PCo+fE1hcDwqPnxTZXQ8Kj59IGxpc3QxXG4gKiBAcGFyYW0ge0FycmF5PCo+fE1hcDwqPnxTZXQ8Kj59IGxpc3QyXG4gKiBAcmV0dXJucyB7U2V0fVxuICovXG5mdW5jdGlvbiBkaWZmZXJlbmNlKGxpc3QxLCBsaXN0Mikge1xuICBsaXN0MSA9IEFycmF5LmlzQXJyYXkobGlzdDEpID8gbmV3IFNldChsaXN0MSkgOiBuZXcgU2V0KGxpc3QxLnZhbHVlcygpKTtcbiAgbGlzdDIgPSBBcnJheS5pc0FycmF5KGxpc3QyKSA/IG5ldyBTZXQobGlzdDIpIDogbmV3IFNldChsaXN0Mi52YWx1ZXMoKSk7XG5cbiAgdmFyIGRpZmZlcmVuY2UgPSBuZXcgU2V0KCk7XG5cbiAgbGlzdDEuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKCFsaXN0Mi5oYXMoaXRlbSkpIHtcbiAgICAgIGRpZmZlcmVuY2UuYWRkKGl0ZW0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRpZmZlcmVuY2U7XG59XG5cbi8qKlxuICogTWFwIGEgbGlzdCB0byBhbiBhcnJheSBvZiBhcnJheXMsIGFuZCByZXR1cm4gdGhlIGZsYXR0ZW5lZCByZXN1bHQuXG4gKiBAcGFyYW0ge0FycmF5PCo+fFNldDwqPnxNYXA8Kj59IGxpc3RcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKik6IEFycmF5PCo+fSBtYXBGblxuICogQHJldHVybnMgQXJyYXk8Kj5cbiAqL1xuZnVuY3Rpb24gZmxhdE1hcChsaXN0LCBtYXBGbikge1xuICB2YXIgbGlzdEFycmF5ID0gbGlzdCBpbnN0YW5jZW9mIE1hcCB8fCBsaXN0IGluc3RhbmNlb2YgU2V0XG4gICAgPyBBcnJheS5mcm9tKGxpc3QudmFsdWVzKCkpXG4gICAgOiBsaXN0O1xuXG4gIHJldHVybiBsaXN0QXJyYXkucmVkdWNlKGZ1bmN0aW9uKGZsYXR0ZW5lZCwgaXRlbSkge1xuICAgIHZhciBtYXBwZWQgPSBtYXBGbihpdGVtKTtcbiAgICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChtYXBwZWQpO1xuICB9LCBbXSk7XG59XG5cbi8qKlxuICogR3Vlc3MgdGhlIGJyb3dzZXIuXG4gKiBAcmV0dXJucyB7P3N0cmluZ30gYnJvd3NlciAtIFwiY2hyb21lXCIsIFwiZmlyZWZveFwiLCBcInNhZmFyaVwiLCBvciBudWxsXG4gKi9cbmZ1bmN0aW9uIGd1ZXNzQnJvd3NlcigpIHtcbiAgaWYgKHR5cGVvZiB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJ2Nocm9tZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1velJUQ1BlZXJDb25uZWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAnZmlyZWZveCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFJUQ1BlZXJDb25uZWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8pKSB7XG4gICAgICByZXR1cm4gJ3NhZmFyaSc7XG4gICAgfVxuICAgIC8vIE5PVEUobXJvYmVydHMpOiBDb3VsZCBiZSBFZGdlLlxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEludGVyY2VwdCBhbiBldmVudCB0aGF0IG1pZ2h0IG90aGVyd2lzZSBiZSBwcm94aWVkIG9uIGFuIEV2ZW50VGFyZ2V0LlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGludGVyY2VwdEV2ZW50KHRhcmdldCwgdHlwZSkge1xuICB2YXIgY3VycmVudExpc3RlbmVyID0gbnVsbDtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgJ29uJyArIHR5cGUsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRMaXN0ZW5lcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24obmV3TGlzdGVuZXIpIHtcbiAgICAgIGlmIChjdXJyZW50TGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGN1cnJlbnRMaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmV3TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY3VycmVudExpc3RlbmVyID0gbmV3TGlzdGVuZXI7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjdXJyZW50TGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudExpc3RlbmVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBmdW5jdGlvbiBmb3IgdHVybmluZyBhIFByb21pc2UgaW50byB0aGUga2luZCByZWZlcmVuY2VkIGluIHRoZVxuICogTGVnYWN5IEludGVyZmFjZSBFeHRlbnNpb25zIHNlY3Rpb24gb2YgdGhlIFdlYlJUQyBzcGVjLlxuICogQHBhcmFtIHtQcm9taXNlPCo+fSBwcm9taXNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uPCo+fSBvblN1Y2Nlc3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb248RXJyb3I+fSBvbkZhaWx1cmVcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVuZGVmaW5lZD59XG4gKi9cbmZ1bmN0aW9uIGxlZ2FjeVByb21pc2UocHJvbWlzZSwgb25TdWNjZXNzLCBvbkZhaWx1cmUpIHtcbiAgaWYgKG9uU3VjY2Vzcykge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICBvblN1Y2Nlc3MocmVzdWx0KTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgb25GYWlsdXJlKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBNYWtlIGEgdW5pcXVlIElELlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBtYWtlVVVJRCgpIHtcbiAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICB2YXIgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCk7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBGb3IgZWFjaCBwcm9wZXJ0eSBuYW1lIG9uIHRoZSBgc291cmNlYCBwcm90b3R5cGUsIGFkZCBnZXR0ZXJzIGFuZC9vciBzZXR0ZXJzXG4gKiB0byBgd3JhcHBlcmAgdGhhdCBwcm94eSB0byBgdGFyZ2V0YC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzb3VyY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSB3cmFwcGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBwcm94eVByb3BlcnRpZXMoc291cmNlLCB3cmFwcGVyLCB0YXJnZXQpIHtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3BlcnR5TmFtZSkge1xuICAgIHByb3h5UHJvcGVydHkoc291cmNlLCB3cmFwcGVyLCB0YXJnZXQsIHByb3BlcnR5TmFtZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEZvciB0aGUgcHJvcGVydHkgbmFtZSBvbiB0aGUgYHNvdXJjZWAgcHJvdG90eXBlLCBhZGQgYSBnZXR0ZXIgYW5kL29yIHNldHRlclxuICogdG8gYHdyYXBwZXJgIHRoYXQgcHJveGllcyB0byBgdGFyZ2V0YC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzb3VyY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSB3cmFwcGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlOYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBwcm94eVByb3BlcnR5KHNvdXJjZSwgd3JhcHBlciwgdGFyZ2V0LCBwcm9wZXJ0eU5hbWUpIHtcbiAgaWYgKHByb3BlcnR5TmFtZSBpbiB3cmFwcGVyKSB7XG4gICAgLy8gU2tpcCBhbnkgcHJvcGVydGllcyBhbHJlYWR5IHNldC5cbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAocHJvcGVydHlOYW1lLm1hdGNoKC9eb25bYS16XSskLykpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwgcHJvcGVydHlOYW1lLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihwcm9wZXJ0eU5hbWUuc2xpY2UoMiksIGZ1bmN0aW9uKCkge1xuICAgICAgd3JhcHBlci5kaXNwYXRjaEV2ZW50LmFwcGx5KHdyYXBwZXIsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwgcHJvcGVydHlOYW1lLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eU5hbWVdO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gRGVmZXJyZWRcbiAqIEBwcm9wZXJ0eSB7UHJvbWlzZX0gcHJvbWlzZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gcmVqZWN0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSByZXNvbHZlXG4gKi9cblxuZXhwb3J0cy5kZWZlciA9IGRlZmVyO1xuZXhwb3J0cy5kZWxlZ2F0ZU1ldGhvZHMgPSBkZWxlZ2F0ZU1ldGhvZHM7XG5leHBvcnRzLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuZXhwb3J0cy5mbGF0TWFwID0gZmxhdE1hcDtcbmV4cG9ydHMuZ3Vlc3NCcm93c2VyID0gZ3Vlc3NCcm93c2VyO1xuZXhwb3J0cy5pbnRlcmNlcHRFdmVudCA9IGludGVyY2VwdEV2ZW50O1xuZXhwb3J0cy5sZWdhY3lQcm9taXNlID0gbGVnYWN5UHJvbWlzZTtcbmV4cG9ydHMubWFrZVVVSUQgPSBtYWtlVVVJRDtcbmV4cG9ydHMucHJveHlQcm9wZXJ0aWVzID0gcHJveHlQcm9wZXJ0aWVzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3V0aWwvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///210\n");

/***/ }),
/* 211 */
/*!*********************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/sdp/index.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar difference = __webpack_require__(/*! ../ */ 206).difference;\nvar flatMap = __webpack_require__(/*! ../ */ 206).flatMap;\nvar setSimulcastInMediaSection = __webpack_require__(/*! ./simulcast */ 311);\n\nvar ptToFixedBitrateAudioCodecName = {\n  0: 'PCMU',\n  8: 'PCMA'\n};\n\n/**\n * A payload type\n * @typedef {number} PT\n */\n\n/**\n * An {@link AudioCodec} or {@link VideoCodec}\n * @typedef {AudioCodec|VideoCodec} Codec\n */\n\n// NOTE(mmalavalli): This value is derived from the IETF spec\n// for JSEP, and it is used to convert a 'b=TIAS' value in bps\n// to a 'b=AS' value in kbps.\n// Spec: https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-21#section-5.9\nvar RTCP_BITRATE = 16000;\n\n/**\n * Construct a b= line string for the given max bitrate in bps. If the modifier\n * is 'AS', then the max bitrate will be converted to kbps using the formula\n * specified in the IETF spec for JSEP mentioned above.\n * @param {string} modifier - 'AS' | 'TIAS'\n * @param {?number} maxBitrate - Max outgoing bitrate (bps)\n * @returns {?string} - If \"maxBitrate\" is null, then returns null;\n *   otherwise return the constructed b= line string\n */\nfunction createBLine(modifier, maxBitrate) {\n  if (!maxBitrate) {\n    return null;\n  }\n  return '\\r\\nb=' + modifier + ':' + (modifier === 'AS' ? Math.round((maxBitrate + RTCP_BITRATE) / 950) : maxBitrate);\n}\n\n/**\n * Create a Codec Map for the given m= section.\n * @param {string} section - The given m= section\n * @returns {Map<Codec, Array<PT>>}\n */\nfunction createCodecMapForMediaSection(section) {\n  return Array.from(createPtToCodecName(section)).reduce(function (codecMap, pair) {\n    var pt = pair[0];\n    var codecName = pair[1];\n    var pts = codecMap.get(codecName) || [];\n    return codecMap.set(codecName, pts.concat(pt));\n  }, new Map());\n}\n\n/**\n * Create a Map from PTs to codec names for the given m= section.\n * @param {string} mediaSection - The given m= section.\n * @returns {Map<PT, Codec>} ptToCodecName\n */\nfunction createPtToCodecName(mediaSection) {\n  return getPayloadTypesInMediaSection(mediaSection).reduce(function (ptToCodecName, pt) {\n    var rtpmapPattern = new RegExp('a=rtpmap:' + pt + ' ([^/]+)');\n    var matches = mediaSection.match(rtpmapPattern);\n    var codecName = matches ? matches[1].toLowerCase() : ptToFixedBitrateAudioCodecName[pt] ? ptToFixedBitrateAudioCodecName[pt].toLowerCase() : '';\n    return ptToCodecName.set(pt, codecName);\n  }, new Map());\n}\n\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp - SDP string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind, direction) {\n  return sdp.replace(/\\r\\n\\r\\n$/, '\\r\\n').split('\\r\\nm=').slice(1).map(function (mediaSection) {\n    return 'm=' + mediaSection;\n  }).filter(function (mediaSection) {\n    var kindPattern = new RegExp('m=' + (kind || '.*'), 'gm');\n    var directionPattern = new RegExp('a=' + (direction || '.*'), 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n\n/**\n * Get the Codec Payload Types present in the first line of the given m= section\n * @param {string} section - The m= section\n * @returns {Array<PT>} Payload Types\n */\nfunction getPayloadTypesInMediaSection(section) {\n  var mLine = section.split('\\r\\n')[0];\n\n  // In \"m=<kind> <port> <proto> <payload_type_1> <payload_type_2> ... <payload_type_n>\",\n  // the regex matches <port> and the PayloadTypes.\n  var matches = mLine.match(/([0-9]+)/g);\n\n  // This should not happen, but in case there are no PayloadTypes in\n  // the m= line, return an empty array.\n  if (!matches) {\n    return [];\n  }\n\n  // Since only the PayloadTypes are needed, we discard the <port>.\n  return matches.slice(1).map(function (match) {\n    return parseInt(match, 10);\n  });\n}\n\n/**\n * Create the reordered Codec Payload Types based on the preferred Codec Names.\n * @param {Map<Codec, Array<PT>>} codecMap - Codec Map\n * @param {Array<Codec>} preferredCodecs - Preferred Codec Names\n * @returns {Array<PT>} Reordered Payload Types\n */\nfunction getReorderedPayloadTypes(codecMap, preferredCodecs) {\n  preferredCodecs = preferredCodecs.map(function (codecName) {\n    return codecName.toLowerCase();\n  });\n\n  var preferredPayloadTypes = flatMap(preferredCodecs, function (codecName) {\n    return codecMap.get(codecName) || [];\n  });\n\n  var remainingCodecs = difference(Array.from(codecMap.keys()), preferredCodecs);\n  var remainingPayloadTypes = flatMap(remainingCodecs, function (codecName) {\n    return codecMap.get(codecName);\n  });\n\n  return preferredPayloadTypes.concat(remainingPayloadTypes);\n}\n\n/**\n * Set the specified max bitrate in the given m= section.\n * @param {string} modifier - 'AS' | 'TIAS'\n * @param {?number} maxBitrate - Max outgoing bitrate (bps)\n * @param {string} section - m= section string\n * @returns {string} The updated m= section\n */\nfunction setBitrateInMediaSection(modifier, maxBitrate, section) {\n  var bLine = createBLine(modifier, maxBitrate) || '';\n  var bLinePattern = /\\r\\nb=(AS|TIAS):([0-9]+)/;\n  var bLineMatched = section.match(bLinePattern);\n\n  if (!bLineMatched) {\n    return section.replace(/(\\r\\n)?$/, bLine + '$1');\n  }\n\n  var maxBitrateMatched = parseInt(bLineMatched[2], 10);\n  maxBitrate = maxBitrate || Infinity;\n  bLine = createBLine(modifier, Math.min(maxBitrateMatched, maxBitrate));\n  return section.replace(bLinePattern, bLine);\n}\n\n/**\n * Set maximum bitrates to the media sections in a given sdp.\n * @param {string} sdp - sdp string\n * @param {string} modifier - 'AS' | 'TIAS\"\n * @param {?number} maxAudioBitrate - Max outgoing audio bitrate (bps), null\n *   if no limit is to be applied\n * @param {?number} maxVideoBitrate - Max outgoing video bitrate (bps), null\n *   if no limit is to be applied\n * @returns {string} - The updated sdp string\n */\nfunction setBitrateParameters(sdp, modifier, maxAudioBitrate, maxVideoBitrate) {\n  var mediaSections = getMediaSections(sdp);\n  var session = sdp.split('\\r\\nm=')[0];\n  return [session].concat(mediaSections.map(function (section) {\n    // Bitrate parameters should not be applied to m=application sections\n    // or to m=(audio|video) sections that do not receive media.\n    if (!/^m=(audio|video)/.test(section) || !/a=(recvonly|sendrecv)/.test(section)) {\n      return section;\n    }\n    var kind = section.match(/^m=(audio|video)/)[1];\n    var maxBitrate = kind === 'audio' ? maxAudioBitrate : maxVideoBitrate;\n    return setBitrateInMediaSection(modifier, maxBitrate, section);\n  })).join('\\r\\n');\n}\n\n/**\n * Set the given Codec Payload Types in the first line of the given m= section.\n * @param {Array<PT>} payloadTypes - Payload Types\n * @param {string} section - Given m= section\n * @returns {string} - Updated m= section\n */\nfunction setPayloadTypesInMediaSection(payloadTypes, section) {\n  var lines = section.split('\\r\\n');\n  var mLine = lines[0];\n  var otherLines = lines.slice(1);\n  mLine = mLine.replace(/([0-9]+\\s?)+$/, payloadTypes.join(' '));\n  return [mLine].concat(otherLines).join('\\r\\n');\n}\n\n/**\n * Return a new SDP string with the re-ordered codec preferences.\n * @param {string} sdp\n * @param {Array<AudioCodec>} preferredAudioCodecs - If empty, the existing order\n *   of audio codecs is preserved\n * @param {Array<VideoCodecSettings>} preferredVideoCodecs - If empty, the\n *   existing order of video codecs is preserved\n * @returns {string} Updated SDP string\n */\nfunction setCodecPreferences(sdp, preferredAudioCodecs, preferredVideoCodecs) {\n  var mediaSections = getMediaSections(sdp);\n  var session = sdp.split('\\r\\nm=')[0];\n  return [session].concat(mediaSections.map(function (section) {\n    // Codec preferences should not be applied to m=application sections.\n    if (!/^m=(audio|video)/.test(section)) {\n      return section;\n    }\n    var kind = section.match(/^m=(audio|video)/)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n    var preferredCodecs = kind === 'audio' ? preferredAudioCodecs : preferredVideoCodecs.map(function (codec) {\n      return codec.codec;\n    });\n    var payloadTypes = getReorderedPayloadTypes(codecMap, preferredCodecs);\n    var newSection = setPayloadTypesInMediaSection(payloadTypes, section);\n\n    var pcmaPayloadTypes = codecMap.get('pcma') || [];\n    var pcmuPayloadTypes = codecMap.get('pcmu') || [];\n    var fixedBitratePayloadTypes = kind === 'audio' ? new Set(pcmaPayloadTypes.concat(pcmuPayloadTypes)) : new Set();\n\n    return fixedBitratePayloadTypes.has(payloadTypes[0]) ? newSection.replace(/\\r\\nb=(AS|TIAS):([0-9]+)/g, '') : newSection;\n  })).join('\\r\\n');\n}\n\n/**\n * Return a new SDP string with simulcast settings.\n * @param {string} sdp\n * @param {'planb' | 'unified'} sdpFormat\n * @param {Map<Track.ID, TrackAttributes>} trackIdsToAttributes\n * @returns {string} Updated SDP string\n */\nfunction setSimulcast(sdp, sdpFormat, trackIdsToAttributes) {\n  var mediaSections = getMediaSections(sdp);\n  var session = sdp.split('\\r\\nm=')[0];\n  return [session].concat(mediaSections.map(function (section) {\n    section = section.replace(/\\r\\n$/, '');\n    if (!/^m=video/.test(section)) {\n      return section;\n    }\n    var codecMap = createCodecMapForMediaSection(section);\n    var payloadTypes = getPayloadTypesInMediaSection(section);\n    var vp8PayloadTypes = new Set(codecMap.get('vp8') || []);\n\n    var hasVP8PayloadType = payloadTypes.some(function (payloadType) {\n      return vp8PayloadTypes.has(payloadType);\n    });\n    return hasVP8PayloadType ? setSimulcastInMediaSection(section, sdpFormat, trackIdsToAttributes) : section;\n  })).concat('').join('\\r\\n');\n}\n\n/**\n * Codec Payload Type.\n * @typedef {number} PayloadType\n */\n\nexports.createCodecMapForMediaSection = createCodecMapForMediaSection;\nexports.createPtToCodecName = createPtToCodecName;\nexports.getMediaSections = getMediaSections;\nexports.setBitrateParameters = setBitrateParameters;\nexports.setCodecPreferences = setCodecPreferences;\nexports.setSimulcast = setSimulcast;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///211\n");

/***/ }),
/* 212 */
/*!**************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/index.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar WebRTC = {};\n\nObject.defineProperties(WebRTC, {\n  getStats: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./getstats */ 264)\n  },\n  getUserMedia: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./getusermedia */ 265)\n  },\n  MediaStream: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./mediastream */ 230)\n  },\n  MediaStreamTrack: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./mediastreamtrack */ 266)\n  },\n  RTCIceCandidate: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./rtcicecandidate */ 267)\n  },\n  RTCPeerConnection: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./rtcpeerconnection */ 268)\n  },\n  RTCSessionDescription: {\n    enumerable: true,\n    value: __webpack_require__(/*! ./rtcsessiondescription */ 275)\n  },\n  version: {\n    enumerable: true,\n    value: __webpack_require__(/*! ../package.json */ 276).version\n  }\n});\n\nmodule.exports = WebRTC;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL2luZGV4LmpzP2I2NGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLHFCQUFZO0FBQy9CLEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLHlCQUFnQjtBQUNuQyxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyx3QkFBZTtBQUNsQyxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyw2QkFBb0I7QUFDdkMsR0FBRztBQUNIO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsNEJBQW1CO0FBQ3RDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLDhCQUFxQjtBQUN4QyxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxrQ0FBeUI7QUFDNUMsR0FBRztBQUNIO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsMEJBQWlCO0FBQ3BDO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBXZWJSVEMgPSB7fTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoV2ViUlRDLCB7XG4gIGdldFN0YXRzOiB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogcmVxdWlyZSgnLi9nZXRzdGF0cycpXG4gIH0sXG4gIGdldFVzZXJNZWRpYToge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHJlcXVpcmUoJy4vZ2V0dXNlcm1lZGlhJylcbiAgfSxcbiAgTWVkaWFTdHJlYW06IHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiByZXF1aXJlKCcuL21lZGlhc3RyZWFtJylcbiAgfSxcbiAgTWVkaWFTdHJlYW1UcmFjazoge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHJlcXVpcmUoJy4vbWVkaWFzdHJlYW10cmFjaycpXG4gIH0sXG4gIFJUQ0ljZUNhbmRpZGF0ZToge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHJlcXVpcmUoJy4vcnRjaWNlY2FuZGlkYXRlJylcbiAgfSxcbiAgUlRDUGVlckNvbm5lY3Rpb246IHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiByZXF1aXJlKCcuL3J0Y3BlZXJjb25uZWN0aW9uJylcbiAgfSxcbiAgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uOiB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogcmVxdWlyZSgnLi9ydGNzZXNzaW9uZGVzY3JpcHRpb24nKVxuICB9LFxuICB2ZXJzaW9uOiB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJSVEM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3dlYnJ0Yy9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///212\n");

/***/ }),
/* 213 */
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ 271);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ 272);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 141), __webpack_require__(/*! ./../node-libs-browser/node_modules/process/browser.js */ 270)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///213\n");

/***/ }),
/* 214 */
/*!***************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/log.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint new-cap:0, no-console:0 */\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar constants = __webpack_require__(/*! ./constants */ 208);\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL;\nvar E = __webpack_require__(/*! ./constants */ 208).typeErrors;\n\nvar deprecationWarningsByComponentConstructor = void 0;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n  var deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n\n/**\n * Selectively outputs messages to console.log based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\n\nvar Log = function () {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   */\n  function Log(moduleName, component, logLevels) {\n    _classCallCheck(this, Log);\n\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if ((typeof logLevels === 'undefined' ? 'undefined' : _typeof(logLevels)) !== 'object') {\n      logLevels = {};\n    }\n\n    validateLogLevels(logLevels);\n\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: { get: component.toString.bind(component) }\n    });\n  }\n\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n\n\n  _createClass(Log, [{\n    key: 'createLog',\n\n\n    /**\n     * Create a child {@link Log} instance with this._logLevels\n     * @param moduleName - Name of the logging module\n     * @param component - Component owning this instance of {@link Log}\n     * @returns {Log} this\n     */\n    value: function createLog(moduleName, component) {\n      return new Log(moduleName, component, this._logLevels);\n    }\n\n    /**\n     * Set new log levels.\n     * This changes the levels for all its ancestors,\n     * siblings, and children and descendants instances of {@link Log}.\n     * @param {LogLevels} levels - New log levels\n     * @throws {TwilioError} INVALID_ARGUMENT\n     * @returns {Log} this\n     */\n\n  }, {\n    key: 'setLevels',\n    value: function setLevels(levels) {\n      validateLogLevels(levels);\n      Object.assign(this._logLevels, levels);\n      return this;\n    }\n\n    /**\n     * Log a message using the console method appropriate for the specified logLevel\n     * @param {Number} logLevel - Log level of the message being logged\n     * @param {String} message - Message(s) to log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'log',\n    value: function log(logLevel, message) {\n      var logSpec = Log._levels[logLevel];\n      // eslint-disable-next-line no-use-before-define\n      if (!logSpec) {\n        throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n      }\n\n      if (this.logLevel <= logLevel) {\n        var levelName = logSpec.name;\n        var prefix = new Date().toISOString().split('T').concat(['|', levelName, 'in', this.name + ':']);\n        logSpec.logFn.apply(console, prefix.concat(message));\n      }\n\n      return this;\n    }\n\n    /**\n     * Log a debug message using console.log\n     * @param {...String} messages - Message(s) to pass to console.log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'debug',\n    value: function debug() {\n      return this.log(Log.DEBUG, [].slice.call(arguments));\n    }\n\n    /**\n     * Log a deprecation warning. Deprecation warnings are logged as warnings and\n     * they are only ever logged once.\n     * @param {String} deprecationWarning - The deprecation warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'deprecated',\n    value: function deprecated(deprecationWarning) {\n      var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n      if (deprecationWarnings.has(deprecationWarning)) {\n        return this;\n      }\n      deprecationWarnings.add(deprecationWarning);\n      return this.warn(deprecationWarning);\n    }\n\n    /**\n     * Log an info message using console.info\n     * @param {...String} messages - Message(s) to pass to console.info\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.log(Log.INFO, [].slice.call(arguments));\n    }\n\n    /**\n     * Log a warn message using console.warn\n     * @param {...String} messages - Message(s) to pass to console.warn\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'warn',\n    value: function warn() {\n      return this.log(Log.WARN, [].slice.call(arguments));\n    }\n\n    /**\n     * Log a warning once.\n     * @param {String} warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'warnOnce',\n    value: function warnOnce(warning) {\n      if (this._warnings.has(warning)) {\n        return this;\n      }\n      this._warnings.add(warning);\n      return this.warn(warning);\n    }\n\n    /**\n     * Log an error message using console.error\n     * @param {...String} messages - Message(s) to pass to console.error\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'error',\n    value: function error() {\n      return this.log(Log.ERROR, [].slice.call(arguments));\n    }\n\n    /**\n     * Log an error message using console.error and throw an exception\n     * @param {TwilioError} error - Error to throw\n     * @param {String} customMessage - Custom message for the error\n     * @public\n     */\n\n  }, {\n    key: 'throw',\n    value: function _throw(error, customMessage) {\n      if (error.clone) {\n        error = error.clone(customMessage);\n      }\n\n      this.log(Log.ERROR, error);\n      throw error;\n    }\n  }], [{\n    key: 'getLevelByName',\n    value: function getLevelByName(name) {\n      if (!isNaN(name)) {\n        return parseInt(name, 10);\n      }\n      name = name.toUpperCase();\n      validateLogLevel(name);\n      return Log[name];\n    }\n  }]);\n\n  return Log;\n}();\n\n// Singleton Constants\n/* eslint key-spacing:0 */\n/* istanbul ignore next */\n\n\nObject.defineProperties(Log, {\n  DEBUG: { value: 0 },\n  INFO: { value: 1 },\n  WARN: { value: 2 },\n  ERROR: { value: 3 },\n  OFF: { value: 4 },\n  _levels: {\n    value: [{ name: 'DEBUG', logFn: console.log }, { name: 'INFO', logFn: console.info }, { name: 'WARN', logFn: console.warn }, { name: 'ERROR', logFn: console.error }, { name: 'OFF', logFn: function noop() {} }]\n  }\n});\n\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\n\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n  LOG_LEVELS_SET[level.name] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level.name;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(function (moduleName) {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///214\n");

/***/ }),
/* 215 */
/*!*******************************************************!*\
  !*** ./node_modules/twilio-video/es5/statemachine.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\nvar util = __webpack_require__(/*! ./util */ 206);\n\n/**\n * {@link StateMachine} represents a state machine. The state machine supports a\n * reentrant locking mechanism to allow asynchronous state transitions to ensure\n * they have not been preempted. Calls to {@link StateMachine#takeLock} are\n * guaranteed to be resolved in FIFO order.\n * @extends EventEmitter\n * @property {boolean} isLocked - whether or not the {@link StateMachine} is\n *   locked performing asynchronous state transition\n * @property {string} state - the current state\n * @emits {@link StateMachine#stateChanged}\n */\n\nvar StateMachine = function (_EventEmitter) {\n  _inherits(StateMachine, _EventEmitter);\n\n  /**\n   * Construct a {@link StateMachine}.\n   * @param {string} initialState - the intiial state\n   * @param {object} states\n   */\n  function StateMachine(initialState, states) {\n    _classCallCheck(this, StateMachine);\n\n    var _this = _possibleConstructorReturn(this, (StateMachine.__proto__ || Object.getPrototypeOf(StateMachine)).call(this));\n\n    var lock = null;\n    var state = initialState;\n    states = transformStates(states);\n    Object.defineProperties(_this, {\n      _lock: {\n        get: function get() {\n          return lock;\n        },\n        set: function set(_lock) {\n          lock = _lock;\n        }\n      },\n      _reachableStates: {\n        value: reachable(states)\n      },\n      _state: {\n        get: function get() {\n          return state;\n        },\n        set: function set(_state) {\n          state = _state;\n        }\n      },\n      _states: {\n        value: states\n      },\n      _whenDeferreds: {\n        value: new Set()\n      },\n      isLocked: {\n        enumerable: true,\n        get: function get() {\n          return lock !== null;\n        }\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return state;\n        }\n      }\n    });\n\n    _this.on('stateChanged', function (state) {\n      _this._whenDeferreds.forEach(function (deferred) {\n        deferred.when(state, deferred.resolve, deferred.reject);\n      });\n    });\n    return _this;\n  }\n\n  /**\n   * Returns a promise whose executor function is called on each state change.\n   * @param {function(state: string, resolve: function, reject: function): void} when\n   * @returns {Promise.<*>}\n   * @private\n   */\n\n\n  _createClass(StateMachine, [{\n    key: '_whenPromise',\n    value: function _whenPromise(when) {\n      var _this2 = this;\n\n      if (typeof when !== 'function') {\n        return Promise.reject(new Error('when() executor must be a function'));\n      }\n\n      var deferred = util.defer();\n\n      deferred.when = when;\n      this._whenDeferreds.add(deferred);\n\n      return deferred.promise.then(function (payload) {\n        _this2._whenDeferreds.delete(deferred);\n        return payload;\n      }, function (error) {\n        _this2._whenDeferreds.delete(deferred);\n        throw error;\n      });\n    }\n\n    /**\n     * This method takes a lock and passes the {@link StateMachine#Key} to your\n     * transition function. You may perform zero or more state transitions in your\n     * transition function, but you should check for preemption in each tick. You\n     * may also reenter the lock. Once the Promise returned by your transition\n     * function resolves or rejects, this method releases the lock it acquired for\n     * you.\n     * @param {string} name - a name for the lock\n     * @param {function(StateMachine#Key): Promise} transitionFunction\n     * @returns {Promise}\n     */\n    // NOTE(mroberts): This method is named after a Haskell function:\n    // https://hackage.haskell.org/package/base-4.8.2.0/docs/Control-Exception.html#v:bracket\n\n  }, {\n    key: 'bracket',\n    value: function bracket(name, transitionFunction) {\n      var key = void 0;\n      var self = this;\n\n      function releaseLock(error) {\n        if (self.hasLock(key)) {\n          self.releaseLockCompletely(key);\n        }\n        if (error) {\n          throw error;\n        }\n      }\n\n      return this.takeLock(name).then(function gotKey(_key) {\n        key = _key;\n        return transitionFunction(key);\n      }).then(function success(result) {\n        releaseLock();\n        return result;\n      }, releaseLock);\n    }\n\n    /**\n     * Check whether or not a {@link StateMachine#Key} matches the lock.\n     * @param {StateMachine#Key} key\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'hasLock',\n    value: function hasLock(key) {\n      return this._lock === key;\n    }\n\n    /**\n     * Preempt any pending state transitions and immediately transition to the new\n     * state. If a lock name is specified, take the lock and return the\n     * {@link StateMachine#Key}.\n     * @param {string} newState\n     * @param {?string} [name=null] - a name for the lock\n     * @param {Array<*>} [payload=[]]\n     * @returns {?StateMachine#Key}\n     */\n\n  }, {\n    key: 'preempt',\n    value: function preempt(newState, name, payload) {\n      // 1. Check that the new state is valid.\n      if (!isValidTransition(this._states, this.state, newState)) {\n        throw new Error('Cannot transition from \"' + this.state + '\" to \"' + newState + '\"');\n      }\n\n      // 2. Release the old lock, if any.\n      var oldLock = void 0;\n      if (this.isLocked) {\n        oldLock = this._lock;\n        this._lock = null;\n      }\n\n      // 3. Take the lock, if requested.\n      var key = null;\n      if (name) {\n        key = this.takeLockSync(name);\n      }\n\n      // 4. If a lock wasn't requested, take a \"preemption\" lock in order to\n      // maintain FIFO order of those taking locks.\n      var preemptionKey = key ? null : this.takeLockSync('preemption');\n\n      // 5. Transition.\n      this.transition(newState, key || preemptionKey, payload);\n\n      // 6. Preempt anyone blocked on the old lock.\n      if (oldLock) {\n        oldLock.resolve();\n      }\n\n      // 7. Release the \"preemption\" lock, if we took it.\n      if (preemptionKey) {\n        this.releaseLock(preemptionKey);\n      }\n\n      return key;\n    }\n\n    /**\n     * Release a lock. This method succeeds only if the {@link StateMachine} is\n     * still locked and has not been preempted.\n     * @param {StateMachine#Key} key\n     * @throws Error\n     */\n\n  }, {\n    key: 'releaseLock',\n    value: function releaseLock(key) {\n      if (!this.isLocked) {\n        throw new Error('Could not release the lock for ' + key.name + ' because the StateMachine is not locked');\n      } else if (!this.hasLock(key)) {\n        throw new Error('Could not release the lock for ' + key.name + ' because ' + this._lock.name + ' has the lock');\n      }\n      if (key.depth === 0) {\n        this._lock = null;\n        key.resolve();\n      } else {\n        key.depth--;\n      }\n    }\n\n    /**\n     * Release a lock completely, even if it has been reentered. This method\n     * succeeds only if the {@link StateMachine} is still locked and has not been\n     * preempted.\n     * @param {StateMachine#Key} key\n     * @throws Error\n     */\n\n  }, {\n    key: 'releaseLockCompletely',\n    value: function releaseLockCompletely(key) {\n      if (!this.isLocked) {\n        throw new Error('Could not release the lock for ' + key.name + ' because the StateMachine is not locked');\n      } else if (!this.hasLock(key)) {\n        throw new Error('Could not release the lock for ' + key.name + ' because ' + this._lock.name + ' has the lock');\n      }\n      key.depth = 0;\n      this._lock = null;\n      key.resolve();\n    }\n\n    /**\n     * Take a lock, returning a Promise for the {@link StateMachine#Key}. You should\n     * take a lock anytime you intend to perform asynchronous transitions. Calls to\n     * this method are guaranteed to be resolved in FIFO order. You may reenter\n     * a lock by passing its {@link StateMachine#Key}.\n     * @param {string|StateMachine#Key} nameOrKey - a name for the lock or an\n     * existing {@link StateMachine#Key}\n     * @returns {Promise<object>}\n     */\n\n  }, {\n    key: 'takeLock',\n    value: function takeLock(nameOrKey) {\n      var _this3 = this;\n\n      // Reentrant lock\n      if ((typeof nameOrKey === 'undefined' ? 'undefined' : _typeof(nameOrKey)) === 'object') {\n        var key = nameOrKey;\n        return new Promise(function (resolve) {\n          resolve(_this3.takeLockSync(key));\n        });\n      }\n\n      // New lock\n      var name = nameOrKey;\n      if (this.isLocked) {\n        var takeLock = this.takeLock.bind(this, name);\n        return this._lock.promise.then(takeLock);\n      }\n      return Promise.resolve(this.takeLockSync(name));\n    }\n\n    /**\n     * Take a lock, returning the {@Link StateMachine#Key}. This method throws if\n     * the {@link StateMachine} is locked or the wrong {@link StateMachine#Key} is\n     * provided. You may reenter a lock by passing its {@link StateMachine#Key}.\n     * @param {string|StateMachine#Key} nameOrKey - a name for the lock or an\n     * existing {@link StateMachine#Key}\n     * @returns {object}\n     * @throws Error\n     */\n\n  }, {\n    key: 'takeLockSync',\n    value: function takeLockSync(nameOrKey) {\n      var key = typeof nameOrKey === 'string' ? null : nameOrKey;\n      var name = key ? key.name : nameOrKey;\n\n      if (key && !this.hasLock(key) || !key && this.isLocked) {\n        throw new Error('Could not take the lock for ' + name + ' because the lock for ' + this._lock.name + ' was not released');\n      }\n\n      // Reentrant lock\n      if (key) {\n        key.depth++;\n        return key;\n      }\n\n      // New lock\n      var lock = makeLock(name);\n      this._lock = lock;\n      return lock;\n    }\n\n    /**\n     * Transition to a new state. If the {@link StateMachine} is locked, you must\n     * provide the {@link StateMachine#Key}. An invalid state or the wrong\n     * {@link StateMachine#Key} will throw an error.\n     * @param {string} newState\n     * @param {?StateMachine#Key} [key=null]\n     * @param {Array<*>} [payload=[]]\n     * @throws {Error}\n     */\n\n  }, {\n    key: 'transition',\n    value: function transition(newState, key, payload) {\n      payload = payload || [];\n\n      // 1. If we're locked, required the key.\n      if (this.isLocked) {\n        if (!key) {\n          throw new Error('You must provide the key in order to ' + 'transition');\n        } else if (!this.hasLock(key)) {\n          throw new Error('Could not transition using the key for ' + key.name + ' because ' + this._lock.name + ' has the lock');\n        }\n      } else if (key) {\n        throw new Error('Key provided for ' + key.name + ', but the StateMachine was not locked (possibly due to preemption)');\n      }\n\n      // 2. Check that the new state is valid.\n      if (!isValidTransition(this._states, this.state, newState)) {\n        throw new Error('Cannot transition from \"' + this.state + '\" to \"' + newState + '\"');\n      }\n\n      // 3. Update the state and emit an event.\n      this._state = newState;\n      this.emit.apply(this, _toConsumableArray(['stateChanged', newState].concat(payload)));\n    }\n\n    /**\n     * Attempt to transition to a new state. Unlike {@link StateMachine#transition},\n     * this method does not throw.\n     * @param {string} newState\n     * @param {?StateMachine#Key} [key=null]\n     * @param {Array<*>} [payload=[]]\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'tryTransition',\n    value: function tryTransition(newState, key, payload) {\n      try {\n        this.transition(newState, key, payload);\n      } catch (error) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Return a Promise that resolves when the {@link StateMachine} transitions to\n     * the specified state. If the {@link StateMachine} transitions such that the\n     * requested state becomes unreachable, the Promise rejects.\n     * @param {string} state\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: 'when',\n    value: function when(state) {\n      var _this4 = this;\n\n      if (this.state === state) {\n        return Promise.resolve(this);\n      } else if (!isValidTransition(this._reachableStates, this.state, state)) {\n        return Promise.reject(createUnreachableError(this.state, state));\n      }\n      return this._whenPromise(function (newState, resolve, reject) {\n        if (newState === state) {\n          resolve(_this4);\n        } else if (!isValidTransition(_this4._reachableStates, newState, state)) {\n          reject(createUnreachableError(newState, state));\n        }\n      });\n    }\n  }]);\n\n  return StateMachine;\n}(EventEmitter);\n\n/**\n * @event StateMachine#stateChanged\n * @param {string} newState\n */\n\n/**\n * Check if a transition is valid.\n * @private\n * @param {Map<*, Set<*>>} graph\n * @param {*} from\n * @param {*} to\n * @returns {boolean}\n */\n\n\nfunction isValidTransition(graph, from, to) {\n  return graph.get(from).has(to);\n}\n\n/**\n * @typedef {object} StateMachine#Key\n */\n\nfunction makeLock(name) {\n  var lock = util.defer();\n  lock.name = name;\n  lock.depth = 0;\n  return lock;\n}\n\n/**\n * Compute the transitive closure of a graph (i.e. what nodes are reachable from\n * where).\n * @private\n * @param {Map<*, Set<*>>} graph\n * @returns {Map<*, Set<*>>}\n */\nfunction reachable(graph) {\n  return Array.from(graph.keys()).reduce(function (newGraph, from) {\n    return newGraph.set(from, reachableFrom(graph, from));\n  }, new Map());\n}\n\n/**\n * Compute the Set of node reachable from a particular node in the graph.\n * @private\n * @param {Map<*, Set<*>>} graph\n * @param {*} from\n * @param {Set<*>} [to]\n * @returns {Set<*>}\n */\nfunction reachableFrom(graph, from, to) {\n  to = to || new Set();\n  graph.get(from).forEach(function (node) {\n    if (!to.has(node)) {\n      to.add(node);\n      reachableFrom(graph, node, to).forEach(to.add, to);\n    }\n  });\n  return to;\n}\n\nfunction transformStates(states) {\n  var newStates = new Map();\n  for (var key in states) {\n    newStates.set(key, new Set(states[key]));\n  }\n  return newStates;\n}\n\n/**\n * Create an \"unreachable state\" Error.\n * @param {string} here\n * @param {string} there\n * @returns {Error}\n */\nfunction createUnreachableError(here, there) {\n  return new Error('\"' + there + '\" cannot be reached from \"' + here + '\"');\n}\n\nmodule.exports = StateMachine;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///215\n");

/***/ }),
/* 216 */
/*!**************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/es5/localaudiotrack.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// TODO(mroberts): Remove this when we go to the next major version. This is\n// only in place so that we can support ES6 classes without requiring `new`.\n\n\nvar _require = __webpack_require__(/*! util */ 213),\n    inherits = _require.inherits;\n\nvar LocalAudioTrackClass = __webpack_require__(/*! ../localaudiotrack */ 277);\n\nfunction LocalAudioTrack(mediaStreamTrack, options) {\n  var track = new LocalAudioTrackClass(mediaStreamTrack, options);\n  Object.setPrototypeOf(track, LocalAudioTrack.prototype);\n  return track;\n}\n\ninherits(LocalAudioTrack, LocalAudioTrackClass);\n\nmodule.exports = LocalAudioTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9lczUvbG9jYWxhdWRpb3RyYWNrLmpzPzMyMzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxlQUFNO0FBQzdCOztBQUVBLDJCQUEyQixtQkFBTyxDQUFDLDZCQUFvQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIyMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPKG1yb2JlcnRzKTogUmVtb3ZlIHRoaXMgd2hlbiB3ZSBnbyB0byB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLiBUaGlzIGlzXG4vLyBvbmx5IGluIHBsYWNlIHNvIHRoYXQgd2UgY2FuIHN1cHBvcnQgRVM2IGNsYXNzZXMgd2l0aG91dCByZXF1aXJpbmcgYG5ld2AuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBpbmhlcml0cyA9IF9yZXF1aXJlLmluaGVyaXRzO1xuXG52YXIgTG9jYWxBdWRpb1RyYWNrQ2xhc3MgPSByZXF1aXJlKCcuLi9sb2NhbGF1ZGlvdHJhY2snKTtcblxuZnVuY3Rpb24gTG9jYWxBdWRpb1RyYWNrKG1lZGlhU3RyZWFtVHJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIHRyYWNrID0gbmV3IExvY2FsQXVkaW9UcmFja0NsYXNzKG1lZGlhU3RyZWFtVHJhY2ssIG9wdGlvbnMpO1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YodHJhY2ssIExvY2FsQXVkaW9UcmFjay5wcm90b3R5cGUpO1xuICByZXR1cm4gdHJhY2s7XG59XG5cbmluaGVyaXRzKExvY2FsQXVkaW9UcmFjaywgTG9jYWxBdWRpb1RyYWNrQ2xhc3MpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsQXVkaW9UcmFjaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L21lZGlhL3RyYWNrL2VzNS9sb2NhbGF1ZGlvdHJhY2suanNcbi8vIG1vZHVsZSBpZCA9IDIxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///216\n");

/***/ }),
/* 217 */
/*!*************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/es5/localdatatrack.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// TODO(mroberts): Remove this when we go to the next major version. This is\n// only in place so that we can support ES6 classes without requiring `new`.\n\n\nvar _require = __webpack_require__(/*! util */ 213),\n    inherits = _require.inherits;\n\nvar LocalDataTrackClass = __webpack_require__(/*! ../localdatatrack */ 278);\n\nfunction LocalDataTrack(options) {\n  var track = new LocalDataTrackClass(options);\n  Object.setPrototypeOf(track, LocalDataTrack.prototype);\n  return track;\n}\n\ninherits(LocalDataTrack, LocalDataTrackClass);\n\nmodule.exports = LocalDataTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9lczUvbG9jYWxkYXRhdHJhY2suanM/MTQ0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ2E7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLGVBQU07QUFDN0I7O0FBRUEsMEJBQTBCLG1CQUFPLENBQUMsNEJBQW1COztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE8obXJvYmVydHMpOiBSZW1vdmUgdGhpcyB3aGVuIHdlIGdvIHRvIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uIFRoaXMgaXNcbi8vIG9ubHkgaW4gcGxhY2Ugc28gdGhhdCB3ZSBjYW4gc3VwcG9ydCBFUzYgY2xhc3NlcyB3aXRob3V0IHJlcXVpcmluZyBgbmV3YC5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIGluaGVyaXRzID0gX3JlcXVpcmUuaW5oZXJpdHM7XG5cbnZhciBMb2NhbERhdGFUcmFja0NsYXNzID0gcmVxdWlyZSgnLi4vbG9jYWxkYXRhdHJhY2snKTtcblxuZnVuY3Rpb24gTG9jYWxEYXRhVHJhY2sob3B0aW9ucykge1xuICB2YXIgdHJhY2sgPSBuZXcgTG9jYWxEYXRhVHJhY2tDbGFzcyhvcHRpb25zKTtcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRyYWNrLCBMb2NhbERhdGFUcmFjay5wcm90b3R5cGUpO1xuICByZXR1cm4gdHJhY2s7XG59XG5cbmluaGVyaXRzKExvY2FsRGF0YVRyYWNrLCBMb2NhbERhdGFUcmFja0NsYXNzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2NhbERhdGFUcmFjaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L21lZGlhL3RyYWNrL2VzNS9sb2NhbGRhdGF0cmFjay5qc1xuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///217\n");

/***/ }),
/* 218 */
/*!**************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/es5/localvideotrack.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// TODO(mroberts): Remove this when we go to the next major version. This is\n// only in place so that we can support ES6 classes without requiring `new`.\n\n\nvar _require = __webpack_require__(/*! util */ 213),\n    inherits = _require.inherits;\n\nvar LocalVideoTrackClass = __webpack_require__(/*! ../localvideotrack */ 280);\n\nfunction LocalVideoTrack(mediaStreamTrack, options) {\n  var track = new LocalVideoTrackClass(mediaStreamTrack, options);\n  Object.setPrototypeOf(track, LocalVideoTrack.prototype);\n  return track;\n}\n\ninherits(LocalVideoTrack, LocalVideoTrackClass);\n\nmodule.exports = LocalVideoTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9lczUvbG9jYWx2aWRlb3RyYWNrLmpzP2UzMzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxlQUFNO0FBQzdCOztBQUVBLDJCQUEyQixtQkFBTyxDQUFDLDZCQUFvQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiIyMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPKG1yb2JlcnRzKTogUmVtb3ZlIHRoaXMgd2hlbiB3ZSBnbyB0byB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLiBUaGlzIGlzXG4vLyBvbmx5IGluIHBsYWNlIHNvIHRoYXQgd2UgY2FuIHN1cHBvcnQgRVM2IGNsYXNzZXMgd2l0aG91dCByZXF1aXJpbmcgYG5ld2AuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBpbmhlcml0cyA9IF9yZXF1aXJlLmluaGVyaXRzO1xuXG52YXIgTG9jYWxWaWRlb1RyYWNrQ2xhc3MgPSByZXF1aXJlKCcuLi9sb2NhbHZpZGVvdHJhY2snKTtcblxuZnVuY3Rpb24gTG9jYWxWaWRlb1RyYWNrKG1lZGlhU3RyZWFtVHJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIHRyYWNrID0gbmV3IExvY2FsVmlkZW9UcmFja0NsYXNzKG1lZGlhU3RyZWFtVHJhY2ssIG9wdGlvbnMpO1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YodHJhY2ssIExvY2FsVmlkZW9UcmFjay5wcm90b3R5cGUpO1xuICByZXR1cm4gdHJhY2s7XG59XG5cbmluaGVyaXRzKExvY2FsVmlkZW9UcmFjaywgTG9jYWxWaWRlb1RyYWNrQ2xhc3MpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsVmlkZW9UcmFjaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L21lZGlhL3RyYWNrL2VzNS9sb2NhbHZpZGVvdHJhY2suanNcbi8vIG1vZHVsZSBpZCA9IDIxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///218\n");

/***/ }),
/* 219 */
/*!************************************************!*\
  !*** ./node_modules/twilio-video/package.json ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"twilio-video\",\"title\":\"Twilio Video\",\"description\":\"Twilio Video JavaScript library\",\"version\":\"1.15.2\",\"homepage\":\"https://twilio.com\",\"author\":\"Mark Andrus Roberts <mroberts@twilio.com>\",\"contributors\":[\"Ryan Rowland <rrowland@twilio.com>\",\"Manjesh Malavalli <mmalavalli@twilio.com>\"],\"keywords\":[\"twilio\",\"webrtc\",\"library\",\"javascript\",\"video\",\"rooms\"],\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/twilio/twilio-video.js.git\"},\"devDependencies\":{\"@types/express\":\"^4.11.0\",\"@types/node\":\"^8.5.1\",\"@types/selenium-webdriver\":\"^3.0.8\",\"@types/ws\":\"^3.2.1\",\"babel-cli\":\"^6.26.0\",\"babel-preset-es2015\":\"^6.24.1\",\"browserify\":\"^14.3.0\",\"cheerio\":\"^0.22.0\",\"chromedriver\":\"2.28.0\",\"envify\":\"^4.0.0\",\"eslint\":\"^4.9.0\",\"express\":\"^4.16.2\",\"geckodriver\":\"1.4.0\",\"ink-docstrap\":\"^1.3.2\",\"istanbul\":\"^0.4.5\",\"jsdoc\":\"^3.5.5\",\"karma\":\"^1.6.0\",\"karma-browserify\":\"^5.1.1\",\"karma-chrome-launcher\":\"^2.0.0\",\"karma-firefox-launcher\":\"^1.0.1\",\"karma-mocha\":\"^1.3.0\",\"karma-safari-launcher\":\"^1.0.0\",\"karma-spec-reporter\":\"^0.0.31\",\"mocha\":\"^3.2.0\",\"npm-run-all\":\"^4.0.2\",\"phantom\":\"^4.0.2\",\"release-tool\":\"^0.2.2\",\"requirejs\":\"^2.3.3\",\"rimraf\":\"^2.6.1\",\"selenium-webdriver\":\"3.3.0\",\"sinon\":\"^4.0.1\",\"travis-multirunner\":\"^4.0.0\",\"ts-node\":\"4.0.1\",\"tslint\":\"5.8.0\",\"twilio\":\"^2.11.1\",\"typescript\":\"2.6.2\",\"uglify-js\":\"^2.8.22\",\"vinyl-fs\":\"^2.4.4\",\"vinyl-source-stream\":\"^1.1.0\",\"webrtc-adapter\":\"^4.1.1\"},\"engines\":{\"node\":\">=0.12\"},\"license\":\"BSD-3-Clause\",\"main\":\"./es5/index.js\",\"scripts\":{\"lint\":\"eslint ./lib ./test/*.js ./test/framework/*.js ./test/lib/*.js ./test/integration/** ./test/unit/**\",\"test:unit\":\"mocha ./test/unit/index.js\",\"test:integration:adapter\":\"node ./scripts/karma.js karma/integration.adapter.conf.js\",\"test:integration:travis\":\"node ./scripts/integration.js\",\"test:integration\":\"node ./scripts/karma.js karma/integration.conf.js\",\"test:umd\":\"mocha ./test/umd/index.js\",\"test:crossbrowser:build:clean\":\"rimraf ./test/crossbrowser/lib ./test/crossbrowser/src/browser/index.js\",\"test:crossbrowser:build:lint\":\"cd ./test/crossbrowser && tslint --project tsconfig.json\",\"test:crossbrowser:build:tsc\":\"cd ./test/crossbrowser && tsc\",\"test:crossbrowser:build:browser\":\"cd ./test/crossbrowser && browserify lib/crossbrowser/src/browser/index.js > src/browser/index.js\",\"test:crossbrowser:build\":\"npm-run-all test:crossbrowser:build:*\",\"test:crossbrowser:test\":\"cd ./test/crossbrowser && mocha --compilers ts:ts-node/register test/integration/spec/**/*.ts\",\"test:crossbrowser\":\"npm-run-all test:crossbrowser:*\",\"test:sdkdriver:build:clean\":\"rimraf ./test/lib/sdkdriver/lib ./test/lib/sdkdriver/test/integration/browser/index.js\",\"test:sdkdriver:build:lint\":\"cd ./test/lib/sdkdriver && tslint --project tsconfig.json\",\"test:sdkdriver:build:tsc\":\"cd ./test/lib/sdkdriver && tsc --rootDir src\",\"test:sdkdriver:build\":\"npm-run-all test:sdkdriver:build:*\",\"test:sdkdriver:test:unit\":\"cd ./test/lib/sdkdriver && mocha --compilers ts:ts-node/register test/unit/spec/**/*.ts\",\"test:sdkdriver:test:integration:browser\":\"cd ./test/lib/sdkdriver/test/integration && browserify browser/browser.js > browser/index.js\",\"test:sdkdriver:test:integration:run\":\"cd ./test/lib/sdkdriver && mocha --compilers ts:ts-node/register test/integration/spec/**/*.ts\",\"test:sdkdriver:test:integration\":\"npm-run-all test:sdkdriver:test:integration:*\",\"test:sdkdriver:test\":\"npm-run-all test:sdkdriver:test:*\",\"test:sdkdriver\":\"npm-run-all test:sdkdriver:*\",\"test:framework:angular:install\":\"cd ./test/framework/twilio-video-angular && rimraf ./node_modules && npm install\",\"test:framework:angular:run\":\"mocha ./test/framework/twilio-video-angular.js\",\"test:framework:angular\":\"npm-run-all test:framework:angular:*\",\"test:framework:no-framework:run\":\"mocha ./test/framework/twilio-video-no-framework.js\",\"test:framework:no-framework\":\"npm-run-all test:framework:no-framework:*\",\"test:framework:react:install\":\"cd ./test/framework/twilio-video-react && rimraf ./node_modules && npm install\",\"test:framework:react:test\":\"node ./scripts/framework.js twilio-video-react\",\"test:framework:react:build\":\"cd ./test/framework/twilio-video-react && npm run build\",\"test:framework:react:run\":\"mocha ./test/framework/twilio-video-react.js\",\"test:framework:react\":\"npm-run-all test:framework:react:*\",\"test:framework\":\"npm-run-all test:framework:angular test:framework:no-framework test:framework:react\",\"test\":\"npm-run-all test:unit test:integration\",\"build:es5\":\"rimraf ./es5 && babel lib -d es5\",\"build:js\":\"node ./scripts/build.js ./src/twilio-video.js ./LICENSE.md ./dist/twilio-video.js\",\"build:min.js\":\"uglifyjs ./dist/twilio-video.js -o ./dist/twilio-video.min.js --comments \\\"/^! twilio-video.js/\\\" -b beautify=false,ascii_only=true\",\"build\":\"npm-run-all clean lint docs cover test:integration build:es5 build:js build:min.js test:umd\",\"build:travis\":\"npm-run-all clean lint docs cover test:integration:travis build:es5 build:js build:min.js test:umd test:framework\",\"build:quick\":\"npm-run-all clean lint docs build:es5 build:js build:min.js\",\"docs\":\"node ./scripts/docs.js ./dist/docs\",\"clean\":\"rimraf ./coverage ./es5 ./dist\",\"cover\":\"istanbul cover node_modules/mocha/bin/_mocha -- ./test/unit/index.js\"},\"dependencies\":{\"@twilio/sip.js\":\"^0.7.7\",\"@twilio/webrtc\":\"2.2.1\",\"ws\":\"^3.3.1\",\"xmlhttprequest\":\"^1.8.0\"},\"browser\":{\"ws\":\"./src/ws.js\",\"xmlhttprequest\":\"./src/xmlhttprequest.js\"}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///219\n");

/***/ }),
/* 220 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/cancelablepromise.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * A Promise that can be canceled with {@link CancelablePromise#cancel}.\n * @extends Promise\n*/\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CancelablePromise = function () {\n  /**\n   * Construct a new {@link CancelablePromise}.\n   * @param {CancelablePromise.OnCreate} onCreate\n   * @param {CancelablePromise.OnCancel} onCancel\n  */ /**\n     * A function to be called on {@link CancelablePromise} creation\n     * @typedef {function} CancelablePromise.OnCreate\n     * @param {function(*)} resolve\n     * @param {function(*)} reject\n     * @param {function(): boolean} isCanceled\n     */ /**\n        * A function to be called when {@link CancelablePromise#cancel} is called\n        * @typedef {function} CancelablePromise.OnCancel\n        */\n  function CancelablePromise(onCreate, onCancel) {\n    var _this = this;\n\n    _classCallCheck(this, CancelablePromise);\n\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _isCancelable: {\n        writable: true,\n        value: true\n      },\n      _isCanceled: {\n        writable: true,\n        value: false\n      },\n      _onCancel: {\n        value: onCancel\n      }\n    });\n\n    Object.defineProperty(this, '_promise', {\n      value: new Promise(function (resolve, reject) {\n        onCreate(function (value) {\n          _this._isCancelable = false;\n          resolve(value);\n        }, function (reason) {\n          _this._isCancelable = false;\n          reject(reason);\n        }, function () {\n          return _this._isCanceled;\n        });\n      })\n    });\n  }\n\n  /**\n   * Create a synchronously-rejected {@link CancelablePromise}.\n   * @param {*} reason\n   * @returns {Promise<*>}\n   */\n\n\n  _createClass(CancelablePromise, [{\n    key: 'cancel',\n\n\n    /**\n     * Attempt to cancel the {@link CancelablePromise}.\n     * @returns {this}\n     */\n    value: function cancel() {\n      if (this._isCancelable) {\n        this._isCanceled = true;\n        this._onCancel();\n      }\n      return this;\n    }\n\n    /**\n     * @param {function} onRejected\n     * @returns {CancelablePromise}\n     */\n\n  }, {\n    key: 'catch',\n    value: function _catch() {\n      var args = [].slice.call(arguments);\n      var promise = this._promise;\n      return new CancelablePromise(function onCreate(resolve, reject) {\n        promise.catch.apply(promise, _toConsumableArray(args)).then(resolve, reject);\n      }, this._onCancel);\n    }\n\n    /**\n     * @param {?function} onResolved\n     * @param {function} [onRejected]\n     * @returns {CancelablePromise}\n     */\n\n  }, {\n    key: 'then',\n    value: function then() {\n      var args = [].slice.call(arguments);\n      var promise = this._promise;\n      return new CancelablePromise(function onCreate(resolve, reject) {\n        promise.then.apply(promise, _toConsumableArray(args)).then(resolve, reject);\n      }, this._onCancel);\n    }\n  }], [{\n    key: 'reject',\n    value: function reject(reason) {\n      return new CancelablePromise(function rejected(resolve, reject) {\n        reject(reason);\n      }, function onCancel() {\n        // Do nothing.\n      });\n    }\n\n    /**\n     * Create a synchronously-resolved {@link CancelablePromise}.\n     * @param {*|Promise<*>|Thenable<*>} result\n     * @returns {CancelablePromise<*>}\n     */\n\n  }, {\n    key: 'resolve',\n    value: function resolve(result) {\n      return new CancelablePromise(function resolved(resolve) {\n        resolve(result);\n      }, function onCancel() {\n        // Do nothing.\n      });\n    }\n  }]);\n\n  return CancelablePromise;\n}();\n\nmodule.exports = CancelablePromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///220\n");

/***/ }),
/* 221 */
/*!************************************************************!*\
  !*** ./node_modules/twilio-video/es5/createlocaltracks.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar asLocalTrack = __webpack_require__(/*! ./util */ 206).asLocalTrack;\nvar buildLogLevels = __webpack_require__(/*! ./util */ 206).buildLogLevels;\nvar getUserMedia = __webpack_require__(/*! @twilio/webrtc */ 212).getUserMedia;\nvar LocalAudioTrack = __webpack_require__(/*! ./media/track/es5/localaudiotrack */ 216);\nvar LocalDataTrack = __webpack_require__(/*! ./media/track/es5/localdatatrack */ 217);\nvar LocalVideoTrack = __webpack_require__(/*! ./media/track/es5/localvideotrack */ 218);\nvar MediaStreamTrack = __webpack_require__(/*! @twilio/webrtc */ 212).MediaStreamTrack;\nvar Log = __webpack_require__(/*! ./util/log */ 214);\nvar DEFAULT_LOG_LEVEL = __webpack_require__(/*! ./util/constants */ 208).DEFAULT_LOG_LEVEL;\nvar workaround180748 = __webpack_require__(/*! ./webaudio/workaround180748 */ 281);\n\n// This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\nvar createLocalTrackCalls = 0;\n\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n */\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n\n  var logComponentName = '[createLocalTracks #' + ++createLocalTrackCalls + ']';\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels);\n\n  // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n  var localTrackOptions = Object.assign({ log: log }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var localTrackNameOptions = {\n    audio: options.audio && options.audio.name ? { name: options.audio.name } : {},\n    video: options.video && options.video.name ? { name: options.video.name } : {}\n  };\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(localTrackNameOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - Set the log verbosity\n *   of logging to console. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\nmodule.exports = createLocalTracks;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///221\n");

/***/ }),
/* 222 */
/*!*************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/util/eventtarget.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\n/**\n * Event target.\n * @class\n */\nfunction EventTarget() {\n  Object.defineProperties(this, {\n    _eventEmitter: {\n      value: new EventEmitter()\n    }\n  });\n}\n\n/**\n * Dispatch an Event to the {@link EventTarget}.\n * @param {Event} event\n */\nEventTarget.prototype.dispatchEvent = function dispatchEvent(event) {\n  return this._eventEmitter.emit(event.type, event);\n};\n\n/**\n * Add an Event listener to the {@link EventTarget}.\n */\nEventTarget.prototype.addEventListener = function addEventListener() {\n  return this._eventEmitter.addListener.apply(this._eventEmitter, arguments);\n};\n\n/**\n * Remove an Event listener to the {@link EventTarget}.\n */\nEventTarget.prototype.removeEventListener = function removeEventListener() {\n  return this._eventEmitter.removeListener.apply(this._eventEmitter, arguments);\n};\n\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3V0aWwvZXZlbnR0YXJnZXQuanM/ZjYxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyxpQkFBUTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsNkJBQTZCLGtCQUFrQjtBQUMvQyxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLGtCQUFrQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbi8qKlxuICogRXZlbnQgdGFyZ2V0LlxuICogQGNsYXNzXG4gKi9cbmZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgX2V2ZW50RW1pdHRlcjoge1xuICAgICAgdmFsdWU6IG5ldyBFdmVudEVtaXR0ZXIoKVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYW4gRXZlbnQgdG8gdGhlIHtAbGluayBFdmVudFRhcmdldH0uXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICovXG5FdmVudFRhcmdldC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50RW1pdHRlci5lbWl0KGV2ZW50LnR5cGUsIGV2ZW50KTtcbn07XG5cbi8qKlxuICogQWRkIGFuIEV2ZW50IGxpc3RlbmVyIHRvIHRoZSB7QGxpbmsgRXZlbnRUYXJnZXR9LlxuICovXG5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIuYXBwbHkodGhpcy5fZXZlbnRFbWl0dGVyLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gRXZlbnQgbGlzdGVuZXIgdG8gdGhlIHtAbGluayBFdmVudFRhcmdldH0uXG4gKi9cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50RW1pdHRlci5yZW1vdmVMaXN0ZW5lci5hcHBseSh0aGlzLl9ldmVudEVtaXR0ZXIsIGFyZ3VtZW50cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50VGFyZ2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3V0aWwvZXZlbnR0YXJnZXQuanNcbi8vIG1vZHVsZSBpZCA9IDIyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///222\n");

/***/ }),
/* 223 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcrtpsender.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * RTCRtpSender shim.\n * @param {MediaStreamTrack} track\n * @property {MediaStreamTrack} track\n */\nfunction RTCRtpSenderShim(track) {\n  Object.defineProperties(this, {\n    track: {\n      enumerable: true,\n      value: track,\n      writable: true\n    }\n  });\n}\n\n// NOTE(mmalavalli): Because of the way we will be using this shim, there\n// are a couple of use cases that will not be covered:\n//\n// /* Case 1 */\n// const sender = pc.addTrack(track);\n// assert.equal(sender.track, track);\n// pc.removeTrack(sender);\n// assert.equal(sender.track, null); /* Error */\n//\n// /* Case 2 */\n// const sender = pc.addTrack(track);\n// const senders1 = new Set(pc.getSenders());\n// assert(senders1.has(sender));\n// pc.removeTrack(track);\n// const senders2 = new Set(pc.getSenders());\n// assert(senders2.has(sender)); /* Error */\n//\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\n// we will omit handling these use cases for now, and revisit them when we start\n// using the RTCRtpSender APIs.\n\nmodule.exports = RTCRtpSenderShim;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3J0cHNlbmRlci5qcz82YTJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixjQUFjLGlCQUFpQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSVENSdHBTZW5kZXIgc2hpbS5cbiAqIEBwYXJhbSB7TWVkaWFTdHJlYW1UcmFja30gdHJhY2tcbiAqIEBwcm9wZXJ0eSB7TWVkaWFTdHJlYW1UcmFja30gdHJhY2tcbiAqL1xuZnVuY3Rpb24gUlRDUnRwU2VuZGVyU2hpbSh0cmFjaykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgdHJhY2s6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdHJhY2ssXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG59XG5cbi8vIE5PVEUobW1hbGF2YWxsaSk6IEJlY2F1c2Ugb2YgdGhlIHdheSB3ZSB3aWxsIGJlIHVzaW5nIHRoaXMgc2hpbSwgdGhlcmVcbi8vIGFyZSBhIGNvdXBsZSBvZiB1c2UgY2FzZXMgdGhhdCB3aWxsIG5vdCBiZSBjb3ZlcmVkOlxuLy9cbi8vIC8qIENhc2UgMSAqL1xuLy8gY29uc3Qgc2VuZGVyID0gcGMuYWRkVHJhY2sodHJhY2spO1xuLy8gYXNzZXJ0LmVxdWFsKHNlbmRlci50cmFjaywgdHJhY2spO1xuLy8gcGMucmVtb3ZlVHJhY2soc2VuZGVyKTtcbi8vIGFzc2VydC5lcXVhbChzZW5kZXIudHJhY2ssIG51bGwpOyAvKiBFcnJvciAqL1xuLy9cbi8vIC8qIENhc2UgMiAqL1xuLy8gY29uc3Qgc2VuZGVyID0gcGMuYWRkVHJhY2sodHJhY2spO1xuLy8gY29uc3Qgc2VuZGVyczEgPSBuZXcgU2V0KHBjLmdldFNlbmRlcnMoKSk7XG4vLyBhc3NlcnQoc2VuZGVyczEuaGFzKHNlbmRlcikpO1xuLy8gcGMucmVtb3ZlVHJhY2sodHJhY2spO1xuLy8gY29uc3Qgc2VuZGVyczIgPSBuZXcgU2V0KHBjLmdldFNlbmRlcnMoKSk7XG4vLyBhc3NlcnQoc2VuZGVyczIuaGFzKHNlbmRlcikpOyAvKiBFcnJvciAqL1xuLy9cbi8vIEZvciBub3csIHNpbmNlIHdlIG9ubHkgdXNlIHNlbmRlcnMgZm9yIHBhc3NpbmcgdGhlbSB0byBSVENQZWVyQ29ubmVjdGlvbiNyZW1vdmVUcmFjaygpLFxuLy8gd2Ugd2lsbCBvbWl0IGhhbmRsaW5nIHRoZXNlIHVzZSBjYXNlcyBmb3Igbm93LCBhbmQgcmV2aXNpdCB0aGVtIHdoZW4gd2Ugc3RhcnRcbi8vIHVzaW5nIHRoZSBSVENSdHBTZW5kZXIgQVBJcy5cblxubW9kdWxlLmV4cG9ydHMgPSBSVENSdHBTZW5kZXJTaGltO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3J0cHNlbmRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///223\n");

/***/ }),
/* 224 */
/*!*****************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/util/sdp.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar flatMap = __webpack_require__(/*! ./ */ 210).flatMap;\n\n/**\n * Match a pattern across lines, returning the first capture group for any\n * matches.\n * @param {string} pattern\n * @param {string} lines\n * @returns {Set<string>} matches\n */\nfunction getMatches(pattern, lines) {\n  var matches = lines.match(new RegExp(pattern, 'gm')) || [];\n  return matches.reduce(function(results, line) {\n    var match = line.match(new RegExp(pattern));\n    return match ? results.add(match[1]) : results;\n  }, new Set());\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from an SDP.\n * @param {string} pattern\n * @param {string} sdp\n * @returns {Set<string>}\n */\nfunction getTrackIds(pattern, sdp) {\n  return getMatches(pattern, sdp);\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Set<string>} trackIds\n */\nfunction getPlanBTrackIds(sdp) {\n  return getTrackIds('^a=ssrc:[0-9]+ +msid:.+ +(.+) *$', sdp);\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @returns {Set<string>} trackIds\n */\nfunction getUnifiedPlanTrackIds(sdp) {\n  return getTrackIds('^a=msid:.+ +(.+) *$', sdp);\n}\n\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getPlanBSSRCs(sdp, trackId) {\n  var pattern = '^a=ssrc:([0-9]+) +msid:[^ ]+ +' + trackId + ' *$';\n  return getMatches(pattern, sdp);\n}\n\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp -  sdp string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind, direction) {\n  kind = kind || '.*';\n  direction = direction || '.*';\n  return sdp.split('\\r\\nm=').slice(1).map(function(mediaSection) {\n    return 'm=' + mediaSection;\n  }).filter(function(mediaSection) {\n    var kindPattern = new RegExp('m=' + kind, 'gm');\n    var directionPattern = new RegExp('a=' + direction, 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n\n/**\n * Get the Set of SSRCs announced in a MediaSection.\n * @param {string} mediaSection\n * @returns {Array<string>} ssrcs\n */\nfunction getMediaSectionSSRCs(mediaSection) {\n  return Array.from(getMatches('^a=ssrc:([0-9]+) +.*$', mediaSection));\n}\n\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getUnifiedPlanSSRCs(sdp, trackId) {\n  var mediaSections = getMediaSections(sdp);\n\n  var msidAttrRegExp = new RegExp('^a=msid:[^ ]+ +' + trackId + ' *$', 'gm');\n  var matchingMediaSections = mediaSections.filter(function(mediaSection) {\n    return mediaSection.match(msidAttrRegExp);\n  });\n\n  return new Set(flatMap(matchingMediaSections, getMediaSectionSSRCs));\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from an SDP.\n * @param {function(string): Set<string>} getTrackIds\n * @param {function(string, string): Set<string>} getSSRCs\n * @param {string} sdp - SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getTrackIdsToSSRCs(getTrackIds, getSSRCs, sdp) {\n  return new Map(Array.from(getTrackIds(sdp)).map(function(trackId) {\n    return [trackId, getSSRCs(sdp, trackId)];\n  }));\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getPlanBTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getPlanBTrackIds, getPlanBSSRCs, sdp);\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getUnifiedPlanTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getUnifiedPlanTrackIds, getUnifiedPlanSSRCs, sdp);\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the SDP itself. This method\n * ensures that SSRCs never change once announced.\n * @param {function(string): Map<string, Set<string>>} getTrackIdsToSSRCs\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - SDP\n * @returns {strinng} updatedSdp - updated SDP\n */\nfunction updateTrackIdsToSSRCs(getTrackIdsToSSRCs, trackIdsToSSRCs, sdp) {\n  var newTrackIdsToSSRCs = getTrackIdsToSSRCs(sdp);\n  var newSSRCsToOldSSRCs = new Map();\n\n  // NOTE(mroberts): First, update a=ssrc attributes.\n  newTrackIdsToSSRCs.forEach(function(ssrcs, trackId) {\n    if (!trackIdsToSSRCs.has(trackId)) {\n      trackIdsToSSRCs.set(trackId, ssrcs);\n      return;\n    }\n    var oldSSRCs = Array.from(trackIdsToSSRCs.get(trackId));\n    var newSSRCs = Array.from(ssrcs);\n    oldSSRCs.forEach(function(oldSSRC, i) {\n      var newSSRC = newSSRCs[i];\n      newSSRCsToOldSSRCs.set(newSSRC, oldSSRC);\n      var pattern = '^a=ssrc:' + newSSRC + ' (.*)$';\n      var replacement = 'a=ssrc:' + oldSSRC + ' $1';\n      sdp = sdp.replace(new RegExp(pattern, 'gm'), replacement);\n    });\n  });\n\n  // NOTE(mroberts): Then, update a=ssrc-group attributes.\n  var pattern = '^(a=ssrc-group:[^ ]+ +)(.*)$';\n  var matches = sdp.match(new RegExp(pattern, 'gm')) || [];\n  matches.forEach(function(line) {\n    var match = line.match(new RegExp(pattern));\n    if (!match) {\n      return;\n    }\n    var prefix = match[1];\n    var newSSRCs = match[2];\n    var oldSSRCs = newSSRCs.split(' ').map(function(newSSRC) {\n      var oldSSRC = newSSRCsToOldSSRCs.get(newSSRC);\n      return oldSSRC ? oldSSRC : newSSRC;\n    }).join(' ');\n    sdp = sdp.replace(match[0], prefix + oldSSRCs);\n  });\n\n  return sdp;\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updatePlanBTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getPlanBTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updateUnifiedPlanTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getUnifiedPlanTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\n// NOTE(mroberts): We need to cache this result so that we don't create too many\n// RTCPeerConnections.\nvar sdpSemanticsIsSupported;\n\n/**\n * Check whether or not `sdpSemantics` is supported.\n * @returns {boolean}\n */\nfunction checkIfSdpSemanticsIsSupported() {\n  if (typeof sdpSemanticsIsSupported === 'boolean') {\n    return sdpSemanticsIsSupported;\n  }\n  if (typeof RTCPeerConnection === 'undefined') {\n    sdpSemanticsIsSupported = false;\n    return sdpSemanticsIsSupported;\n  }\n  try {\n    new RTCPeerConnection({ sdpSemantics: 'bogus' });\n    sdpSemanticsIsSupported = false;\n    return sdpSemanticsIsSupported;\n  } catch (error) {\n    sdpSemanticsIsSupported = true;\n    return sdpSemanticsIsSupported;\n  }\n}\n\nexports.checkIfSdpSemanticsIsSupported = checkIfSdpSemanticsIsSupported;\nexports.getMediaSections = getMediaSections;\nexports.getPlanBTrackIds = getPlanBTrackIds;\nexports.getUnifiedPlanTrackIds = getUnifiedPlanTrackIds;\nexports.getPlanBSSRCs = getPlanBSSRCs;\nexports.getUnifiedPlanSSRCs = getUnifiedPlanSSRCs;\nexports.updatePlanBTrackIdsToSSRCs = updatePlanBTrackIdsToSSRCs;\nexports.updateUnifiedPlanTrackIdsToSSRCs = updateUnifiedPlanTrackIdsToSSRCs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///224\n");

/***/ }),
/* 225 */
/*!************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/index.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\nvar buildLogLevels = __webpack_require__(/*! ../../util */ 206).buildLogLevels;\nvar DEFAULT_LOG_LEVEL = __webpack_require__(/*! ../../util/constants */ 208).DEFAULT_LOG_LEVEL;\nvar Log = __webpack_require__(/*! ../../util/log */ 214);\n\nvar nInstances = 0;\n\n/**\n * A {@link Track} represents a stream of audio, video, or data.\n * @extends EventEmitter\n * @property {Track.Kind} kind - The {@link Track}'s kind\n * @property {string} name - The {@link Track}'s name\n */\n\nvar Track = function (_EventEmitter) {\n  _inherits(Track, _EventEmitter);\n\n  /**\n   * Construct a {@link Track}.\n   * @param {Track.ID} id - The {@link Track}'s ID\n   * @param {Track.Kind} kind - The {@link Track}'s kind\n   * @param {{ log: Log, name: ?string }} options\n   */\n  function Track(id, kind, options) {\n    _classCallCheck(this, Track);\n\n    options = Object.assign({\n      name: id,\n      log: null,\n      logLevel: DEFAULT_LOG_LEVEL\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (Track.__proto__ || Object.getPrototypeOf(Track)).call(this));\n\n    var name = String(options.name);\n\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = options.log ? options.log.createLog('media', _this) : new Log('media', _this, logLevels);\n\n    Object.defineProperties(_this, {\n      _id: {\n        value: id\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      kind: {\n        enumerable: true,\n        value: kind\n      },\n      name: {\n        enumerable: true,\n        value: name\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * The {@link Track}'s ID.\n   * @property {Track.ID}\n   */\n\n\n  _createClass(Track, [{\n    key: 'id',\n    get: function get() {\n      return this._id;\n    }\n  }]);\n\n  return Track;\n}(EventEmitter);\n\n/**\n * The {@link Track} ID is a string identifier for the {@link Track}.\n * @typedef {string} Track.ID\n */\n\n/**\n * The {@link Track} kind is either \"audio\", \"video\", or \"data\".\n * @typedef {string} Track.Kind\n */\n\n/**\n * The {@link Track} SID is a unique string identifier for the {@link Track}\n * that is published to a {@link Room}.\n * @typedef {string} Track.SID\n */\n\n/**\n * A {@link DataTrack} is a {@link LocalDataTrack} or {@link RemoteDataTrack}.\n * @typedef {LocalDataTrack|RemoteDataTrack} DataTrack\n */\n\n/**\n * A {@link LocalTrack} is a {@link LocalAudioTrack}, {@link LocalVideoTrack},\n * or {@link LocalDataTrack}.\n * @typedef {LocalAudioTrack|LocalVideoTrack|LocalDataTrack} LocalTrack\n */\n\n/**\n * {@link LocalTrack} options\n * @typedef {object} LocalTrackOptions\n * @property {LogLevel|LogLevels} logLevel - Log level for 'media' modules\n * @property {string} [name] - The {@link LocalTrack}'s name; by default,\n *   it is set to the {@link LocalTrack}'s ID.\n */\n\n/**\n * A {@link RemoteTrack} is a {@link RemoteAudioTrack},\n * {@link RemoteVideoTrack}, or {@link RemoteDataTrack}.\n * @typedef {RemoteAudioTrack|RemoteVideoTrack|RemoteDataTrack} RemoteTrack\n */\n\nmodule.exports = Track;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///225\n");

/***/ }),
/* 226 */
/*!*****************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remotetrackpublication.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackPublication = __webpack_require__(/*! ./trackpublication */ 245);\n\n/**\n * A {@link RemoteTrackPublication} represents a {@link RemoteTrack} that has\n * been published to a {@link Room}.\n * @property {Track.Kind} kind - kind of the published {@link RemoteTrack}\n * @emits RemoteTrackPublication#subscribed\n * @emits RemoteTrackPublication#trackDisabled\n * @emits RemoteTrackPublication#trackEnabled\n * @emits RemoteTrackPublication#unsubscribed\n */\n\nvar RemoteTrackPublication = function (_TrackPublication) {\n  _inherits(RemoteTrackPublication, _TrackPublication);\n\n  /**\n   * Construct a {@link RemoteTrackPublication}.\n   * @param {RemoteTrackPublicationSignaling} signaling - {@link RemoteTrackPublication} signaling\n   * @param {RemoteTrackPublicationOptions} options - {@link RemoteTrackPublication}\n   *   options\n   */\n  function RemoteTrackPublication(signaling, options) {\n    _classCallCheck(this, RemoteTrackPublication);\n\n    var _this = _possibleConstructorReturn(this, (RemoteTrackPublication.__proto__ || Object.getPrototypeOf(RemoteTrackPublication)).call(this, signaling.name, signaling.sid, options));\n\n    Object.defineProperties(_this, {\n      _signaling: {\n        value: signaling\n      },\n      _track: {\n        value: null,\n        writable: true\n      },\n      kind: {\n        enumerable: true,\n        value: signaling.kind\n      }\n    });\n\n    signaling.on('updated', function () {\n      if (signaling.error) {\n        _this.emit('subscriptionFailed', signaling.error);\n        return;\n      }\n      if (_this.track) {\n        _this.track._setEnabled(signaling.isEnabled);\n      }\n      _this.emit(signaling.isEnabled ? 'trackEnabled' : 'trackDisabled');\n    });\n    return _this;\n  }\n\n  _createClass(RemoteTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n\n    /**\n     * Whether the published {@link RemoteTrack} is subscribed to\n     * @property {boolean}\n     */\n\n  }, {\n    key: '_subscribed',\n\n\n    /**\n     * @private\n     * @param {RemoteTrack} track\n     */\n    value: function _subscribed(track) {\n      if (!this._track && track) {\n        this._track = track;\n        this.emit('subscribed', track);\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe() {\n      if (this._track) {\n        var track = this._track;\n        this._track = null;\n        track._unsubscribe();\n        this.emit('unsubscribed', track);\n      }\n    }\n  }, {\n    key: 'isSubscribed',\n    get: function get() {\n      return !!this._track;\n    }\n\n    /**\n     * Whether the published {@link RemoteTrack} is enabled\n     * @property {boolean}\n     */\n\n  }, {\n    key: 'isTrackEnabled',\n    get: function get() {\n      return this._signaling.isEnabled;\n    }\n\n    /**\n     * Unless you have subscribed to the {@link RemoteTrack}, this property is null\n     * @property {?RemoteTrack}\n     */\n\n  }, {\n    key: 'track',\n    get: function get() {\n      return this._track;\n    }\n  }]);\n\n  return RemoteTrackPublication;\n}(TrackPublication);\n\n/**\n * Your {@link LocalParticipant} subscribed to the {@link RemoteTrack}.\n * @param {RemoteTrack} track - the {@link RemoteTrack} that was subscribed to\n * @event RemoteTrackPublication#subscribed\n */\n\n/**\n * The {@link RemoteTrack} was disabled.\n * @event RemoteTrackPublication#trackDisabled\n */\n\n/**\n * The {@link RemoteTrack} was enabled.\n * @event RemoteTrackPublication#trackEnabled\n */\n\n/**\n * Your {@link LocalParticipant} unsubscribed from the {@link RemoteTrack}.\n * @param {RemoteTrack} track - the {@link RemoteTrack} that was unsubscribed from\n * @event RemoteTrackPublication#unsubscribed\n */\n\n/**\n * {@link RemoteTrackPublication} options\n * @typedef {object} RemoteTrackPublicationOptions\n * @property {LogLevel|LogLevels} logLevel - Log level for 'media' modules\n */\n\nmodule.exports = RemoteTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///226\n");

/***/ }),
/* 227 */
/*!****************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localtrackpublication.js ***!
  \****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackPublication = __webpack_require__(/*! ./trackpublication */ 245);\n\n/**\n * A {@link LocalTrackPublication} is a {@link LocalTrack} that has been\n * published to a {@link Room}.\n * @property {Track.Kind} kind - kind of the published {@link LocalTrack}\n * @property {LocalTrack} track - the {@link LocalTrack}\n */\n\nvar LocalTrackPublication = function (_TrackPublication) {\n  _inherits(LocalTrackPublication, _TrackPublication);\n\n  /**\n   * Construct a {@link LocalTrackPublication}.\n   * @param {Track.SID} trackSid - SID assigned to the published {@link LocalTrack}\n   * @param {LocalTrack} track - the {@link LocalTrack}\n   * @param {function(LocalTrackPublication): void} unpublish - The callback\n   *   that unpublishes the {@link LocalTrackPublication}\n   * @param {TrackPublicationOptions} options - {@link LocalTrackPublication}\n   *   options\n   */\n  function LocalTrackPublication(trackSid, track, unpublish, options) {\n    _classCallCheck(this, LocalTrackPublication);\n\n    var _this = _possibleConstructorReturn(this, (LocalTrackPublication.__proto__ || Object.getPrototypeOf(LocalTrackPublication)).call(this, track.name, trackSid, options));\n\n    Object.defineProperties(_this, {\n      _reemitTrackEvent: {\n        value: function value() {\n          return _this.emit(_this.isTrackEnabled ? 'trackEnabled' : 'trackDisabled');\n        }\n      },\n      _unpublish: {\n        value: unpublish\n      },\n      kind: {\n        enumerable: true,\n        value: track.kind\n      },\n      track: {\n        enumerable: true,\n        value: track\n      }\n    });\n\n    track.on('disabled', _this._reemitTrackEvent);\n    track.on('enabled', _this._reemitTrackEvent);\n    return _this;\n  }\n\n  _createClass(LocalTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[LocalTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n\n    /**\n     * Whether the published {@link LocalTrack} is enabled\n     * @property {boolean}\n     */\n\n  }, {\n    key: 'unpublish',\n\n\n    /**\n     * Unpublish a {@link LocalTrackPublication}. This means that the media\n     * from this {@link LocalTrackPublication} is no longer available to the\n     * {@link Room}'s {@link RemoteParticipant}s.\n     * @returns {this}\n     */\n    value: function unpublish() {\n      this.track.removeListener('disabled', this._reemitTrackEvent);\n      this.track.removeListener('enabled', this._reemitTrackEvent);\n      this._unpublish(this);\n      return this;\n    }\n  }, {\n    key: 'isTrackEnabled',\n    get: function get() {\n      return this.track.kind === 'data' ? true : this.track.isEnabled;\n    }\n  }]);\n\n  return LocalTrackPublication;\n}(TrackPublication);\n\nmodule.exports = LocalTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbHRyYWNrcHVibGljYXRpb24uanM/ODA5NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSx1QkFBdUIsbUJBQU8sQ0FBQyw2QkFBb0I7O0FBRW5EO0FBQ0EsTUFBTSw0QkFBNEIsT0FBTyxpQkFBaUI7QUFDMUQsbUJBQW1CLFdBQVc7QUFDOUIsY0FBYyxXQUFXLCtCQUErQjtBQUN4RCxjQUFjLFdBQVcsY0FBYztBQUN2Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLDRCQUE0QjtBQUM5QyxhQUFhLFVBQVUsMkNBQTJDO0FBQ2xFLGFBQWEsV0FBVyxjQUFjO0FBQ3RDLGFBQWEsc0NBQXNDO0FBQ25ELDZCQUE2QjtBQUM3QixhQUFhLHdCQUF3QixZQUFZO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsaUJBQWlCO0FBQy9DLGtCQUFrQjtBQUNsQjs7QUFFQSxHQUFHO0FBQ0g7OztBQUdBO0FBQ0Esb0JBQW9CLDRCQUE0QjtBQUNoRCxrQkFBa0IsNEJBQTRCO0FBQzlDLFFBQVEsV0FBVyxJQUFJLHdCQUF3QjtBQUMvQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFRyYWNrUHVibGljYXRpb24gPSByZXF1aXJlKCcuL3RyYWNrcHVibGljYXRpb24nKTtcblxuLyoqXG4gKiBBIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb259IGlzIGEge0BsaW5rIExvY2FsVHJhY2t9IHRoYXQgaGFzIGJlZW5cbiAqIHB1Ymxpc2hlZCB0byBhIHtAbGluayBSb29tfS5cbiAqIEBwcm9wZXJ0eSB7VHJhY2suS2luZH0ga2luZCAtIGtpbmQgb2YgdGhlIHB1Ymxpc2hlZCB7QGxpbmsgTG9jYWxUcmFja31cbiAqIEBwcm9wZXJ0eSB7TG9jYWxUcmFja30gdHJhY2sgLSB0aGUge0BsaW5rIExvY2FsVHJhY2t9XG4gKi9cblxudmFyIExvY2FsVHJhY2tQdWJsaWNhdGlvbiA9IGZ1bmN0aW9uIChfVHJhY2tQdWJsaWNhdGlvbikge1xuICBfaW5oZXJpdHMoTG9jYWxUcmFja1B1YmxpY2F0aW9uLCBfVHJhY2tQdWJsaWNhdGlvbik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb259LlxuICAgKiBAcGFyYW0ge1RyYWNrLlNJRH0gdHJhY2tTaWQgLSBTSUQgYXNzaWduZWQgdG8gdGhlIHB1Ymxpc2hlZCB7QGxpbmsgTG9jYWxUcmFja31cbiAgICogQHBhcmFtIHtMb2NhbFRyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgTG9jYWxUcmFja31cbiAgICogQHBhcmFtIHtmdW5jdGlvbihMb2NhbFRyYWNrUHVibGljYXRpb24pOiB2b2lkfSB1bnB1Ymxpc2ggLSBUaGUgY2FsbGJhY2tcbiAgICogICB0aGF0IHVucHVibGlzaGVzIHRoZSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9ufVxuICAgKiBAcGFyYW0ge1RyYWNrUHVibGljYXRpb25PcHRpb25zfSBvcHRpb25zIC0ge0BsaW5rIExvY2FsVHJhY2tQdWJsaWNhdGlvbn1cbiAgICogICBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBMb2NhbFRyYWNrUHVibGljYXRpb24odHJhY2tTaWQsIHRyYWNrLCB1bnB1Ymxpc2gsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxUcmFja1B1YmxpY2F0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbFRyYWNrUHVibGljYXRpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2NhbFRyYWNrUHVibGljYXRpb24pKS5jYWxsKHRoaXMsIHRyYWNrLm5hbWUsIHRyYWNrU2lkLCBvcHRpb25zKSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgX3JlZW1pdFRyYWNrRXZlbnQ6IHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KF90aGlzLmlzVHJhY2tFbmFibGVkID8gJ3RyYWNrRW5hYmxlZCcgOiAndHJhY2tEaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX3VucHVibGlzaDoge1xuICAgICAgICB2YWx1ZTogdW5wdWJsaXNoXG4gICAgICB9LFxuICAgICAga2luZDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdHJhY2sua2luZFxuICAgICAgfSxcbiAgICAgIHRyYWNrOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB0cmFja1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJhY2sub24oJ2Rpc2FibGVkJywgX3RoaXMuX3JlZW1pdFRyYWNrRXZlbnQpO1xuICAgIHRyYWNrLm9uKCdlbmFibGVkJywgX3RoaXMuX3JlZW1pdFRyYWNrRXZlbnQpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbFRyYWNrUHVibGljYXRpb24sIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnW0xvY2FsVHJhY2tQdWJsaWNhdGlvbiAjJyArIHRoaXMuX2luc3RhbmNlSWQgKyAnOiAnICsgdGhpcy50cmFja1NpZCArICddJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBwdWJsaXNoZWQge0BsaW5rIExvY2FsVHJhY2t9IGlzIGVuYWJsZWRcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VucHVibGlzaCcsXG5cblxuICAgIC8qKlxuICAgICAqIFVucHVibGlzaCBhIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb259LiBUaGlzIG1lYW5zIHRoYXQgdGhlIG1lZGlhXG4gICAgICogZnJvbSB0aGlzIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb259IGlzIG5vIGxvbmdlciBhdmFpbGFibGUgdG8gdGhlXG4gICAgICoge0BsaW5rIFJvb219J3Mge0BsaW5rIFJlbW90ZVBhcnRpY2lwYW50fXMuXG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucHVibGlzaCgpIHtcbiAgICAgIHRoaXMudHJhY2sucmVtb3ZlTGlzdGVuZXIoJ2Rpc2FibGVkJywgdGhpcy5fcmVlbWl0VHJhY2tFdmVudCk7XG4gICAgICB0aGlzLnRyYWNrLnJlbW92ZUxpc3RlbmVyKCdlbmFibGVkJywgdGhpcy5fcmVlbWl0VHJhY2tFdmVudCk7XG4gICAgICB0aGlzLl91bnB1Ymxpc2godGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc1RyYWNrRW5hYmxlZCcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFjay5raW5kID09PSAnZGF0YScgPyB0cnVlIDogdGhpcy50cmFjay5pc0VuYWJsZWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvY2FsVHJhY2tQdWJsaWNhdGlvbjtcbn0oVHJhY2tQdWJsaWNhdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxUcmFja1B1YmxpY2F0aW9uO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvbWVkaWEvdHJhY2svbG9jYWx0cmFja3B1YmxpY2F0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///227\n");

/***/ }),
/* 228 */
/*!****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/participant.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar StateMachine = __webpack_require__(/*! ../statemachine */ 215);\n\n/*\nParticipantSignaling States\n----------------------\n\n    +------------+     +-----------+     +--------------+\n    |            |     |           |     |              |\n    | connecting |---->| connected |---->| disconnected |\n    |            |     |           |     |              |\n    +------------+     +-----------+     +--------------+\n\n*/\n\nvar states = {\n  connecting: ['connected'],\n  connected: ['disconnected'],\n  disconnected: []\n};\n\n/**\n * A {@link Participant} implementation\n * @extends StateMachine\n * @property {?string} identity\n * @property {?Participant.SID} sid\n * @property {string} state - \"connecting\", \"connected\", or \"disconnected\"\n * @property {Map<Track.ID | Track.SID, TrackSignaling>} tracks\n * @emits ParticipantSignaling#networkQualityLevelChanged\n * @emits ParticipantSignaling#trackAdded\n * @emits ParticipantSignaling#trackRemoved\n */\n\nvar ParticipantSignaling = function (_StateMachine) {\n  _inherits(ParticipantSignaling, _StateMachine);\n\n  /**\n   * Construct a {@link ParticipantSignaling}.\n   */\n  function ParticipantSignaling() {\n    _classCallCheck(this, ParticipantSignaling);\n\n    var _this = _possibleConstructorReturn(this, (ParticipantSignaling.__proto__ || Object.getPrototypeOf(ParticipantSignaling)).call(this, 'connecting', states));\n\n    Object.defineProperties(_this, {\n      _identity: {\n        writable: true,\n        value: null\n      },\n      _networkQualityLevel: {\n        value: null,\n        writable: true\n      },\n      _networkQualityLevels: {\n        value: null,\n        writable: true\n      },\n      _sid: {\n        writable: true,\n        value: null\n      },\n      identity: {\n        enumerable: true,\n        get: function get() {\n          return this._identity;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get: function get() {\n          return this._sid;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevel}, if any.\n   * @returns {?NetworkQualityLevel} networkQualityLevel - initially null\n   */\n\n\n  _createClass(ParticipantSignaling, [{\n    key: 'addTrack',\n\n\n    /**\n     * Add the {@link TrackSignaling}, MediaStreamTrack, or\n     * {@link DataTrackSender} to the {@link ParticipantSignaling}.\n     * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n     * @returns {this}\n     * @fires ParticipantSignaling#trackAdded\n     */\n    value: function addTrack(track) {\n      this.tracks.set(track.id || track.sid, track);\n      this.emit('trackAdded', track);\n      return this;\n    }\n\n    /**\n     * Disconnect the {@link ParticipantSignaling}.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected');\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Remove the {@link TrackSignaling}, MediaStreamTrack, or\n     * {@link DataTrackSender} from the {@link ParticipantSignaling}.\n     * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n     * @returns {boolean}\n     * @fires ParticipantSignaling#trackRemoved\n     */\n\n  }, {\n    key: 'removeTrack',\n    value: function removeTrack(track) {\n      var didDelete = this.tracks.delete(track.id || track.sid);\n      if (didDelete) {\n        this.emit('trackRemoved', track);\n      }\n      return didDelete;\n    }\n\n    /**\n     * @param {NetworkQualityLevel} networkQualityLevel\n     * @param {?NetworkQualityLevels} [networkQualityLevels=null] - deprecated;\n     *   the decomposed levels are only used for debugging and will be removed as\n     *   soon as we are confident in our implementation\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setNetworkQualityLevel',\n    value: function setNetworkQualityLevel(networkQualityLevel, networkQualityLevels) {\n      if (networkQualityLevels) {\n        this._networkQualityLevels = networkQualityLevels;\n      }\n\n      if (this._networkQualityLevel !== networkQualityLevel) {\n        this._networkQualityLevel = networkQualityLevel;\n        this.emit('networkQualityLevelChanged');\n      }\n    }\n\n    /**\n     * Connect the {@link ParticipantSignaling}.\n     * @param {Participant.SID} sid\n     * @param {string} identity\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'connect',\n    value: function connect(sid, identity) {\n      if (this.state === 'connecting') {\n        this._sid = sid;\n        this._identity = identity;\n        this.preempt('connected');\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'networkQualityLevel',\n    get: function get() {\n      return this._networkQualityLevel;\n    }\n\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @deprecated - the decomposed levels are only used for debugging and will be\n     *   removed as soon as we are confident in our implementation\n     * @returns {?NetworkQualityLevels} networkQualityLevels - initially null\n     */\n\n  }, {\n    key: 'networkQualityLevels',\n    get: function get() {\n      return this._networkQualityLevels;\n    }\n  }]);\n\n  return ParticipantSignaling;\n}(StateMachine);\n\n/**\n * @event ParticipantSignaling#event:networkQualityLevelChanged\n */\n\n/**\n * {@link TrackSignaling} was added to the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackAdded\n * @param {TrackSignaling} track\n */\n\n/**\n * {@link TrackSignaling} was removed from the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackRemoved\n * @param {TrackSignaling} track\n */\n\nmodule.exports = ParticipantSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///228\n");

/***/ }),
/* 229 */
/*!**********************************************!*\
  !*** ./node_modules/twilio-video/es5/sip.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar toplevel = global.window || global;\nvar Transport = __webpack_require__(/*! @twilio/sip.js/src/Transport */ 341);\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : __webpack_require__(/*! ws */ 259);\nvar addEventListener = toplevel.addEventListener ? toplevel.addEventListener.bind(toplevel) : null;\n\nmodule.exports = __webpack_require__(/*! @twilio/sip.js/src/SIP */ 342)({\n  addEventListener: addEventListener,\n  console: toplevel.console,\n  Promise: toplevel.Promise,\n  WebSocket: WebSocket,\n  timers: toplevel,\n  Transport: Transport\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 141)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaXAuanM/NTBhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4Q0FBYTs7QUFFYjtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLHVDQUE4QjtBQUN0RCwwREFBMEQsbUJBQU8sQ0FBQyxhQUFJO0FBQ3RFOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLGlDQUF3QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEUiLCJmaWxlIjoiMjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9wbGV2ZWwgPSBnbG9iYWwud2luZG93IHx8IGdsb2JhbDtcbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCdAdHdpbGlvL3NpcC5qcy9zcmMvVHJhbnNwb3J0Jyk7XG52YXIgV2ViU29ja2V0ID0gdG9wbGV2ZWwuV2ViU29ja2V0ID8gdG9wbGV2ZWwuV2ViU29ja2V0IDogcmVxdWlyZSgnd3MnKTtcbnZhciBhZGRFdmVudExpc3RlbmVyID0gdG9wbGV2ZWwuYWRkRXZlbnRMaXN0ZW5lciA/IHRvcGxldmVsLmFkZEV2ZW50TGlzdGVuZXIuYmluZCh0b3BsZXZlbCkgOiBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ0B0d2lsaW8vc2lwLmpzL3NyYy9TSVAnKSh7XG4gIGFkZEV2ZW50TGlzdGVuZXI6IGFkZEV2ZW50TGlzdGVuZXIsXG4gIGNvbnNvbGU6IHRvcGxldmVsLmNvbnNvbGUsXG4gIFByb21pc2U6IHRvcGxldmVsLlByb21pc2UsXG4gIFdlYlNvY2tldDogV2ViU29ja2V0LFxuICB0aW1lcnM6IHRvcGxldmVsLFxuICBUcmFuc3BvcnQ6IFRyYW5zcG9ydFxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaXAuanNcbi8vIG1vZHVsZSBpZCA9IDIyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///229\n");

/***/ }),
/* 230 */
/*!********************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/mediastream.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals webkitMediaStream, MediaStream */\n\n\nif (typeof webkitMediaStream !== 'undefined') {\n  module.exports = webkitMediaStream;\n} else if (typeof MediaStream !== 'undefined') {\n  module.exports = MediaStream;\n} else {\n  module.exports = function MediaStream() {\n    throw new Error('WebRTC is not supported in this browser');\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL21lZGlhc3RyZWFtLmpzP2MyZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgd2Via2l0TWVkaWFTdHJlYW0sIE1lZGlhU3RyZWFtICovXG4ndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2Ygd2Via2l0TWVkaWFTdHJlYW0gIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gd2Via2l0TWVkaWFTdHJlYW07XG59IGVsc2UgaWYgKHR5cGVvZiBNZWRpYVN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBNZWRpYVN0cmVhbTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTWVkaWFTdHJlYW0oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXZWJSVEMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKTtcbiAgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vd2VicnRjL2xpYi9tZWRpYXN0cmVhbS5qc1xuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///230\n");

/***/ }),
/* 231 */
/*!*************************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcsessiondescription/chrome.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals RTCSessionDescription */\n\n\n// This class wraps Chrome's RTCSessionDescription implementation. It provides\n// one piece of functionality not currently present in Chrome, namely\n//\n//   1. Rollback support\n//      https://bugs.chromium.org/p/webrtc/issues/detail?id=4676\n//\nfunction ChromeRTCSessionDescription(descriptionInitDict) {\n  if (!(this instanceof ChromeRTCSessionDescription)) {\n    return new ChromeRTCSessionDescription(descriptionInitDict);\n  }\n\n  // If this constructor is called with an object with a .type property set to\n  // \"rollback\", we should not call Chrome's RTCSessionDescription constructor,\n  // because this would throw an RTCSdpType error.\n  var description = descriptionInitDict && descriptionInitDict.type === 'rollback'\n    ? null\n    : new RTCSessionDescription(descriptionInitDict);\n\n  Object.defineProperties(this, {\n    _description: {\n      get: function() {\n        return description;\n      }\n    },\n    sdp: {\n      enumerable: true,\n      value: description ? description.sdp : descriptionInitDict.sdp\n    },\n    type: {\n      enumerable: true,\n      value: description ? description.type : descriptionInitDict.type\n    }\n  });\n}\n\nmodule.exports = ChromeRTCSessionDescription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3Nlc3Npb25kZXNjcmlwdGlvbi9jaHJvbWUuanM/M2Y1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIyMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGlzIGNsYXNzIHdyYXBzIENocm9tZSdzIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiBpbXBsZW1lbnRhdGlvbi4gSXQgcHJvdmlkZXNcbi8vIG9uZSBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5IG5vdCBjdXJyZW50bHkgcHJlc2VudCBpbiBDaHJvbWUsIG5hbWVseVxuLy9cbi8vICAgMS4gUm9sbGJhY2sgc3VwcG9ydFxuLy8gICAgICBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9NDY3NlxuLy9cbmZ1bmN0aW9uIENocm9tZVJUQ1Nlc3Npb25EZXNjcmlwdGlvbihkZXNjcmlwdGlvbkluaXREaWN0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaHJvbWVSVENTZXNzaW9uRGVzY3JpcHRpb24pKSB7XG4gICAgcmV0dXJuIG5ldyBDaHJvbWVSVENTZXNzaW9uRGVzY3JpcHRpb24oZGVzY3JpcHRpb25Jbml0RGljdCk7XG4gIH1cblxuICAvLyBJZiB0aGlzIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCB3aXRoIGFuIG9iamVjdCB3aXRoIGEgLnR5cGUgcHJvcGVydHkgc2V0IHRvXG4gIC8vIFwicm9sbGJhY2tcIiwgd2Ugc2hvdWxkIG5vdCBjYWxsIENocm9tZSdzIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiBjb25zdHJ1Y3RvcixcbiAgLy8gYmVjYXVzZSB0aGlzIHdvdWxkIHRocm93IGFuIFJUQ1NkcFR5cGUgZXJyb3IuXG4gIHZhciBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uSW5pdERpY3QgJiYgZGVzY3JpcHRpb25Jbml0RGljdC50eXBlID09PSAncm9sbGJhY2snXG4gICAgPyBudWxsXG4gICAgOiBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGRlc2NyaXB0aW9uSW5pdERpY3QpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBfZGVzY3JpcHRpb246IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNkcDoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBkZXNjcmlwdGlvbiA/IGRlc2NyaXB0aW9uLnNkcCA6IGRlc2NyaXB0aW9uSW5pdERpY3Quc2RwXG4gICAgfSxcbiAgICB0eXBlOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGRlc2NyaXB0aW9uID8gZGVzY3JpcHRpb24udHlwZSA6IGRlc2NyaXB0aW9uSW5pdERpY3QudHlwZVxuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hyb21lUlRDU2Vzc2lvbkRlc2NyaXB0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3Nlc3Npb25kZXNjcmlwdGlvbi9jaHJvbWUuanNcbi8vIG1vZHVsZSBpZCA9IDIzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///231\n");

/***/ }),
/* 232 */
/*!*******************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/util/latch.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defer = __webpack_require__(/*! ./ */ 210).defer;\n\nvar states = {\n  high: new Set(['low']),\n  low: new Set(['high'])\n};\n\n/**\n * Construct a {@link Latch}.\n * @class\n * @classdesc A {@link Latch} has two states (\"high\" and \"low\") and methods for\n * transitioning between them ({@link Latch#raise} and {@link Latch#lower}).\n * @param {string} [initialState=\"low\"] - either \"high\" or \"low\"\n */\nfunction Latch(initialState) {\n  if (!(this instanceof Latch)) {\n    return new Latch(initialState);\n  }\n  var state = initialState || 'low';\n  Object.defineProperties(this, {\n    _state: {\n      set: function(_state) {\n        if (state !== _state) {\n          state = _state;\n          var whenDeferreds = this._whenDeferreds.get(state);\n          whenDeferreds.forEach(function(deferred) {\n            deferred.resolve(this);\n          }, this);\n          whenDeferreds.clear();\n        }\n      },\n      get: function() {\n        return state;\n      }\n    },\n    _whenDeferreds: {\n      value: new Map([\n        ['high', new Set()],\n        ['low', new Set()]\n      ])\n    },\n    state: {\n      enumerable: true,\n      get: function() {\n        return this._state;\n      }\n    }\n  });\n}\n\n/**\n * Transition to \"low\".\n * @returns {this}\n * @throws {Error}\n */\nLatch.prototype.lower = function lower() {\n  return this.transition('low');\n};\n\n/**\n * Transition to \"high\".\n * @returns {this}\n * @throws {Error}\n */\nLatch.prototype.raise = function raise() {\n  return this.transition('high');\n};\n\n/**\n * Transition to a new state.\n * @param {string} newState\n * @returns {this}\n * @throws {Error}\n */\nLatch.prototype.transition = function transition(newState) {\n  if (!states[this.state].has(newState)) {\n    throw createUnreachableStateError(this.state, newState);\n  }\n  this._state = newState;\n  return this;\n};\n\n/**\n * Return a Promise that resolves when the {@link Latch} transitions to\n * the specified state.\n * @param {string} state\n * @returns {Promise<this>}\n */\nLatch.prototype.when = function when(state) {\n  if (this.state === state) {\n    return Promise.resolve(this);\n  }\n  if (!states[this.state].has(state)) {\n    return Promise.reject(createUnreachableStateError(this.state, state));\n  }\n  var deferred = defer();\n  this._whenDeferreds.get(state).add(deferred);\n  return deferred.promise;\n};\n\n/**\n * Create an unreachable state Error.\n * @param {string} from - state to be transitioned from\n * @param {string} to - state to be transitioned to\n * @return {Error}\n */\nfunction createUnreachableStateError(from, to) {\n  return new Error('Cannot transition from \"' + from + '\" to \"' + to + '\"');\n}\n\nmodule.exports = Latch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3V0aWwvbGF0Y2guanM/M2I3OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsYUFBSTs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBLGlCQUFpQixZQUFZO0FBQzdCLGdDQUFnQyxrQkFBa0IsTUFBTSxrQkFBa0I7QUFDMUUsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZlciA9IHJlcXVpcmUoJy4vJykuZGVmZXI7XG5cbnZhciBzdGF0ZXMgPSB7XG4gIGhpZ2g6IG5ldyBTZXQoWydsb3cnXSksXG4gIGxvdzogbmV3IFNldChbJ2hpZ2gnXSlcbn07XG5cbi8qKlxuICogQ29uc3RydWN0IGEge0BsaW5rIExhdGNofS5cbiAqIEBjbGFzc1xuICogQGNsYXNzZGVzYyBBIHtAbGluayBMYXRjaH0gaGFzIHR3byBzdGF0ZXMgKFwiaGlnaFwiIGFuZCBcImxvd1wiKSBhbmQgbWV0aG9kcyBmb3JcbiAqIHRyYW5zaXRpb25pbmcgYmV0d2VlbiB0aGVtICh7QGxpbmsgTGF0Y2gjcmFpc2V9IGFuZCB7QGxpbmsgTGF0Y2gjbG93ZXJ9KS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaW5pdGlhbFN0YXRlPVwibG93XCJdIC0gZWl0aGVyIFwiaGlnaFwiIG9yIFwibG93XCJcbiAqL1xuZnVuY3Rpb24gTGF0Y2goaW5pdGlhbFN0YXRlKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMYXRjaCkpIHtcbiAgICByZXR1cm4gbmV3IExhdGNoKGluaXRpYWxTdGF0ZSk7XG4gIH1cbiAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlIHx8ICdsb3cnO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgX3N0YXRlOiB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uKF9zdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUgIT09IF9zdGF0ZSkge1xuICAgICAgICAgIHN0YXRlID0gX3N0YXRlO1xuICAgICAgICAgIHZhciB3aGVuRGVmZXJyZWRzID0gdGhpcy5fd2hlbkRlZmVycmVkcy5nZXQoc3RhdGUpO1xuICAgICAgICAgIHdoZW5EZWZlcnJlZHMuZm9yRWFjaChmdW5jdGlvbihkZWZlcnJlZCkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICB3aGVuRGVmZXJyZWRzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgfSxcbiAgICBfd2hlbkRlZmVycmVkczoge1xuICAgICAgdmFsdWU6IG5ldyBNYXAoW1xuICAgICAgICBbJ2hpZ2gnLCBuZXcgU2V0KCldLFxuICAgICAgICBbJ2xvdycsIG5ldyBTZXQoKV1cbiAgICAgIF0pXG4gICAgfSxcbiAgICBzdGF0ZToge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFRyYW5zaXRpb24gdG8gXCJsb3dcIi5cbiAqIEByZXR1cm5zIHt0aGlzfVxuICogQHRocm93cyB7RXJyb3J9XG4gKi9cbkxhdGNoLnByb3RvdHlwZS5sb3dlciA9IGZ1bmN0aW9uIGxvd2VyKCkge1xuICByZXR1cm4gdGhpcy50cmFuc2l0aW9uKCdsb3cnKTtcbn07XG5cbi8qKlxuICogVHJhbnNpdGlvbiB0byBcImhpZ2hcIi5cbiAqIEByZXR1cm5zIHt0aGlzfVxuICogQHRocm93cyB7RXJyb3J9XG4gKi9cbkxhdGNoLnByb3RvdHlwZS5yYWlzZSA9IGZ1bmN0aW9uIHJhaXNlKCkge1xuICByZXR1cm4gdGhpcy50cmFuc2l0aW9uKCdoaWdoJyk7XG59O1xuXG4vKipcbiAqIFRyYW5zaXRpb24gdG8gYSBuZXcgc3RhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3U3RhdGVcbiAqIEByZXR1cm5zIHt0aGlzfVxuICogQHRocm93cyB7RXJyb3J9XG4gKi9cbkxhdGNoLnByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24gdHJhbnNpdGlvbihuZXdTdGF0ZSkge1xuICBpZiAoIXN0YXRlc1t0aGlzLnN0YXRlXS5oYXMobmV3U3RhdGUpKSB7XG4gICAgdGhyb3cgY3JlYXRlVW5yZWFjaGFibGVTdGF0ZUVycm9yKHRoaXMuc3RhdGUsIG5ld1N0YXRlKTtcbiAgfVxuICB0aGlzLl9zdGF0ZSA9IG5ld1N0YXRlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHtAbGluayBMYXRjaH0gdHJhbnNpdGlvbnMgdG9cbiAqIHRoZSBzcGVjaWZpZWQgc3RhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhdGVcbiAqIEByZXR1cm5zIHtQcm9taXNlPHRoaXM+fVxuICovXG5MYXRjaC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uIHdoZW4oc3RhdGUpIHtcbiAgaWYgKHRoaXMuc3RhdGUgPT09IHN0YXRlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgfVxuICBpZiAoIXN0YXRlc1t0aGlzLnN0YXRlXS5oYXMoc3RhdGUpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNyZWF0ZVVucmVhY2hhYmxlU3RhdGVFcnJvcih0aGlzLnN0YXRlLCBzdGF0ZSkpO1xuICB9XG4gIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gIHRoaXMuX3doZW5EZWZlcnJlZHMuZ2V0KHN0YXRlKS5hZGQoZGVmZXJyZWQpO1xuICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIHVucmVhY2hhYmxlIHN0YXRlIEVycm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGZyb20gLSBzdGF0ZSB0byBiZSB0cmFuc2l0aW9uZWQgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IHRvIC0gc3RhdGUgdG8gYmUgdHJhbnNpdGlvbmVkIHRvXG4gKiBAcmV0dXJuIHtFcnJvcn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVW5yZWFjaGFibGVTdGF0ZUVycm9yKGZyb20sIHRvKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0Nhbm5vdCB0cmFuc2l0aW9uIGZyb20gXCInICsgZnJvbSArICdcIiB0byBcIicgKyB0byArICdcIicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExhdGNoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3V0aWwvbGF0Y2guanNcbi8vIG1vZHVsZSBpZCA9IDIzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///232\n");

/***/ }),
/* 233 */
/*!**************************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcsessiondescription/firefox.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals mozRTCSessionDescription, RTCSessionDescription */\n\n\nmodule.exports = typeof RTCSessionDescription !== 'undefined'\n  ? RTCSessionDescription\n  : mozRTCSessionDescription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3Nlc3Npb25kZXNjcmlwdGlvbi9maXJlZm94LmpzPzk2OWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYjtBQUNBO0FBQ0EiLCJmaWxlIjoiMjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBtb3pSVENTZXNzaW9uRGVzY3JpcHRpb24sIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSVENTZXNzaW9uRGVzY3JpcHRpb24gIT09ICd1bmRlZmluZWQnXG4gID8gUlRDU2Vzc2lvbkRlc2NyaXB0aW9uXG4gIDogbW96UlRDU2Vzc2lvbkRlc2NyaXB0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3Nlc3Npb25kZXNjcmlwdGlvbi9maXJlZm94LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///233\n");

/***/ }),
/* 234 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/audiotrack.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrack = __webpack_require__(/*! ./mediatrack */ 235);\n\n/**\n * An {@link AudioTrack} is a {@link Track} representing audio.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link AudioTrack} has\n *   started; if the {@link AudioTrack} started, there is enough audio data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link AudioTrack} is\n *   enabled; if the {@link AudioTrack} is not enabled, it is \"muted\"\n * @property {Track.Kind} kind - \"audio\"\n * @property {MediaStreamTrack} mediaStreamTrack - An audio MediaStreamTrack\n * @emits AudioTrack#disabled\n * @emits AudioTrack#enabled\n * @emits AudioTrack#started\n */\n\nvar AudioTrack = function (_MediaTrack) {\n  _inherits(AudioTrack, _MediaTrack);\n\n  /**\n   * Construct an {@link AudioTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  function AudioTrack(mediaTrackTransceiver, options) {\n    _classCallCheck(this, AudioTrack);\n\n    return _possibleConstructorReturn(this, (AudioTrack.__proto__ || Object.getPrototypeOf(AudioTrack)).call(this, mediaTrackTransceiver, options));\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(AudioTrack, [{\n    key: '_start',\n    value: function _start() {\n      _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), '_start', this).call(this);\n      if (this._dummyEl) {\n        this._detachElement(this._dummyEl);\n      }\n    }\n\n    /**\n     * Create an HTMLAudioElement and attach the {@link AudioTrack} to it.\n     *\n     * The HTMLAudioElement's <code>srcObject</code> will be set to a new\n     * MediaStream containing the {@link AudioTrack}'s MediaStreamTrack.\n     *\n     * @returns {HTMLAudioElement} audioElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * Video.createLocalAudioTrack().then(function(audioTrack) {\n     *   const audioElement = audioTrack.attach();\n     *   document.body.appendChild(audioElement);\n     * });\n    */ /**\n       * Attach the {@link AudioTrack} to an existing HTMLMediaElement. The\n       * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n       *\n       * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n       * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\n       * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n       * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n       * MediaStreamTracks of the same kind on the MediaStream, this method removes\n       * them.\n       *\n       * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const Video = require('twilio-video');\n       *\n       * const videoElement = document.createElement('video');\n       * document.body.appendChild(videoElement);\n       *\n       * Video.createLocalAudioTrack().then(function(audioTrack) {\n       *   audioTrack.attach(videoElement);\n       * });\n       */ /**\n          * Attach the {@link AudioTrack} to an HTMLMediaElement selected by\n          * <code>document.querySelector</code>. The HTMLMediaElement could be an\n          * HTMLAudioElement or an HTMLVideoElement.\n          *\n          * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n          * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\n          * MediaStreamTrack; otherwise, it adds the {@link AudioTrack}'s\n          * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n          * MediaStreamTracks of the same kind on the MediaStream, this method removes\n          * them.\n          *\n          * @param {string} selector - A query selector for the HTMLMediaElement to\n          *   attach to\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * const Video = require('twilio-video');\n          *\n          * const videoElement = document.createElement('video');\n          * videoElement.id = 'my-video-element';\n          * document.body.appendChild(videoElement);\n          *\n          * Video.createLocalAudioTrack().then(function(track) {\n          *   track.attach('#my-video-element');\n          * });\n          */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      return _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), 'attach', this).apply(this, arguments);\n    }\n\n    /**\n     * Detach the {@link AudioTrack} from all previously attached HTMLMediaElements.\n     * @returns {Array<HTMLMediaElement>} mediaElements\n     * @example\n     * const mediaElements = audioTrack.detach();\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\n    */ /**\n       * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement.\n       * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n       *   which the {@link AudioTrack} is attached\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const videoElement = document.getElementById('my-video-element');\n       * audioTrack.detach(videoElement).remove();\n       */ /**\n          * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement\n          *   specified by <code>document.querySelector</code>.\n          * @param {string} selector - The query selector of HTMLMediaElement to which\n          *    the {@link AudioTrack} is attached\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * audioTrack.detach('#my-video-element').remove();\n          */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n  }]);\n\n  return AudioTrack;\n}(MediaTrack);\n\n/**\n * The {@link AudioTrack} was disabled, i.e. \"muted\".\n * @param {AudioTrack} track - The {@link AudioTrack} that was disabled\n * @event AudioTrack#disabled\n */\n\n/**\n * The {@link AudioTrack} was enabled, i.e. \"unmuted\".\n * @param {AudioTrack} track - The {@link AudioTrack} that was enabled\n * @event AudioTrack#enabled\n */\n\n/**\n * The {@link AudioTrack} started. This means there is enough audio data to\n * begin playback.\n * @param {AudioTrack} track - The {@link AudioTrack} that started\n * @event AudioTrack#started\n */\n\nmodule.exports = AudioTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///234\n");

/***/ }),
/* 235 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/mediatrack.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaStream = __webpack_require__(/*! @twilio/webrtc */ 212).MediaStream;\nvar Track = __webpack_require__(/*! ./ */ 225);\n\n/**\n * A {@link MediaTrack} represents audio or video that can be sent to or\n * received from a {@link Room}.\n * @extends Track\n * @property {Track.ID} id - This {@link Track}'s ID\n * @property {boolean} isStarted - Whether or not the {@link MediaTrack} has\n *   started\n * @property {boolean} isEnabled - Whether or not the {@link MediaTrack} is\n *   enabled (i.e., whether it is paused or muted)\n * @property {Track.Kind} kind - The kind of the underlying\n *   MediaStreamTrack, \"audio\" or \"video\"\n * @property {MediaStreamTrack} mediaStreamTrack - The underlying\n *   MediaStreamTrack\n * @emits MediaTrack#disabled\n * @emits MediaTrack#enabled\n * @emits MediaTrack#started\n */\n\nvar MediaTrack = function (_Track) {\n  _inherits(MediaTrack, _Track);\n\n  /**\n   * Construct a {@link MediaTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  function MediaTrack(mediaTrackTransceiver, options) {\n    _classCallCheck(this, MediaTrack);\n\n    var _this = _possibleConstructorReturn(this, (MediaTrack.__proto__ || Object.getPrototypeOf(MediaTrack)).call(this, mediaTrackTransceiver.id, mediaTrackTransceiver.kind, options));\n\n    var isStarted = false;\n\n    options = Object.assign({\n      MediaStream: MediaStream\n    }, options);\n\n    /* istanbul ignore next */\n    Object.defineProperties(_this, {\n      _attachments: {\n        value: new Set()\n      },\n      _isStarted: {\n        get: function get() {\n          return isStarted;\n        },\n        set: function set(_isStarted) {\n          isStarted = _isStarted;\n        }\n      },\n      _MediaStream: {\n        value: options.MediaStream\n      },\n      isStarted: {\n        get: function get() {\n          return isStarted;\n        }\n      },\n      mediaStreamTrack: {\n        enumerable: true,\n        value: mediaTrackTransceiver.track\n      }\n    });\n\n    _this._initialize();\n    return _this;\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(MediaTrack, [{\n    key: '_start',\n    value: function _start() {\n      this._log.debug('Started');\n      this._isStarted = true;\n      if (this._dummyEl) {\n        this._dummyEl.oncanplay = null;\n      }\n      // eslint-disable-next-line no-use-before-define\n      this.emit('started', this);\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_initialize',\n    value: function _initialize() {\n      var self = this;\n\n      this._log.debug('Initializing');\n      this._dummyEl = this._createElement();\n\n      this.mediaStreamTrack.addEventListener('ended', function onended() {\n        self._end();\n        self.mediaStreamTrack.removeEventListener('ended', onended);\n      });\n\n      if (this._dummyEl) {\n        this._dummyEl.muted = true;\n        this._dummyEl.oncanplay = this._start.bind(this, this._dummyEl);\n        this._attach(this._dummyEl);\n        this._attachments.delete(this._dummyEl);\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_end',\n    value: function _end() {\n      this._log.debug('Ended');\n      if (this._dummyEl) {\n        this._detachElement(this._dummyEl);\n        this._dummyEl.oncanplay = null;\n      }\n    }\n  }, {\n    key: 'attach',\n    value: function attach(el) {\n      if (typeof el === 'string') {\n        el = this._selectElement(el);\n      } else if (!el) {\n        el = this._createElement();\n      }\n      this._log.debug('Attempting to attach to element:', el);\n      el = this._attach(el);\n\n      return el;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_attach',\n    value: function _attach(el) {\n      var mediaStream = el.srcObject;\n      if (!(mediaStream instanceof this._MediaStream)) {\n        mediaStream = new this._MediaStream();\n      }\n\n      var getTracks = this.mediaStreamTrack.kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n\n      mediaStream[getTracks]().forEach(function (mediaStreamTrack) {\n        mediaStream.removeTrack(mediaStreamTrack);\n      });\n      mediaStream.addTrack(this.mediaStreamTrack);\n\n      // NOTE(mroberts): Although we don't necessarily need to reset `srcObject`,\n      // we've been doing it here for a while, and it turns out it has allowed us\n      // to sidestep the following issue:\n      //\n      //   https://bugs.chromium.org/p/chromium/issues/detail?id=720258\n      //\n      el.srcObject = mediaStream;\n      el.autoplay = true;\n      el.playsInline = true;\n\n      if (!this._attachments.has(el)) {\n        this._attachments.add(el);\n      }\n\n      return el;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_selectElement',\n    value: function _selectElement(selector) {\n      var el = document.querySelector(selector);\n\n      if (!el) {\n        throw new Error('Selector matched no element: ' + selector);\n      }\n\n      return el;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_createElement',\n    value: function _createElement() {\n      return typeof document !== 'undefined' ? document.createElement(this.kind) : null;\n    }\n  }, {\n    key: 'detach',\n    value: function detach(el) {\n      var els = void 0;\n\n      if (typeof el === 'string') {\n        els = [this._selectElement(el)];\n      } else if (!el) {\n        els = this._getAllAttachedElements();\n      } else {\n        els = [el];\n      }\n\n      this._log.debug('Attempting to detach from elements:', els);\n      this._detachElements(els);\n      return el ? els[0] : els;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_detachElements',\n    value: function _detachElements(elements) {\n      return elements.map(this._detachElement.bind(this));\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_detachElement',\n    value: function _detachElement(el) {\n      if (!this._attachments.has(el)) {\n        return el;\n      }\n\n      var mediaStream = el.srcObject;\n      if (mediaStream instanceof this._MediaStream) {\n        mediaStream.removeTrack(this.mediaStreamTrack);\n        // NOTE(mroberts): It's as if, in Chrome and Safari, the <audio> element's\n        // `srcObject` setter is taking a \"snapshot\" of the MediaStream's\n        // MediaStreamTracks in order to playback; hence, calls to `removeTrack`\n        // don't take effect unless you set the <audio> element's `srcObject` again.\n        //\n        //   https://bugs.chromium.org/p/chromium/issues/detail?id=749928\n        //\n        el.srcObject = mediaStream;\n      }\n\n      this._attachments.delete(el);\n      return el;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getAllAttachedElements',\n    value: function _getAllAttachedElements() {\n      var els = [];\n\n      this._attachments.forEach(function (el) {\n        els.push(el);\n      });\n\n      return els;\n    }\n  }]);\n\n  return MediaTrack;\n}(Track);\n\nmodule.exports = MediaTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///235\n");

/***/ }),
/* 236 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localmediatrack.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrackSender = __webpack_require__(/*! ./sender */ 237);\n\nfunction mixinLocalMediaTrack(AudioOrVideoTrack) {\n  /**\n   * A {@link LocalMediaTrack} represents audio or video that your\n   * {@link LocalParticipant} is sending to a {@link Room}. As such, it can be\n   * enabled and disabled with {@link LocalMediaTrack#enable} and\n   * {@link LocalMediaTrack#disable} or stopped completely with\n   * {@link LocalMediaTrack#stop}.\n   * @property {boolean} isStopped - Whether or not the {@link LocalMediaTrack} is stopped\n   * @emits LocalMediaTrack#stopped\n   */\n  return function (_AudioOrVideoTrack) {\n    _inherits(LocalMediaTrack, _AudioOrVideoTrack);\n\n    /**\n     * Construct a {@link LocalMediaTrack} from a MediaStreamTrack.\n     * @param {MediaStreamTrack} mediaStreamTrack - The underlying MediaStreamTrack\n     * @param {LocalTrackOptions} [options] - {@link LocalTrack} options\n     */\n    function LocalMediaTrack(mediaStreamTrack, options) {\n      _classCallCheck(this, LocalMediaTrack);\n\n      options = Object.assign({}, options);\n\n      var mediaTrackSender = new MediaTrackSender(mediaStreamTrack);\n\n      var _this = _possibleConstructorReturn(this, (LocalMediaTrack.__proto__ || Object.getPrototypeOf(LocalMediaTrack)).call(this, mediaTrackSender, options));\n\n      Object.defineProperties(_this, {\n        _didCallEnd: {\n          value: false,\n          writable: true\n        },\n        _trackSender: {\n          value: mediaTrackSender\n        },\n        isEnabled: {\n          enumerable: true,\n          get: function get() {\n            return mediaStreamTrack.enabled;\n          }\n        },\n        isStopped: {\n          get: function get() {\n            return mediaStreamTrack.readyState === 'ended';\n          }\n        }\n      });\n      return _this;\n    }\n\n    /**\n     * @private\n     */\n\n\n    _createClass(LocalMediaTrack, [{\n      key: '_end',\n      value: function _end() {\n        if (this._didCallEnd) {\n          return;\n        }\n        _get(LocalMediaTrack.prototype.__proto__ || Object.getPrototypeOf(LocalMediaTrack.prototype), '_end', this).call(this);\n        this._didCallEnd = true;\n        this.emit('stopped', this);\n      }\n    }, {\n      key: 'enable',\n      value: function enable(enabled) {\n        enabled = typeof enabled === 'boolean' ? enabled : true;\n        if (enabled !== this.mediaStreamTrack.enabled) {\n          this._log.info((enabled ? 'En' : 'Dis') + 'abling');\n          this.mediaStreamTrack.enabled = enabled;\n          this.emit(enabled ? 'enabled' : 'disabled', this);\n        }\n        return this;\n      }\n    }, {\n      key: 'disable',\n      value: function disable() {\n        return this.enable(false);\n      }\n    }, {\n      key: 'stop',\n      value: function stop() {\n        this._log.info('Stopping');\n        this.mediaStreamTrack.stop();\n        this._end();\n        return this;\n      }\n    }]);\n\n    return LocalMediaTrack;\n  }(AudioOrVideoTrack);\n}\n\nmodule.exports = mixinLocalMediaTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///236\n");

/***/ }),
/* 237 */
/*!*************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/sender.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrackTransceiver = __webpack_require__(/*! ./transceiver */ 238);\n\n/**\n * A {@link MediaTrackSender} represents one or more local RTCRtpSenders.\n * @extends MediaTrackTransceiver\n */\n\nvar MediaTrackSender = function (_MediaTrackTransceive) {\n  _inherits(MediaTrackSender, _MediaTrackTransceive);\n\n  /**\n   * Construct a {@link MediaTrackSender}.\n   * @param {MediaStreamTrack} mediaStreamTrack\n   */\n  function MediaTrackSender(mediaStreamTrack) {\n    _classCallCheck(this, MediaTrackSender);\n\n    var _this = _possibleConstructorReturn(this, (MediaTrackSender.__proto__ || Object.getPrototypeOf(MediaTrackSender)).call(this, mediaStreamTrack.id, mediaStreamTrack));\n\n    Object.defineProperties(_this, {\n      _senders: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Add an RTCRtpSender.\n   * @param {RTCRtpSender} sender\n   * @returns {this}\n   */\n\n\n  _createClass(MediaTrackSender, [{\n    key: 'addSender',\n    value: function addSender(sender) {\n      this._senders.add(sender);\n      return this;\n    }\n\n    /**\n     * Remove an RTCRtpSender.\n     * @param {RTCRtpSender} sender\n     * @returns {this}\n     */\n\n  }, {\n    key: 'removeSender',\n    value: function removeSender(sender) {\n      this._senders.delete(sender);\n      return this;\n    }\n  }]);\n\n  return MediaTrackSender;\n}(MediaTrackTransceiver);\n\nmodule.exports = MediaTrackSender;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9zZW5kZXIuanM/NDFiNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSw0QkFBNEIsbUJBQU8sQ0FBQyx3QkFBZTs7QUFFbkQ7QUFDQSxNQUFNLHVCQUF1QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsdUJBQXVCO0FBQ3pDLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QixpQkFBaUI7QUFDakI7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE1lZGlhVHJhY2tUcmFuc2NlaXZlciA9IHJlcXVpcmUoJy4vdHJhbnNjZWl2ZXInKTtcblxuLyoqXG4gKiBBIHtAbGluayBNZWRpYVRyYWNrU2VuZGVyfSByZXByZXNlbnRzIG9uZSBvciBtb3JlIGxvY2FsIFJUQ1J0cFNlbmRlcnMuXG4gKiBAZXh0ZW5kcyBNZWRpYVRyYWNrVHJhbnNjZWl2ZXJcbiAqL1xuXG52YXIgTWVkaWFUcmFja1NlbmRlciA9IGZ1bmN0aW9uIChfTWVkaWFUcmFja1RyYW5zY2VpdmUpIHtcbiAgX2luaGVyaXRzKE1lZGlhVHJhY2tTZW5kZXIsIF9NZWRpYVRyYWNrVHJhbnNjZWl2ZSk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBNZWRpYVRyYWNrU2VuZGVyfS5cbiAgICogQHBhcmFtIHtNZWRpYVN0cmVhbVRyYWNrfSBtZWRpYVN0cmVhbVRyYWNrXG4gICAqL1xuICBmdW5jdGlvbiBNZWRpYVRyYWNrU2VuZGVyKG1lZGlhU3RyZWFtVHJhY2spIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFUcmFja1NlbmRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWVkaWFUcmFja1NlbmRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1lZGlhVHJhY2tTZW5kZXIpKS5jYWxsKHRoaXMsIG1lZGlhU3RyZWFtVHJhY2suaWQsIG1lZGlhU3RyZWFtVHJhY2spKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfc2VuZGVyczoge1xuICAgICAgICB2YWx1ZTogbmV3IFNldCgpXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBSVENSdHBTZW5kZXIuXG4gICAqIEBwYXJhbSB7UlRDUnRwU2VuZGVyfSBzZW5kZXJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE1lZGlhVHJhY2tTZW5kZXIsIFt7XG4gICAga2V5OiAnYWRkU2VuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU2VuZGVyKHNlbmRlcikge1xuICAgICAgdGhpcy5fc2VuZGVycy5hZGQoc2VuZGVyKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBSVENSdHBTZW5kZXIuXG4gICAgICogQHBhcmFtIHtSVENSdHBTZW5kZXJ9IHNlbmRlclxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVTZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTZW5kZXIoc2VuZGVyKSB7XG4gICAgICB0aGlzLl9zZW5kZXJzLmRlbGV0ZShzZW5kZXIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lZGlhVHJhY2tTZW5kZXI7XG59KE1lZGlhVHJhY2tUcmFuc2NlaXZlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFUcmFja1NlbmRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L21lZGlhL3RyYWNrL3NlbmRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///237\n");

/***/ }),
/* 238 */
/*!******************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/transceiver.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackTransceiver = __webpack_require__(/*! ../../transceiver */ 239);\n\n/**\n * A {@link MediaTrackTransceiver} represents either one or more local\n * RTCRtpSenders, or a single RTCRtpReceiver.\n * @extends TrackTransceiver\n * @property {MediaStreamTrack} track\n */\n\nvar MediaTrackTransceiver = function (_TrackTransceiver) {\n  _inherits(MediaTrackTransceiver, _TrackTransceiver);\n\n  /**\n   * Construct a {@link MediaTrackTransceiver}.\n   * @param {Track.ID} id - The MediaStreamTrack ID signaled through RSP/SDP\n   * @param {MediaStreamTrack} mediaStreamTrack\n   */\n  function MediaTrackTransceiver(id, mediaStreamTrack) {\n    _classCallCheck(this, MediaTrackTransceiver);\n\n    var _this = _possibleConstructorReturn(this, (MediaTrackTransceiver.__proto__ || Object.getPrototypeOf(MediaTrackTransceiver)).call(this, id, mediaStreamTrack.kind));\n\n    Object.defineProperties(_this, {\n      readyState: {\n        enumerable: true,\n        get: function get() {\n          return mediaStreamTrack.readyState;\n        }\n      },\n      track: {\n        enumerable: true,\n        value: mediaStreamTrack\n      }\n    });\n    return _this;\n  }\n\n  return MediaTrackTransceiver;\n}(TrackTransceiver);\n\nmodule.exports = MediaTrackTransceiver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay90cmFuc2NlaXZlci5qcz84NThlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsdUJBQXVCLG1CQUFPLENBQUMsNEJBQW1COztBQUVsRDtBQUNBLE1BQU0sNEJBQTRCO0FBQ2xDO0FBQ0E7QUFDQSxjQUFjLGlCQUFpQjtBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLDRCQUE0QjtBQUM5QyxhQUFhLFNBQVM7QUFDdEIsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFRyYWNrVHJhbnNjZWl2ZXIgPSByZXF1aXJlKCcuLi8uLi90cmFuc2NlaXZlcicpO1xuXG4vKipcbiAqIEEge0BsaW5rIE1lZGlhVHJhY2tUcmFuc2NlaXZlcn0gcmVwcmVzZW50cyBlaXRoZXIgb25lIG9yIG1vcmUgbG9jYWxcbiAqIFJUQ1J0cFNlbmRlcnMsIG9yIGEgc2luZ2xlIFJUQ1J0cFJlY2VpdmVyLlxuICogQGV4dGVuZHMgVHJhY2tUcmFuc2NlaXZlclxuICogQHByb3BlcnR5IHtNZWRpYVN0cmVhbVRyYWNrfSB0cmFja1xuICovXG5cbnZhciBNZWRpYVRyYWNrVHJhbnNjZWl2ZXIgPSBmdW5jdGlvbiAoX1RyYWNrVHJhbnNjZWl2ZXIpIHtcbiAgX2luaGVyaXRzKE1lZGlhVHJhY2tUcmFuc2NlaXZlciwgX1RyYWNrVHJhbnNjZWl2ZXIpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgTWVkaWFUcmFja1RyYW5zY2VpdmVyfS5cbiAgICogQHBhcmFtIHtUcmFjay5JRH0gaWQgLSBUaGUgTWVkaWFTdHJlYW1UcmFjayBJRCBzaWduYWxlZCB0aHJvdWdoIFJTUC9TRFBcbiAgICogQHBhcmFtIHtNZWRpYVN0cmVhbVRyYWNrfSBtZWRpYVN0cmVhbVRyYWNrXG4gICAqL1xuICBmdW5jdGlvbiBNZWRpYVRyYWNrVHJhbnNjZWl2ZXIoaWQsIG1lZGlhU3RyZWFtVHJhY2spIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFUcmFja1RyYW5zY2VpdmVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNZWRpYVRyYWNrVHJhbnNjZWl2ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNZWRpYVRyYWNrVHJhbnNjZWl2ZXIpKS5jYWxsKHRoaXMsIGlkLCBtZWRpYVN0cmVhbVRyYWNrLmtpbmQpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICByZWFkeVN0YXRlOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBtZWRpYVN0cmVhbVRyYWNrLnJlYWR5U3RhdGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFjazoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogbWVkaWFTdHJlYW1UcmFja1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBNZWRpYVRyYWNrVHJhbnNjZWl2ZXI7XG59KFRyYWNrVHJhbnNjZWl2ZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhVHJhY2tUcmFuc2NlaXZlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L21lZGlhL3RyYWNrL3RyYW5zY2VpdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///238\n");

/***/ }),
/* 239 */
/*!******************************************************!*\
  !*** ./node_modules/twilio-video/es5/transceiver.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\n/**\n * A {@link TrackTransceiver} represents either one or more local RTCRtpSenders\n * or RTCDataChannels, or a single RTCRtpReceiver or remote RTCDataChannel.\n * @extends EventEmitter\n * @property {Track.ID} id\n * @property {Track.kind} kind\n */\n\nvar TrackTransceiver = function (_EventEmitter) {\n  _inherits(TrackTransceiver, _EventEmitter);\n\n  /**\n   * Construct a {@link TrackTransceiver}.\n   * @param {Track.ID} id\n   * @param {Track.kind} kind\n   */\n  function TrackTransceiver(id, kind) {\n    _classCallCheck(this, TrackTransceiver);\n\n    var _this = _possibleConstructorReturn(this, (TrackTransceiver.__proto__ || Object.getPrototypeOf(TrackTransceiver)).call(this));\n\n    Object.defineProperties(_this, {\n      id: {\n        enumerable: true,\n        value: id\n      },\n      kind: {\n        enumerable: true,\n        value: kind\n      }\n    });\n    return _this;\n  }\n\n  return TrackTransceiver;\n}(EventEmitter);\n\nmodule.exports = TrackTransceiver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS90cmFuc2NlaXZlci5qcz8xNDE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsbUJBQW1CLG1CQUFPLENBQUMsaUJBQVE7O0FBRW5DO0FBQ0EsTUFBTSx1QkFBdUI7QUFDN0I7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjLFdBQVc7QUFDekI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekMsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMjM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbi8qKlxuICogQSB7QGxpbmsgVHJhY2tUcmFuc2NlaXZlcn0gcmVwcmVzZW50cyBlaXRoZXIgb25lIG9yIG1vcmUgbG9jYWwgUlRDUnRwU2VuZGVyc1xuICogb3IgUlRDRGF0YUNoYW5uZWxzLCBvciBhIHNpbmdsZSBSVENSdHBSZWNlaXZlciBvciByZW1vdGUgUlRDRGF0YUNoYW5uZWwuXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBwcm9wZXJ0eSB7VHJhY2suSUR9IGlkXG4gKiBAcHJvcGVydHkge1RyYWNrLmtpbmR9IGtpbmRcbiAqL1xuXG52YXIgVHJhY2tUcmFuc2NlaXZlciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhUcmFja1RyYW5zY2VpdmVyLCBfRXZlbnRFbWl0dGVyKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIFRyYWNrVHJhbnNjZWl2ZXJ9LlxuICAgKiBAcGFyYW0ge1RyYWNrLklEfSBpZFxuICAgKiBAcGFyYW0ge1RyYWNrLmtpbmR9IGtpbmRcbiAgICovXG4gIGZ1bmN0aW9uIFRyYWNrVHJhbnNjZWl2ZXIoaWQsIGtpbmQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhY2tUcmFuc2NlaXZlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVHJhY2tUcmFuc2NlaXZlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRyYWNrVHJhbnNjZWl2ZXIpKS5jYWxsKHRoaXMpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBpZDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogaWRcbiAgICAgIH0sXG4gICAgICBraW5kOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBraW5kXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIFRyYWNrVHJhbnNjZWl2ZXI7XG59KEV2ZW50RW1pdHRlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhY2tUcmFuc2NlaXZlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3RyYW5zY2VpdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///239\n");

/***/ }),
/* 240 */
/*!***********************************************************!*\
  !*** ./node_modules/twilio-video/es5/data/transceiver.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackTransceiver = __webpack_require__(/*! ../transceiver */ 239);\n\n/**\n * A {@link DataTrackTransceiver} represents either one or more local\n * RTCDataChannels or a single remote RTCDataChannel. It can be used to send or\n * receive data.\n * @extends TrackTransceiver\n * @property {string} id\n * @property {string} kind - \"data\"\n * @property {?number} maxPacketLifeTime\n * @property {?number} maxRetransmits\n * @property {boolean} ordered\n */\n\nvar DataTrackTransceiver = function (_TrackTransceiver) {\n  _inherits(DataTrackTransceiver, _TrackTransceiver);\n\n  /**\n   * Construct a {@link DataTrackTransceiver}.\n   * @param {string} id\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n  function DataTrackTransceiver(id, maxPacketLifeTime, maxRetransmits, ordered) {\n    _classCallCheck(this, DataTrackTransceiver);\n\n    var _this = _possibleConstructorReturn(this, (DataTrackTransceiver.__proto__ || Object.getPrototypeOf(DataTrackTransceiver)).call(this, id, 'data'));\n\n    Object.defineProperties(_this, {\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: ordered\n      }\n    });\n    return _this;\n  }\n\n  return DataTrackTransceiver;\n}(TrackTransceiver);\n\nmodule.exports = DataTrackTransceiver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3RyYW5zY2VpdmVyLmpzPzA2NDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSx1QkFBdUIsbUJBQU8sQ0FBQyx5QkFBZ0I7O0FBRS9DO0FBQ0EsTUFBTSwyQkFBMkI7QUFDakM7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLDJCQUEyQjtBQUM3QyxhQUFhLE9BQU87QUFDcEIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFRyYWNrVHJhbnNjZWl2ZXIgPSByZXF1aXJlKCcuLi90cmFuc2NlaXZlcicpO1xuXG4vKipcbiAqIEEge0BsaW5rIERhdGFUcmFja1RyYW5zY2VpdmVyfSByZXByZXNlbnRzIGVpdGhlciBvbmUgb3IgbW9yZSBsb2NhbFxuICogUlRDRGF0YUNoYW5uZWxzIG9yIGEgc2luZ2xlIHJlbW90ZSBSVENEYXRhQ2hhbm5lbC4gSXQgY2FuIGJlIHVzZWQgdG8gc2VuZCBvclxuICogcmVjZWl2ZSBkYXRhLlxuICogQGV4dGVuZHMgVHJhY2tUcmFuc2NlaXZlclxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkXG4gKiBAcHJvcGVydHkge3N0cmluZ30ga2luZCAtIFwiZGF0YVwiXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IG1heFBhY2tldExpZmVUaW1lXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IG1heFJldHJhbnNtaXRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG9yZGVyZWRcbiAqL1xuXG52YXIgRGF0YVRyYWNrVHJhbnNjZWl2ZXIgPSBmdW5jdGlvbiAoX1RyYWNrVHJhbnNjZWl2ZXIpIHtcbiAgX2luaGVyaXRzKERhdGFUcmFja1RyYW5zY2VpdmVyLCBfVHJhY2tUcmFuc2NlaXZlcik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBEYXRhVHJhY2tUcmFuc2NlaXZlcn0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcGFyYW0gez9udW1iZXJ9IG1heFBhY2tldExpZmVUaW1lXG4gICAqIEBwYXJhbSB7P251bWJlcn0gbWF4UmV0cmFuc21pdHNcbiAgICogQHBhcmFtIHtib29sZWFufSBvcmRlcmVkXG4gICAqL1xuICBmdW5jdGlvbiBEYXRhVHJhY2tUcmFuc2NlaXZlcihpZCwgbWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtaXRzLCBvcmRlcmVkKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFUcmFja1RyYW5zY2VpdmVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEYXRhVHJhY2tUcmFuc2NlaXZlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERhdGFUcmFja1RyYW5zY2VpdmVyKSkuY2FsbCh0aGlzLCBpZCwgJ2RhdGEnKSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgbWF4UGFja2V0TGlmZVRpbWU6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG1heFBhY2tldExpZmVUaW1lXG4gICAgICB9LFxuICAgICAgbWF4UmV0cmFuc21pdHM6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG1heFJldHJhbnNtaXRzXG4gICAgICB9LFxuICAgICAgb3JkZXJlZDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogb3JkZXJlZFxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBEYXRhVHJhY2tUcmFuc2NlaXZlcjtcbn0oVHJhY2tUcmFuc2NlaXZlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVRyYWNrVHJhbnNjZWl2ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3RyYW5zY2VpdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///240\n");

/***/ }),
/* 241 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/videotrack.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrack = __webpack_require__(/*! ./mediatrack */ 235);\n\n/**\n * A {@link VideoTrack} is a {@link Track} representing video.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link VideoTrack} has\n *   started; if the {@link VideoTrack} started, there is enough video data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link VideoTrack} is\n *   enabled; if the {@link VideoTrack} is not enabled, it is \"paused\"\n * @property {VideoTrack.Dimensions} dimensions - The {@link VideoTrack}'s\n *   {@link VideoTrack.Dimensions}\n * @property {Track.Kind} kind - \"video\"\n * @property {MediaStreamTrack} mediaStreamTrack - A video MediaStreamTrack\n * @emits VideoTrack#dimensionsChanged\n * @emits VideoTrack#disabled\n * @emits VideoTrack#enabled\n * @emits VideoTrack#started\n */\n\nvar VideoTrack = function (_MediaTrack) {\n  _inherits(VideoTrack, _MediaTrack);\n\n  /**\n   * Construct a {@link VideoTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  function VideoTrack(mediaTrackTransceiver, options) {\n    var _ret;\n\n    _classCallCheck(this, VideoTrack);\n\n    var _this = _possibleConstructorReturn(this, (VideoTrack.__proto__ || Object.getPrototypeOf(VideoTrack)).call(this, mediaTrackTransceiver, options));\n\n    Object.defineProperties(_this, {\n      dimensions: {\n        enumerable: true,\n        value: {\n          width: null,\n          height: null\n        }\n      }\n    });\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(VideoTrack, [{\n    key: '_initialize',\n    value: function _initialize() {\n      var _this2 = this;\n\n      _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_initialize', this).call(this);\n      if (this._dummyEl) {\n        this._dummyEl.onloadedmetadata = function () {\n          if (dimensionsChanged(_this2, _this2._dummyEl)) {\n            _this2.dimensions.width = _this2._dummyEl.videoWidth;\n            _this2.dimensions.height = _this2._dummyEl.videoHeight;\n          }\n        };\n        this._dummyEl.onresize = function () {\n          if (dimensionsChanged(_this2, _this2._dummyEl)) {\n            _this2.dimensions.width = _this2._dummyEl.videoWidth;\n            _this2.dimensions.height = _this2._dummyEl.videoHeight;\n            if (_this2.isStarted) {\n              _this2._log.debug('Dimensions changed:', _this2.dimensions);\n              _this2.emit(VideoTrack.DIMENSIONS_CHANGED, _this2);\n            }\n          }\n        };\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_start',\n    value: function _start(dummyEl) {\n      this.dimensions.width = dummyEl.videoWidth;\n      this.dimensions.height = dummyEl.videoHeight;\n\n      this._log.debug('Dimensions:', this.dimensions);\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_start', this).call(this, dummyEl);\n    }\n\n    /**\n     * Create an HTMLVideoElement and attach the {@link VideoTrack} to it.\n     *\n     * The HTMLVideoElement's <code>srcObject</code> will be set to a new\n     * MediaStream containing the {@link VideoTrack}'s MediaStreamTrack.\n     *\n     * @returns {HTMLVideoElement} videoElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const videoElement = videoTrack.attach();\n     *   document.body.appendChild(videoElement);\n     * });\n    */ /**\n       * Attach the {@link VideoTrack} to an existing HTMLMediaElement. The\n       * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n       *\n       * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n       * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n       * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n       * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n       * MediaStreamTracks of the same kind on the MediaStream, this method removes\n       * them.\n       *\n       * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const Video = require('twilio-video');\n       *\n       * const videoElement = document.createElement('video');\n       * document.body.appendChild(videoElement);\n       *\n       * Video.createLocalVideoTrack().then(function(videoTrack) {\n       *   videoTrack.attach(videoElement);\n       * });\n       */ /**\n          * Attach the {@link VideoTrack} to an HTMLMediaElement selected by\n          * <code>document.querySelector</code>. The HTMLMediaElement could be an\n          * HTMLAudioElement or an HTMLVideoElement.\n          *\n          * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n          * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n          * MediaStreamTrack; otherwise, it adds the {@link VideoTrack}'s\n          * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n          * MediaStreamTracks of the same kind on the MediaStream, this method removes\n          * them.\n          *\n          * @param {string} selector - A query selector for the HTMLMediaElement to\n          *   attach to\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * const Video = require('twilio-video');\n          *\n          * const videoElement = document.createElement('video');\n          * videoElement.id = 'my-video-element';\n          * document.body.appendChild(videoElement);\n          *\n          * Video.createLocalVideoTrack().then(function(track) {\n          *   track.attach('#my-video-element');\n          * });\n          */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'attach', this).apply(this, arguments);\n    }\n\n    /**\n     * Detach the {@link VideoTrack} from all previously attached HTMLMediaElements.\n     * @returns {Array<HTMLMediaElement>} mediaElements\n     * @example\n     * const mediaElements = videoTrack.detach();\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\n    */ /**\n       * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement.\n       * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n       *   which the {@link VideoTrack} is attached\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const videoElement = document.getElementById('my-video-element');\n       * videoTrack.detach(videoElement).remove();\n       */ /**\n          * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement\n          *   specified by <code>document.querySelector</code>.\n          * @param {string} selector - The query selector of HTMLMediaElement to which\n          *    the {@link VideoTrack} is attached\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * videoTrack.detach('#my-video-element').remove();\n          */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n  }]);\n\n  return VideoTrack;\n}(MediaTrack);\n\nVideoTrack.DIMENSIONS_CHANGED = 'dimensionsChanged';\n\nfunction dimensionsChanged(track, elem) {\n  return track.dimensions.width !== elem.videoWidth || track.dimensions.height !== elem.videoHeight;\n}\n\n/**\n * A {@link VideoTrack}'s width and height.\n * @typedef {object} VideoTrack.Dimensions\n * @property {?number} width - The {@link VideoTrack}'s width or null if the\n *   {@link VideoTrack} has not yet started\n * @property {?number} height - The {@link VideoTrack}'s height or null if the\n *   {@link VideoTrack} has not yet started\n */\n\n/**\n * The {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event VideoTrack#dimensionsChanged\n */\n\n/**\n * The {@link VideoTrack} was disabled, i.e. \"paused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was disabled\n * @event VideoTrack#disabled\n */\n\n/**\n * The {@link VideoTrack} was enabled, i.e. \"unpaused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was enabled\n * @event VideoTrack#enabled\n */\n\n/**\n * The {@link VideoTrack} started. This means there is enough video data to\n * begin playback.\n * @param {VideoTrack} track - The {@link VideoTrack} that started\n * @event VideoTrack#started\n */\n\nmodule.exports = VideoTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///241\n");

/***/ }),
/* 242 */
/*!****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/webaudio/audiocontext.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals webkitAudioContext, AudioContext */\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NativeAudioContext = typeof AudioContext !== 'undefined' ? AudioContext : typeof webkitAudioContext !== 'undefined' ? webkitAudioContext : null;\n\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\n\nvar AudioContextFactory = function () {\n  /**\n   * @param {AudioContextFactoryOptions} [options]\n   */\n  function AudioContextFactory(options) {\n    _classCallCheck(this, AudioContextFactory);\n\n    options = Object.assign({\n      AudioContext: NativeAudioContext\n    }, options);\n    Object.defineProperties(this, {\n      _AudioContext: {\n        value: options.AudioContext\n      },\n      _audioContext: {\n        value: null,\n        writable: true\n      },\n      _holders: {\n        value: new Set()\n      },\n      AudioContextFactory: {\n        enumerable: true,\n        value: AudioContextFactory\n      }\n    });\n  }\n\n  /**\n   * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n   * call to {@link AudioContextFactory#release}. Calling this increments an\n   * internal reference count.\n   * @param {*} holder - The object to hold a reference to the AudioContext\n   * @returns {?AudioContext}\n   */\n\n\n  _createClass(AudioContextFactory, [{\n    key: 'getOrCreate',\n    value: function getOrCreate(holder) {\n      if (!this._holders.has(holder)) {\n        this._holders.add(holder);\n        if (this._AudioContext && !this._audioContext) {\n          try {\n            this._audioContext = new this._AudioContext();\n          } catch (error) {\n            // Do nothing;\n          }\n        }\n      }\n      return this._audioContext;\n    }\n\n    /**\n     * Decrement the internal reference count. If it reaches zero, close and destroy\n     * the AudioContext.\n     * @param {*} holder - The object that held a reference to the AudioContext\n     * @returns {void}\n     */\n\n  }, {\n    key: 'release',\n    value: function release(holder) {\n      if (this._holders.has(holder)) {\n        this._holders.delete(holder);\n        if (!this._holders.size && this._audioContext) {\n          this._audioContext.close();\n          this._audioContext = null;\n        }\n      }\n    }\n  }]);\n\n  return AudioContextFactory;\n}();\n\nmodule.exports = new AudioContextFactory();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS93ZWJhdWRpby9hdWRpb2NvbnRleHQuanM/YzI4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2Sjs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxhQUFhO0FBQzNCOztBQUVBO0FBQ0EsSUFBSSwwQkFBMEI7QUFDOUI7QUFDQSxjQUFjLG9CQUFvQjtBQUNsQyxNQUFNLDBCQUEwQjtBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsbUJBQW1CLHNDQUFzQztBQUN6RCxjQUFjLGtDQUFrQztBQUNoRDtBQUNBLGFBQWEsRUFBRTtBQUNmLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQjtBQUNqQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIHdlYmtpdEF1ZGlvQ29udGV4dCwgQXVkaW9Db250ZXh0ICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBOYXRpdmVBdWRpb0NvbnRleHQgPSB0eXBlb2YgQXVkaW9Db250ZXh0ICE9PSAndW5kZWZpbmVkJyA/IEF1ZGlvQ29udGV4dCA6IHR5cGVvZiB3ZWJraXRBdWRpb0NvbnRleHQgIT09ICd1bmRlZmluZWQnID8gd2Via2l0QXVkaW9Db250ZXh0IDogbnVsbDtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEF1ZGlvQ29udGV4dEZhY3RvcnlPcHRpb25zXG4gKiBAcHJvcGVydHkge0F1ZGlvQ29udGV4dH0gW0F1ZGlvQ29udGV4dF0gLSBUaGUgQXVkaW9Db250ZXh0IGNvbnN0cnVjdG9yXG4gKi9cblxuLyoqXG4gKiB7QGxpbmsgQXVkaW9Db250ZXh0RmFjdG9yeX0gZW5zdXJlcyB3ZSBjb25zdHJ1Y3QgYXQgbW9zdCBvbmUgQXVkaW9Db250ZXh0XG4gKiBhdCBhIHRpbWUsIGFuZCB0aGF0IGl0IGlzIGV2ZW50dWFsbHkgY2xvc2VkIHdoZW4gd2Ugbm8gbG9uZ2VyIG5lZWQgaXQuXG4gKiBAcHJvcGVydHkge0F1ZGlvQ29udGV4dEZhY3Rvcnl9IEF1ZGlvQ29udGV4dEZhY3RvcnkgLSBUaGVcbiAqICAge0BsaW5rIEF1ZGlvQ29udGV4dEZhY3Rvcnl9IGNvbnN0cnVjdG9yXG4gKi9cblxudmFyIEF1ZGlvQ29udGV4dEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0F1ZGlvQ29udGV4dEZhY3RvcnlPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGZ1bmN0aW9uIEF1ZGlvQ29udGV4dEZhY3Rvcnkob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdWRpb0NvbnRleHRGYWN0b3J5KTtcblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIEF1ZGlvQ29udGV4dDogTmF0aXZlQXVkaW9Db250ZXh0XG4gICAgfSwgb3B0aW9ucyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgX0F1ZGlvQ29udGV4dDoge1xuICAgICAgICB2YWx1ZTogb3B0aW9ucy5BdWRpb0NvbnRleHRcbiAgICAgIH0sXG4gICAgICBfYXVkaW9Db250ZXh0OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIF9ob2xkZXJzOiB7XG4gICAgICAgIHZhbHVlOiBuZXcgU2V0KClcbiAgICAgIH0sXG4gICAgICBBdWRpb0NvbnRleHRGYWN0b3J5OiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBBdWRpb0NvbnRleHRGYWN0b3J5XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRWFjaCBjYWxsIHRvIHtAbGluayBBdWRpb0NvbnRleHRGYWN0b3J5I2dldE9yQ3JlYXRlfSBzaG91bGQgYmUgcGFpcmVkIHdpdGggYVxuICAgKiBjYWxsIHRvIHtAbGluayBBdWRpb0NvbnRleHRGYWN0b3J5I3JlbGVhc2V9LiBDYWxsaW5nIHRoaXMgaW5jcmVtZW50cyBhblxuICAgKiBpbnRlcm5hbCByZWZlcmVuY2UgY291bnQuXG4gICAqIEBwYXJhbSB7Kn0gaG9sZGVyIC0gVGhlIG9iamVjdCB0byBob2xkIGEgcmVmZXJlbmNlIHRvIHRoZSBBdWRpb0NvbnRleHRcbiAgICogQHJldHVybnMgez9BdWRpb0NvbnRleHR9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEF1ZGlvQ29udGV4dEZhY3RvcnksIFt7XG4gICAga2V5OiAnZ2V0T3JDcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPckNyZWF0ZShob2xkZXIpIHtcbiAgICAgIGlmICghdGhpcy5faG9sZGVycy5oYXMoaG9sZGVyKSkge1xuICAgICAgICB0aGlzLl9ob2xkZXJzLmFkZChob2xkZXIpO1xuICAgICAgICBpZiAodGhpcy5fQXVkaW9Db250ZXh0ICYmICF0aGlzLl9hdWRpb0NvbnRleHQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fYXVkaW9Db250ZXh0ID0gbmV3IHRoaXMuX0F1ZGlvQ29udGV4dCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2F1ZGlvQ29udGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWNyZW1lbnQgdGhlIGludGVybmFsIHJlZmVyZW5jZSBjb3VudC4gSWYgaXQgcmVhY2hlcyB6ZXJvLCBjbG9zZSBhbmQgZGVzdHJveVxuICAgICAqIHRoZSBBdWRpb0NvbnRleHQuXG4gICAgICogQHBhcmFtIHsqfSBob2xkZXIgLSBUaGUgb2JqZWN0IHRoYXQgaGVsZCBhIHJlZmVyZW5jZSB0byB0aGUgQXVkaW9Db250ZXh0XG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbGVhc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKGhvbGRlcikge1xuICAgICAgaWYgKHRoaXMuX2hvbGRlcnMuaGFzKGhvbGRlcikpIHtcbiAgICAgICAgdGhpcy5faG9sZGVycy5kZWxldGUoaG9sZGVyKTtcbiAgICAgICAgaWYgKCF0aGlzLl9ob2xkZXJzLnNpemUgJiYgdGhpcy5fYXVkaW9Db250ZXh0KSB7XG4gICAgICAgICAgdGhpcy5fYXVkaW9Db250ZXh0LmNsb3NlKCk7XG4gICAgICAgICAgdGhpcy5fYXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb0NvbnRleHRGYWN0b3J5O1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBBdWRpb0NvbnRleHRGYWN0b3J5KCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS93ZWJhdWRpby9hdWRpb2NvbnRleHQuanNcbi8vIG1vZHVsZSBpZCA9IDI0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///242\n");

/***/ }),
/* 243 */
/*!******************************************************!*\
  !*** ./node_modules/twilio-video/es5/participant.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteAudioTrack = __webpack_require__(/*! ./media/track/remoteaudiotrack */ 286);\nvar RemoteAudioTrackPublication = __webpack_require__(/*! ./media/track/remoteaudiotrackpublication */ 287);\nvar RemoteDataTrack = __webpack_require__(/*! ./media/track/remotedatatrack */ 288);\nvar RemoteDataTrackPublication = __webpack_require__(/*! ./media/track/remotedatatrackpublication */ 289);\nvar RemoteVideoTrack = __webpack_require__(/*! ./media/track/remotevideotrack */ 290);\nvar RemoteVideoTrackPublication = __webpack_require__(/*! ./media/track/remotevideotrackpublication */ 291);\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\nvar util = __webpack_require__(/*! ./util */ 206);\n\nvar nInstances = 0;\n\n/**\n * {@link NetworkQualityLevel} is a value from 0–5, inclusive, representing the\n * quality of a network connection.\n * @typedef {number} NetworkQualityLevel\n */\n\n/**\n * @extends EventEmitter\n * @property {Map<Track.ID, AudioTrack>} audioTracks -\n *    The {@link Participant}'s {@link AudioTrack}s\n * @property {Map<Track.SID, AudioTrackPublication>} audioTrackPublications -\n *    The {@link Participant}'s {@link AudioTrackPublication}s\n * @property {Map<Track.ID, DataTrack>} dataTracks -\n *    The {@link Participant}'s {@link DataTrack}s\n * @property {Map<Track.SID, DataTrackPublication>} dataTrackPublications -\n *    The {@link Participant}'s {@link DataTrackPublication}s.\n * @property {Participant.Identity} identity - The identity of the {@link Participant}\n * @property {Participant.SID} sid - The {@link Participant}'s SID\n * @property {string} state - \"connected\", \"disconnected\" or \"failed\"\n * @property {Map<Track.ID, Track>} tracks -\n *    The {@link Participant}'s {@link Track}s\n * @property {Map<Track.SID, TrackPublication>} trackPublications -\n *    The {@link Participant}'s {@link TrackPublication}s\n * @property {Map<Track.ID, VideoTrack>} videoTracks -\n *    The {@link Participant}'s {@link VideoTrack}s\n * @property {Map<Track.SID, VideoTrackPublication>} videoTrackPublications -\n *    The {@link Participant}'s {@link VideoTrackPublication}s\n * @emits Participant#disconnected\n * @emits Particiapnt#networkQualityLevelChanged\n * @emits Participant#trackAdded\n * @emits Participant#trackDimensionsChanged\n * @emits Participant#trackDisabled\n * @emits Participant#trackEnabled\n * @emits Participant#trackRemoved\n * @emits Participant#trackStarted\n */\n\nvar Participant = function (_EventEmitter) {\n  _inherits(Participant, _EventEmitter);\n\n  /**\n   * Construct a {@link Participant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n  function Participant(signaling, options) {\n    _classCallCheck(this, Participant);\n\n    var _this = _possibleConstructorReturn(this, (Participant.__proto__ || Object.getPrototypeOf(Participant)).call(this));\n\n    options = Object.assign({\n      RemoteAudioTrack: RemoteAudioTrack,\n      RemoteAudioTrackPublication: RemoteAudioTrackPublication,\n      RemoteDataTrack: RemoteDataTrack,\n      RemoteDataTrackPublication: RemoteDataTrackPublication,\n      RemoteVideoTrack: RemoteVideoTrack,\n      RemoteVideoTrackPublication: RemoteVideoTrackPublication,\n      tracks: []\n    }, options);\n\n    var indexed = indexTracksById(options.tracks);\n    var log = options.log.createLog('default', _this);\n    var audioTracks = new Map(indexed.audioTracks);\n    var dataTracks = new Map(indexed.dataTracks);\n    var tracks = new Map(indexed.tracks);\n    var videoTracks = new Map(indexed.videoTracks);\n\n    Object.defineProperties(_this, {\n      _RemoteAudioTrack: {\n        value: options.RemoteAudioTrack\n      },\n      _RemoteAudioTrackPublication: {\n        value: options.RemoteAudioTrackPublication\n      },\n      _RemoteDataTrack: {\n        value: options.RemoteDataTrack\n      },\n      _RemoteDataTrackPublication: {\n        value: options.RemoteDataTrackPublication\n      },\n      _RemoteVideoTrack: {\n        value: options.RemoteVideoTrack\n      },\n      _RemoteVideoTrackPublication: {\n        value: options.RemoteVideoTrackPublication\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _signaling: {\n        value: signaling\n      },\n      _trackEventReemitters: {\n        value: new Map()\n      },\n      _trackPublicationEventReemitters: {\n        value: new Map()\n      },\n      _trackSignalingUpdatedEventCallbacks: {\n        value: new Map()\n      },\n      audioTracks: {\n        enumerable: true,\n        value: audioTracks\n      },\n      audioTrackPublications: {\n        enumerable: true,\n        value: new Map()\n      },\n      dataTracks: {\n        enumerable: true,\n        value: dataTracks\n      },\n      dataTrackPublications: {\n        enumerable: true,\n        value: new Map()\n      },\n      identity: {\n        enumerable: true,\n        get: function get() {\n          return signaling.identity;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get: function get() {\n          return signaling.sid;\n        }\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: tracks\n      },\n      trackPublications: {\n        enumerable: true,\n        value: new Map()\n      },\n      videoTracks: {\n        enumerable: true,\n        value: videoTracks\n      },\n      videoTrackPublications: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n\n    _this.tracks.forEach(reemitTrackEvents.bind(null, _this));\n    signaling.on('networkQualityLevelChanged', function () {\n      return _this.emit('networkQualityLevelChanged', _this.networkQualityLevel);\n    });\n    reemitSignalingStateChangedEvents(_this, signaling);\n    log.info('Created a new Participant' + (_this.identity ? ': ' + _this.identity : ''));\n    return _this;\n  }\n\n  /**\n   * Get the {@link RemoteTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n\n\n  _createClass(Participant, [{\n    key: '_getTrackEvents',\n    value: function _getTrackEvents() {\n      return [['dimensionsChanged', 'trackDimensionsChanged'], ['disabled', 'trackDisabled'], ['enabled', 'trackEnabled'], ['message', 'trackMessage'], ['started', 'trackStarted']];\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getTrackPublicationEvents',\n    value: function _getTrackPublicationEvents() {\n      // NOTE(mmalavalli): 'trackDisabled' and 'trackEnabled' will be\n      // re-emitted from the RemoteTrackPublication instead of RemoteTrack\n      // in twilio-video.js@2.0.0 onwards.\n      return [];\n    }\n\n    /**\n     * Get the current {@link NetworkQualityLevel}, if any.\n     * @returns {?NetworkQualityLevel} networkQualityLevel - initially null\n     */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[Participant #' + this._instanceId + ': ' + this.sid + ']';\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrack} track\n     * @returns {?RemoteTrack}\n     */\n\n  }, {\n    key: '_addTrack',\n    value: function _addTrack(track) {\n      var log = this._log;\n      if (this.tracks.has(track._id)) {\n        return null;\n      }\n      this.tracks.set(track._id, track);\n\n      var tracksByKind = {\n        audio: this.audioTracks,\n        video: this.videoTracks,\n        data: this.dataTracks\n      }[track.kind];\n      tracksByKind.set(track._id, track);\n      reemitTrackEvents(this, track);\n\n      log.info('Added a new ' + util.trackClass(track) + ':', track._id);\n      log.debug(util.trackClass(track) + ':', track);\n      this.emit('trackAdded', track);\n\n      return track;\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n\n  }, {\n    key: '_addTrackPublication',\n    value: function _addTrackPublication(publication) {\n      var log = this._log;\n      if (this.trackPublications.has(publication.trackSid)) {\n        return null;\n      }\n      this.trackPublications.set(publication.trackSid, publication);\n\n      var trackPublicationsByKind = {\n        audio: this.audioTrackPublications,\n        data: this.dataTrackPublications,\n        video: this.videoTrackPublications\n      }[publication.kind];\n      trackPublicationsByKind.set(publication.trackSid, publication);\n      reemitTrackPublicationEvents(this, publication);\n\n      log.info('Added a new ' + util.trackPublicationClass(publication) + ':', publication.trackSid);\n      log.debug(util.trackPublicationClass(publication) + ':', publication);\n      return publication;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_handleTrackSignalingEvents',\n    value: function _handleTrackSignalingEvents() {\n      var log = this._log;\n      var self = this;\n\n      if (this.state === 'disconnected') {\n        return;\n      }\n\n      var RemoteAudioTrack = this._RemoteAudioTrack;\n      var RemoteAudioTrackPublication = this._RemoteAudioTrackPublication;\n      var RemoteVideoTrack = this._RemoteVideoTrack;\n      var RemoteVideoTrackPublication = this._RemoteVideoTrackPublication;\n      var RemoteDataTrack = this._RemoteDataTrack;\n      var RemoteDataTrackPublication = this._RemoteDataTrackPublication;\n      var signaling = this._signaling;\n\n      function trackSignalingAdded(signaling) {\n        var RemoteTrackPublication = {\n          audio: RemoteAudioTrackPublication,\n          data: RemoteDataTrackPublication,\n          video: RemoteVideoTrackPublication\n        }[signaling.kind];\n\n        var publication = new RemoteTrackPublication(signaling, { log: log });\n        self._addTrackPublication(publication);\n\n        var isSubscribed = signaling.isSubscribed;\n        if (isSubscribed) {\n          trackSignalingSubscribed(signaling);\n        }\n\n        self._trackSignalingUpdatedEventCallbacks.set(signaling.sid, function () {\n          if (isSubscribed !== signaling.isSubscribed) {\n            isSubscribed = signaling.isSubscribed;\n            if (isSubscribed) {\n              trackSignalingSubscribed(signaling);\n              return;\n            }\n            trackSignalingUnsubscribed(signaling);\n          }\n        });\n        signaling.on('updated', self._trackSignalingUpdatedEventCallbacks.get(signaling.sid));\n      }\n\n      function trackSignalingRemoved(signaling) {\n        if (signaling.isSubscribed) {\n          signaling.setTrackTransceiver(null);\n        }\n        var updated = self._trackSignalingUpdatedEventCallbacks.get(signaling.sid);\n        if (updated) {\n          signaling.removeListener('updated', updated);\n          self._trackSignalingUpdatedEventCallbacks.delete(signaling.id);\n        }\n        var publication = self.trackPublications.get(signaling.sid);\n        if (publication) {\n          self._removeTrackPublication(publication);\n        }\n      }\n\n      function trackSignalingSubscribed(signaling) {\n        var RemoteTrack = {\n          audio: RemoteAudioTrack,\n          video: RemoteVideoTrack,\n          data: RemoteDataTrack\n        }[signaling.kind];\n\n        var publication = self.trackPublications.get(signaling.sid);\n        var trackReceiver = signaling.trackTransceiver;\n\n        // NOTE(mroberts): It should never be the case that the TrackSignaling and\n        // MediaStreamTrack or DataTrackReceiver kinds disagree; however, just in\n        // case, we handle it here.\n        if (!RemoteTrack || signaling.kind !== trackReceiver.kind) {\n          return;\n        }\n\n        var track = signaling.kind === 'data' ? new RemoteTrack(trackReceiver, { log: log, name: signaling.name }) : new RemoteTrack(trackReceiver, signaling.isEnabled, { log: log, name: signaling.name });\n\n        self._addTrack(track, publication);\n      }\n\n      function trackSignalingUnsubscribed(signaling) {\n        var track = util.flatMap(self.tracks).find(function (track) {\n          return track.sid === signaling.sid;\n        });\n        var publication = self.trackPublications.get(signaling.sid);\n        if (track) {\n          self._removeTrack(track, publication);\n        }\n      }\n\n      signaling.on('trackAdded', trackSignalingAdded);\n      signaling.on('trackRemoved', trackSignalingRemoved);\n\n      signaling.tracks.forEach(trackSignalingAdded);\n\n      signaling.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          log.debug('Removing event listeners');\n          signaling.removeListener('stateChanged', stateChanged);\n          signaling.removeListener('trackAdded', trackSignalingAdded);\n          signaling.removeListener('trackRemoved', trackSignalingRemoved);\n        }\n      });\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrack} track\n     */\n\n  }, {\n    key: '_deleteTrack',\n    value: function _deleteTrack(track) {\n      this.tracks.delete(track._id);\n\n      var tracksByKind = {\n        audio: this.audioTracks,\n        video: this.videoTracks,\n        data: this.dataTracks\n      }[track.kind];\n      tracksByKind.delete(track._id);\n\n      var reemitters = this._trackEventReemitters.get(track._id) || new Map();\n      reemitters.forEach(function (reemitter, event) {\n        track.removeListener(event, reemitter);\n      });\n\n      var log = this._log;\n      log.info('Removed a ' + util.trackClass(track) + ':', track._id);\n      log.debug(util.trackClass(track) + ':', track);\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrack} track\n     * @returns {?RemoteTrack}\n     */\n\n  }, {\n    key: '_removeTrack',\n    value: function _removeTrack(track) {\n      if (!this.tracks.has(track._id)) {\n        return null;\n      }\n      track = this.tracks.get(track._id);\n      this._deleteTrack(track);\n      this.emit('trackRemoved', track);\n      return track;\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n\n  }, {\n    key: '_removeTrackPublication',\n    value: function _removeTrackPublication(publication) {\n      publication = this.trackPublications.get(publication.trackSid);\n      if (!publication) {\n        return null;\n      }\n      this.trackPublications.delete(publication.trackSid);\n\n      var trackPublicationsByKind = {\n        audio: this.audioTrackPublications,\n        data: this.dataTrackPublications,\n        video: this.videoTrackPublications\n      }[publication.kind];\n      trackPublicationsByKind.delete(publication.trackSid);\n\n      var reemitters = this._trackPublicationEventReemitters.get(publication.trackSid) || new Map();\n      reemitters.forEach(function (reemitter, event) {\n        publication.removeListener(event, reemitter);\n      });\n\n      var log = this._log;\n      log.info('Removed a ' + util.trackPublicationClass(publication) + ':', publication.trackSid);\n      log.debug(util.trackPublicationClass(publication) + ':', publication);\n      return publication;\n    }\n  }, {\n    key: 'networkQualityLevel',\n    get: function get() {\n      return this._signaling.networkQualityLevel;\n    }\n\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @private\n     * @deprecated - the decomposed levels are only used for debugging and will be\n     *   removed as soon as we are confident in our implementation\n     * @returns {?NetworkQualityLevels} networkQualityLevels - initially null\n     */\n\n  }, {\n    key: '_networkQualityLevels',\n    get: function get() {\n      return this._signaling.networkQualityLevels;\n    }\n  }]);\n\n  return Participant;\n}(EventEmitter);\n\n/**\n * A {@link Participant.SID} is a 34-character string starting with \"PA\"\n * that uniquely identifies a {@link Participant}.\n * @type string\n * @typedef Participant.SID\n */\n\n/**\n * A {@link Participant.Identity} is a string that identifies a\n * {@link Participant}. You can think of it like a name.\n * @typedef {string} Participant.Identity\n */\n\n/**\n * The {@link Participant} has disconnected.\n * @param {Participant} participant - The {@link Participant} that disconnected.\n * @event Participant#disconnected\n */\n\n/**\n * The {@link Participant}'s {@link NetworkQualityLevel} changed.\n * @param {NetworkQualityLevel} networkQualityLevel - The new\n *   {@link NetworkQualityLevel}\n * @event Participant#networkQualityLevelChanged\n */\n\n/**\n * A {@link Track} was added by the {@link Participant}.\n * @param {Track} track - The {@link Track} that was added\n * @event Participant#trackAdded\n * @deprecated\n */\n\n/**\n * One of the {@link Participant}'s {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event Participant#trackDimensionsChanged\n */\n\n/**\n * A {@link Track} was disabled by the {@link Participant}.\n * @param {Track} track - The {@link Track} that was disabled.\n * @event Participant#trackDisabled\n */\n\n/**\n * A {@link Track} was enabled by the {@link Participant}.\n * @param {Track} track - The {@link Track} that was enabled\n * @event Participant#trackEnabled\n */\n\n/**\n * A {@link Track} was removed by the {@link Participant}.\n * @param {Track} track - The {@link Track} that was removed\n * @event Participant#trackRemoved\n * @deprecated\n */\n\n/**\n * One of the {@link Participant}'s {@link Track}s started.\n * @param {Track} track - The {@link Track} that started\n * @event Participant#trackStarted\n */\n\n/**\n * Indexed {@link Track}s by {@link Track.ID}.\n * @typedef {object} IndexedTracks\n * @property {Array<{0: Track.ID, 1: AudioTrack}>} audioTracks - Indexed\n *   {@link AudioTrack}s\n * @property {Array<{0: Track.ID, 1: DataTrack}>} dataTracks - Indexed\n *   {@link DataTrack}s\n * @property {Array<{0: Track.ID, 1: Track}>} tracks - Indexed {@link Track}s\n * @property {Array<{0: Track.ID, 1: VideoTrack}>} videoTracks - Indexed\n *   {@link VideoTrack}s\n * @private\n */\n\n/**\n * Index tracks by {@link Track.ID}.\n * @param {Array<Track>} tracks\n * @returns {IndexedTracks}\n * @private\n */\n\n\nfunction indexTracksById(tracks) {\n  var indexedTracks = tracks.map(function (track) {\n    return [track._id, track];\n  });\n  var indexedAudioTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'audio';\n  });\n  var indexedVideoTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'video';\n  });\n  var indexedDataTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'data';\n  });\n\n  return {\n    audioTracks: indexedAudioTracks,\n    dataTracks: indexedDataTracks,\n    tracks: indexedTracks,\n    videoTracks: indexedVideoTracks\n  };\n}\n\n/**\n * Re-emit {@link ParticipantSignaling} 'stateChanged' events.\n * @param {Participant} participant\n * @param {ParticipantSignaling} signaling\n * @private\n */\nfunction reemitSignalingStateChangedEvents(participant, signaling) {\n  var log = participant._log;\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  // Reemit state transition events from the ParticipantSignaling.\n  signaling.on('stateChanged', function stateChanged(state) {\n    log.debug('Transitioned to state:', state);\n    participant.emit(state, participant);\n    if (state === 'disconnected') {\n      log.debug('Removing Track event reemitters');\n      signaling.removeListener('stateChanged', stateChanged);\n\n      participant.tracks.forEach(function (track) {\n        participant._trackEventReemitters.get(track._id).forEach(function (reemitter, event) {\n          track.removeListener(event, reemitter);\n        });\n      });\n      participant._trackEventReemitters.clear();\n\n      participant.trackPublications.forEach(function (publication) {\n        participant._trackPublicationEventReemitters.get(publication.trackSid).forEach(function (reemitter, event) {\n          publication.removeListener(event, reemitter);\n        });\n      });\n      participant._trackPublicationEventReemitters.clear();\n    }\n  });\n}\n\n/**\n * Re-emit {@link Track} events.\n * @param {Participant} participant\n * @param {Track} track\n * @private\n */\nfunction reemitTrackEvents(participant, track) {\n  var trackEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackEvents().forEach(function (eventPair) {\n    var trackEvent = eventPair[0];\n    var participantEvent = eventPair[1];\n\n    trackEventReemitters.set(trackEvent, function () {\n      var args = [participantEvent].concat([].slice.call(arguments));\n      return participant.emit.apply(participant, _toConsumableArray(args));\n    });\n\n    track.on(trackEvent, trackEventReemitters.get(trackEvent));\n  });\n\n  participant._trackEventReemitters.set(track._id, trackEventReemitters);\n}\n\n/**\n * Re-emit {@link TrackPublication} events.\n * @private\n * @param {Participant} participant\n * @param {TrackPublication} publication\n */\nfunction reemitTrackPublicationEvents(participant, publication) {\n  var publicationEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackPublicationEvents().forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        publicationEvent = _ref2[0],\n        participantEvent = _ref2[1];\n\n    publicationEventReemitters.set(publicationEvent, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      participant.emit.apply(participant, [participantEvent].concat(args, [publication]));\n    });\n    publication.on(publicationEvent, publicationEventReemitters.get(publicationEvent));\n  });\n\n  participant._trackPublicationEventReemitters.set(publication.trackSid, publicationEventReemitters);\n}\n\nmodule.exports = Participant;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///243\n");

/***/ }),
/* 244 */
/*!***********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remotemediatrack.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! ../../util */ 206),\n    deprecateEvents = _require.deprecateEvents;\n\nfunction mixinRemoteMediaTrack(AudioOrVideoTrack) {\n  /**\n   * A {@link RemoteMediaTrack} represents a {@link MediaTrack} published to a\n   * {@link Room} by a {@link RemoteParticipant}.\n   * @emits RemoteMediaTrack#disabled\n   * @emits RemoteMediaTrack#enabled\n   * @emits RemoteMediaTrack#unsubscribed\n   */\n  return function (_AudioOrVideoTrack) {\n    _inherits(RemoteMediaTrack, _AudioOrVideoTrack);\n\n    /**\n     * Construct a {@link RemoteMediaTrack}.\n     * @param {MediaTrackReceiver} mediaTrackReceiver\n     * @param {boolean} isEnabled\n     * @param {{log: Log, name: ?string}} options\n     */\n    function RemoteMediaTrack(mediaTrackReceiver, isEnabled, options) {\n      _classCallCheck(this, RemoteMediaTrack);\n\n      var _this = _possibleConstructorReturn(this, (RemoteMediaTrack.__proto__ || Object.getPrototypeOf(RemoteMediaTrack)).call(this, mediaTrackReceiver, options));\n\n      Object.defineProperties(_this, {\n        _isEnabled: {\n          value: isEnabled,\n          writable: true\n        },\n        _isSubscribed: {\n          value: true,\n          writable: true\n        },\n        _sid: {\n          value: null,\n          writable: true\n        }\n      });\n\n      deprecateEvents('RemoteMediaTrack', _this, new Map([['unsubscribed', null]]), _this._log);\n      return _this;\n    }\n\n    /**\n     * The {@link RemoteMediaTrack}'s ID.\n     * @property {Track.ID}\n     * @deprecated Use the parent {@link RemoteTrackPublication}'s .trackName or\n     *   .trackSid instead\n     */\n\n\n    _createClass(RemoteMediaTrack, [{\n      key: '_setEnabled',\n\n\n      /**\n       * @private\n       * @param {boolean} isEnabled\n       */\n      value: function _setEnabled(isEnabled) {\n        if (this._isEnabled !== isEnabled) {\n          this._isEnabled = isEnabled;\n          this.emit(this._isEnabled ? 'enabled' : 'disabled', this);\n        }\n      }\n\n      /**\n       * @private\n       * @param {Track.SID} sid\n       */\n\n    }, {\n      key: '_setSid',\n      value: function _setSid(sid) {\n        if (!this._sid) {\n          this._sid = sid;\n        }\n      }\n\n      /**\n       * @private\n       */\n\n    }, {\n      key: '_unsubscribe',\n      value: function _unsubscribe() {\n        if (this._isSubscribed) {\n          this._isSubscribed = false;\n          this.emit('unsubscribed', this);\n        }\n      }\n    }, {\n      key: 'id',\n      get: function get() {\n        this._log.deprecated('RemoteMediaTrack#id has been deprecated and is ' + 'scheduled for removal in twilio-video.js@2.0.0. Use the parent ' + 'RemoteTrackPublication\\'s .trackName or .trackSid instead.');\n        return this._id;\n      }\n\n      /**\n       * Whether the {@link RemoteMediaTrack} is enabled\n       * @property {boolean}\n       */\n\n    }, {\n      key: 'isEnabled',\n      get: function get() {\n        return this._isEnabled;\n      }\n\n      /**\n       * Whether the {@link RemoteMediaTrack} is subscribed to\n       * @property {boolean}\n       * @deprecated Use the parent {@link RemoteTrackPublication}'s .isSubscribed\n       *   instead\n       */\n\n    }, {\n      key: 'isSubscribed',\n      get: function get() {\n        this._log.deprecated('RemoteMediaTrack#isSubscribed has been deprecated and is ' + 'scheduled for removal in twilio-video.js@2.0.0. Use the ' + 'parent RemoteTrackPublication\\'s .isSubscribed instead.');\n        return this._isSubscribed;\n      }\n\n      /**\n       * The SID assigned to the {@link RemoteMediaTrack}\n       * @property {Track.SID}\n       */\n\n    }, {\n      key: 'sid',\n      get: function get() {\n        return this._sid;\n      }\n    }]);\n\n    return RemoteMediaTrack;\n  }(AudioOrVideoTrack);\n}\n\n/**\n * A {@link RemoteMediaTrack} was disabled.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   disabled\n * @event RemoteMediaTrack#disabled\n */\n\n/**\n * A {@link RemoteMediaTrack} was enabled.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   enabled\n * @event RemoteMediaTrack#enabled\n */\n\n/**\n * The {@link RemoteMediaTrack} was unsubscribed from.\n * @event RemoteMediaTrack#unsubscribed\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   unsubscribed from\n * @deprecated Use the parent {@link RemoteTrackPublication}'s \"unsubscribed\"\n *   event instead\n */\n\nmodule.exports = mixinRemoteMediaTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///244\n");

/***/ }),
/* 245 */
/*!***********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/trackpublication.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! events */ 207),\n    EventEmitter = _require.EventEmitter;\n\nvar _require2 = __webpack_require__(/*! ../../util */ 206),\n    buildLogLevels = _require2.buildLogLevels;\n\nvar _require3 = __webpack_require__(/*! ../../util/constants */ 208),\n    DEFAULT_LOG_LEVEL = _require3.DEFAULT_LOG_LEVEL;\n\nvar Log = __webpack_require__(/*! ../../util/log */ 214);\nvar nInstances = 0;\n\n/**\n * A {@link TrackPublication} represents a {@link Track} that\n * has been published to a {@link Room}.\n * @property {string} trackName - the published {@link Track}'s name\n * @property {Track.SID} trackSid - SID assigned to the published {@link Track}\n * @emits TrackPublication#trackDisabled\n * @emits TrackPublication#trackEnabled\n */\n\nvar TrackPublication = function (_EventEmitter) {\n  _inherits(TrackPublication, _EventEmitter);\n\n  /**\n   * Construct a {@link TrackPublication}.\n   * @param {string} trackName - the published {@link Track}'s name\n   * @param {Track.SID} trackSid - SID assigned to the {@link Track}\n   * @param {TrackPublicationOptions} options - {@link TrackPublication} options\n   */\n  function TrackPublication(trackName, trackSid, options) {\n    _classCallCheck(this, TrackPublication);\n\n    var _this = _possibleConstructorReturn(this, (TrackPublication.__proto__ || Object.getPrototypeOf(TrackPublication)).call(this));\n\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL\n    }, options);\n\n    var logLevels = buildLogLevels(options.logLevel);\n\n    Object.defineProperties(_this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      _log: {\n        value: options.log || new Log('default', _this, logLevels)\n      },\n      trackName: {\n        value: trackName\n      },\n      trackSid: {\n        value: trackSid\n      }\n    });\n    return _this;\n  }\n\n  _createClass(TrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[TrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return TrackPublication;\n}(EventEmitter);\n\n/**\n * The published {@link Track} was disabled.\n * @event TrackPublication#trackDisabled\n */\n\n/**\n * The published {@link Track} was enabled.\n * @event TrackPublication#trackEnabled\n */\n\n/**\n * A {@link LocalAudioTrackPublication} or a {@link RemoteAudioTrackPublication}.\n * @typedef {LocalAudioTrackPublication|RemoteAudioTrackPublication} AudioTrackPublication\n */\n\n/**\n * A {@link LocalDataTrackPublication} or a {@link RemoteDataTrackPublication}.\n * @typedef {LocalDataTrackPublication|RemoteDataTrackPublication} DataTrackPublication\n */\n\n/**\n * A {@link LocalVideoTrackPublication} or a {@link RemoteVideoTrackPublication}.\n * @typedef {LocalVideoTrackPublication|RemoteVideoTrackPublication} VideoTrackPublication\n */\n\n/**\n * {@link TrackPublication} options\n * @typedef {object} TrackPublicationOptions\n * @property {LogLevel|LogLevels} logLevel - Log level for 'media' modules\n */\n\nmodule.exports = TrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay90cmFja3B1YmxpY2F0aW9uLmpzPzQxNmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsZUFBZSxtQkFBTyxDQUFDLGlCQUFRO0FBQy9COztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLHFCQUFZO0FBQ3BDOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLCtCQUFzQjtBQUM5Qzs7QUFFQSxVQUFVLG1CQUFPLENBQUMseUJBQWdCO0FBQ2xDOztBQUVBO0FBQ0EsTUFBTSx1QkFBdUIsZUFBZSxZQUFZO0FBQ3hELDRCQUE0QixXQUFXO0FBQ3ZDLGNBQWMsT0FBTyw0QkFBNEIsWUFBWTtBQUM3RCxjQUFjLFVBQVUsMkNBQTJDO0FBQ25FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QyxhQUFhLE9BQU8sNEJBQTRCLFlBQVk7QUFDNUQsYUFBYSxVQUFVLGlDQUFpQztBQUN4RCxhQUFhLHdCQUF3QixZQUFZLHVCQUF1QjtBQUN4RTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTs7QUFFQTtBQUNBLE1BQU0saUNBQWlDLE9BQU8sa0NBQWtDO0FBQ2hGLGFBQWEsdURBQXVEO0FBQ3BFOztBQUVBO0FBQ0EsTUFBTSxnQ0FBZ0MsT0FBTyxpQ0FBaUM7QUFDOUUsYUFBYSxxREFBcUQ7QUFDbEU7O0FBRUE7QUFDQSxNQUFNLGlDQUFpQyxPQUFPLGtDQUFrQztBQUNoRixhQUFhLHVEQUF1RDtBQUNwRTs7QUFFQTtBQUNBLElBQUksdUJBQXVCO0FBQzNCLGFBQWEsT0FBTztBQUNwQixjQUFjLG1CQUFtQjtBQUNqQzs7QUFFQSIsImZpbGUiOiIyNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZXZlbnRzJyksXG4gICAgRXZlbnRFbWl0dGVyID0gX3JlcXVpcmUuRXZlbnRFbWl0dGVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vLi4vdXRpbCcpLFxuICAgIGJ1aWxkTG9nTGV2ZWxzID0gX3JlcXVpcmUyLmJ1aWxkTG9nTGV2ZWxzO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9jb25zdGFudHMnKSxcbiAgICBERUZBVUxUX0xPR19MRVZFTCA9IF9yZXF1aXJlMy5ERUZBVUxUX0xPR19MRVZFTDtcblxudmFyIExvZyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvbG9nJyk7XG52YXIgbkluc3RhbmNlcyA9IDA7XG5cbi8qKlxuICogQSB7QGxpbmsgVHJhY2tQdWJsaWNhdGlvbn0gcmVwcmVzZW50cyBhIHtAbGluayBUcmFja30gdGhhdFxuICogaGFzIGJlZW4gcHVibGlzaGVkIHRvIGEge0BsaW5rIFJvb219LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRyYWNrTmFtZSAtIHRoZSBwdWJsaXNoZWQge0BsaW5rIFRyYWNrfSdzIG5hbWVcbiAqIEBwcm9wZXJ0eSB7VHJhY2suU0lEfSB0cmFja1NpZCAtIFNJRCBhc3NpZ25lZCB0byB0aGUgcHVibGlzaGVkIHtAbGluayBUcmFja31cbiAqIEBlbWl0cyBUcmFja1B1YmxpY2F0aW9uI3RyYWNrRGlzYWJsZWRcbiAqIEBlbWl0cyBUcmFja1B1YmxpY2F0aW9uI3RyYWNrRW5hYmxlZFxuICovXG5cbnZhciBUcmFja1B1YmxpY2F0aW9uID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKFRyYWNrUHVibGljYXRpb24sIF9FdmVudEVtaXR0ZXIpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgVHJhY2tQdWJsaWNhdGlvbn0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFja05hbWUgLSB0aGUgcHVibGlzaGVkIHtAbGluayBUcmFja30ncyBuYW1lXG4gICAqIEBwYXJhbSB7VHJhY2suU0lEfSB0cmFja1NpZCAtIFNJRCBhc3NpZ25lZCB0byB0aGUge0BsaW5rIFRyYWNrfVxuICAgKiBAcGFyYW0ge1RyYWNrUHVibGljYXRpb25PcHRpb25zfSBvcHRpb25zIC0ge0BsaW5rIFRyYWNrUHVibGljYXRpb259IG9wdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIFRyYWNrUHVibGljYXRpb24odHJhY2tOYW1lLCB0cmFja1NpZCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFja1B1YmxpY2F0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUcmFja1B1YmxpY2F0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVHJhY2tQdWJsaWNhdGlvbikpLmNhbGwodGhpcykpO1xuXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgbG9nTGV2ZWw6IERFRkFVTFRfTE9HX0xFVkVMXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgbG9nTGV2ZWxzID0gYnVpbGRMb2dMZXZlbHMob3B0aW9ucy5sb2dMZXZlbCk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgX2luc3RhbmNlSWQ6IHtcbiAgICAgICAgdmFsdWU6IG5JbnN0YW5jZXMrK1xuICAgICAgfSxcbiAgICAgIF9sb2c6IHtcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMubG9nIHx8IG5ldyBMb2coJ2RlZmF1bHQnLCBfdGhpcywgbG9nTGV2ZWxzKVxuICAgICAgfSxcbiAgICAgIHRyYWNrTmFtZToge1xuICAgICAgICB2YWx1ZTogdHJhY2tOYW1lXG4gICAgICB9LFxuICAgICAgdHJhY2tTaWQ6IHtcbiAgICAgICAgdmFsdWU6IHRyYWNrU2lkXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRyYWNrUHVibGljYXRpb24sIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnW1RyYWNrUHVibGljYXRpb24gIycgKyB0aGlzLl9pbnN0YW5jZUlkICsgJzogJyArIHRoaXMudHJhY2tTaWQgKyAnXSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYWNrUHVibGljYXRpb247XG59KEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogVGhlIHB1Ymxpc2hlZCB7QGxpbmsgVHJhY2t9IHdhcyBkaXNhYmxlZC5cbiAqIEBldmVudCBUcmFja1B1YmxpY2F0aW9uI3RyYWNrRGlzYWJsZWRcbiAqL1xuXG4vKipcbiAqIFRoZSBwdWJsaXNoZWQge0BsaW5rIFRyYWNrfSB3YXMgZW5hYmxlZC5cbiAqIEBldmVudCBUcmFja1B1YmxpY2F0aW9uI3RyYWNrRW5hYmxlZFxuICovXG5cbi8qKlxuICogQSB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb259IG9yIGEge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbn0uXG4gKiBAdHlwZWRlZiB7TG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb258UmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9ufSBBdWRpb1RyYWNrUHVibGljYXRpb25cbiAqL1xuXG4vKipcbiAqIEEge0BsaW5rIExvY2FsRGF0YVRyYWNrUHVibGljYXRpb259IG9yIGEge0BsaW5rIFJlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9ufS5cbiAqIEB0eXBlZGVmIHtMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9ufFJlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9ufSBEYXRhVHJhY2tQdWJsaWNhdGlvblxuICovXG5cbi8qKlxuICogQSB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb259IG9yIGEge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbn0uXG4gKiBAdHlwZWRlZiB7TG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb258UmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9ufSBWaWRlb1RyYWNrUHVibGljYXRpb25cbiAqL1xuXG4vKipcbiAqIHtAbGluayBUcmFja1B1YmxpY2F0aW9ufSBvcHRpb25zXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBUcmFja1B1YmxpY2F0aW9uT3B0aW9uc1xuICogQHByb3BlcnR5IHtMb2dMZXZlbHxMb2dMZXZlbHN9IGxvZ0xldmVsIC0gTG9nIGxldmVsIGZvciAnbWVkaWEnIG1vZHVsZXNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay90cmFja3B1YmxpY2F0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///245\n");

/***/ }),
/* 246 */
/*!************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/statsreport.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LocalAudioTrackStats = __webpack_require__(/*! ./localaudiotrackstats */ 292);\nvar LocalVideoTrackStats = __webpack_require__(/*! ./localvideotrackstats */ 293);\nvar RemoteAudioTrackStats = __webpack_require__(/*! ./remoteaudiotrackstats */ 294);\nvar RemoteVideoTrackStats = __webpack_require__(/*! ./remotevideotrackstats */ 295);\n\n/**\n * Statistics report for an RTCPeerConnection.\n * @property {string} peerConnectionId - ID of the RTCPeerConnection\n * @property {Array<LocalAudioTrackStats>} localAudioTrackStats - List of {@link LocalAudioTrackStats}\n * @property {Array<LocalVideoTrackStats>} localVideoTrackStats - List of {@link LocalVideoTrackStats}\n * @property {Array<RemoteAudioTrackStats>} remoteAudioTrackStats - List of {@link RemoteAudioTrackStats}\n * @property {Array<RemoteVideoTrackStats>} remoteVideoTrackStats - List of {@link RemoteVideoTrackStats}\n */\n\nvar StatsReport =\n/**\n * @param {string} peerConnectionId - RTCPeerConnection ID\n * @param {StandardizedStatsResponse} statsResponse\n */\nfunction StatsReport(peerConnectionId, statsResponse) {\n  _classCallCheck(this, StatsReport);\n\n  if (typeof peerConnectionId !== 'string') {\n    throw new Error('RTCPeerConnection id must be a string');\n  }\n\n  Object.defineProperties(this, {\n    peerConnectionId: {\n      value: peerConnectionId,\n      enumerable: true\n    },\n    localAudioTrackStats: {\n      value: statsResponse.localAudioTrackStats.map(function (report) {\n        return new LocalAudioTrackStats(report.trackId, report);\n      }),\n      enumerable: true\n    },\n    localVideoTrackStats: {\n      value: statsResponse.localVideoTrackStats.map(function (report) {\n        return new LocalVideoTrackStats(report.trackId, report);\n      }),\n      enumerable: true\n    },\n    remoteAudioTrackStats: {\n      value: statsResponse.remoteAudioTrackStats.map(function (report) {\n        return new RemoteAudioTrackStats(report.trackId, report);\n      }),\n      enumerable: true\n    },\n    remoteVideoTrackStats: {\n      value: statsResponse.remoteVideoTrackStats.map(function (report) {\n        return new RemoteVideoTrackStats(report.trackId, report);\n      }),\n      enumerable: true\n    }\n  });\n};\n\nmodule.exports = StatsReport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zdGF0c3JlcG9ydC5qcz85MjUzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLDJCQUEyQixtQkFBTyxDQUFDLGlDQUF3QjtBQUMzRCwyQkFBMkIsbUJBQU8sQ0FBQyxpQ0FBd0I7QUFDM0QsNEJBQTRCLG1CQUFPLENBQUMsa0NBQXlCO0FBQzdELDRCQUE0QixtQkFBTyxDQUFDLGtDQUF5Qjs7QUFFN0Q7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLDRCQUE0QixpQ0FBaUM7QUFDM0UsY0FBYyw0QkFBNEIsaUNBQWlDO0FBQzNFLGNBQWMsNkJBQTZCLGtDQUFrQztBQUM3RSxjQUFjLDZCQUE2QixrQ0FBa0M7QUFDN0U7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLDBCQUEwQjtBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6IjI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIExvY2FsQXVkaW9UcmFja1N0YXRzID0gcmVxdWlyZSgnLi9sb2NhbGF1ZGlvdHJhY2tzdGF0cycpO1xudmFyIExvY2FsVmlkZW9UcmFja1N0YXRzID0gcmVxdWlyZSgnLi9sb2NhbHZpZGVvdHJhY2tzdGF0cycpO1xudmFyIFJlbW90ZUF1ZGlvVHJhY2tTdGF0cyA9IHJlcXVpcmUoJy4vcmVtb3RlYXVkaW90cmFja3N0YXRzJyk7XG52YXIgUmVtb3RlVmlkZW9UcmFja1N0YXRzID0gcmVxdWlyZSgnLi9yZW1vdGV2aWRlb3RyYWNrc3RhdHMnKTtcblxuLyoqXG4gKiBTdGF0aXN0aWNzIHJlcG9ydCBmb3IgYW4gUlRDUGVlckNvbm5lY3Rpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGVlckNvbm5lY3Rpb25JZCAtIElEIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICogQHByb3BlcnR5IHtBcnJheTxMb2NhbEF1ZGlvVHJhY2tTdGF0cz59IGxvY2FsQXVkaW9UcmFja1N0YXRzIC0gTGlzdCBvZiB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrU3RhdHN9XG4gKiBAcHJvcGVydHkge0FycmF5PExvY2FsVmlkZW9UcmFja1N0YXRzPn0gbG9jYWxWaWRlb1RyYWNrU3RhdHMgLSBMaXN0IG9mIHtAbGluayBMb2NhbFZpZGVvVHJhY2tTdGF0c31cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8UmVtb3RlQXVkaW9UcmFja1N0YXRzPn0gcmVtb3RlQXVkaW9UcmFja1N0YXRzIC0gTGlzdCBvZiB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja1N0YXRzfVxuICogQHByb3BlcnR5IHtBcnJheTxSZW1vdGVWaWRlb1RyYWNrU3RhdHM+fSByZW1vdGVWaWRlb1RyYWNrU3RhdHMgLSBMaXN0IG9mIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrU3RhdHN9XG4gKi9cblxudmFyIFN0YXRzUmVwb3J0ID1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHBlZXJDb25uZWN0aW9uSWQgLSBSVENQZWVyQ29ubmVjdGlvbiBJRFxuICogQHBhcmFtIHtTdGFuZGFyZGl6ZWRTdGF0c1Jlc3BvbnNlfSBzdGF0c1Jlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIFN0YXRzUmVwb3J0KHBlZXJDb25uZWN0aW9uSWQsIHN0YXRzUmVzcG9uc2UpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRzUmVwb3J0KTtcblxuICBpZiAodHlwZW9mIHBlZXJDb25uZWN0aW9uSWQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSVENQZWVyQ29ubmVjdGlvbiBpZCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgcGVlckNvbm5lY3Rpb25JZDoge1xuICAgICAgdmFsdWU6IHBlZXJDb25uZWN0aW9uSWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBsb2NhbEF1ZGlvVHJhY2tTdGF0czoge1xuICAgICAgdmFsdWU6IHN0YXRzUmVzcG9uc2UubG9jYWxBdWRpb1RyYWNrU3RhdHMubWFwKGZ1bmN0aW9uIChyZXBvcnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2NhbEF1ZGlvVHJhY2tTdGF0cyhyZXBvcnQudHJhY2tJZCwgcmVwb3J0KTtcbiAgICAgIH0pLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgbG9jYWxWaWRlb1RyYWNrU3RhdHM6IHtcbiAgICAgIHZhbHVlOiBzdGF0c1Jlc3BvbnNlLmxvY2FsVmlkZW9UcmFja1N0YXRzLm1hcChmdW5jdGlvbiAocmVwb3J0KSB7XG4gICAgICAgIHJldHVybiBuZXcgTG9jYWxWaWRlb1RyYWNrU3RhdHMocmVwb3J0LnRyYWNrSWQsIHJlcG9ydCk7XG4gICAgICB9KSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIHJlbW90ZUF1ZGlvVHJhY2tTdGF0czoge1xuICAgICAgdmFsdWU6IHN0YXRzUmVzcG9uc2UucmVtb3RlQXVkaW9UcmFja1N0YXRzLm1hcChmdW5jdGlvbiAocmVwb3J0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlQXVkaW9UcmFja1N0YXRzKHJlcG9ydC50cmFja0lkLCByZXBvcnQpO1xuICAgICAgfSksXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICByZW1vdGVWaWRlb1RyYWNrU3RhdHM6IHtcbiAgICAgIHZhbHVlOiBzdGF0c1Jlc3BvbnNlLnJlbW90ZVZpZGVvVHJhY2tTdGF0cy5tYXAoZnVuY3Rpb24gKHJlcG9ydCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZVZpZGVvVHJhY2tTdGF0cyhyZXBvcnQudHJhY2tJZCwgcmVwb3J0KTtcbiAgICAgIH0pLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRzUmVwb3J0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc3RhdHMvc3RhdHNyZXBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDI0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///246\n");

/***/ }),
/* 247 */
/*!****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/localtrackstats.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackStats = __webpack_require__(/*! ./trackstats */ 248);\n\n/**\n * Statistics for a {@link LocalTrack}.\n * @extends TrackStats\n * @property {?number} bytesSent - Number of bytes sent\n * @property {?number} packetsSent - Number of packets sent\n * @property {?number} roundTripTime - Round trip time in milliseconds\n */\n\nvar LocalTrackStats = function (_TrackStats) {\n  _inherits(LocalTrackStats, _TrackStats);\n\n  /**\n   * @param {string} trackId - {@link LocalTrack} ID\n   * @param {StandardizedTrackStatsReport} statsReport\n   */\n  function LocalTrackStats(trackId, statsReport) {\n    _classCallCheck(this, LocalTrackStats);\n\n    var _this = _possibleConstructorReturn(this, (LocalTrackStats.__proto__ || Object.getPrototypeOf(LocalTrackStats)).call(this, trackId, statsReport));\n\n    Object.defineProperties(_this, {\n      bytesSent: {\n        value: typeof statsReport.bytesSent === 'number' ? statsReport.bytesSent : null,\n        enumerable: true\n      },\n      packetsSent: {\n        value: typeof statsReport.packetsSent === 'number' ? statsReport.packetsSent : null,\n        enumerable: true\n      },\n      roundTripTime: {\n        value: typeof statsReport.roundTripTime === 'number' ? statsReport.roundTripTime : null,\n        enumerable: true\n      }\n    });\n    return _this;\n  }\n\n  return LocalTrackStats;\n}(TrackStats);\n\nmodule.exports = LocalTrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9sb2NhbHRyYWNrc3RhdHMuanM/ZDI0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLGlCQUFpQixtQkFBTyxDQUFDLHVCQUFjOztBQUV2QztBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxPQUFPLFlBQVksaUJBQWlCO0FBQ2pELGFBQWEsNkJBQTZCO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUcmFja1N0YXRzID0gcmVxdWlyZSgnLi90cmFja3N0YXRzJyk7XG5cbi8qKlxuICogU3RhdGlzdGljcyBmb3IgYSB7QGxpbmsgTG9jYWxUcmFja30uXG4gKiBAZXh0ZW5kcyBUcmFja1N0YXRzXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGJ5dGVzU2VudCAtIE51bWJlciBvZiBieXRlcyBzZW50XG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHBhY2tldHNTZW50IC0gTnVtYmVyIG9mIHBhY2tldHMgc2VudFxuICogQHByb3BlcnR5IHs/bnVtYmVyfSByb3VuZFRyaXBUaW1lIC0gUm91bmQgdHJpcCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICovXG5cbnZhciBMb2NhbFRyYWNrU3RhdHMgPSBmdW5jdGlvbiAoX1RyYWNrU3RhdHMpIHtcbiAgX2luaGVyaXRzKExvY2FsVHJhY2tTdGF0cywgX1RyYWNrU3RhdHMpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2tJZCAtIHtAbGluayBMb2NhbFRyYWNrfSBJRFxuICAgKiBAcGFyYW0ge1N0YW5kYXJkaXplZFRyYWNrU3RhdHNSZXBvcnR9IHN0YXRzUmVwb3J0XG4gICAqL1xuICBmdW5jdGlvbiBMb2NhbFRyYWNrU3RhdHModHJhY2tJZCwgc3RhdHNSZXBvcnQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxUcmFja1N0YXRzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbFRyYWNrU3RhdHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2NhbFRyYWNrU3RhdHMpKS5jYWxsKHRoaXMsIHRyYWNrSWQsIHN0YXRzUmVwb3J0KSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgYnl0ZXNTZW50OiB7XG4gICAgICAgIHZhbHVlOiB0eXBlb2Ygc3RhdHNSZXBvcnQuYnl0ZXNTZW50ID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LmJ5dGVzU2VudCA6IG51bGwsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBwYWNrZXRzU2VudDoge1xuICAgICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LnBhY2tldHNTZW50ID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LnBhY2tldHNTZW50IDogbnVsbCxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHJvdW5kVHJpcFRpbWU6IHtcbiAgICAgICAgdmFsdWU6IHR5cGVvZiBzdGF0c1JlcG9ydC5yb3VuZFRyaXBUaW1lID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LnJvdW5kVHJpcFRpbWUgOiBudWxsLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIExvY2FsVHJhY2tTdGF0cztcbn0oVHJhY2tTdGF0cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxUcmFja1N0YXRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc3RhdHMvbG9jYWx0cmFja3N0YXRzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///247\n");

/***/ }),
/* 248 */
/*!***********************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/trackstats.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Statistics for a {@link Track}.\n * @property {Track.ID} trackId - The {@link Track} ID\n * @property {Track.SID} trackSid - The {@link Track}'s SID when published in\n *  in a {@link Room}\n * @property {number} timestamp - A Unix timestamp in milliseconds indicating\n *   when the {@link TrackStats} were gathered\n * @property {string} ssrc - The {@link Track}'s SSRC when transmitted over the\n *   RTCPeerConnection\n * @property {?number} packetsLost - The number of packets lost\n * @property {?string} codec - The name of the codec used to encode the\n *   {@link Track}'s media\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TrackStats =\n/**\n * @param {string} trackId - {@link Track} ID\n * @param {StandardizedTrackStatsReport} statsReport\n */\nfunction TrackStats(trackId, statsReport) {\n  _classCallCheck(this, TrackStats);\n\n  if (typeof trackId !== 'string') {\n    throw new Error('Track id must be a string');\n  }\n\n  Object.defineProperties(this, {\n    trackId: {\n      value: trackId,\n      enumerable: true\n    },\n    trackSid: {\n      value: statsReport.trackSid,\n      enumerable: true\n    },\n    timestamp: {\n      value: statsReport.timestamp,\n      enumerable: true\n    },\n    ssrc: {\n      value: statsReport.ssrc,\n      enumerable: true\n    },\n    packetsLost: {\n      value: typeof statsReport.packetsLost === 'number' ? statsReport.packetsLost : null,\n      enumerable: true\n    },\n    codec: {\n      value: typeof statsReport.codecName === 'string' ? statsReport.codecName : null,\n      enumerable: true\n    }\n  });\n};\n\nmodule.exports = TrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy90cmFja3N0YXRzLmpzP2NmMGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxxQkFBcUIsWUFBWTtBQUNqQyxjQUFjLFNBQVMsZ0JBQWdCLFlBQVk7QUFDbkQsY0FBYyxVQUFVLGlCQUFpQixZQUFZO0FBQ3JELFVBQVU7QUFDVixjQUFjLE9BQU87QUFDckIsZUFBZSxpQkFBaUI7QUFDaEMsY0FBYyxPQUFPLGFBQWEsWUFBWTtBQUM5QztBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsTUFBTSxZQUFZO0FBQ2xCOztBQUVBLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKO0FBQ0E7QUFDQSxXQUFXLE9BQU8sWUFBWSxZQUFZO0FBQzFDLFdBQVcsNkJBQTZCO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6IjI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTdGF0aXN0aWNzIGZvciBhIHtAbGluayBUcmFja30uXG4gKiBAcHJvcGVydHkge1RyYWNrLklEfSB0cmFja0lkIC0gVGhlIHtAbGluayBUcmFja30gSURcbiAqIEBwcm9wZXJ0eSB7VHJhY2suU0lEfSB0cmFja1NpZCAtIFRoZSB7QGxpbmsgVHJhY2t9J3MgU0lEIHdoZW4gcHVibGlzaGVkIGluXG4gKiAgaW4gYSB7QGxpbmsgUm9vbX1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lc3RhbXAgLSBBIFVuaXggdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyBpbmRpY2F0aW5nXG4gKiAgIHdoZW4gdGhlIHtAbGluayBUcmFja1N0YXRzfSB3ZXJlIGdhdGhlcmVkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3NyYyAtIFRoZSB7QGxpbmsgVHJhY2t9J3MgU1NSQyB3aGVuIHRyYW5zbWl0dGVkIG92ZXIgdGhlXG4gKiAgIFJUQ1BlZXJDb25uZWN0aW9uXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHBhY2tldHNMb3N0IC0gVGhlIG51bWJlciBvZiBwYWNrZXRzIGxvc3RcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gY29kZWMgLSBUaGUgbmFtZSBvZiB0aGUgY29kZWMgdXNlZCB0byBlbmNvZGUgdGhlXG4gKiAgIHtAbGluayBUcmFja30ncyBtZWRpYVxuICovXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBUcmFja1N0YXRzID1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRyYWNrSWQgLSB7QGxpbmsgVHJhY2t9IElEXG4gKiBAcGFyYW0ge1N0YW5kYXJkaXplZFRyYWNrU3RhdHNSZXBvcnR9IHN0YXRzUmVwb3J0XG4gKi9cbmZ1bmN0aW9uIFRyYWNrU3RhdHModHJhY2tJZCwgc3RhdHNSZXBvcnQpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNrU3RhdHMpO1xuXG4gIGlmICh0eXBlb2YgdHJhY2tJZCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYWNrIGlkIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICB0cmFja0lkOiB7XG4gICAgICB2YWx1ZTogdHJhY2tJZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIHRyYWNrU2lkOiB7XG4gICAgICB2YWx1ZTogc3RhdHNSZXBvcnQudHJhY2tTaWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICB0aW1lc3RhbXA6IHtcbiAgICAgIHZhbHVlOiBzdGF0c1JlcG9ydC50aW1lc3RhbXAsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBzc3JjOiB7XG4gICAgICB2YWx1ZTogc3RhdHNSZXBvcnQuc3NyYyxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIHBhY2tldHNMb3N0OiB7XG4gICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LnBhY2tldHNMb3N0ID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LnBhY2tldHNMb3N0IDogbnVsbCxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGNvZGVjOiB7XG4gICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LmNvZGVjTmFtZSA9PT0gJ3N0cmluZycgPyBzdGF0c1JlcG9ydC5jb2RlY05hbWUgOiBudWxsLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYWNrU3RhdHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy90cmFja3N0YXRzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///248\n");

/***/ }),
/* 249 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/remotetrackstats.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackStats = __webpack_require__(/*! ./trackstats */ 248);\n\n/**\n * Statistics for a remote {@link Track}.\n * @extends TrackStats\n * @property {?number} bytesReceived - Number of bytes received\n * @property {?number} packetsReceived - Number of packets received\n */\n\nvar RemoteTrackStats = function (_TrackStats) {\n  _inherits(RemoteTrackStats, _TrackStats);\n\n  /*\n   * @param {string} trackId - {@link Track} ID\n   * @param {StandardizedTrackStatsReport} statsReport\n   */\n  function RemoteTrackStats(trackId, statsReport) {\n    _classCallCheck(this, RemoteTrackStats);\n\n    var _this = _possibleConstructorReturn(this, (RemoteTrackStats.__proto__ || Object.getPrototypeOf(RemoteTrackStats)).call(this, trackId, statsReport));\n\n    Object.defineProperties(_this, {\n      bytesReceived: {\n        value: typeof statsReport.bytesReceived === 'number' ? statsReport.bytesReceived : null,\n        enumerable: true\n      },\n      packetsReceived: {\n        value: typeof statsReport.packetsReceived === 'number' ? statsReport.packetsReceived : null,\n        enumerable: true\n      }\n    });\n    return _this;\n  }\n\n  return RemoteTrackStats;\n}(TrackStats);\n\nmodule.exports = RemoteTrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9yZW1vdGV0cmFja3N0YXRzLmpzP2IwNWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSxpQkFBaUIsbUJBQU8sQ0FBQyx1QkFBYzs7QUFFdkM7QUFDQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGFBQWEsT0FBTyxZQUFZLFlBQVk7QUFDNUMsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVHJhY2tTdGF0cyA9IHJlcXVpcmUoJy4vdHJhY2tzdGF0cycpO1xuXG4vKipcbiAqIFN0YXRpc3RpY3MgZm9yIGEgcmVtb3RlIHtAbGluayBUcmFja30uXG4gKiBAZXh0ZW5kcyBUcmFja1N0YXRzXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGJ5dGVzUmVjZWl2ZWQgLSBOdW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWRcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gcGFja2V0c1JlY2VpdmVkIC0gTnVtYmVyIG9mIHBhY2tldHMgcmVjZWl2ZWRcbiAqL1xuXG52YXIgUmVtb3RlVHJhY2tTdGF0cyA9IGZ1bmN0aW9uIChfVHJhY2tTdGF0cykge1xuICBfaW5oZXJpdHMoUmVtb3RlVHJhY2tTdGF0cywgX1RyYWNrU3RhdHMpO1xuXG4gIC8qXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFja0lkIC0ge0BsaW5rIFRyYWNrfSBJRFxuICAgKiBAcGFyYW0ge1N0YW5kYXJkaXplZFRyYWNrU3RhdHNSZXBvcnR9IHN0YXRzUmVwb3J0XG4gICAqL1xuICBmdW5jdGlvbiBSZW1vdGVUcmFja1N0YXRzKHRyYWNrSWQsIHN0YXRzUmVwb3J0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZVRyYWNrU3RhdHMpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZVRyYWNrU3RhdHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVUcmFja1N0YXRzKSkuY2FsbCh0aGlzLCB0cmFja0lkLCBzdGF0c1JlcG9ydCkpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIGJ5dGVzUmVjZWl2ZWQ6IHtcbiAgICAgICAgdmFsdWU6IHR5cGVvZiBzdGF0c1JlcG9ydC5ieXRlc1JlY2VpdmVkID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LmJ5dGVzUmVjZWl2ZWQgOiBudWxsLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgcGFja2V0c1JlY2VpdmVkOiB7XG4gICAgICAgIHZhbHVlOiB0eXBlb2Ygc3RhdHNSZXBvcnQucGFja2V0c1JlY2VpdmVkID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LnBhY2tldHNSZWNlaXZlZCA6IG51bGwsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gUmVtb3RlVHJhY2tTdGF0cztcbn0oVHJhY2tTdGF0cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVtb3RlVHJhY2tTdGF0cztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3N0YXRzL3JlbW90ZXRyYWNrc3RhdHMuanNcbi8vIG1vZHVsZSBpZCA9IDI0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///249\n");

/***/ }),
/* 250 */
/*!***************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/receiverreport.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar average = __webpack_require__(/*! ./average */ 251);\nvar SenderOrReceiverReport = __webpack_require__(/*! ./senderorreceiverreport */ 252);\nvar sum = __webpack_require__(/*! ./sum */ 253);\n\n/**\n * @interface ReceiverSummary\n * @property {number} bitrate\n * @property {number} fractionLost - 0–1\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} deltaPacketsLost\n * @property {number} deltaPacketsReceived\n * @property {number} [fractionLost] - 0–1 (undefined in Firefox)\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n * @property {number} phonyPacketsLost - 0–1\n */\n\nvar ReceiverReport = function (_SenderOrReceiverRepo) {\n  _inherits(ReceiverReport, _SenderOrReceiverRepo);\n\n  /**\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} deltaPacketsLost\n   * @param {number} deltaPacketsReceived\n   * @param {number} [fractionLost] - 0–1 (undefined in Firefox)\n   * @param {number} [jitter] - s (undefined for video tracks in Chrome)\n   */\n  function ReceiverReport(id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter) {\n    _classCallCheck(this, ReceiverReport);\n\n    var _this = _possibleConstructorReturn(this, (ReceiverReport.__proto__ || Object.getPrototypeOf(ReceiverReport)).call(this, id, trackId, bitrate));\n\n    var phonyFractionLost = deltaPacketsReceived > 0 ? deltaPacketsLost / deltaPacketsReceived : 0;\n    Object.defineProperties(_this, {\n      deltaPacketsLost: {\n        enumerable: true,\n        value: deltaPacketsLost\n      },\n      deltaPacketsReceived: {\n        enumerable: true,\n        value: deltaPacketsReceived\n      },\n      fractionLost: {\n        enumerable: true,\n        value: fractionLost\n      },\n      jitter: {\n        enumerable: true,\n        value: jitter\n      },\n      phonyFractionLost: {\n        enumerable: true,\n        value: phonyFractionLost\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Create a {@link ReceiverReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @returns {ReceiverReport}\n   */\n\n\n  _createClass(ReceiverReport, [{\n    key: 'summarize',\n\n\n    /**\n     * Summarize the {@link ReceiveReport}.\n     * @returns {ReceiverSummary}\n     */\n    value: function summarize() {\n      return {\n        bitrate: this.bitrate,\n        fractionLost: typeof this.fractionLost === 'number' ? this.fractionLost : this.phonyFractionLost,\n        jitter: this.jitter\n      };\n    }\n  }], [{\n    key: 'of',\n    value: function of(trackId, olderStats, newerStats) {\n      if (olderStats.id !== newerStats.id) {\n        throw new Error('RTCStats IDs must match');\n      }\n      var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n      var deltaBytesReceived = newerStats.bytesReceived - olderStats.bytesReceived;\n      var bitrate = secondsElapsed > 0 ? deltaBytesReceived / secondsElapsed * 8 : 0;\n      var deltaPacketsLost = Math.max(newerStats.packetsLost - olderStats.packetsLost, 0);\n      var deltaPacketsReceived = newerStats.packetsReceived - olderStats.packetsReceived;\n      var fractionLost = newerStats.fractionLost,\n          jitter = newerStats.jitter;\n\n      return new ReceiverReport(olderStats.id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter);\n    }\n\n    /**\n     * Summarize {@link ReceiverReport}s by summing and averaging their values.\n     * @param {Array<ReceiverReport>} reports\n     * @returns {ReceiverSummary}\n     */\n\n  }, {\n    key: 'summarize',\n    value: function summarize(reports) {\n      var summaries = reports.map(function (report) {\n        return report.summarize();\n      });\n      var bitrate = sum(summaries.map(function (summary) {\n        return summary.bitrate;\n      }));\n      var fractionLost = average(summaries.map(function (summary) {\n        return summary.fractionLost;\n      }));\n      var jitter = average(summaries.map(function (summary) {\n        return summary.jitter;\n      }));\n      return {\n        bitrate: bitrate,\n        fractionLost: fractionLost,\n        jitter: jitter\n      };\n    }\n  }]);\n\n  return ReceiverReport;\n}(SenderOrReceiverReport);\n\nmodule.exports = ReceiverReport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///250\n");

/***/ }),
/* 251 */
/*!********************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/average.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint no-undefined:0 */\n\n\n/**\n * @param {Array<number|undefined>} xs\n * @returns {number|undefined}\n */\n\nfunction average(xs) {\n  xs = xs.filter(function (x) {\n    return typeof x === 'number';\n  });\n  return xs.length < 1 ? undefined : xs.reduce(function (y, x) {\n    return x + y;\n  }) / xs.length;\n}\n\nmodule.exports = average;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9hdmVyYWdlLmpzPzhkNDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYjtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIyNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tdW5kZWZpbmVkOjAgKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcnx1bmRlZmluZWQ+fSB4c1xuICogQHJldHVybnMge251bWJlcnx1bmRlZmluZWR9XG4gKi9cblxuZnVuY3Rpb24gYXZlcmFnZSh4cykge1xuICB4cyA9IHhzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcic7XG4gIH0pO1xuICByZXR1cm4geHMubGVuZ3RoIDwgMSA/IHVuZGVmaW5lZCA6IHhzLnJlZHVjZShmdW5jdGlvbiAoeSwgeCkge1xuICAgIHJldHVybiB4ICsgeTtcbiAgfSkgLyB4cy5sZW5ndGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXZlcmFnZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3N0YXRzL2F2ZXJhZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDI1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///251\n");

/***/ }),
/* 252 */
/*!***********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/senderorreceiverreport.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @property {StatsId} id\n * @property {TrackId} trackId\n * @property {number} bitrate - bps\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SenderOrReceiverReport =\n/**\n * Construct a {@link SenderOrReceiverReport}.\n * @param {StatsId} id\n * @param {TrackId} trackId\n * @param {number} bitrate - bps\n */\nfunction SenderOrReceiverReport(id, trackId, bitrate) {\n  _classCallCheck(this, SenderOrReceiverReport);\n\n  Object.defineProperties(this, {\n    id: {\n      enumerable: true,\n      value: id\n    },\n    trackId: {\n      enumerable: true,\n      value: trackId\n    },\n    bitrate: {\n      enumerable: true,\n      value: bitrate\n    }\n  });\n};\n\nmodule.exports = SenderOrReceiverReport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zZW5kZXJvcnJlY2VpdmVycmVwb3J0LmpzP2ZiZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsT0FBTztBQUNyQjs7QUFFQSxpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SjtBQUNBO0FBQ0EsZ0JBQWdCLDZCQUE2QjtBQUM3QyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6IjI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcHJvcGVydHkge1N0YXRzSWR9IGlkXG4gKiBAcHJvcGVydHkge1RyYWNrSWR9IHRyYWNrSWRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiaXRyYXRlIC0gYnBzXG4gKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNlbmRlck9yUmVjZWl2ZXJSZXBvcnQgPVxuLyoqXG4gKiBDb25zdHJ1Y3QgYSB7QGxpbmsgU2VuZGVyT3JSZWNlaXZlclJlcG9ydH0uXG4gKiBAcGFyYW0ge1N0YXRzSWR9IGlkXG4gKiBAcGFyYW0ge1RyYWNrSWR9IHRyYWNrSWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRyYXRlIC0gYnBzXG4gKi9cbmZ1bmN0aW9uIFNlbmRlck9yUmVjZWl2ZXJSZXBvcnQoaWQsIHRyYWNrSWQsIGJpdHJhdGUpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbmRlck9yUmVjZWl2ZXJSZXBvcnQpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBpZDoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBpZFxuICAgIH0sXG4gICAgdHJhY2tJZDoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB0cmFja0lkXG4gICAgfSxcbiAgICBiaXRyYXRlOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGJpdHJhdGVcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZW5kZXJPclJlY2VpdmVyUmVwb3J0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc3RhdHMvc2VuZGVyb3JyZWNlaXZlcnJlcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMjUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///252\n");

/***/ }),
/* 253 */
/*!****************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/sum.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @param {Array<number|undefined>} xs\n * @returns {number}\n */\n\nfunction sum(xs) {\n  return xs.reduce(function (y, x) {\n    return typeof x === 'number' ? x + y : y;\n  }, 0);\n}\n\nmodule.exports = sum;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zdW0uanM/NzEzNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMjUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyfHVuZGVmaW5lZD59IHhzXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5cbmZ1bmN0aW9uIHN1bSh4cykge1xuICByZXR1cm4geHMucmVkdWNlKGZ1bmN0aW9uICh5LCB4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJyA/IHggKyB5IDogeTtcbiAgfSwgMCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3VtO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc3RhdHMvc3VtLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///253\n");

/***/ }),
/* 254 */
/*!*************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/senderreport.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint no-undefined:0 */\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar average = __webpack_require__(/*! ./average */ 251);\nvar SenderOrReceiverReport = __webpack_require__(/*! ./senderorreceiverreport */ 252);\nvar sum = __webpack_require__(/*! ./sum */ 253);\n\n/**\n * @interface SenderSummary\n * @property {number} bitrate\n * @property {number} [rtt] - s (undefined in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} [rtt] - s (undefined in Chrome)\n */\n\nvar SenderReport = function (_SenderOrReceiverRepo) {\n  _inherits(SenderReport, _SenderOrReceiverRepo);\n\n  /**\n   * Construct a {@link SenderReport}.\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} [rtt] - s\n   */\n  function SenderReport(id, trackId, bitrate, rtt) {\n    _classCallCheck(this, SenderReport);\n\n    var _this = _possibleConstructorReturn(this, (SenderReport.__proto__ || Object.getPrototypeOf(SenderReport)).call(this, id, trackId, bitrate));\n\n    Object.defineProperties(_this, {\n      rtt: {\n        enumerable: true,\n        value: rtt\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Create a {@link SenderReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @param {RTCRemoteInboundRtpStreamStats} [newerRemoteStats]\n   * @returns {SenderReport}\n   */\n\n\n  _createClass(SenderReport, null, [{\n    key: 'of',\n    value: function of(trackId, olderStats, newerStats, newerRemoteStats) {\n      if (olderStats.id !== newerStats.id) {\n        throw new Error('RTCStats IDs must match');\n      }\n      var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n      var deltaBytesSent = newerStats.bytesSent - olderStats.bytesSent;\n      var bitrate = secondsElapsed > 0 ? deltaBytesSent / secondsElapsed * 8 : 0;\n      var rtt = newerRemoteStats && typeof newerRemoteStats.roundTripTime === 'number' ? newerRemoteStats.roundTripTime / 1000 : undefined;\n      return new SenderReport(olderStats.id, trackId, bitrate, rtt);\n    }\n\n    /**\n     * Summarize {@link SenderReport}s by summing and averaging their values.\n     * @param {Array<SenderReport>} reports\n     * @returns {SenderSummary}\n     */\n\n  }, {\n    key: 'summarize',\n    value: function summarize(reports) {\n      var bitrate = sum(reports.map(function (report) {\n        return report.bitrate;\n      }));\n      var rtt = average(reports.map(function (report) {\n        return report.rtt;\n      }));\n      return {\n        bitrate: bitrate,\n        rtt: rtt\n      };\n    }\n  }]);\n\n  return SenderReport;\n}(SenderOrReceiverReport);\n\nmodule.exports = SenderReport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zZW5kZXJyZXBvcnQuanM/ZDY0MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLGNBQWMsbUJBQU8sQ0FBQyxvQkFBVztBQUNqQyw2QkFBNkIsbUJBQU8sQ0FBQyxtQ0FBMEI7QUFDL0QsVUFBVSxtQkFBTyxDQUFDLGdCQUFPOztBQUV6QjtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSwrQkFBK0I7QUFDNUMsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDLGVBQWUsb0JBQW9CO0FBQ25DLGlCQUFpQjtBQUNqQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLXVuZGVmaW5lZDowICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGF2ZXJhZ2UgPSByZXF1aXJlKCcuL2F2ZXJhZ2UnKTtcbnZhciBTZW5kZXJPclJlY2VpdmVyUmVwb3J0ID0gcmVxdWlyZSgnLi9zZW5kZXJvcnJlY2VpdmVycmVwb3J0Jyk7XG52YXIgc3VtID0gcmVxdWlyZSgnLi9zdW0nKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFNlbmRlclN1bW1hcnlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiaXRyYXRlXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3J0dF0gLSBzICh1bmRlZmluZWQgaW4gQ2hyb21lKVxuICovXG5cbi8qKlxuICogQGV4dGVuZHMgU2VuZGVyT3JSZWNlaXZlclJlcG9ydFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtydHRdIC0gcyAodW5kZWZpbmVkIGluIENocm9tZSlcbiAqL1xuXG52YXIgU2VuZGVyUmVwb3J0ID0gZnVuY3Rpb24gKF9TZW5kZXJPclJlY2VpdmVyUmVwbykge1xuICBfaW5oZXJpdHMoU2VuZGVyUmVwb3J0LCBfU2VuZGVyT3JSZWNlaXZlclJlcG8pO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgU2VuZGVyUmVwb3J0fS5cbiAgICogQHBhcmFtIHtTdGF0c0lkfSBpZFxuICAgKiBAcGFyYW0ge1RyYWNrSWR9IHRyYWNrSWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJpdHJhdGUgLSBicHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtydHRdIC0gc1xuICAgKi9cbiAgZnVuY3Rpb24gU2VuZGVyUmVwb3J0KGlkLCB0cmFja0lkLCBiaXRyYXRlLCBydHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VuZGVyUmVwb3J0KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZW5kZXJSZXBvcnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZW5kZXJSZXBvcnQpKS5jYWxsKHRoaXMsIGlkLCB0cmFja0lkLCBiaXRyYXRlKSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgcnR0OiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBydHRcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEge0BsaW5rIFNlbmRlclJlcG9ydH0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFja0lkXG4gICAqIEBwYXJhbSB7UlRDU3RhdHN9IG9sZGVyU3RhdHNcbiAgICogQHBhcmFtIHtSVENTdGF0c30gbmV3ZXJTdGF0c1xuICAgKiBAcGFyYW0ge1JUQ1JlbW90ZUluYm91bmRSdHBTdHJlYW1TdGF0c30gW25ld2VyUmVtb3RlU3RhdHNdXG4gICAqIEByZXR1cm5zIHtTZW5kZXJSZXBvcnR9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFNlbmRlclJlcG9ydCwgbnVsbCwgW3tcbiAgICBrZXk6ICdvZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mKHRyYWNrSWQsIG9sZGVyU3RhdHMsIG5ld2VyU3RhdHMsIG5ld2VyUmVtb3RlU3RhdHMpIHtcbiAgICAgIGlmIChvbGRlclN0YXRzLmlkICE9PSBuZXdlclN0YXRzLmlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUlRDU3RhdHMgSURzIG11c3QgbWF0Y2gnKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZWNvbmRzRWxhcHNlZCA9IChuZXdlclN0YXRzLnRpbWVzdGFtcCAtIG9sZGVyU3RhdHMudGltZXN0YW1wKSAvIDEwMDA7XG4gICAgICB2YXIgZGVsdGFCeXRlc1NlbnQgPSBuZXdlclN0YXRzLmJ5dGVzU2VudCAtIG9sZGVyU3RhdHMuYnl0ZXNTZW50O1xuICAgICAgdmFyIGJpdHJhdGUgPSBzZWNvbmRzRWxhcHNlZCA+IDAgPyBkZWx0YUJ5dGVzU2VudCAvIHNlY29uZHNFbGFwc2VkICogOCA6IDA7XG4gICAgICB2YXIgcnR0ID0gbmV3ZXJSZW1vdGVTdGF0cyAmJiB0eXBlb2YgbmV3ZXJSZW1vdGVTdGF0cy5yb3VuZFRyaXBUaW1lID09PSAnbnVtYmVyJyA/IG5ld2VyUmVtb3RlU3RhdHMucm91bmRUcmlwVGltZSAvIDEwMDAgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gbmV3IFNlbmRlclJlcG9ydChvbGRlclN0YXRzLmlkLCB0cmFja0lkLCBiaXRyYXRlLCBydHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1bW1hcml6ZSB7QGxpbmsgU2VuZGVyUmVwb3J0fXMgYnkgc3VtbWluZyBhbmQgYXZlcmFnaW5nIHRoZWlyIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5PFNlbmRlclJlcG9ydD59IHJlcG9ydHNcbiAgICAgKiBAcmV0dXJucyB7U2VuZGVyU3VtbWFyeX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3VtbWFyaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VtbWFyaXplKHJlcG9ydHMpIHtcbiAgICAgIHZhciBiaXRyYXRlID0gc3VtKHJlcG9ydHMubWFwKGZ1bmN0aW9uIChyZXBvcnQpIHtcbiAgICAgICAgcmV0dXJuIHJlcG9ydC5iaXRyYXRlO1xuICAgICAgfSkpO1xuICAgICAgdmFyIHJ0dCA9IGF2ZXJhZ2UocmVwb3J0cy5tYXAoZnVuY3Rpb24gKHJlcG9ydCkge1xuICAgICAgICByZXR1cm4gcmVwb3J0LnJ0dDtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJpdHJhdGU6IGJpdHJhdGUsXG4gICAgICAgIHJ0dDogcnR0XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZW5kZXJSZXBvcnQ7XG59KFNlbmRlck9yUmVjZWl2ZXJSZXBvcnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbmRlclJlcG9ydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3N0YXRzL3NlbmRlcnJlcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMjU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///254\n");

/***/ }),
/* 255 */
/*!******************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/senderorreceiverreportfactory.js ***!
  \******************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @property {StatsId} id\n * @property {TrackId} trackId\n * @property {RTCStats} lastStats\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SenderOrReceiverReportFactory =\n/**\n * @param {StatsId} id\n * @param {TrackId} trackId\n * @param {RTCStats} initialStats\n */\nfunction SenderOrReceiverReportFactory(id, trackId, initialStats) {\n  _classCallCheck(this, SenderOrReceiverReportFactory);\n\n  Object.defineProperties(this, {\n    id: {\n      enumerable: true,\n      value: id,\n      writable: true\n    },\n    trackId: {\n      enumerable: true,\n      value: trackId,\n      writable: true\n    },\n    lastStats: {\n      enumerable: true,\n      value: initialStats,\n      writable: true\n    }\n  });\n};\n\nmodule.exports = SenderOrReceiverReportFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zZW5kZXJvcnJlY2VpdmVycmVwb3J0ZmFjdG9yeS5qcz9iZGIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFNBQVM7QUFDdkI7O0FBRUEsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdko7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMjU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7U3RhdHNJZH0gaWRcbiAqIEBwcm9wZXJ0eSB7VHJhY2tJZH0gdHJhY2tJZFxuICogQHByb3BlcnR5IHtSVENTdGF0c30gbGFzdFN0YXRzXG4gKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNlbmRlck9yUmVjZWl2ZXJSZXBvcnRGYWN0b3J5ID1cbi8qKlxuICogQHBhcmFtIHtTdGF0c0lkfSBpZFxuICogQHBhcmFtIHtUcmFja0lkfSB0cmFja0lkXG4gKiBAcGFyYW0ge1JUQ1N0YXRzfSBpbml0aWFsU3RhdHNcbiAqL1xuZnVuY3Rpb24gU2VuZGVyT3JSZWNlaXZlclJlcG9ydEZhY3RvcnkoaWQsIHRyYWNrSWQsIGluaXRpYWxTdGF0cykge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VuZGVyT3JSZWNlaXZlclJlcG9ydEZhY3RvcnkpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBpZDoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBpZCxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSxcbiAgICB0cmFja0lkOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRyYWNrSWQsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgbGFzdFN0YXRzOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGluaXRpYWxTdGF0cyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VuZGVyT3JSZWNlaXZlclJlcG9ydEZhY3Rvcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zZW5kZXJvcnJlY2VpdmVycmVwb3J0ZmFjdG9yeS5qc1xuLy8gbW9kdWxlIGlkID0gMjU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///255\n");

/***/ }),
/* 256 */
/*!**************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/recording.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\n/**\n * Represents recording state\n * @extends EventEmitter\n * @property {?boolean} isEnabled\n */\n\nvar RecordingSignaling = function (_EventEmitter) {\n  _inherits(RecordingSignaling, _EventEmitter);\n\n  /**\n   * Construct a {@link RecordingSignaling}.\n   */\n  function RecordingSignaling() {\n    _classCallCheck(this, RecordingSignaling);\n\n    var _this = _possibleConstructorReturn(this, (RecordingSignaling.__proto__ || Object.getPrototypeOf(RecordingSignaling)).call(this));\n\n    Object.defineProperties(_this, {\n      _isEnabled: {\n        value: null,\n        writable: true\n      },\n      isEnabled: {\n        enumerable: true,\n        get: function get() {\n          return this._isEnabled;\n        }\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Disable the {@link RecordingSignaling} if it is not already disabled.\n   * @return {this}\n   */\n\n\n  _createClass(RecordingSignaling, [{\n    key: 'disable',\n    value: function disable() {\n      return this.enable(false);\n    }\n\n    /**\n     * Enable (or disable) the {@link RecordingSignaling} if it is not already enabled\n     * (or disabled).\n     * @param {boolean} [enabled=true]\n     * @return {this}\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable(enabled) {\n      enabled = typeof enabled === 'boolean' ? enabled : true;\n      if (this.isEnabled !== enabled) {\n        this._isEnabled = enabled;\n        this.emit('updated');\n      }\n      return this;\n    }\n  }]);\n\n  return RecordingSignaling;\n}(EventEmitter);\n\n/**\n * Emitted whenever the {@link RecordingSignaling} is updated\n * @event RecordingSignaling#updated\n */\n\nmodule.exports = RecordingSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvcmVjb3JkaW5nLmpzPzQzYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsbUJBQW1CLG1CQUFPLENBQUMsaUJBQVE7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHlCQUF5QjtBQUMzQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IseUJBQXlCO0FBQzNDLGNBQWM7QUFDZDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQyx5QkFBeUI7QUFDekQ7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLHlCQUF5Qix5QkFBeUI7QUFDbEQ7QUFDQTs7QUFFQSIsImZpbGUiOiIyNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHJlY29yZGluZyBzdGF0ZVxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBpc0VuYWJsZWRcbiAqL1xuXG52YXIgUmVjb3JkaW5nU2lnbmFsaW5nID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKFJlY29yZGluZ1NpZ25hbGluZywgX0V2ZW50RW1pdHRlcik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBSZWNvcmRpbmdTaWduYWxpbmd9LlxuICAgKi9cbiAgZnVuY3Rpb24gUmVjb3JkaW5nU2lnbmFsaW5nKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWNvcmRpbmdTaWduYWxpbmcpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlY29yZGluZ1NpZ25hbGluZy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlY29yZGluZ1NpZ25hbGluZykpLmNhbGwodGhpcykpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIF9pc0VuYWJsZWQ6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgaXNFbmFibGVkOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9pc0VuYWJsZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUge0BsaW5rIFJlY29yZGluZ1NpZ25hbGluZ30gaWYgaXQgaXMgbm90IGFscmVhZHkgZGlzYWJsZWQuXG4gICAqIEByZXR1cm4ge3RoaXN9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFJlY29yZGluZ1NpZ25hbGluZywgW3tcbiAgICBrZXk6ICdkaXNhYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVuYWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIChvciBkaXNhYmxlKSB0aGUge0BsaW5rIFJlY29yZGluZ1NpZ25hbGluZ30gaWYgaXQgaXMgbm90IGFscmVhZHkgZW5hYmxlZFxuICAgICAqIChvciBkaXNhYmxlZCkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZW5hYmxlZD10cnVlXVxuICAgICAqIEByZXR1cm4ge3RoaXN9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZShlbmFibGVkKSB7XG4gICAgICBlbmFibGVkID0gdHlwZW9mIGVuYWJsZWQgPT09ICdib29sZWFuJyA/IGVuYWJsZWQgOiB0cnVlO1xuICAgICAgaWYgKHRoaXMuaXNFbmFibGVkICE9PSBlbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlY29yZGluZ1NpZ25hbGluZztcbn0oRXZlbnRFbWl0dGVyKTtcblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIHRoZSB7QGxpbmsgUmVjb3JkaW5nU2lnbmFsaW5nfSBpcyB1cGRhdGVkXG4gKiBAZXZlbnQgUmVjb3JkaW5nU2lnbmFsaW5nI3VwZGF0ZWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY29yZGluZ1NpZ25hbGluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3NpZ25hbGluZy9yZWNvcmRpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDI1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///256\n");

/***/ }),
/* 257 */
/*!*********************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/room.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DefaultRecordingSignaling = __webpack_require__(/*! ./recording */ 256);\nvar StateMachine = __webpack_require__(/*! ../statemachine */ 215);\n\n/*\nRoomSignaling States\n-----------------------\n\n    +-----------+     +--------------+\n    |           |     |              |\n    | connected |---->| disconnected |\n    |           |     |              |\n    +-----------+     +--------------+\n          |  ^               ^\n          |  |               |\n          |  |   +--------------+\n          |  +---|              |\n          |      | reconnecting |\n          +----->|              |\n                 +--------------+\n\n*/\n\nvar states = {\n  connected: ['reconnecting', 'disconnected'],\n  reconnecting: ['connected', 'disconnected'],\n  disconnected: []\n};\n\n/**\n * A {@link Room} implementation\n * @extends StateMachine\n * @property {?Participant.SID} dominantSpeakerSid\n * @property {ParticipantSignaling} localParticipant\n * @property {RTCIceConnectionState} mediaConnectionState\n * @property {string} name\n * @property {Map<string, RemoteParticipantSignaling>} participants\n * @property {RecordingSignaling} recording\n * @property {Room.SID} sid\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @property {string} signalingConnectionState - \"connected\",\n *   \"reconnecting\", or \"disconnected\"\n * @emits RoomSignaling#mediaConnectionStateChanged\n * @emits RoomSignaling#signalingConnectionStateChanged\n */\n\nvar RoomSignaling = function (_StateMachine) {\n  _inherits(RoomSignaling, _StateMachine);\n\n  /**\n   * Construct a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {Room.SID} sid\n   * @param {string} name\n   */\n  function RoomSignaling(localParticipant, sid, name, options) {\n    _classCallCheck(this, RoomSignaling);\n\n    options = Object.assign({\n      RecordingSignaling: DefaultRecordingSignaling\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (RoomSignaling.__proto__ || Object.getPrototypeOf(RoomSignaling)).call(this, 'connected', states));\n\n    var RecordingSignaling = options.RecordingSignaling;\n\n    Object.defineProperties(_this, {\n      _mediaConnectionIsReconnecting: {\n        writable: true,\n        value: false\n      },\n      _options: {\n        value: options\n      },\n      dominantSpeakerSid: {\n        enumerable: true,\n        value: null,\n        writable: true\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: name\n      },\n      participants: {\n        enumerable: true,\n        value: new Map()\n      },\n      recording: {\n        enumerable: true,\n        value: new RecordingSignaling()\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n\n    _this.on('mediaConnectionStateChanged', function () {\n      return maybeUpdateState(_this);\n    });\n    _this.on('signalingConnectionStateChanged', function () {\n      return maybeUpdateState(_this);\n    });\n    return _this;\n  }\n\n  /**\n   * Disconnect, possibly with an Error.\n   * @private\n   * @param {Error} [error]\n   * @returns {boolean}\n   */\n\n\n  _createClass(RoomSignaling, [{\n    key: '_disconnect',\n    value: function _disconnect(error) {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected', null, [error]);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Connect {@link RemoteParticipantSignaling} to the {@link RoomSignaling}.\n     * @param {RemoteParticipantSignaling} participant\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'connectParticipant',\n    value: function connectParticipant(participant) {\n      var self = this;\n\n      if (participant.state === 'disconnected') {\n        return false;\n      }\n\n      if (this.participants.has(participant.sid)) {\n        return false;\n      }\n\n      this.participants.set(participant.sid, participant);\n\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n          self.emit('participantDisconnected', participant);\n        }\n      });\n\n      this.emit('participantConnected', participant);\n\n      return true;\n    }\n\n    /**\n     * Disconnect.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      return this._disconnect();\n    }\n\n    /**\n     * Set (or unset) the Dominant Speaker.\n     * @param {?Participant.SID} dominantSpeakerSid\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setDominantSpeaker',\n    value: function setDominantSpeaker(dominantSpeakerSid) {\n      this.dominantSpeakerSid = dominantSpeakerSid;\n      this.emit('dominantSpeakerChanged');\n    }\n  }]);\n\n  return RoomSignaling;\n}(StateMachine);\n\n/**\n * @event RoomSignaling#event:dominantSpeakerChanged\n */\n\n/**\n * {@link RemoteParticipantSignaling} connected to the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantConnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * {@link RemoteParticipantSignaling} disconnected from the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantDisconnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * @event RoomSignaling#event:mediaConnectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:signalingConnectionStateChanged\n */\n\n/**\n * Maybe update the {@link RoomSignaling} state.\n * @param {RoomSignaling} roomSignaling\n */\n\n\nfunction maybeUpdateState(roomSignaling) {\n  if (roomSignaling.state === 'disconnected' || roomSignaling.signalingConnectionState === 'disconnected') {\n    return;\n  }\n\n  var newState = void 0;\n\n  if (roomSignaling.signalingConnectionState === 'reconnecting') {\n    newState = roomSignaling.signalingConnectionState;\n  } else if (roomSignaling.mediaConnectionState === 'failed') {\n    roomSignaling._mediaConnectionIsReconnecting = true;\n    newState = 'reconnecting';\n  } else if (roomSignaling.mediaConnectionState === 'new' || roomSignaling.mediaConnectionState === 'checking') {\n    newState = roomSignaling._mediaConnectionIsReconnecting ? 'reconnecting' : 'connected';\n  } else {\n    roomSignaling._mediaConnectionIsReconnecting = false;\n    newState = 'connected';\n  }\n\n  if (newState === roomSignaling.state) {\n    return;\n  }\n\n  roomSignaling.preempt(newState);\n}\n\nmodule.exports = RoomSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///257\n");

/***/ }),
/* 258 */
/*!**********************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/track.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! events */ 207),\n    EventEmitter = _require.EventEmitter;\n\n/**\n * A {@link Track} implementation\n * @extends EventEmitter\n * @property {Track.Kind} kind\n * @property {string} name\n */\n\n\nvar TrackSignaling = function (_EventEmitter) {\n  _inherits(TrackSignaling, _EventEmitter);\n\n  /**\n   * Construct a {@link TrackSignaling}.\n   * @param {string} name\n   * @param {Track.Kind} kind\n   * @param {boolean} isEnabled\n   */\n  function TrackSignaling(name, kind, isEnabled) {\n    _classCallCheck(this, TrackSignaling);\n\n    var _this = _possibleConstructorReturn(this, (TrackSignaling.__proto__ || Object.getPrototypeOf(TrackSignaling)).call(this));\n\n    var sid = null;\n    Object.defineProperties(_this, {\n      _isEnabled: {\n        value: isEnabled,\n        writable: true\n      },\n      _trackTransceiver: {\n        value: null,\n        writable: true\n      },\n      _sid: {\n        get: function get() {\n          return sid;\n        },\n        set: function set(_sid) {\n          if (sid === null) {\n            sid = _sid;\n          }\n        }\n      },\n      kind: {\n        enumerable: true,\n        value: kind\n      },\n      name: {\n        enumerable: true,\n        value: name\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Whether the {@link TrackSignaling} is enabled.\n   * @property {boolean}\n   */\n\n\n  _createClass(TrackSignaling, [{\n    key: 'disable',\n\n\n    /**\n     * Disable the {@link TrackSignaling} if it is not already disabled.\n     * @return {this}\n     */\n    value: function disable() {\n      return this.enable(false);\n    }\n\n    /**\n     * Enable (or disable) the {@link TrackSignaling} if it is not already enabled\n     * (or disabled).\n     * @param {boolean} [enabled=true]\n     * @return {this}\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable(enabled) {\n      enabled = typeof enabled === 'boolean' ? enabled : true;\n      if (this.isEnabled !== enabled) {\n        this._isEnabled = enabled;\n        this.emit('updated');\n      }\n      return this;\n    }\n\n    /**\n     * Set the {@link TrackTransceiver} on the {@link TrackSignaling}.\n     * @param {TrackTransceiver} trackTransceiver\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setTrackTransceiver',\n    value: function setTrackTransceiver(trackTransceiver) {\n      trackTransceiver = trackTransceiver || null;\n      if (this.trackTransceiver !== trackTransceiver) {\n        this._trackTransceiver = trackTransceiver;\n        this.emit('updated');\n      }\n      return this;\n    }\n\n    /**\n     * Set the SID on the {@link TrackSignaling} once.\n     * @param {string} sid\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setSid',\n    value: function setSid(sid) {\n      if (this.sid === null) {\n        this._sid = sid;\n        this.emit('updated');\n      }\n      return this;\n    }\n  }, {\n    key: 'isEnabled',\n    get: function get() {\n      return this._isEnabled;\n    }\n\n    /**\n     * The {@link TrackSignaling}'s {@link Track.SID}.\n     * @property {Track.SID}\n     */\n\n  }, {\n    key: 'sid',\n    get: function get() {\n      return this._sid;\n    }\n\n    /**\n     * The {@link TrackSignaling}'s {@link TrackTransceiver}.\n     * @property {TrackTransceiver}\n     */\n\n  }, {\n    key: 'trackTransceiver',\n    get: function get() {\n      return this._trackTransceiver;\n    }\n  }]);\n\n  return TrackSignaling;\n}(EventEmitter);\n\n/**\n * Emitted whenever the {@link TrackSignaling} is updated\n * @event TrackSignaling#updated\n */\n\nmodule.exports = TrackSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///258\n");

/***/ }),
/* 259 */
/*!*********************************************!*\
  !*** ./node_modules/twilio-video/src/ws.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL3NyYy93cy5qcz80NDk3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjI1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL3NyYy93cy5qc1xuLy8gbW9kdWxlIGlkID0gMjU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///259\n");

/***/ }),
/* 260 */
/*!*************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/sipjsmediahandler.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SIP = __webpack_require__(/*! ../../sip */ 229);\n\nvar SIPJSMediaHandler = function () {\n  function SIPJSMediaHandler(peerConnectionManager, createMessage) {\n    _classCallCheck(this, SIPJSMediaHandler);\n\n    Object.defineProperties(this, {\n      createMessage: {\n        enumerable: true,\n        value: createMessage\n      },\n      peerConnectionManager: {\n        enumerable: true,\n        value: peerConnectionManager\n      }\n    });\n  }\n\n  _createClass(SIPJSMediaHandler, [{\n    key: 'close',\n    value: function close() {\n      this.peerConnectionManager.close();\n    }\n  }, {\n    key: 'getDescription',\n    value: function getDescription() {\n      var connectMessage = Object.assign({\n        /* eslint camelcase:0 */\n        peer_connections: this.peerConnectionManager.getStates()\n      }, this.createMessage());\n      return Promise.resolve({\n        body: JSON.stringify(connectMessage),\n        contentType: 'application/room-signaling+json'\n      });\n    }\n  }, {\n    key: 'hasDescription',\n    value: function hasDescription() {\n      return true;\n    }\n  }, {\n    key: 'hold',\n    value: function hold() {\n      // NOTE(mroberts): We don't use SIP.js's hold functionality.\n    }\n  }, {\n    key: 'isReady',\n    value: function isReady() {\n      // NOTE(mroberts): We don't use SIP.js's isReady functionality.\n      return true;\n    }\n  }, {\n    key: 'isMuted',\n    value: function isMuted() {\n      // NOTE(mroberts): We don't use SIP.js's isMuted functionality.\n      return {\n        audio: false,\n        video: false\n      };\n    }\n  }, {\n    key: 'mute',\n    value: function mute() {\n      // NOTE(mroberts): We don't use SIP.js's mute functionality.\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // NOTE(mroberts): We don't use SIP.js's render functionality.\n    }\n  }, {\n    key: 'setDescription',\n    value: function setDescription(message) {\n      var roomState = getRoomState(message);\n      if (roomState) {\n        var peerConnectionStates = roomState.peer_connections;\n        if (peerConnectionStates) {\n          return this.peerConnectionManager.update(peerConnectionStates);\n        }\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: 'unhold',\n    value: function unhold() {\n      // NOTE(mroberts): We don't use SIP.js's unhold functionality.\n    }\n  }, {\n    key: 'unmute',\n    value: function unmute() {\n      // NOTE(mroberts): We don't use SIP.js's unmute functionality.\n    }\n  }, {\n    key: 'updateIceServers',\n    value: function updateIceServers() {\n      // NOTE(mroberts): We don't use SIP.js's ICE server functionality.\n    }\n  }], [{\n    key: 'defaultFactory',\n    value: function defaultFactory() {\n      // NOTE(mroberts): We don't use SIP.js's defaultFactory functionality.\n    }\n  }]);\n\n  return SIPJSMediaHandler;\n}();\n\nSIPJSMediaHandler.defaultFactory.isSupported = function isSupported() {\n  return SIP.WebRTC.isSupported();\n};\n\nfunction getRoomState(message) {\n  try {\n    return JSON.parse(message.body);\n  } catch (error) {\n    return null;\n  }\n}\n\nmodule.exports = SIPJSMediaHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvc2lwanNtZWRpYWhhbmRsZXIuanM/ZDBkNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosVUFBVSxtQkFBTyxDQUFDLG9CQUFXOztBQUU3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNJUCA9IHJlcXVpcmUoJy4uLy4uL3NpcCcpO1xuXG52YXIgU0lQSlNNZWRpYUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNJUEpTTWVkaWFIYW5kbGVyKHBlZXJDb25uZWN0aW9uTWFuYWdlciwgY3JlYXRlTWVzc2FnZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTSVBKU01lZGlhSGFuZGxlcik7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBjcmVhdGVNZXNzYWdlOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBjcmVhdGVNZXNzYWdlXG4gICAgICB9LFxuICAgICAgcGVlckNvbm5lY3Rpb25NYW5hZ2VyOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBwZWVyQ29ubmVjdGlvbk1hbmFnZXJcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTSVBKU01lZGlhSGFuZGxlciwgW3tcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbk1hbmFnZXIuY2xvc2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREZXNjcmlwdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIGNvbm5lY3RNZXNzYWdlID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIC8qIGVzbGludCBjYW1lbGNhc2U6MCAqL1xuICAgICAgICBwZWVyX2Nvbm5lY3Rpb25zOiB0aGlzLnBlZXJDb25uZWN0aW9uTWFuYWdlci5nZXRTdGF0ZXMoKVxuICAgICAgfSwgdGhpcy5jcmVhdGVNZXNzYWdlKCkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNvbm5lY3RNZXNzYWdlKSxcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9yb29tLXNpZ25hbGluZytqc29uJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFzRGVzY3JpcHRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNEZXNjcmlwdGlvbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hvbGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBob2xkKCkge1xuICAgICAgLy8gTk9URShtcm9iZXJ0cyk6IFdlIGRvbid0IHVzZSBTSVAuanMncyBob2xkIGZ1bmN0aW9uYWxpdHkuXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNSZWFkeScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzUmVhZHkoKSB7XG4gICAgICAvLyBOT1RFKG1yb2JlcnRzKTogV2UgZG9uJ3QgdXNlIFNJUC5qcydzIGlzUmVhZHkgZnVuY3Rpb25hbGl0eS5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzTXV0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc011dGVkKCkge1xuICAgICAgLy8gTk9URShtcm9iZXJ0cyk6IFdlIGRvbid0IHVzZSBTSVAuanMncyBpc011dGVkIGZ1bmN0aW9uYWxpdHkuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBhdWRpbzogZmFsc2UsXG4gICAgICAgIHZpZGVvOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdtdXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbXV0ZSgpIHtcbiAgICAgIC8vIE5PVEUobXJvYmVydHMpOiBXZSBkb24ndCB1c2UgU0lQLmpzJ3MgbXV0ZSBmdW5jdGlvbmFsaXR5LlxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIC8vIE5PVEUobXJvYmVydHMpOiBXZSBkb24ndCB1c2UgU0lQLmpzJ3MgcmVuZGVyIGZ1bmN0aW9uYWxpdHkuXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0RGVzY3JpcHRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZXNjcmlwdGlvbihtZXNzYWdlKSB7XG4gICAgICB2YXIgcm9vbVN0YXRlID0gZ2V0Um9vbVN0YXRlKG1lc3NhZ2UpO1xuICAgICAgaWYgKHJvb21TdGF0ZSkge1xuICAgICAgICB2YXIgcGVlckNvbm5lY3Rpb25TdGF0ZXMgPSByb29tU3RhdGUucGVlcl9jb25uZWN0aW9ucztcbiAgICAgICAgaWYgKHBlZXJDb25uZWN0aW9uU3RhdGVzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGVlckNvbm5lY3Rpb25NYW5hZ2VyLnVwZGF0ZShwZWVyQ29ubmVjdGlvblN0YXRlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bmhvbGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmhvbGQoKSB7XG4gICAgICAvLyBOT1RFKG1yb2JlcnRzKTogV2UgZG9uJ3QgdXNlIFNJUC5qcydzIHVuaG9sZCBmdW5jdGlvbmFsaXR5LlxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VubXV0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVubXV0ZSgpIHtcbiAgICAgIC8vIE5PVEUobXJvYmVydHMpOiBXZSBkb24ndCB1c2UgU0lQLmpzJ3MgdW5tdXRlIGZ1bmN0aW9uYWxpdHkuXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlSWNlU2VydmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUljZVNlcnZlcnMoKSB7XG4gICAgICAvLyBOT1RFKG1yb2JlcnRzKTogV2UgZG9uJ3QgdXNlIFNJUC5qcydzIElDRSBzZXJ2ZXIgZnVuY3Rpb25hbGl0eS5cbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2RlZmF1bHRGYWN0b3J5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdEZhY3RvcnkoKSB7XG4gICAgICAvLyBOT1RFKG1yb2JlcnRzKTogV2UgZG9uJ3QgdXNlIFNJUC5qcydzIGRlZmF1bHRGYWN0b3J5IGZ1bmN0aW9uYWxpdHkuXG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNJUEpTTWVkaWFIYW5kbGVyO1xufSgpO1xuXG5TSVBKU01lZGlhSGFuZGxlci5kZWZhdWx0RmFjdG9yeS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICByZXR1cm4gU0lQLldlYlJUQy5pc1N1cHBvcnRlZCgpO1xufTtcblxuZnVuY3Rpb24gZ2V0Um9vbVN0YXRlKG1lc3NhZ2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShtZXNzYWdlLmJvZHkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU0lQSlNNZWRpYUhhbmRsZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvc2lwanNtZWRpYWhhbmRsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///260\n");

/***/ }),
/* 261 */
/*!***********************************************************!*\
  !*** ./node_modules/twilio-video/es5/createlocaltrack.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaultCreateLocalTracks = __webpack_require__(/*! ./createlocaltracks */ 221);\nvar DEFAULT_LOG_LEVEL = __webpack_require__(/*! ./util/constants */ 208).DEFAULT_LOG_LEVEL;\n\n/**\n * Request a {@link LocalAudioTrack} or {@link LocalVideoTrack}.\n * @param {Track.Kind} kind - \"audio\" or \"video\"\n * @param {CreateLocalTrackOptions} [options]\n * @returns {Promise<LocalAudioTrack|LocalVideoTrack>}\n * @private\n */\nfunction createLocalTrack(kind, options) {\n  options = Object.assign({\n    createLocalTracks: defaultCreateLocalTracks,\n    logLevel: DEFAULT_LOG_LEVEL\n  }, options);\n\n  var createOptions = {};\n  createOptions.logLevel = options.logLevel;\n  delete options.logLevel;\n\n  var createLocalTracks = options.createLocalTracks;\n  delete options.createLocalTracks;\n  createOptions[kind] = Object.keys(options).length > 0 ? options : true;\n\n  return createLocalTracks(createOptions).then(function (localTracks) {\n    return localTracks[0];\n  });\n}\n\n/**\n * Request a {@link LocalAudioTrack}.\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalAudioTrack}\n * @returns {Promise<LocalAudioTrack>}\n * @example\n * var Video = require('twilio-video');\n *\n * // Connect to the Room with just video\n * Video.connect('my-token', {\n *   name: 'my-cool-room',\n *   video: true\n * }).then(function(room) {\n *   // Add audio after connecting to the Room\n *   Video.createLocalAudioTrack().then(function(localTrack) {\n *     room.localParticipant.publishTrack(localTrack);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n *\n * // Request the default LocalAudioTrack with a custom name\n * Video.createLocalAudioTrack({ name: 'microphone' }).then(function(localTrack) {\n *   console.log(localTrack.name); // 'microphone'\n * });\n */\nfunction createLocalAudioTrack(options) {\n  return createLocalTrack('audio', options);\n}\n\n/**\n * Request a {@link LocalVideoTrack}.\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalVideoTrack}\n * @returns {Promise<LocalVideoTrack>}\n * @example\n * var Video = require('twilio-video');\n *\n * // Connect to the Room with just audio\n * Video.connect('my-token', {\n *   name: 'my-cool-room',\n *   audio: true\n * }).then(function(room) {\n *   // Add video after connecting to the Room\n *   Video.createLocalVideoTrack().then(function(localTrack) {\n *     room.localParticipant.publishTrack(localTrack);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n *\n * // Request the default LocalVideoTrack with a custom name\n * Video.createLocalVideoTrack({ name: 'camera' }).then(function(localTrack) {\n *   console.log(localTrack.name); // 'camera'\n * });\n */\nfunction createLocalVideoTrack(options) {\n  return createLocalTrack('video', options);\n}\n\n/**\n * Create {@link LocalTrack} options.\n * @typedef {MediaTrackConstraints} CreateLocalTrackOptions\n * @property {LogLevel|LogLevels} logLevel\n * @property {string} [name] - The {@link LocalTrack}'s name; by default,\n *   it is set to the {@link LocalTrack}'s ID.\n * @property {boolean} [workaroundWebKitBug180748=false] - Only valid for\n *   {@link LocalAudioTrack}s; setting this attempts to workaround WebKit Bug\n *   180748, where, in Safari, getUserMedia may return a silent audio\n *   MediaStreamTrack.\n */\n\nmodule.exports = {\n  audio: createLocalAudioTrack,\n  video: createLocalVideoTrack\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9jcmVhdGVsb2NhbHRyYWNrLmpzP2Y0NWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsK0JBQStCLG1CQUFPLENBQUMsOEJBQXFCO0FBQzVELHdCQUF3QixtQkFBTyxDQUFDLDJCQUFrQjs7QUFFbEQ7QUFDQSxjQUFjLHNCQUFzQixLQUFLLHNCQUFzQjtBQUMvRCxXQUFXLFdBQVc7QUFDdEIsV0FBVyx3QkFBd0I7QUFDbkMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEMsV0FBVyx3QkFBd0IsdUNBQXVDO0FBQzFFLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHFCQUFxQjtBQUNyRCxrQ0FBa0M7QUFDbEMsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEMsV0FBVyx3QkFBd0IsdUNBQXVDO0FBQzFFLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRCxrQ0FBa0M7QUFDbEMsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsYUFBYSxzQkFBc0I7QUFDbkMsY0FBYyxtQkFBbUI7QUFDakMsY0FBYyxPQUFPLGVBQWUsaUJBQWlCLFFBQVE7QUFDN0QsdUJBQXVCLGlCQUFpQjtBQUN4QyxjQUFjLFFBQVE7QUFDdEIsTUFBTSxzQkFBc0IsRUFBRTtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjYxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdENyZWF0ZUxvY2FsVHJhY2tzID0gcmVxdWlyZSgnLi9jcmVhdGVsb2NhbHRyYWNrcycpO1xudmFyIERFRkFVTFRfTE9HX0xFVkVMID0gcmVxdWlyZSgnLi91dGlsL2NvbnN0YW50cycpLkRFRkFVTFRfTE9HX0xFVkVMO1xuXG4vKipcbiAqIFJlcXVlc3QgYSB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrfSBvciB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrfS5cbiAqIEBwYXJhbSB7VHJhY2suS2luZH0ga2luZCAtIFwiYXVkaW9cIiBvciBcInZpZGVvXCJcbiAqIEBwYXJhbSB7Q3JlYXRlTG9jYWxUcmFja09wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge1Byb21pc2U8TG9jYWxBdWRpb1RyYWNrfExvY2FsVmlkZW9UcmFjaz59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2NhbFRyYWNrKGtpbmQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGNyZWF0ZUxvY2FsVHJhY2tzOiBkZWZhdWx0Q3JlYXRlTG9jYWxUcmFja3MsXG4gICAgbG9nTGV2ZWw6IERFRkFVTFRfTE9HX0xFVkVMXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBjcmVhdGVPcHRpb25zID0ge307XG4gIGNyZWF0ZU9wdGlvbnMubG9nTGV2ZWwgPSBvcHRpb25zLmxvZ0xldmVsO1xuICBkZWxldGUgb3B0aW9ucy5sb2dMZXZlbDtcblxuICB2YXIgY3JlYXRlTG9jYWxUcmFja3MgPSBvcHRpb25zLmNyZWF0ZUxvY2FsVHJhY2tzO1xuICBkZWxldGUgb3B0aW9ucy5jcmVhdGVMb2NhbFRyYWNrcztcbiAgY3JlYXRlT3B0aW9uc1traW5kXSA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA+IDAgPyBvcHRpb25zIDogdHJ1ZTtcblxuICByZXR1cm4gY3JlYXRlTG9jYWxUcmFja3MoY3JlYXRlT3B0aW9ucykudGhlbihmdW5jdGlvbiAobG9jYWxUcmFja3MpIHtcbiAgICByZXR1cm4gbG9jYWxUcmFja3NbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIFJlcXVlc3QgYSB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrfS5cbiAqIEBwYXJhbSB7Q3JlYXRlTG9jYWxUcmFja09wdGlvbnN9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIHJlcXVlc3RpbmcgYSB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrfVxuICogQHJldHVybnMge1Byb21pc2U8TG9jYWxBdWRpb1RyYWNrPn1cbiAqIEBleGFtcGxlXG4gKiB2YXIgVmlkZW8gPSByZXF1aXJlKCd0d2lsaW8tdmlkZW8nKTtcbiAqXG4gKiAvLyBDb25uZWN0IHRvIHRoZSBSb29tIHdpdGgganVzdCB2aWRlb1xuICogVmlkZW8uY29ubmVjdCgnbXktdG9rZW4nLCB7XG4gKiAgIG5hbWU6ICdteS1jb29sLXJvb20nLFxuICogICB2aWRlbzogdHJ1ZVxuICogfSkudGhlbihmdW5jdGlvbihyb29tKSB7XG4gKiAgIC8vIEFkZCBhdWRpbyBhZnRlciBjb25uZWN0aW5nIHRvIHRoZSBSb29tXG4gKiAgIFZpZGVvLmNyZWF0ZUxvY2FsQXVkaW9UcmFjaygpLnRoZW4oZnVuY3Rpb24obG9jYWxUcmFjaykge1xuICogICAgIHJvb20ubG9jYWxQYXJ0aWNpcGFudC5wdWJsaXNoVHJhY2sobG9jYWxUcmFjayk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogdmFyIFZpZGVvID0gcmVxdWlyZSgndHdpbGlvLXZpZGVvJyk7XG4gKlxuICogLy8gUmVxdWVzdCB0aGUgZGVmYXVsdCBMb2NhbEF1ZGlvVHJhY2sgd2l0aCBhIGN1c3RvbSBuYW1lXG4gKiBWaWRlby5jcmVhdGVMb2NhbEF1ZGlvVHJhY2soeyBuYW1lOiAnbWljcm9waG9uZScgfSkudGhlbihmdW5jdGlvbihsb2NhbFRyYWNrKSB7XG4gKiAgIGNvbnNvbGUubG9nKGxvY2FsVHJhY2submFtZSk7IC8vICdtaWNyb3Bob25lJ1xuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsQXVkaW9UcmFjayhvcHRpb25zKSB7XG4gIHJldHVybiBjcmVhdGVMb2NhbFRyYWNrKCdhdWRpbycsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFJlcXVlc3QgYSB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrfS5cbiAqIEBwYXJhbSB7Q3JlYXRlTG9jYWxUcmFja09wdGlvbnN9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIHJlcXVlc3RpbmcgYSB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrfVxuICogQHJldHVybnMge1Byb21pc2U8TG9jYWxWaWRlb1RyYWNrPn1cbiAqIEBleGFtcGxlXG4gKiB2YXIgVmlkZW8gPSByZXF1aXJlKCd0d2lsaW8tdmlkZW8nKTtcbiAqXG4gKiAvLyBDb25uZWN0IHRvIHRoZSBSb29tIHdpdGgganVzdCBhdWRpb1xuICogVmlkZW8uY29ubmVjdCgnbXktdG9rZW4nLCB7XG4gKiAgIG5hbWU6ICdteS1jb29sLXJvb20nLFxuICogICBhdWRpbzogdHJ1ZVxuICogfSkudGhlbihmdW5jdGlvbihyb29tKSB7XG4gKiAgIC8vIEFkZCB2aWRlbyBhZnRlciBjb25uZWN0aW5nIHRvIHRoZSBSb29tXG4gKiAgIFZpZGVvLmNyZWF0ZUxvY2FsVmlkZW9UcmFjaygpLnRoZW4oZnVuY3Rpb24obG9jYWxUcmFjaykge1xuICogICAgIHJvb20ubG9jYWxQYXJ0aWNpcGFudC5wdWJsaXNoVHJhY2sobG9jYWxUcmFjayk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogdmFyIFZpZGVvID0gcmVxdWlyZSgndHdpbGlvLXZpZGVvJyk7XG4gKlxuICogLy8gUmVxdWVzdCB0aGUgZGVmYXVsdCBMb2NhbFZpZGVvVHJhY2sgd2l0aCBhIGN1c3RvbSBuYW1lXG4gKiBWaWRlby5jcmVhdGVMb2NhbFZpZGVvVHJhY2soeyBuYW1lOiAnY2FtZXJhJyB9KS50aGVuKGZ1bmN0aW9uKGxvY2FsVHJhY2spIHtcbiAqICAgY29uc29sZS5sb2cobG9jYWxUcmFjay5uYW1lKTsgLy8gJ2NhbWVyYSdcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVMb2NhbFZpZGVvVHJhY2sob3B0aW9ucykge1xuICByZXR1cm4gY3JlYXRlTG9jYWxUcmFjaygndmlkZW8nLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUge0BsaW5rIExvY2FsVHJhY2t9IG9wdGlvbnMuXG4gKiBAdHlwZWRlZiB7TWVkaWFUcmFja0NvbnN0cmFpbnRzfSBDcmVhdGVMb2NhbFRyYWNrT3B0aW9uc1xuICogQHByb3BlcnR5IHtMb2dMZXZlbHxMb2dMZXZlbHN9IGxvZ0xldmVsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIC0gVGhlIHtAbGluayBMb2NhbFRyYWNrfSdzIG5hbWU7IGJ5IGRlZmF1bHQsXG4gKiAgIGl0IGlzIHNldCB0byB0aGUge0BsaW5rIExvY2FsVHJhY2t9J3MgSUQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt3b3JrYXJvdW5kV2ViS2l0QnVnMTgwNzQ4PWZhbHNlXSAtIE9ubHkgdmFsaWQgZm9yXG4gKiAgIHtAbGluayBMb2NhbEF1ZGlvVHJhY2t9czsgc2V0dGluZyB0aGlzIGF0dGVtcHRzIHRvIHdvcmthcm91bmQgV2ViS2l0IEJ1Z1xuICogICAxODA3NDgsIHdoZXJlLCBpbiBTYWZhcmksIGdldFVzZXJNZWRpYSBtYXkgcmV0dXJuIGEgc2lsZW50IGF1ZGlvXG4gKiAgIE1lZGlhU3RyZWFtVHJhY2suXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGF1ZGlvOiBjcmVhdGVMb2NhbEF1ZGlvVHJhY2ssXG4gIHZpZGVvOiBjcmVhdGVMb2NhbFZpZGVvVHJhY2tcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9jcmVhdGVsb2NhbHRyYWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///261\n");

/***/ }),
/* 262 */
/*!**************************************************!*\
  !*** ./node_modules/twilio-video/es5/connect.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar CancelablePromise = __webpack_require__(/*! ./util/cancelablepromise */ 220);\nvar createCancelableRoomPromise = __webpack_require__(/*! ./cancelableroompromise */ 263);\nvar createLocalTracks = __webpack_require__(/*! ./createlocaltracks */ 221);\nvar ConstantIceServerSource = __webpack_require__(/*! ./iceserversource/constant */ 283);\nvar constants = __webpack_require__(/*! ./util/constants */ 208);\nvar Room = __webpack_require__(/*! ./room */ 284);\nvar E = __webpack_require__(/*! ./util/constants */ 208).typeErrors;\nvar EncodingParametersImpl = __webpack_require__(/*! ./encodingparameters */ 297);\nvar guessBrowser = __webpack_require__(/*! ./util */ 206).guessBrowser;\nvar LocalAudioTrack = __webpack_require__(/*! ./media/track/es5/localaudiotrack */ 216);\nvar LocalDataTrack = __webpack_require__(/*! ./media/track/es5/localdatatrack */ 217);\nvar LocalParticipant = __webpack_require__(/*! ./localparticipant */ 298);\nvar LocalVideoTrack = __webpack_require__(/*! ./media/track/es5/localvideotrack */ 218);\nvar Log = __webpack_require__(/*! ./util/log */ 214);\nvar MediaStreamTrack = __webpack_require__(/*! @twilio/webrtc */ 212).MediaStreamTrack;\nvar NTSIceServerSource = __webpack_require__(/*! ./iceserversource/nts */ 302);\nvar SignalingV2 = __webpack_require__(/*! ./signaling/v2 */ 307);\nvar util = __webpack_require__(/*! ./util */ 206);\n\n// This is used to make out which connect() call a particular Log statement\n// belongs to. Each call to connect() increments this counter.\nvar connectCalls = 0;\n\nvar didPrintSafariWarning = false;\n\n/**\n * Connect to a {@link Room}.\n *   <br><br>\n *   By default, this will automatically acquire an array containing a\n *   {@link LocalAudioTrack} and {@link LocalVideoTrack} before connecting to\n *   the {@link Room}. These will be stopped when you disconnect from the\n *   {@link Room}.\n *   <br><br>\n *   You can override the default behavior by specifying\n *   <code>options</code>. For example, rather than acquiring a\n *   {@link LocalAudioTrack} and {@link LocalVideoTrack} automatically, you can\n *   pass your own array which you can stop yourself. See {@link ConnectOptions}\n *   for more information.\n * @param {string} token - The Access Token string\n * @param {ConnectOptions} [options] - Options to override the default behavior\n * @returns {CancelablePromise<Room>}\n * @throws {RangeError}\n * @throws {TwilioError}\n * @throws {TypeError}\n * @example\n * var Video = require('twilio-video');\n * var token = getAccessToken();\n * Video.connect(token, {\n *   name: 'my-cool-room'\n * }).then(function(room) {\n *   room.on('participantConnected', function(participant) {\n *     console.log(participant.identity + ' has connected');\n *   });\n\n *   room.once('disconnected', function() {\n *     console.log('You left the Room:', room.name);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * var token = getAccessToken();\n *\n * // Connect with audio-only\n * Video.connect(token, {\n *   name: 'my-cool-room',\n *   audio: true\n * }).then(function(room) {\n *   room.on('participantConnected', function(participant) {\n *     console.log(participant.identity + ' has connected');\n *   });\n *\n *   room.once('disconnected', function() {\n *     console.log('You left the Room:', room.name);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * var token = getAccessToken();\n *\n * // Connect with media acquired using getUserMedia()\n * navigator.mediaDevices.getUserMedia({\n *   audio: true,\n *   video: true\n * }).then(function(mediaStream) {\n *   return Video.connect(token, {\n *     name: 'my-cool-room',\n *     tracks: mediaStream.getTracks()\n *   });\n * }).then(function(room) {\n *   room.on('participantConnected', function(participant) {\n *     console.log(participant.identity + ' has connected');\n *   });\n *\n *   room.once('disconnected', function() {\n *     console.log('You left the Room:', room.name);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * var token = getAccessToken();\n *\n * // Connect with custom names for LocalAudioTrack and LocalVideoTrack\n * Video.connect(token, {\n *   name: 'my-cool-room'\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(room) {\n *   room.localParticipants.trackPublications.forEach(function(publication) {\n *     console.log('The LocalTrack \"' + publication.trackName + '\" was successfully published');\n *   });\n * });\n */\nfunction connect(token, options) {\n  if (typeof options === 'undefined') {\n    options = {};\n  }\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || Array.isArray(options)) {\n    return CancelablePromise.reject(E.INVALID_TYPE('options', 'object'));\n  }\n\n  options = Object.assign({\n    abortOnIceServersTimeout: false,\n    createLocalTracks: createLocalTracks,\n    environment: constants.DEFAULT_ENVIRONMENT,\n    iceServersTimeout: constants.ICE_SERVERS_TIMEOUT_MS,\n    insights: true,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalParticipant: LocalParticipant,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    logLevel: constants.DEFAULT_LOG_LEVEL,\n    maxAudioBitrate: null,\n    maxVideoBitrate: null,\n    name: null,\n    preferredAudioCodecs: [],\n    preferredVideoCodecs: [],\n    realm: constants.DEFAULT_REALM,\n    signaling: SignalingV2\n  }, util.filterObject(options));\n\n  /* eslint new-cap:0 */\n  options = Object.assign({\n    wsServer: constants.WS_SERVER(options.environment, options.realm)\n  }, options);\n\n  var logLevels = util.buildLogLevels(options.logLevel);\n  var logComponentName = '[connect #' + ++connectCalls + ']';\n\n  var log = void 0;\n  try {\n    log = new Log('default', logComponentName, logLevels);\n  } catch (error) {\n    return CancelablePromise.reject(error);\n  }\n  options.log = log;\n\n  // NOTE(mroberts): Print the Safari warning once if the log-level is at least\n  // \"warn\", i.e. neither \"error\" nor \"off\".\n  if (guessBrowser() === 'safari' && !didPrintSafariWarning && log.logLevel !== 'error' && log.logLevel !== 'off') {\n    didPrintSafariWarning = true;\n    log.warn(['This release of twilio-video.js includes experimental support for', 'Safari 11 and newer. Support for Safari is \"experimental\" because,', 'at the time of writing, Safari does not support VP8. This means you', 'may experience codec issues in Group Rooms. You may also experience', 'codec issues in Peer-to-Peer (P2P) Rooms containing Android- or', 'iOS-based Participants who do not support H.264. However, P2P Rooms', 'with browser-based Participants should work. Please test this release', 'and report any issues to https://github.com/twilio/twilio-video.js'].join(' '));\n  }\n\n  if (typeof token !== 'string') {\n    return CancelablePromise.reject(E.INVALID_TYPE('token', 'string'));\n  }\n\n  // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n  var localTrackOptions = Object.assign({}, options);\n  delete localTrackOptions.name;\n\n  if ('tracks' in options) {\n    if (!Array.isArray(options.tracks)) {\n      return CancelablePromise.reject(E.INVALID_TYPE('options.tracks', 'Array of LocalAudioTrack, LocalVideoTrack or MediaStreamTrack'));\n    }\n    try {\n      options.tracks = options.tracks.map(function (track) {\n        return util.asLocalTrack(track, localTrackOptions);\n      });\n    } catch (error) {\n      return CancelablePromise.reject(error);\n    }\n  }\n\n  var Signaling = options.signaling;\n  var signaling = new Signaling(options.wsServer, options);\n\n  log.info('Connecting to a Room');\n  log.debug('Options:', options);\n\n  var encodingParameters = new EncodingParametersImpl({\n    maxAudioBitrate: options.maxAudioBitrate,\n    maxVideoBitrate: options.maxVideoBitrate\n  });\n\n  var ntsIceServerSourceOptions = Object.assign({}, options, {\n    abortOnTimeout: options.abortOnIceServersTimeout,\n    timeout: options.iceServersTimeout\n  });\n\n  var iceServerSource = Array.isArray(options.iceServers) ? new ConstantIceServerSource(options.iceServers) : _typeof(options.iceServers) === 'object' ? options.iceServers : new NTSIceServerSource(token, ntsIceServerSourceOptions);\n\n  var preferredCodecs = {\n    audio: options.preferredAudioCodecs,\n    video: options.preferredVideoCodecs.map(normalizeVideoCodecSettings)\n  };\n\n  // Create a CancelableRoomPromise<Room> that resolves after these steps:\n  // 1 - Get the LocalTracks.\n  // 2 - Create the LocalParticipant using options.tracks.\n  // 3 - Connect to rtc-room-service and create the RoomSignaling.\n  // 4 - Create the Room and then resolve the CancelablePromise.\n  var cancelableRoomPromise = createCancelableRoomPromise(getLocalTracks.bind(null, options), createLocalParticipant.bind(null, signaling, log, encodingParameters, options), createRoomSignaling.bind(null, token, options, signaling, iceServerSource, encodingParameters, preferredCodecs), createRoom.bind(null, options));\n\n  cancelableRoomPromise.then(function (room) {\n    log.info('Connected to Room:', room.toString());\n    log.info('Room name:', room.name);\n    log.debug('Room:', room);\n    return room;\n  }, function (error) {\n    if (iceServerSource.isStarted) {\n      iceServerSource.stop();\n    }\n    if (cancelableRoomPromise._isCanceled) {\n      log.info('Attempt to connect to a Room was canceled');\n    } else {\n      log.info('Error while connecting to a Room:', error);\n    }\n  });\n\n  return cancelableRoomPromise;\n}\n\n/**\n * You may pass these options to {@link connect} in order to override the\n * default behavior.\n * @typedef {object} ConnectOptions\n * @property {boolean} [abortOnIceServersTimeout=false] - If fetching ICE\n *   servers times out (for example, due to a restrictive network or slow HTTP\n *   proxy), then, by default, twilio-video.js will fallback to using hard-coded\n *   STUN servers and continue connecting to the Room. Setting this property to\n *   <code>true</code> will cause twilio-video.js to abort instead, and\n *   {@link connect} will reject with a {@link ConfigurationAcquireFailedError}.\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {boolean} [dominantSpeaker=false] - Whether to enable the Dominant\n *   Speaker API or not. This only takes effect in Group Rooms.\n * @property {Array<RTCIceServer>} iceServers - Override the STUN and TURN\n *   servers used when connecting to {@link Room}s\n * @property {number} [iceServersTimeout=3000] - Override the amount of time, in\n *   milliseconds, that the SDK will wait when acquiring STUN and TURN servers\n * @property {RTCIceTransportPolicy} [iceTransportPolicy=\"all\"] - Override the\n *   ICE transport policy to be one of \"relay\" or \"all\"\n * @property {boolean} [insights=true] - Whether publishing events\n *   to the Insights gateway is enabled or not\n * @property {?number} [maxAudioBitrate=null] - Max outgoing audio bitrate (bps);\n *   A <code>null</code> value does not set any bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs\n * @property {?number} [maxVideoBitrate=null] - Max outgoing video bitrate (bps);\n *   A <code>null</code> value does not set any bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs\n * @property {?string} [name=null] - Set to connect to a {@link Room} by name\n * @property {boolean} [networkQuality=false] - Whether to enable the Network\n *   Quality API or not. This only takes effect in Group Rooms.\n * @property {Array<AudioCodec>} [preferredAudioCodecs=[]] - Preferred audio codecs;\n *  An empty array preserves the current audio codec preference order.\n * @property {Array<VideoCodec|VideoCodecSettings>} [preferredVideoCodecs=[]] -\n *  Preferred video codecs; An empty array preserves the current video codec\n *  preference order. If you want to set a preferred video codec on a Group Room,\n *  you will need to create the Room using the REST API and set the\n *  <code>VideoCodecs</code> property.\n *  See <a href=\"https://www.twilio.com/docs/api/video/rooms-resource#create-room\">\n *  here</a> for more information.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - Set the log verbosity\n *   of logging to console. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {Array<LocalTrack|MediaStreamTrack>} [tracks] - The\n *   {@link LocalTrack}s or MediaStreamTracks with which to join the\n *   {@link Room}. These tracks can be obtained either by calling\n *   {@link createLocalTracks}, or by constructing them from the MediaStream\n *   obtained by calling <code>getUserMedia()</code>.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\n/**\n * You may pass these levels to {@link ConnectOptions} to override\n *   log levels for individual components.\n * @typedef {object} LogLevels\n * @property {LogLevel} [default='warn'] - Log level for 'default' modules.\n * @property {LogLevel} [media='warn'] - Log level for 'media' modules.\n * @property {LogLevel} [signaling='warn'] - Log level for 'signaling' modules.\n * @property {LogLevel} [webrtc='warn'] - Log level for 'webrtc' modules.\n */\n\n/**\n * Video codec settings.\n * @typedef {object} VideoCodecSettings\n * @property {VideoCodec} codec - Video codec name\n */\n\n/**\n * VP8 codec settings.\n * @typedef {VideoCodecSettings} VP8CodecSettings\n * @property {VideoCodec} name - \"VP8\"\n * @property {boolean} [simulcast=false] - Enable/disable VP8 simulcast; if\n *   enabled, Twilio's Video SDK will send three video streams of different\n *   qualities\n */\n\n/**\n * Names of the supported audio codecs.\n * @enum {string}\n */\n// eslint-disable-next-line\nvar AudioCodec = {\n  isac: 'isac',\n  opus: 'opus',\n  PCMA: 'PCMA',\n  PCMU: 'PCMU'\n};\n\n/**\n * Names of the supported video codecs.\n * @enum {string}\n */\n// eslint-disable-next-line\nvar VideoCodec = {\n  H264: 'H264',\n  VP8: 'VP8',\n  VP9: 'VP9'\n};\n\n/**\n * Levels for logging verbosity.\n * @enum {string}\n */\n// eslint-disable-next-line\nvar LogLevel = {\n  debug: 'debug',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  off: 'off'\n};\n\nfunction createLocalParticipant(signaling, log, encodingParameters, options, localTracks) {\n  var localParticipantSignaling = signaling.createLocalParticipantSignaling(encodingParameters);\n  log.debug('Creating a new LocalParticipant:', localParticipantSignaling);\n  return new options.LocalParticipant(localParticipantSignaling, localTracks, options);\n}\n\nfunction createRoom(options, localParticipant, roomSignaling) {\n  var room = new Room(localParticipant, roomSignaling, options);\n  var log = options.log;\n\n  log.debug('Creating a new Room:', room);\n  roomSignaling.on('stateChanged', function stateChanged() {\n    log.info('Disconnected from Room:', room.toString());\n    roomSignaling.removeListener('stateChanged', stateChanged);\n  });\n\n  return room;\n}\n\nfunction createRoomSignaling(token, options, signaling, iceServerSource, encodingParameters, preferredCodecs, localParticipant) {\n  var log = options.log;\n  log.info('Getting ICE servers');\n  log.debug('Options:', options);\n\n  return iceServerSource.start().then(function (iceServers) {\n    var roomSignalingParams = {\n      token: token\n    };\n\n    log.info('Got ICE servers');\n    log.debug('ICE servers:', iceServers);\n\n    options.iceServers = iceServers;\n    log.debug('Creating a new RoomSignaling');\n    log.debug('RoomSignaling params:', roomSignalingParams);\n\n    return signaling.connect(localParticipant._signaling, token, iceServerSource, encodingParameters, preferredCodecs, options);\n  });\n}\n\nfunction getLocalTracks(options, handleLocalTracks) {\n  var log = options.log;\n\n  options.shouldStopLocalTracks = !options.tracks;\n  if (options.shouldStopLocalTracks) {\n    log.info('LocalTracks were not provided, so they will be acquired ' + 'automatically before connecting to the Room. LocalTracks will ' + 'be released if connecting to the Room fails or if the Room ' + 'is disconnected');\n  } else {\n    log.info('Getting LocalTracks');\n    log.debug('Options:', options);\n  }\n\n  return options.createLocalTracks(options).then(function getLocalTracksSucceeded(localTracks) {\n    var promise = handleLocalTracks(localTracks);\n\n    promise.catch(function handleLocalTracksFailed() {\n      if (options.shouldStopLocalTracks) {\n        log.info('The automatically acquired LocalTracks will now be stopped');\n        localTracks.forEach(function (track) {\n          track.stop();\n        });\n      }\n    });\n\n    return promise;\n  });\n}\n\nfunction normalizeVideoCodecSettings(nameOrSettings) {\n  var settings = typeof nameOrSettings === 'string' ? { codec: nameOrSettings } : nameOrSettings;\n  switch (settings.codec.toLowerCase()) {\n    case 'vp8':\n      {\n        return Object.assign({ simulcast: false }, settings);\n      }\n    default:\n      {\n        return settings;\n      }\n  }\n}\n\nmodule.exports = connect;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9jb25uZWN0LmpzP2MxNTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsb0dBQW9HLG1CQUFtQixFQUFFLG1CQUFtQiw4SEFBOEg7O0FBRTFRLHdCQUF3QixtQkFBTyxDQUFDLG1DQUEwQjtBQUMxRCxrQ0FBa0MsbUJBQU8sQ0FBQyxrQ0FBeUI7QUFDbkUsd0JBQXdCLG1CQUFPLENBQUMsOEJBQXFCO0FBQ3JELDhCQUE4QixtQkFBTyxDQUFDLHFDQUE0QjtBQUNsRSxnQkFBZ0IsbUJBQU8sQ0FBQywyQkFBa0I7QUFDMUMsV0FBVyxtQkFBTyxDQUFDLGlCQUFRO0FBQzNCLFFBQVEsbUJBQU8sQ0FBQywyQkFBa0I7QUFDbEMsNkJBQTZCLG1CQUFPLENBQUMsK0JBQXNCO0FBQzNELG1CQUFtQixtQkFBTyxDQUFDLGlCQUFRO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLDRDQUFtQztBQUNqRSxxQkFBcUIsbUJBQU8sQ0FBQywyQ0FBa0M7QUFDL0QsdUJBQXVCLG1CQUFPLENBQUMsNkJBQW9CO0FBQ25ELHNCQUFzQixtQkFBTyxDQUFDLDRDQUFtQztBQUNqRSxVQUFVLG1CQUFPLENBQUMscUJBQVk7QUFDOUIsdUJBQXVCLG1CQUFPLENBQUMseUJBQWdCO0FBQy9DLHlCQUF5QixtQkFBTyxDQUFDLGdDQUF1QjtBQUN4RCxrQkFBa0IsbUJBQU8sQ0FBQyx5QkFBZ0I7QUFDMUMsV0FBVyxtQkFBTyxDQUFDLGlCQUFROztBQUUzQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxpQkFBaUIsV0FBVztBQUM1QjtBQUNBO0FBQ0EsTUFBTSxzQkFBc0IsTUFBTSxzQkFBc0I7QUFDeEQsVUFBVSxXQUFXO0FBQ3JCLE1BQU0sV0FBVztBQUNqQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLHNCQUFzQixNQUFNLHNCQUFzQjtBQUN4RCwyREFBMkQ7QUFDM0Q7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxlQUFlO0FBQzFCLGFBQWE7QUFDYixZQUFZO0FBQ1osWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQyxhQUFhO0FBQ2IsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxjQUFjO0FBQ2hEO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sY0FBYyxxQkFBcUIsc0NBQXNDO0FBQy9FLGNBQWMsZ0NBQWdDO0FBQzlDO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQSxjQUFjLG9CQUFvQjtBQUNsQyxzQ0FBc0MsV0FBVztBQUNqRCxjQUFjLE9BQU87QUFDckI7QUFDQSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBLGNBQWMsUUFBUTtBQUN0Qiw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0Qiw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBLGNBQWMsUUFBUSxvQ0FBb0MsV0FBVztBQUNyRSxjQUFjLFFBQVE7QUFDdEI7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBLGNBQWMscUNBQXFDO0FBQ25ELDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakMsdUNBQXVDLGVBQWU7QUFDdEQsdUNBQXVDLGdCQUFnQjtBQUN2RDtBQUNBLGNBQWMsbUNBQW1DO0FBQ2pELE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0sV0FBVztBQUNqQixNQUFNLHdCQUF3QjtBQUM5QjtBQUNBLGNBQWMsZ0NBQWdDO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxxQkFBcUI7QUFDdEQ7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxTQUFTO0FBQ3ZCLGNBQWMsU0FBUztBQUN2QixjQUFjLFNBQVM7QUFDdkIsY0FBYyxTQUFTO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxXQUFXO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQSxhQUFhLG1CQUFtQjtBQUNoQyxjQUFjLFdBQVc7QUFDekIsY0FBYyxRQUFRLGtEQUFrRDtBQUN4RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSx1REFBdUQsd0JBQXdCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQkFBbUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBDYW5jZWxhYmxlUHJvbWlzZSA9IHJlcXVpcmUoJy4vdXRpbC9jYW5jZWxhYmxlcHJvbWlzZScpO1xudmFyIGNyZWF0ZUNhbmNlbGFibGVSb29tUHJvbWlzZSA9IHJlcXVpcmUoJy4vY2FuY2VsYWJsZXJvb21wcm9taXNlJyk7XG52YXIgY3JlYXRlTG9jYWxUcmFja3MgPSByZXF1aXJlKCcuL2NyZWF0ZWxvY2FsdHJhY2tzJyk7XG52YXIgQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2UgPSByZXF1aXJlKCcuL2ljZXNlcnZlcnNvdXJjZS9jb25zdGFudCcpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vdXRpbC9jb25zdGFudHMnKTtcbnZhciBSb29tID0gcmVxdWlyZSgnLi9yb29tJyk7XG52YXIgRSA9IHJlcXVpcmUoJy4vdXRpbC9jb25zdGFudHMnKS50eXBlRXJyb3JzO1xudmFyIEVuY29kaW5nUGFyYW1ldGVyc0ltcGwgPSByZXF1aXJlKCcuL2VuY29kaW5ncGFyYW1ldGVycycpO1xudmFyIGd1ZXNzQnJvd3NlciA9IHJlcXVpcmUoJy4vdXRpbCcpLmd1ZXNzQnJvd3NlcjtcbnZhciBMb2NhbEF1ZGlvVHJhY2sgPSByZXF1aXJlKCcuL21lZGlhL3RyYWNrL2VzNS9sb2NhbGF1ZGlvdHJhY2snKTtcbnZhciBMb2NhbERhdGFUcmFjayA9IHJlcXVpcmUoJy4vbWVkaWEvdHJhY2svZXM1L2xvY2FsZGF0YXRyYWNrJyk7XG52YXIgTG9jYWxQYXJ0aWNpcGFudCA9IHJlcXVpcmUoJy4vbG9jYWxwYXJ0aWNpcGFudCcpO1xudmFyIExvY2FsVmlkZW9UcmFjayA9IHJlcXVpcmUoJy4vbWVkaWEvdHJhY2svZXM1L2xvY2FsdmlkZW90cmFjaycpO1xudmFyIExvZyA9IHJlcXVpcmUoJy4vdXRpbC9sb2cnKTtcbnZhciBNZWRpYVN0cmVhbVRyYWNrID0gcmVxdWlyZSgnQHR3aWxpby93ZWJydGMnKS5NZWRpYVN0cmVhbVRyYWNrO1xudmFyIE5UU0ljZVNlcnZlclNvdXJjZSA9IHJlcXVpcmUoJy4vaWNlc2VydmVyc291cmNlL250cycpO1xudmFyIFNpZ25hbGluZ1YyID0gcmVxdWlyZSgnLi9zaWduYWxpbmcvdjInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIG91dCB3aGljaCBjb25uZWN0KCkgY2FsbCBhIHBhcnRpY3VsYXIgTG9nIHN0YXRlbWVudFxuLy8gYmVsb25ncyB0by4gRWFjaCBjYWxsIHRvIGNvbm5lY3QoKSBpbmNyZW1lbnRzIHRoaXMgY291bnRlci5cbnZhciBjb25uZWN0Q2FsbHMgPSAwO1xuXG52YXIgZGlkUHJpbnRTYWZhcmlXYXJuaW5nID0gZmFsc2U7XG5cbi8qKlxuICogQ29ubmVjdCB0byBhIHtAbGluayBSb29tfS5cbiAqICAgPGJyPjxicj5cbiAqICAgQnkgZGVmYXVsdCwgdGhpcyB3aWxsIGF1dG9tYXRpY2FsbHkgYWNxdWlyZSBhbiBhcnJheSBjb250YWluaW5nIGFcbiAqICAge0BsaW5rIExvY2FsQXVkaW9UcmFja30gYW5kIHtAbGluayBMb2NhbFZpZGVvVHJhY2t9IGJlZm9yZSBjb25uZWN0aW5nIHRvXG4gKiAgIHRoZSB7QGxpbmsgUm9vbX0uIFRoZXNlIHdpbGwgYmUgc3RvcHBlZCB3aGVuIHlvdSBkaXNjb25uZWN0IGZyb20gdGhlXG4gKiAgIHtAbGluayBSb29tfS5cbiAqICAgPGJyPjxicj5cbiAqICAgWW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBieSBzcGVjaWZ5aW5nXG4gKiAgIDxjb2RlPm9wdGlvbnM8L2NvZGU+LiBGb3IgZXhhbXBsZSwgcmF0aGVyIHRoYW4gYWNxdWlyaW5nIGFcbiAqICAge0BsaW5rIExvY2FsQXVkaW9UcmFja30gYW5kIHtAbGluayBMb2NhbFZpZGVvVHJhY2t9IGF1dG9tYXRpY2FsbHksIHlvdSBjYW5cbiAqICAgcGFzcyB5b3VyIG93biBhcnJheSB3aGljaCB5b3UgY2FuIHN0b3AgeW91cnNlbGYuIFNlZSB7QGxpbmsgQ29ubmVjdE9wdGlvbnN9XG4gKiAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIC0gVGhlIEFjY2VzcyBUb2tlbiBzdHJpbmdcbiAqIEBwYXJhbSB7Q29ubmVjdE9wdGlvbnN9IFtvcHRpb25zXSAtIE9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmVoYXZpb3JcbiAqIEByZXR1cm5zIHtDYW5jZWxhYmxlUHJvbWlzZTxSb29tPn1cbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9XG4gKiBAdGhyb3dzIHtUd2lsaW9FcnJvcn1cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn1cbiAqIEBleGFtcGxlXG4gKiB2YXIgVmlkZW8gPSByZXF1aXJlKCd0d2lsaW8tdmlkZW8nKTtcbiAqIHZhciB0b2tlbiA9IGdldEFjY2Vzc1Rva2VuKCk7XG4gKiBWaWRlby5jb25uZWN0KHRva2VuLCB7XG4gKiAgIG5hbWU6ICdteS1jb29sLXJvb20nXG4gKiB9KS50aGVuKGZ1bmN0aW9uKHJvb20pIHtcbiAqICAgcm9vbS5vbigncGFydGljaXBhbnRDb25uZWN0ZWQnLCBmdW5jdGlvbihwYXJ0aWNpcGFudCkge1xuICogICAgIGNvbnNvbGUubG9nKHBhcnRpY2lwYW50LmlkZW50aXR5ICsgJyBoYXMgY29ubmVjdGVkJyk7XG4gKiAgIH0pO1xuXG4gKiAgIHJvb20ub25jZSgnZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ1lvdSBsZWZ0IHRoZSBSb29tOicsIHJvb20ubmFtZSk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogdmFyIFZpZGVvID0gcmVxdWlyZSgndHdpbGlvLXZpZGVvJyk7XG4gKiB2YXIgdG9rZW4gPSBnZXRBY2Nlc3NUb2tlbigpO1xuICpcbiAqIC8vIENvbm5lY3Qgd2l0aCBhdWRpby1vbmx5XG4gKiBWaWRlby5jb25uZWN0KHRva2VuLCB7XG4gKiAgIG5hbWU6ICdteS1jb29sLXJvb20nLFxuICogICBhdWRpbzogdHJ1ZVxuICogfSkudGhlbihmdW5jdGlvbihyb29tKSB7XG4gKiAgIHJvb20ub24oJ3BhcnRpY2lwYW50Q29ubmVjdGVkJywgZnVuY3Rpb24ocGFydGljaXBhbnQpIHtcbiAqICAgICBjb25zb2xlLmxvZyhwYXJ0aWNpcGFudC5pZGVudGl0eSArICcgaGFzIGNvbm5lY3RlZCcpO1xuICogICB9KTtcbiAqXG4gKiAgIHJvb20ub25jZSgnZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ1lvdSBsZWZ0IHRoZSBSb29tOicsIHJvb20ubmFtZSk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogdmFyIFZpZGVvID0gcmVxdWlyZSgndHdpbGlvLXZpZGVvJyk7XG4gKiB2YXIgdG9rZW4gPSBnZXRBY2Nlc3NUb2tlbigpO1xuICpcbiAqIC8vIENvbm5lY3Qgd2l0aCBtZWRpYSBhY3F1aXJlZCB1c2luZyBnZXRVc2VyTWVkaWEoKVxuICogbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICogICBhdWRpbzogdHJ1ZSxcbiAqICAgdmlkZW86IHRydWVcbiAqIH0pLnRoZW4oZnVuY3Rpb24obWVkaWFTdHJlYW0pIHtcbiAqICAgcmV0dXJuIFZpZGVvLmNvbm5lY3QodG9rZW4sIHtcbiAqICAgICBuYW1lOiAnbXktY29vbC1yb29tJyxcbiAqICAgICB0cmFja3M6IG1lZGlhU3RyZWFtLmdldFRyYWNrcygpXG4gKiAgIH0pO1xuICogfSkudGhlbihmdW5jdGlvbihyb29tKSB7XG4gKiAgIHJvb20ub24oJ3BhcnRpY2lwYW50Q29ubmVjdGVkJywgZnVuY3Rpb24ocGFydGljaXBhbnQpIHtcbiAqICAgICBjb25zb2xlLmxvZyhwYXJ0aWNpcGFudC5pZGVudGl0eSArICcgaGFzIGNvbm5lY3RlZCcpO1xuICogICB9KTtcbiAqXG4gKiAgIHJvb20ub25jZSgnZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ1lvdSBsZWZ0IHRoZSBSb29tOicsIHJvb20ubmFtZSk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogdmFyIFZpZGVvID0gcmVxdWlyZSgndHdpbGlvLXZpZGVvJyk7XG4gKiB2YXIgdG9rZW4gPSBnZXRBY2Nlc3NUb2tlbigpO1xuICpcbiAqIC8vIENvbm5lY3Qgd2l0aCBjdXN0b20gbmFtZXMgZm9yIExvY2FsQXVkaW9UcmFjayBhbmQgTG9jYWxWaWRlb1RyYWNrXG4gKiBWaWRlby5jb25uZWN0KHRva2VuLCB7XG4gKiAgIG5hbWU6ICdteS1jb29sLXJvb20nXG4gKiAgIGF1ZGlvOiB7IG5hbWU6ICdtaWNyb3Bob25lJyB9LFxuICogICB2aWRlbzogeyBuYW1lOiAnY2FtZXJhJyB9XG4gKiB9KS50aGVuKGZ1bmN0aW9uKHJvb20pIHtcbiAqICAgcm9vbS5sb2NhbFBhcnRpY2lwYW50cy50cmFja1B1YmxpY2F0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHB1YmxpY2F0aW9uKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ1RoZSBMb2NhbFRyYWNrIFwiJyArIHB1YmxpY2F0aW9uLnRyYWNrTmFtZSArICdcIiB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZCcpO1xuICogICB9KTtcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBjb25uZWN0KHRva2VuLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9ucykpICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIENhbmNlbGFibGVQcm9taXNlLnJlamVjdChFLklOVkFMSURfVFlQRSgnb3B0aW9ucycsICdvYmplY3QnKSk7XG4gIH1cblxuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgYWJvcnRPbkljZVNlcnZlcnNUaW1lb3V0OiBmYWxzZSxcbiAgICBjcmVhdGVMb2NhbFRyYWNrczogY3JlYXRlTG9jYWxUcmFja3MsXG4gICAgZW52aXJvbm1lbnQ6IGNvbnN0YW50cy5ERUZBVUxUX0VOVklST05NRU5ULFxuICAgIGljZVNlcnZlcnNUaW1lb3V0OiBjb25zdGFudHMuSUNFX1NFUlZFUlNfVElNRU9VVF9NUyxcbiAgICBpbnNpZ2h0czogdHJ1ZSxcbiAgICBMb2NhbEF1ZGlvVHJhY2s6IExvY2FsQXVkaW9UcmFjayxcbiAgICBMb2NhbERhdGFUcmFjazogTG9jYWxEYXRhVHJhY2ssXG4gICAgTG9jYWxQYXJ0aWNpcGFudDogTG9jYWxQYXJ0aWNpcGFudCxcbiAgICBMb2NhbFZpZGVvVHJhY2s6IExvY2FsVmlkZW9UcmFjayxcbiAgICBNZWRpYVN0cmVhbVRyYWNrOiBNZWRpYVN0cmVhbVRyYWNrLFxuICAgIGxvZ0xldmVsOiBjb25zdGFudHMuREVGQVVMVF9MT0dfTEVWRUwsXG4gICAgbWF4QXVkaW9CaXRyYXRlOiBudWxsLFxuICAgIG1heFZpZGVvQml0cmF0ZTogbnVsbCxcbiAgICBuYW1lOiBudWxsLFxuICAgIHByZWZlcnJlZEF1ZGlvQ29kZWNzOiBbXSxcbiAgICBwcmVmZXJyZWRWaWRlb0NvZGVjczogW10sXG4gICAgcmVhbG06IGNvbnN0YW50cy5ERUZBVUxUX1JFQUxNLFxuICAgIHNpZ25hbGluZzogU2lnbmFsaW5nVjJcbiAgfSwgdXRpbC5maWx0ZXJPYmplY3Qob3B0aW9ucykpO1xuXG4gIC8qIGVzbGludCBuZXctY2FwOjAgKi9cbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHdzU2VydmVyOiBjb25zdGFudHMuV1NfU0VSVkVSKG9wdGlvbnMuZW52aXJvbm1lbnQsIG9wdGlvbnMucmVhbG0pXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBsb2dMZXZlbHMgPSB1dGlsLmJ1aWxkTG9nTGV2ZWxzKG9wdGlvbnMubG9nTGV2ZWwpO1xuICB2YXIgbG9nQ29tcG9uZW50TmFtZSA9ICdbY29ubmVjdCAjJyArICsrY29ubmVjdENhbGxzICsgJ10nO1xuXG4gIHZhciBsb2cgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgbG9nID0gbmV3IExvZygnZGVmYXVsdCcsIGxvZ0NvbXBvbmVudE5hbWUsIGxvZ0xldmVscyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIENhbmNlbGFibGVQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cbiAgb3B0aW9ucy5sb2cgPSBsb2c7XG5cbiAgLy8gTk9URShtcm9iZXJ0cyk6IFByaW50IHRoZSBTYWZhcmkgd2FybmluZyBvbmNlIGlmIHRoZSBsb2ctbGV2ZWwgaXMgYXQgbGVhc3RcbiAgLy8gXCJ3YXJuXCIsIGkuZS4gbmVpdGhlciBcImVycm9yXCIgbm9yIFwib2ZmXCIuXG4gIGlmIChndWVzc0Jyb3dzZXIoKSA9PT0gJ3NhZmFyaScgJiYgIWRpZFByaW50U2FmYXJpV2FybmluZyAmJiBsb2cubG9nTGV2ZWwgIT09ICdlcnJvcicgJiYgbG9nLmxvZ0xldmVsICE9PSAnb2ZmJykge1xuICAgIGRpZFByaW50U2FmYXJpV2FybmluZyA9IHRydWU7XG4gICAgbG9nLndhcm4oWydUaGlzIHJlbGVhc2Ugb2YgdHdpbGlvLXZpZGVvLmpzIGluY2x1ZGVzIGV4cGVyaW1lbnRhbCBzdXBwb3J0IGZvcicsICdTYWZhcmkgMTEgYW5kIG5ld2VyLiBTdXBwb3J0IGZvciBTYWZhcmkgaXMgXCJleHBlcmltZW50YWxcIiBiZWNhdXNlLCcsICdhdCB0aGUgdGltZSBvZiB3cml0aW5nLCBTYWZhcmkgZG9lcyBub3Qgc3VwcG9ydCBWUDguIFRoaXMgbWVhbnMgeW91JywgJ21heSBleHBlcmllbmNlIGNvZGVjIGlzc3VlcyBpbiBHcm91cCBSb29tcy4gWW91IG1heSBhbHNvIGV4cGVyaWVuY2UnLCAnY29kZWMgaXNzdWVzIGluIFBlZXItdG8tUGVlciAoUDJQKSBSb29tcyBjb250YWluaW5nIEFuZHJvaWQtIG9yJywgJ2lPUy1iYXNlZCBQYXJ0aWNpcGFudHMgd2hvIGRvIG5vdCBzdXBwb3J0IEguMjY0LiBIb3dldmVyLCBQMlAgUm9vbXMnLCAnd2l0aCBicm93c2VyLWJhc2VkIFBhcnRpY2lwYW50cyBzaG91bGQgd29yay4gUGxlYXNlIHRlc3QgdGhpcyByZWxlYXNlJywgJ2FuZCByZXBvcnQgYW55IGlzc3VlcyB0byBodHRwczovL2dpdGh1Yi5jb20vdHdpbGlvL3R3aWxpby12aWRlby5qcyddLmpvaW4oJyAnKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDYW5jZWxhYmxlUHJvbWlzZS5yZWplY3QoRS5JTlZBTElEX1RZUEUoJ3Rva2VuJywgJ3N0cmluZycpKTtcbiAgfVxuXG4gIC8vIE5PVEUobW1hbGF2YWxsaSk6IFRoZSBSb29tIFwibmFtZVwiIGluIFwib3B0aW9uc1wiIHdhcyBiZWluZyB1c2VkXG4gIC8vIGFzIHRoZSBMb2NhbFRyYWNrIG5hbWUgaW4gYXNMb2NhbFRyYWNrKCkuIFNvIHdlIHBhc3MgYSBjb3B5IG9mXG4gIC8vIFwib3B0aW9uc1wiIHdpdGhvdXQgdGhlIFwibmFtZVwiLlxuICB2YXIgbG9jYWxUcmFja09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgZGVsZXRlIGxvY2FsVHJhY2tPcHRpb25zLm5hbWU7XG5cbiAgaWYgKCd0cmFja3MnIGluIG9wdGlvbnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucy50cmFja3MpKSB7XG4gICAgICByZXR1cm4gQ2FuY2VsYWJsZVByb21pc2UucmVqZWN0KEUuSU5WQUxJRF9UWVBFKCdvcHRpb25zLnRyYWNrcycsICdBcnJheSBvZiBMb2NhbEF1ZGlvVHJhY2ssIExvY2FsVmlkZW9UcmFjayBvciBNZWRpYVN0cmVhbVRyYWNrJykpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgb3B0aW9ucy50cmFja3MgPSBvcHRpb25zLnRyYWNrcy5tYXAoZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIHJldHVybiB1dGlsLmFzTG9jYWxUcmFjayh0cmFjaywgbG9jYWxUcmFja09wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBDYW5jZWxhYmxlUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBTaWduYWxpbmcgPSBvcHRpb25zLnNpZ25hbGluZztcbiAgdmFyIHNpZ25hbGluZyA9IG5ldyBTaWduYWxpbmcob3B0aW9ucy53c1NlcnZlciwgb3B0aW9ucyk7XG5cbiAgbG9nLmluZm8oJ0Nvbm5lY3RpbmcgdG8gYSBSb29tJyk7XG4gIGxvZy5kZWJ1ZygnT3B0aW9uczonLCBvcHRpb25zKTtcblxuICB2YXIgZW5jb2RpbmdQYXJhbWV0ZXJzID0gbmV3IEVuY29kaW5nUGFyYW1ldGVyc0ltcGwoe1xuICAgIG1heEF1ZGlvQml0cmF0ZTogb3B0aW9ucy5tYXhBdWRpb0JpdHJhdGUsXG4gICAgbWF4VmlkZW9CaXRyYXRlOiBvcHRpb25zLm1heFZpZGVvQml0cmF0ZVxuICB9KTtcblxuICB2YXIgbnRzSWNlU2VydmVyU291cmNlT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICBhYm9ydE9uVGltZW91dDogb3B0aW9ucy5hYm9ydE9uSWNlU2VydmVyc1RpbWVvdXQsXG4gICAgdGltZW91dDogb3B0aW9ucy5pY2VTZXJ2ZXJzVGltZW91dFxuICB9KTtcblxuICB2YXIgaWNlU2VydmVyU291cmNlID0gQXJyYXkuaXNBcnJheShvcHRpb25zLmljZVNlcnZlcnMpID8gbmV3IENvbnN0YW50SWNlU2VydmVyU291cmNlKG9wdGlvbnMuaWNlU2VydmVycykgOiBfdHlwZW9mKG9wdGlvbnMuaWNlU2VydmVycykgPT09ICdvYmplY3QnID8gb3B0aW9ucy5pY2VTZXJ2ZXJzIDogbmV3IE5UU0ljZVNlcnZlclNvdXJjZSh0b2tlbiwgbnRzSWNlU2VydmVyU291cmNlT3B0aW9ucyk7XG5cbiAgdmFyIHByZWZlcnJlZENvZGVjcyA9IHtcbiAgICBhdWRpbzogb3B0aW9ucy5wcmVmZXJyZWRBdWRpb0NvZGVjcyxcbiAgICB2aWRlbzogb3B0aW9ucy5wcmVmZXJyZWRWaWRlb0NvZGVjcy5tYXAobm9ybWFsaXplVmlkZW9Db2RlY1NldHRpbmdzKVxuICB9O1xuXG4gIC8vIENyZWF0ZSBhIENhbmNlbGFibGVSb29tUHJvbWlzZTxSb29tPiB0aGF0IHJlc29sdmVzIGFmdGVyIHRoZXNlIHN0ZXBzOlxuICAvLyAxIC0gR2V0IHRoZSBMb2NhbFRyYWNrcy5cbiAgLy8gMiAtIENyZWF0ZSB0aGUgTG9jYWxQYXJ0aWNpcGFudCB1c2luZyBvcHRpb25zLnRyYWNrcy5cbiAgLy8gMyAtIENvbm5lY3QgdG8gcnRjLXJvb20tc2VydmljZSBhbmQgY3JlYXRlIHRoZSBSb29tU2lnbmFsaW5nLlxuICAvLyA0IC0gQ3JlYXRlIHRoZSBSb29tIGFuZCB0aGVuIHJlc29sdmUgdGhlIENhbmNlbGFibGVQcm9taXNlLlxuICB2YXIgY2FuY2VsYWJsZVJvb21Qcm9taXNlID0gY3JlYXRlQ2FuY2VsYWJsZVJvb21Qcm9taXNlKGdldExvY2FsVHJhY2tzLmJpbmQobnVsbCwgb3B0aW9ucyksIGNyZWF0ZUxvY2FsUGFydGljaXBhbnQuYmluZChudWxsLCBzaWduYWxpbmcsIGxvZywgZW5jb2RpbmdQYXJhbWV0ZXJzLCBvcHRpb25zKSwgY3JlYXRlUm9vbVNpZ25hbGluZy5iaW5kKG51bGwsIHRva2VuLCBvcHRpb25zLCBzaWduYWxpbmcsIGljZVNlcnZlclNvdXJjZSwgZW5jb2RpbmdQYXJhbWV0ZXJzLCBwcmVmZXJyZWRDb2RlY3MpLCBjcmVhdGVSb29tLmJpbmQobnVsbCwgb3B0aW9ucykpO1xuXG4gIGNhbmNlbGFibGVSb29tUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyb29tKSB7XG4gICAgbG9nLmluZm8oJ0Nvbm5lY3RlZCB0byBSb29tOicsIHJvb20udG9TdHJpbmcoKSk7XG4gICAgbG9nLmluZm8oJ1Jvb20gbmFtZTonLCByb29tLm5hbWUpO1xuICAgIGxvZy5kZWJ1ZygnUm9vbTonLCByb29tKTtcbiAgICByZXR1cm4gcm9vbTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgaWYgKGljZVNlcnZlclNvdXJjZS5pc1N0YXJ0ZWQpIHtcbiAgICAgIGljZVNlcnZlclNvdXJjZS5zdG9wKCk7XG4gICAgfVxuICAgIGlmIChjYW5jZWxhYmxlUm9vbVByb21pc2UuX2lzQ2FuY2VsZWQpIHtcbiAgICAgIGxvZy5pbmZvKCdBdHRlbXB0IHRvIGNvbm5lY3QgdG8gYSBSb29tIHdhcyBjYW5jZWxlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuaW5mbygnRXJyb3Igd2hpbGUgY29ubmVjdGluZyB0byBhIFJvb206JywgZXJyb3IpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNhbmNlbGFibGVSb29tUHJvbWlzZTtcbn1cblxuLyoqXG4gKiBZb3UgbWF5IHBhc3MgdGhlc2Ugb3B0aW9ucyB0byB7QGxpbmsgY29ubmVjdH0gaW4gb3JkZXIgdG8gb3ZlcnJpZGUgdGhlXG4gKiBkZWZhdWx0IGJlaGF2aW9yLlxuICogQHR5cGVkZWYge29iamVjdH0gQ29ubmVjdE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Fib3J0T25JY2VTZXJ2ZXJzVGltZW91dD1mYWxzZV0gLSBJZiBmZXRjaGluZyBJQ0VcbiAqICAgc2VydmVycyB0aW1lcyBvdXQgKGZvciBleGFtcGxlLCBkdWUgdG8gYSByZXN0cmljdGl2ZSBuZXR3b3JrIG9yIHNsb3cgSFRUUFxuICogICBwcm94eSksIHRoZW4sIGJ5IGRlZmF1bHQsIHR3aWxpby12aWRlby5qcyB3aWxsIGZhbGxiYWNrIHRvIHVzaW5nIGhhcmQtY29kZWRcbiAqICAgU1RVTiBzZXJ2ZXJzIGFuZCBjb250aW51ZSBjb25uZWN0aW5nIHRvIHRoZSBSb29tLiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgdG9cbiAqICAgPGNvZGU+dHJ1ZTwvY29kZT4gd2lsbCBjYXVzZSB0d2lsaW8tdmlkZW8uanMgdG8gYWJvcnQgaW5zdGVhZCwgYW5kXG4gKiAgIHtAbGluayBjb25uZWN0fSB3aWxsIHJlamVjdCB3aXRoIGEge0BsaW5rIENvbmZpZ3VyYXRpb25BY3F1aXJlRmFpbGVkRXJyb3J9LlxuICogQHByb3BlcnR5IHtib29sZWFufENyZWF0ZUxvY2FsVHJhY2tPcHRpb25zfSBbYXVkaW89dHJ1ZV0gLSBXaGV0aGVyIG9yIG5vdCB0b1xuICogICBnZXQgbG9jYWwgYXVkaW8gd2l0aCA8Y29kZT5nZXRVc2VyTWVkaWE8L2NvZGU+IHdoZW4gPGNvZGU+dHJhY2tzPC9jb2RlPlxuICogICBhcmUgbm90IHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbZG9taW5hbnRTcGVha2VyPWZhbHNlXSAtIFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBEb21pbmFudFxuICogICBTcGVha2VyIEFQSSBvciBub3QuIFRoaXMgb25seSB0YWtlcyBlZmZlY3QgaW4gR3JvdXAgUm9vbXMuXG4gKiBAcHJvcGVydHkge0FycmF5PFJUQ0ljZVNlcnZlcj59IGljZVNlcnZlcnMgLSBPdmVycmlkZSB0aGUgU1RVTiBhbmQgVFVSTlxuICogICBzZXJ2ZXJzIHVzZWQgd2hlbiBjb25uZWN0aW5nIHRvIHtAbGluayBSb29tfXNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbaWNlU2VydmVyc1RpbWVvdXQ9MzAwMF0gLSBPdmVycmlkZSB0aGUgYW1vdW50IG9mIHRpbWUsIGluXG4gKiAgIG1pbGxpc2Vjb25kcywgdGhhdCB0aGUgU0RLIHdpbGwgd2FpdCB3aGVuIGFjcXVpcmluZyBTVFVOIGFuZCBUVVJOIHNlcnZlcnNcbiAqIEBwcm9wZXJ0eSB7UlRDSWNlVHJhbnNwb3J0UG9saWN5fSBbaWNlVHJhbnNwb3J0UG9saWN5PVwiYWxsXCJdIC0gT3ZlcnJpZGUgdGhlXG4gKiAgIElDRSB0cmFuc3BvcnQgcG9saWN5IHRvIGJlIG9uZSBvZiBcInJlbGF5XCIgb3IgXCJhbGxcIlxuICogQHByb3BlcnR5IHtib29sZWFufSBbaW5zaWdodHM9dHJ1ZV0gLSBXaGV0aGVyIHB1Ymxpc2hpbmcgZXZlbnRzXG4gKiAgIHRvIHRoZSBJbnNpZ2h0cyBnYXRld2F5IGlzIGVuYWJsZWQgb3Igbm90XG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IFttYXhBdWRpb0JpdHJhdGU9bnVsbF0gLSBNYXggb3V0Z29pbmcgYXVkaW8gYml0cmF0ZSAoYnBzKTtcbiAqICAgQSA8Y29kZT5udWxsPC9jb2RlPiB2YWx1ZSBkb2VzIG5vdCBzZXQgYW55IGJpdHJhdGUgbGltaXQ7IFRoaXMgdmFsdWUgaXMgc2V0XG4gKiAgIGFzIGEgaGludCBmb3IgdmFyaWFibGUgYml0cmF0ZSBjb2RlY3MsIGJ1dCB3aWxsIG5vdCB0YWtlIGVmZmVjdCBmb3IgZml4ZWRcbiAqICAgYml0cmF0ZSBjb2RlY3NcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gW21heFZpZGVvQml0cmF0ZT1udWxsXSAtIE1heCBvdXRnb2luZyB2aWRlbyBiaXRyYXRlIChicHMpO1xuICogICBBIDxjb2RlPm51bGw8L2NvZGU+IHZhbHVlIGRvZXMgbm90IHNldCBhbnkgYml0cmF0ZSBsaW1pdDsgVGhpcyB2YWx1ZSBpcyBzZXRcbiAqICAgYXMgYSBoaW50IGZvciB2YXJpYWJsZSBiaXRyYXRlIGNvZGVjcywgYnV0IHdpbGwgbm90IHRha2UgZWZmZWN0IGZvciBmaXhlZFxuICogICBiaXRyYXRlIGNvZGVjc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBbbmFtZT1udWxsXSAtIFNldCB0byBjb25uZWN0IHRvIGEge0BsaW5rIFJvb219IGJ5IG5hbWVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW25ldHdvcmtRdWFsaXR5PWZhbHNlXSAtIFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBOZXR3b3JrXG4gKiAgIFF1YWxpdHkgQVBJIG9yIG5vdC4gVGhpcyBvbmx5IHRha2VzIGVmZmVjdCBpbiBHcm91cCBSb29tcy5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8QXVkaW9Db2RlYz59IFtwcmVmZXJyZWRBdWRpb0NvZGVjcz1bXV0gLSBQcmVmZXJyZWQgYXVkaW8gY29kZWNzO1xuICogIEFuIGVtcHR5IGFycmF5IHByZXNlcnZlcyB0aGUgY3VycmVudCBhdWRpbyBjb2RlYyBwcmVmZXJlbmNlIG9yZGVyLlxuICogQHByb3BlcnR5IHtBcnJheTxWaWRlb0NvZGVjfFZpZGVvQ29kZWNTZXR0aW5ncz59IFtwcmVmZXJyZWRWaWRlb0NvZGVjcz1bXV0gLVxuICogIFByZWZlcnJlZCB2aWRlbyBjb2RlY3M7IEFuIGVtcHR5IGFycmF5IHByZXNlcnZlcyB0aGUgY3VycmVudCB2aWRlbyBjb2RlY1xuICogIHByZWZlcmVuY2Ugb3JkZXIuIElmIHlvdSB3YW50IHRvIHNldCBhIHByZWZlcnJlZCB2aWRlbyBjb2RlYyBvbiBhIEdyb3VwIFJvb20sXG4gKiAgeW91IHdpbGwgbmVlZCB0byBjcmVhdGUgdGhlIFJvb20gdXNpbmcgdGhlIFJFU1QgQVBJIGFuZCBzZXQgdGhlXG4gKiAgPGNvZGU+VmlkZW9Db2RlY3M8L2NvZGU+IHByb3BlcnR5LlxuICogIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cudHdpbGlvLmNvbS9kb2NzL2FwaS92aWRlby9yb29tcy1yZXNvdXJjZSNjcmVhdGUtcm9vbVwiPlxuICogIGhlcmU8L2E+IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogQHByb3BlcnR5IHtMb2dMZXZlbHxMb2dMZXZlbHN9IFtsb2dMZXZlbD0nd2FybiddIC0gU2V0IHRoZSBsb2cgdmVyYm9zaXR5XG4gKiAgIG9mIGxvZ2dpbmcgdG8gY29uc29sZS4gUGFzc2luZyBhIHtAbGluayBMb2dMZXZlbH0gc3RyaW5nIHdpbGwgdXNlIHRoZSBzYW1lXG4gKiAgIGxldmVsIGZvciBhbGwgY29tcG9uZW50cy4gUGFzcyBhIHtAbGluayBMb2dMZXZlbHN9IHRvIHNldCBzcGVjaWZpYyBsb2dcbiAqICAgbGV2ZWxzLlxuICogQHByb3BlcnR5IHtBcnJheTxMb2NhbFRyYWNrfE1lZGlhU3RyZWFtVHJhY2s+fSBbdHJhY2tzXSAtIFRoZVxuICogICB7QGxpbmsgTG9jYWxUcmFja31zIG9yIE1lZGlhU3RyZWFtVHJhY2tzIHdpdGggd2hpY2ggdG8gam9pbiB0aGVcbiAqICAge0BsaW5rIFJvb219LiBUaGVzZSB0cmFja3MgY2FuIGJlIG9idGFpbmVkIGVpdGhlciBieSBjYWxsaW5nXG4gKiAgIHtAbGluayBjcmVhdGVMb2NhbFRyYWNrc30sIG9yIGJ5IGNvbnN0cnVjdGluZyB0aGVtIGZyb20gdGhlIE1lZGlhU3RyZWFtXG4gKiAgIG9idGFpbmVkIGJ5IGNhbGxpbmcgPGNvZGU+Z2V0VXNlck1lZGlhKCk8L2NvZGU+LlxuICogQHByb3BlcnR5IHtib29sZWFufENyZWF0ZUxvY2FsVHJhY2tPcHRpb25zfSBbdmlkZW89dHJ1ZV0gLSBXaGV0aGVyIG9yIG5vdCB0b1xuICogICBnZXQgbG9jYWwgdmlkZW8gd2l0aCA8Y29kZT5nZXRVc2VyTWVkaWE8L2NvZGU+IHdoZW4gPGNvZGU+dHJhY2tzPC9jb2RlPlxuICogICBhcmUgbm90IHByb3ZpZGVkLlxuICovXG5cbi8qKlxuICogWW91IG1heSBwYXNzIHRoZXNlIGxldmVscyB0byB7QGxpbmsgQ29ubmVjdE9wdGlvbnN9IHRvIG92ZXJyaWRlXG4gKiAgIGxvZyBsZXZlbHMgZm9yIGluZGl2aWR1YWwgY29tcG9uZW50cy5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IExvZ0xldmVsc1xuICogQHByb3BlcnR5IHtMb2dMZXZlbH0gW2RlZmF1bHQ9J3dhcm4nXSAtIExvZyBsZXZlbCBmb3IgJ2RlZmF1bHQnIG1vZHVsZXMuXG4gKiBAcHJvcGVydHkge0xvZ0xldmVsfSBbbWVkaWE9J3dhcm4nXSAtIExvZyBsZXZlbCBmb3IgJ21lZGlhJyBtb2R1bGVzLlxuICogQHByb3BlcnR5IHtMb2dMZXZlbH0gW3NpZ25hbGluZz0nd2FybiddIC0gTG9nIGxldmVsIGZvciAnc2lnbmFsaW5nJyBtb2R1bGVzLlxuICogQHByb3BlcnR5IHtMb2dMZXZlbH0gW3dlYnJ0Yz0nd2FybiddIC0gTG9nIGxldmVsIGZvciAnd2VicnRjJyBtb2R1bGVzLlxuICovXG5cbi8qKlxuICogVmlkZW8gY29kZWMgc2V0dGluZ3MuXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBWaWRlb0NvZGVjU2V0dGluZ3NcbiAqIEBwcm9wZXJ0eSB7VmlkZW9Db2RlY30gY29kZWMgLSBWaWRlbyBjb2RlYyBuYW1lXG4gKi9cblxuLyoqXG4gKiBWUDggY29kZWMgc2V0dGluZ3MuXG4gKiBAdHlwZWRlZiB7VmlkZW9Db2RlY1NldHRpbmdzfSBWUDhDb2RlY1NldHRpbmdzXG4gKiBAcHJvcGVydHkge1ZpZGVvQ29kZWN9IG5hbWUgLSBcIlZQOFwiXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzaW11bGNhc3Q9ZmFsc2VdIC0gRW5hYmxlL2Rpc2FibGUgVlA4IHNpbXVsY2FzdDsgaWZcbiAqICAgZW5hYmxlZCwgVHdpbGlvJ3MgVmlkZW8gU0RLIHdpbGwgc2VuZCB0aHJlZSB2aWRlbyBzdHJlYW1zIG9mIGRpZmZlcmVudFxuICogICBxdWFsaXRpZXNcbiAqL1xuXG4vKipcbiAqIE5hbWVzIG9mIHRoZSBzdXBwb3J0ZWQgYXVkaW8gY29kZWNzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG52YXIgQXVkaW9Db2RlYyA9IHtcbiAgaXNhYzogJ2lzYWMnLFxuICBvcHVzOiAnb3B1cycsXG4gIFBDTUE6ICdQQ01BJyxcbiAgUENNVTogJ1BDTVUnXG59O1xuXG4vKipcbiAqIE5hbWVzIG9mIHRoZSBzdXBwb3J0ZWQgdmlkZW8gY29kZWNzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG52YXIgVmlkZW9Db2RlYyA9IHtcbiAgSDI2NDogJ0gyNjQnLFxuICBWUDg6ICdWUDgnLFxuICBWUDk6ICdWUDknXG59O1xuXG4vKipcbiAqIExldmVscyBmb3IgbG9nZ2luZyB2ZXJib3NpdHkuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbnZhciBMb2dMZXZlbCA9IHtcbiAgZGVidWc6ICdkZWJ1ZycsXG4gIGluZm86ICdpbmZvJyxcbiAgd2FybjogJ3dhcm4nLFxuICBlcnJvcjogJ2Vycm9yJyxcbiAgb2ZmOiAnb2ZmJ1xufTtcblxuZnVuY3Rpb24gY3JlYXRlTG9jYWxQYXJ0aWNpcGFudChzaWduYWxpbmcsIGxvZywgZW5jb2RpbmdQYXJhbWV0ZXJzLCBvcHRpb25zLCBsb2NhbFRyYWNrcykge1xuICB2YXIgbG9jYWxQYXJ0aWNpcGFudFNpZ25hbGluZyA9IHNpZ25hbGluZy5jcmVhdGVMb2NhbFBhcnRpY2lwYW50U2lnbmFsaW5nKGVuY29kaW5nUGFyYW1ldGVycyk7XG4gIGxvZy5kZWJ1ZygnQ3JlYXRpbmcgYSBuZXcgTG9jYWxQYXJ0aWNpcGFudDonLCBsb2NhbFBhcnRpY2lwYW50U2lnbmFsaW5nKTtcbiAgcmV0dXJuIG5ldyBvcHRpb25zLkxvY2FsUGFydGljaXBhbnQobG9jYWxQYXJ0aWNpcGFudFNpZ25hbGluZywgbG9jYWxUcmFja3MsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSb29tKG9wdGlvbnMsIGxvY2FsUGFydGljaXBhbnQsIHJvb21TaWduYWxpbmcpIHtcbiAgdmFyIHJvb20gPSBuZXcgUm9vbShsb2NhbFBhcnRpY2lwYW50LCByb29tU2lnbmFsaW5nLCBvcHRpb25zKTtcbiAgdmFyIGxvZyA9IG9wdGlvbnMubG9nO1xuXG4gIGxvZy5kZWJ1ZygnQ3JlYXRpbmcgYSBuZXcgUm9vbTonLCByb29tKTtcbiAgcm9vbVNpZ25hbGluZy5vbignc3RhdGVDaGFuZ2VkJywgZnVuY3Rpb24gc3RhdGVDaGFuZ2VkKCkge1xuICAgIGxvZy5pbmZvKCdEaXNjb25uZWN0ZWQgZnJvbSBSb29tOicsIHJvb20udG9TdHJpbmcoKSk7XG4gICAgcm9vbVNpZ25hbGluZy5yZW1vdmVMaXN0ZW5lcignc3RhdGVDaGFuZ2VkJywgc3RhdGVDaGFuZ2VkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJvb207XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb21TaWduYWxpbmcodG9rZW4sIG9wdGlvbnMsIHNpZ25hbGluZywgaWNlU2VydmVyU291cmNlLCBlbmNvZGluZ1BhcmFtZXRlcnMsIHByZWZlcnJlZENvZGVjcywgbG9jYWxQYXJ0aWNpcGFudCkge1xuICB2YXIgbG9nID0gb3B0aW9ucy5sb2c7XG4gIGxvZy5pbmZvKCdHZXR0aW5nIElDRSBzZXJ2ZXJzJyk7XG4gIGxvZy5kZWJ1ZygnT3B0aW9uczonLCBvcHRpb25zKTtcblxuICByZXR1cm4gaWNlU2VydmVyU291cmNlLnN0YXJ0KCkudGhlbihmdW5jdGlvbiAoaWNlU2VydmVycykge1xuICAgIHZhciByb29tU2lnbmFsaW5nUGFyYW1zID0ge1xuICAgICAgdG9rZW46IHRva2VuXG4gICAgfTtcblxuICAgIGxvZy5pbmZvKCdHb3QgSUNFIHNlcnZlcnMnKTtcbiAgICBsb2cuZGVidWcoJ0lDRSBzZXJ2ZXJzOicsIGljZVNlcnZlcnMpO1xuXG4gICAgb3B0aW9ucy5pY2VTZXJ2ZXJzID0gaWNlU2VydmVycztcbiAgICBsb2cuZGVidWcoJ0NyZWF0aW5nIGEgbmV3IFJvb21TaWduYWxpbmcnKTtcbiAgICBsb2cuZGVidWcoJ1Jvb21TaWduYWxpbmcgcGFyYW1zOicsIHJvb21TaWduYWxpbmdQYXJhbXMpO1xuXG4gICAgcmV0dXJuIHNpZ25hbGluZy5jb25uZWN0KGxvY2FsUGFydGljaXBhbnQuX3NpZ25hbGluZywgdG9rZW4sIGljZVNlcnZlclNvdXJjZSwgZW5jb2RpbmdQYXJhbWV0ZXJzLCBwcmVmZXJyZWRDb2RlY3MsIG9wdGlvbnMpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TG9jYWxUcmFja3Mob3B0aW9ucywgaGFuZGxlTG9jYWxUcmFja3MpIHtcbiAgdmFyIGxvZyA9IG9wdGlvbnMubG9nO1xuXG4gIG9wdGlvbnMuc2hvdWxkU3RvcExvY2FsVHJhY2tzID0gIW9wdGlvbnMudHJhY2tzO1xuICBpZiAob3B0aW9ucy5zaG91bGRTdG9wTG9jYWxUcmFja3MpIHtcbiAgICBsb2cuaW5mbygnTG9jYWxUcmFja3Mgd2VyZSBub3QgcHJvdmlkZWQsIHNvIHRoZXkgd2lsbCBiZSBhY3F1aXJlZCAnICsgJ2F1dG9tYXRpY2FsbHkgYmVmb3JlIGNvbm5lY3RpbmcgdG8gdGhlIFJvb20uIExvY2FsVHJhY2tzIHdpbGwgJyArICdiZSByZWxlYXNlZCBpZiBjb25uZWN0aW5nIHRvIHRoZSBSb29tIGZhaWxzIG9yIGlmIHRoZSBSb29tICcgKyAnaXMgZGlzY29ubmVjdGVkJyk7XG4gIH0gZWxzZSB7XG4gICAgbG9nLmluZm8oJ0dldHRpbmcgTG9jYWxUcmFja3MnKTtcbiAgICBsb2cuZGVidWcoJ09wdGlvbnM6Jywgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucy5jcmVhdGVMb2NhbFRyYWNrcyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIGdldExvY2FsVHJhY2tzU3VjY2VlZGVkKGxvY2FsVHJhY2tzKSB7XG4gICAgdmFyIHByb21pc2UgPSBoYW5kbGVMb2NhbFRyYWNrcyhsb2NhbFRyYWNrcyk7XG5cbiAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIGhhbmRsZUxvY2FsVHJhY2tzRmFpbGVkKCkge1xuICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkU3RvcExvY2FsVHJhY2tzKSB7XG4gICAgICAgIGxvZy5pbmZvKCdUaGUgYXV0b21hdGljYWxseSBhY3F1aXJlZCBMb2NhbFRyYWNrcyB3aWxsIG5vdyBiZSBzdG9wcGVkJyk7XG4gICAgICAgIGxvY2FsVHJhY2tzLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmlkZW9Db2RlY1NldHRpbmdzKG5hbWVPclNldHRpbmdzKSB7XG4gIHZhciBzZXR0aW5ncyA9IHR5cGVvZiBuYW1lT3JTZXR0aW5ncyA9PT0gJ3N0cmluZycgPyB7IGNvZGVjOiBuYW1lT3JTZXR0aW5ncyB9IDogbmFtZU9yU2V0dGluZ3M7XG4gIHN3aXRjaCAoc2V0dGluZ3MuY29kZWMudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ3ZwOCc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgc2ltdWxjYXN0OiBmYWxzZSB9LCBzZXR0aW5ncyk7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xuICAgICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L2Nvbm5lY3QuanNcbi8vIG1vZHVsZSBpZCA9IDI2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///262\n");

/***/ }),
/* 263 */
/*!****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/cancelableroompromise.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar CancelablePromise = __webpack_require__(/*! ./util/cancelablepromise */ 220);\n\n/**\n * Create a {@link CancelablePromise<Room>}.\n * @param {function(function(Array<LocalTrack>): CancelablePromise<RoomSignaling>):\n *   Promise<function(): CancelablePromise<RoomSignaling>>} getLocalTracks\n * @param {function(Array<LocalTrack>): LocalParticipant} createLocalParticipant\n * @param {function(Array<LocalTrack>): CancelablePromise<RoomSignaling>} createRoomSignaling\n * @param {function(LocalParticipant, RoomSignaling): Room} createRoom\n * @returns CancelablePromise<Room>\n */\nfunction createCancelableRoomPromise(getLocalTracks, createLocalParticipant, createRoomSignaling, createRoom) {\n  var cancelableRoomSignalingPromise = void 0;\n  var cancelationError = new Error('Canceled');\n\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    var localParticipant = void 0;\n    getLocalTracks(function getLocalTracksSucceeded(localTracks) {\n      if (isCanceled()) {\n        return CancelablePromise.reject(cancelationError);\n      }\n      localParticipant = createLocalParticipant(localTracks);\n      return createRoomSignaling(localParticipant).then(function createRoomSignalingSucceeded(getCancelableRoomSignalingPromise) {\n        if (isCanceled()) {\n          throw cancelationError;\n        }\n        cancelableRoomSignalingPromise = getCancelableRoomSignalingPromise();\n        return cancelableRoomSignalingPromise;\n      });\n    }).then(function roomSignalingConnected(roomSignaling) {\n      if (isCanceled()) {\n        roomSignaling.disconnect();\n        throw cancelationError;\n      }\n      resolve(createRoom(localParticipant, roomSignaling));\n    }).catch(function onError(error) {\n      reject(error);\n    });\n  }, function onCancel() {\n    if (cancelableRoomSignalingPromise) {\n      cancelableRoomSignalingPromise.cancel();\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9jYW5jZWxhYmxlcm9vbXByb21pc2UuanM/NGQwYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix3QkFBd0IsbUJBQU8sQ0FBQyxtQ0FBMEI7O0FBRTFEO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0MsV0FBVztBQUNYLDJEQUEyRDtBQUMzRCxXQUFXLDhDQUE4QztBQUN6RCxXQUFXLDhEQUE4RDtBQUN6RSxXQUFXLGdEQUFnRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMjYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsYWJsZVByb21pc2UgPSByZXF1aXJlKCcuL3V0aWwvY2FuY2VsYWJsZXByb21pc2UnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB7QGxpbmsgQ2FuY2VsYWJsZVByb21pc2U8Um9vbT59LlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbihBcnJheTxMb2NhbFRyYWNrPik6IENhbmNlbGFibGVQcm9taXNlPFJvb21TaWduYWxpbmc+KTpcbiAqICAgUHJvbWlzZTxmdW5jdGlvbigpOiBDYW5jZWxhYmxlUHJvbWlzZTxSb29tU2lnbmFsaW5nPj59IGdldExvY2FsVHJhY2tzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEFycmF5PExvY2FsVHJhY2s+KTogTG9jYWxQYXJ0aWNpcGFudH0gY3JlYXRlTG9jYWxQYXJ0aWNpcGFudFxuICogQHBhcmFtIHtmdW5jdGlvbihBcnJheTxMb2NhbFRyYWNrPik6IENhbmNlbGFibGVQcm9taXNlPFJvb21TaWduYWxpbmc+fSBjcmVhdGVSb29tU2lnbmFsaW5nXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKExvY2FsUGFydGljaXBhbnQsIFJvb21TaWduYWxpbmcpOiBSb29tfSBjcmVhdGVSb29tXG4gKiBAcmV0dXJucyBDYW5jZWxhYmxlUHJvbWlzZTxSb29tPlxuICovXG5mdW5jdGlvbiBjcmVhdGVDYW5jZWxhYmxlUm9vbVByb21pc2UoZ2V0TG9jYWxUcmFja3MsIGNyZWF0ZUxvY2FsUGFydGljaXBhbnQsIGNyZWF0ZVJvb21TaWduYWxpbmcsIGNyZWF0ZVJvb20pIHtcbiAgdmFyIGNhbmNlbGFibGVSb29tU2lnbmFsaW5nUHJvbWlzZSA9IHZvaWQgMDtcbiAgdmFyIGNhbmNlbGF0aW9uRXJyb3IgPSBuZXcgRXJyb3IoJ0NhbmNlbGVkJyk7XG5cbiAgcmV0dXJuIG5ldyBDYW5jZWxhYmxlUHJvbWlzZShmdW5jdGlvbiBvbkNyZWF0ZShyZXNvbHZlLCByZWplY3QsIGlzQ2FuY2VsZWQpIHtcbiAgICB2YXIgbG9jYWxQYXJ0aWNpcGFudCA9IHZvaWQgMDtcbiAgICBnZXRMb2NhbFRyYWNrcyhmdW5jdGlvbiBnZXRMb2NhbFRyYWNrc1N1Y2NlZWRlZChsb2NhbFRyYWNrcykge1xuICAgICAgaWYgKGlzQ2FuY2VsZWQoKSkge1xuICAgICAgICByZXR1cm4gQ2FuY2VsYWJsZVByb21pc2UucmVqZWN0KGNhbmNlbGF0aW9uRXJyb3IpO1xuICAgICAgfVxuICAgICAgbG9jYWxQYXJ0aWNpcGFudCA9IGNyZWF0ZUxvY2FsUGFydGljaXBhbnQobG9jYWxUcmFja3MpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVJvb21TaWduYWxpbmcobG9jYWxQYXJ0aWNpcGFudCkudGhlbihmdW5jdGlvbiBjcmVhdGVSb29tU2lnbmFsaW5nU3VjY2VlZGVkKGdldENhbmNlbGFibGVSb29tU2lnbmFsaW5nUHJvbWlzZSkge1xuICAgICAgICBpZiAoaXNDYW5jZWxlZCgpKSB7XG4gICAgICAgICAgdGhyb3cgY2FuY2VsYXRpb25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBjYW5jZWxhYmxlUm9vbVNpZ25hbGluZ1Byb21pc2UgPSBnZXRDYW5jZWxhYmxlUm9vbVNpZ25hbGluZ1Byb21pc2UoKTtcbiAgICAgICAgcmV0dXJuIGNhbmNlbGFibGVSb29tU2lnbmFsaW5nUHJvbWlzZTtcbiAgICAgIH0pO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gcm9vbVNpZ25hbGluZ0Nvbm5lY3RlZChyb29tU2lnbmFsaW5nKSB7XG4gICAgICBpZiAoaXNDYW5jZWxlZCgpKSB7XG4gICAgICAgIHJvb21TaWduYWxpbmcuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aHJvdyBjYW5jZWxhdGlvbkVycm9yO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShjcmVhdGVSb29tKGxvY2FsUGFydGljaXBhbnQsIHJvb21TaWduYWxpbmcpKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9LCBmdW5jdGlvbiBvbkNhbmNlbCgpIHtcbiAgICBpZiAoY2FuY2VsYWJsZVJvb21TaWduYWxpbmdQcm9taXNlKSB7XG4gICAgICBjYW5jZWxhYmxlUm9vbVNpZ25hbGluZ1Byb21pc2UuY2FuY2VsKCk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDYW5jZWxhYmxlUm9vbVByb21pc2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9jYW5jZWxhYmxlcm9vbXByb21pc2UuanNcbi8vIG1vZHVsZSBpZCA9IDI2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///263\n");

/***/ }),
/* 264 */
/*!*****************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/getstats.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global RTCRtpTransceiver */\n\n\nvar flatMap = __webpack_require__(/*! ./util */ 210).flatMap;\nvar guessBrowser = __webpack_require__(/*! ./util */ 210).guessBrowser;\n\nvar guess = guessBrowser();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\n\nvar chromeMajorVersion = isChrome\n  ? parseInt(navigator.userAgent.match(/Chrome\\/([0-9]+)/)[1], 10)\n  : null;\n\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n\n  var trackStatsPromises = flatMap([\n    [localAudioTracks, 'localAudioTrackStats', false],\n    [localVideoTracks, 'localVideoTrackStats', false],\n    [remoteAudioTracks, 'remoteAudioTrackStats', true],\n    [remoteVideoTracks, 'remoteVideoTrackStats', true]\n  ], function(triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function(track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function(stats) {\n        stats.trackId = track.id;\n        statsResponse[statsArrayName].push(stats);\n      });\n    });\n  });\n\n  return Promise.all(trackStatsPromises).then(function() {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function(activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome\n    || typeof options.testForSafari  !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(\n      standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  var standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', type: 'string' },\n    { key: 'port', type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\n      report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type\n        ? activeLocalCandidateStats[keyInfo.key]\n        : keyInfo.key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type\n        ? activeRemoteCandidateStats[keyInfo.key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string' },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce(function(report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n      ? activeCandidatePairStats[keyInfo.key]\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  var standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\n    { key: 'port', ffKeys: ['portNumber'], type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', ffKeys: ['transport'], type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\n        return key in activeLocalCandidateStats;\n      }) || keyInfo.key;\n      report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type\n        ? key === 'candidateType'\n          ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key]\n          : activeLocalCandidateStats[key]\n        : key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\n        return key in activeRemoteCandidateStats;\n      }) || keyInfo.key;\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type\n        ? key === 'candidateType'\n          ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key]\n          : activeRemoteCandidateStats[key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string' },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce(function(report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n      ? activeCandidatePairStats[keyInfo.key]\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  // NOTE(mmalavalli): In Electron 2.x (Chrome 61), if the remote peer adds a second\n  // MediaStreamTrack after completing the negotiation for the first MediaStreamTrack,\n  // then the array returned by RTCPeerConnection.getReceivers() will contain only\n  // the RTCRtpReceiver for the first MediaStreamTrack. In order to work around this,\n  // we construct the array of remote MediaStreamTracks using\n  // RTCPeerConnection.getRemoteStreams() instead.\n  if (peerConnection[getSendersOrReceivers] && !(chromeMajorVersion && chromeMajorVersion < 66)) {\n    return peerConnection[getSendersOrReceivers]().map(function(senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function(track) {\n      return track && track.kind === kind;\n    });\n  }\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function(stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedTrackStatsReport>}\n */\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n  if (typeof options.testForFirefox  !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n  if (typeof options.testForSafari  !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari  !== 'undefined'\n      || 'currentDirection' in RTCRtpTransceiver.prototype) {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error([\n      'getStats() is not supported on this version of Safari',\n      'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\n    ].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<StandardizedTrackStatsReport>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function(resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function(response) {\n        resolve(standardizeChromeLegacyStats(response, track));\n      }, null, reject);\n      return;\n    }\n    peerConnection.getStats(track).then(function(response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<StandardizedTrackStatsReport>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function(resolve, reject) {\n    peerConnection.getStats(track).then(function(response) {\n      resolve(standardizeFirefoxStats(response, isRemote));\n    }, reject);\n  });\n}\n\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function(report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function(stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsReport} response\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null;\n  var outbound = null;\n  var track = null;\n  var codec = null;\n\n  response.forEach(function(stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n    }\n  });\n\n  var isRemote = track && track.remoteSource;\n  var standardizedStats = {};\n\n  var first = isRemote ? inbound : outbound;\n  var second = track;\n  var third = codec;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n\n    if (third && typeof third[name] !== 'undefined') {\n      return third[name];\n    }\n\n    return null;\n  }\n\n  var ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n\n  var mimeType = getStatValue('mimeType');\n  if (typeof mimeType === 'string') {\n    mimeType = mimeType.split('/');\n    standardizedStats.codecName = mimeType[mimeType.length - 1];\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    standardizedStats.roundTripTime = roundTripTime;\n  }\n\n  var jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameWidth = getStatValue('frameWidth');\n  if (typeof frameWidth === 'number') {\n    if (isRemote) {\n      standardizedStats.frameWidthReceived = frameWidth;\n    } else {\n      standardizedStats.frameWidthSent = frameWidth;\n    }\n  }\n\n  var frameHeight = getStatValue('frameHeight');\n  if (typeof frameHeight === 'number') {\n    if (isRemote) {\n      standardizedStats.frameHeightReceived = frameHeight;\n    } else {\n      standardizedStats.frameHeightSent = frameHeight;\n    }\n  }\n\n  var framesPerSecond = getStatValue('framesPerSecond');\n  if (typeof framesPerSecond === 'number') {\n    standardizedStats.frameRateSent = framesPerSecond;\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var audioLevel = getStatValue('audioLevel');\n  if (typeof audioLevel === 'number') {\n    if (isRemote) {\n      standardizedStats.audioOutputLevel = audioLevel;\n    } else {\n      standardizedStats.audioInputLevel = audioLevel;\n    }\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n\n  var inbound = null;\n  var outbound = null;\n\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(function(stat) {\n    if (stat.isRemote) {\n      return;\n    }\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n\n  var ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    standardizedStats.roundTripTime = roundTripTime;\n  }\n\n  var jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTracks - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTracks - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTracks - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTracks - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\nmodule.exports = getStats;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///264\n");

/***/ }),
/* 265 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/getusermedia.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * This function is very similar to <code>navigator.getUserMedia</code> except\n * that it does not use callbacks and returns a Promise for a MediaStream\n * @function getUserMedia\n * @param {MediaStreamConstraints} [constraints={audio:true,video:true}] - the\n *   MediaStreamConstraints object specifying what kind of LocalMediaStream to\n *   request from the browser (by default both audio and video)\n * @returns Promise<MediaStream>\n */\nfunction getUserMedia(constraints) {\n  return new Promise(function getUserMediaPromise(resolve, reject) {\n    _getUserMedia(constraints || { audio: true, video: true }, resolve, reject);\n  });\n}\n\nfunction _getUserMedia(constraints, onSuccess, onFailure) {\n  if (typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    if (typeof navigator.mediaDevices === 'object' &&\n        typeof navigator.mediaDevices.getUserMedia === 'function') {\n      navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onFailure);\n      return;\n    } else if (typeof navigator.webkitGetUserMedia === 'function') {\n      navigator.webkitGetUserMedia(constraints, onSuccess, onFailure);\n      return;\n    } else if (typeof navigator.mozGetUserMedia === 'function') {\n      navigator.mozGetUserMedia(constraints, onSuccess, onFailure);\n      return;\n    }\n  }\n  onFailure(new Error('getUserMedia is not supported'));\n}\n\nmodule.exports = getUserMedia;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL2dldHVzZXJtZWRpYS5qcz9iNzFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUIsZUFBZSxzQkFBc0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDJCQUEyQjtBQUM3RCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjI2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHZlcnkgc2ltaWxhciB0byA8Y29kZT5uYXZpZ2F0b3IuZ2V0VXNlck1lZGlhPC9jb2RlPiBleGNlcHRcbiAqIHRoYXQgaXQgZG9lcyBub3QgdXNlIGNhbGxiYWNrcyBhbmQgcmV0dXJucyBhIFByb21pc2UgZm9yIGEgTWVkaWFTdHJlYW1cbiAqIEBmdW5jdGlvbiBnZXRVc2VyTWVkaWFcbiAqIEBwYXJhbSB7TWVkaWFTdHJlYW1Db25zdHJhaW50c30gW2NvbnN0cmFpbnRzPXthdWRpbzp0cnVlLHZpZGVvOnRydWV9XSAtIHRoZVxuICogICBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzIG9iamVjdCBzcGVjaWZ5aW5nIHdoYXQga2luZCBvZiBMb2NhbE1lZGlhU3RyZWFtIHRvXG4gKiAgIHJlcXVlc3QgZnJvbSB0aGUgYnJvd3NlciAoYnkgZGVmYXVsdCBib3RoIGF1ZGlvIGFuZCB2aWRlbylcbiAqIEByZXR1cm5zIFByb21pc2U8TWVkaWFTdHJlYW0+XG4gKi9cbmZ1bmN0aW9uIGdldFVzZXJNZWRpYShjb25zdHJhaW50cykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZ2V0VXNlck1lZGlhUHJvbWlzZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICBfZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzIHx8IHsgYXVkaW86IHRydWUsIHZpZGVvOiB0cnVlIH0sIHJlc29sdmUsIHJlamVjdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBfZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvci5tZWRpYURldmljZXMgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4ob25TdWNjZXNzLCBvbkZhaWx1cmUpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIG9uRmFpbHVyZShuZXcgRXJyb3IoJ2dldFVzZXJNZWRpYSBpcyBub3Qgc3VwcG9ydGVkJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVzZXJNZWRpYTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vd2VicnRjL2xpYi9nZXR1c2VybWVkaWEuanNcbi8vIG1vZHVsZSBpZCA9IDI2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///265\n");

/***/ }),
/* 266 */
/*!*************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/mediastreamtrack.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global MediaStreamTrack */\n\n\nif (typeof MediaStreamTrack !== 'undefined') {\n  module.exports = MediaStreamTrack;\n} else {\n  module.exports = function MediaStreamTrack() {\n    throw new Error('WebRTC is not supported in this browser');\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL21lZGlhc3RyZWFtdHJhY2suanM/MWNkNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIE1lZGlhU3RyZWFtVHJhY2sgKi9cbid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBNZWRpYVN0cmVhbVRyYWNrICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IE1lZGlhU3RyZWFtVHJhY2s7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE1lZGlhU3RyZWFtVHJhY2soKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXZWJSVEMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKTtcbiAgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vd2VicnRjL2xpYi9tZWRpYXN0cmVhbXRyYWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///266\n");

/***/ }),
/* 267 */
/*!************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcicecandidate.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global mozRTCIceCandidate, RTCIceCandidate */\n\n\nif (typeof RTCIceCandidate !== 'undefined') {\n  module.exports = RTCIceCandidate;\n} else if (typeof mozRTCIceCandidate !== 'undefined') {\n  module.exports = mozRTCIceCandidate;\n} else {\n  module.exports = function RTCIceCandidate() {\n    throw new Error('WebRTC is unsupported');\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y2ljZWNhbmRpZGF0ZS5qcz80NTRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ2E7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgbW96UlRDSWNlQ2FuZGlkYXRlLCBSVENJY2VDYW5kaWRhdGUgKi9cbid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBSVENJY2VDYW5kaWRhdGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gUlRDSWNlQ2FuZGlkYXRlO1xufSBlbHNlIGlmICh0eXBlb2YgbW96UlRDSWNlQ2FuZGlkYXRlICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IG1velJUQ0ljZUNhbmRpZGF0ZTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gUlRDSWNlQ2FuZGlkYXRlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignV2ViUlRDIGlzIHVuc3VwcG9ydGVkJyk7XG4gIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3dlYnJ0Yy9saWIvcnRjaWNlY2FuZGlkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///267\n");

/***/ }),
/* 268 */
/*!********************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcpeerconnection/index.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar guessBrowser = __webpack_require__(/*! ../util */ 210).guessBrowser;\n\nswitch (guessBrowser()) {\n  case 'chrome':\n    module.exports = __webpack_require__(/*! ./chrome */ 269);\n    break;\n  case 'firefox':\n    module.exports = __webpack_require__(/*! ./firefox */ 273);\n    break;\n  case 'safari':\n    module.exports = __webpack_require__(/*! ./safari */ 274);\n    break;\n  default:\n    if (typeof RTCPeerConnection === 'undefined') {\n      break;\n    }\n    module.exports = RTCPeerConnection;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3BlZXJjb25uZWN0aW9uL2luZGV4LmpzP2Q0MjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsa0JBQVM7O0FBRXBDO0FBQ0E7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxtQkFBVTtBQUN2QztBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsb0JBQVc7QUFDeEM7QUFDQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLG1CQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGd1ZXNzQnJvd3NlciA9IHJlcXVpcmUoJy4uL3V0aWwnKS5ndWVzc0Jyb3dzZXI7XG5cbnN3aXRjaCAoZ3Vlc3NCcm93c2VyKCkpIHtcbiAgY2FzZSAnY2hyb21lJzpcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2hyb21lJyk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2ZpcmVmb3gnOlxuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9maXJlZm94Jyk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3NhZmFyaSc6XG4gICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NhZmFyaScpO1xuICAgIGJyZWFrO1xuICBkZWZhdWx0OlxuICAgIGlmICh0eXBlb2YgUlRDUGVlckNvbm5lY3Rpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSVENQZWVyQ29ubmVjdGlvbjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vd2VicnRjL2xpYi9ydGNwZWVyY29ubmVjdGlvbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///268\n");

/***/ }),
/* 269 */
/*!*********************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcpeerconnection/chrome.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals RTCDataChannel, RTCSessionDescription, webkitRTCPeerConnection */\n\n\nvar ChromeRTCSessionDescription = __webpack_require__(/*! ../rtcsessiondescription/chrome */ 231);\nvar EventTarget = __webpack_require__(/*! ../util/eventtarget */ 222);\nvar inherits = __webpack_require__(/*! util */ 213).inherits;\nvar Latch = __webpack_require__(/*! ../util/latch */ 232);\nvar MediaStream = __webpack_require__(/*! ../mediastream */ 230);\nvar RTCRtpSenderShim = __webpack_require__(/*! ../rtcrtpsender */ 223);\nvar sdpUtils = __webpack_require__(/*! ../util/sdp */ 224);\nvar util = __webpack_require__(/*! ../util */ 210);\n\nvar PeerConnection = typeof RTCPeerConnection !== 'undefined'\n  ? RTCPeerConnection\n  : webkitRTCPeerConnection;\n\n// NOTE(mroberts): This class wraps Chrome's RTCPeerConnection implementation.\n// It provides some functionality not currently present in Chrome, namely the\n// abilities to\n//\n//   1. Rollback, per the workaround suggested here:\n//      https://bugs.chromium.org/p/webrtc/issues/detail?id=5738#c3\n//\n//   2. Listen for track events, per the adapter.js workaround.\n//\n//   3. Set iceTransportPolicy.\n//\nfunction ChromeRTCPeerConnection(configuration, constraints) {\n  if (!(this instanceof ChromeRTCPeerConnection)) {\n    return new ChromeRTCPeerConnection(configuration, constraints);\n  }\n\n  EventTarget.call(this);\n\n  // NOTE(mhuynh): See\n  // https://webrtc.org/web-apis/chrome/unified-plan/\n  // for transition from 'plan-b' default to 'unified-plan' as default.\n  var newConfiguration = Object.assign({ sdpSemantics: 'plan-b' }, configuration);\n  if (newConfiguration.iceTransportPolicy) {\n    newConfiguration.iceTransports = newConfiguration.iceTransportPolicy;\n  }\n\n  util.interceptEvent(this, 'datachannel');\n  util.interceptEvent(this, 'signalingstatechange');\n\n  /* eslint new-cap:0 */\n  var peerConnection = new PeerConnection(newConfiguration, constraints);\n  var sdpSemantics = getSdpSemantics(newConfiguration.sdpSemantics);\n\n  Object.defineProperties(this, {\n    _localStream: {\n      value: new MediaStream()\n    },\n    _peerConnection: {\n      value: peerConnection\n    },\n    _pendingLocalOffer: {\n      value: null,\n      writable: true\n    },\n    _pendingRemoteOffer: {\n      value: null,\n      writable: true\n    },\n    _sdpSemantics: {\n      value: sdpSemantics\n    },\n    _senders: {\n      value: new Map()\n    },\n    _signalingStateLatch: {\n      value: new Latch()\n    },\n    _tracksToSSRCs: {\n      value: new Map()\n    },\n    localDescription: {\n      enumerable: true,\n      get: function() {\n        return this._pendingLocalOffer ? this._pendingLocalOffer : peerConnection.localDescription;\n      }\n    },\n    remoteDescription: {\n      enumerable: true,\n      get: function() {\n        return this._pendingRemoteOffer ? this._pendingRemoteOffer : peerConnection.remoteDescription;\n      }\n    },\n    signalingState: {\n      enumerable: true,\n      get: function() {\n        if (this._pendingLocalOffer) {\n          return 'have-local-offer';\n        } else if (this._pendingRemoteOffer) {\n          return 'have-remote-offer';\n        }\n        return peerConnection.signalingState;\n      }\n    }\n  });\n\n  var self = this;\n\n  if (sdpSemantics === 'plan-b') {\n    // NOTE(mmalavalli): Because of a bug related to \"ontrack\" in Chrome 63 and below,\n    // we prevent it from being delegated to ChromeRTCPeerConnection.\n    // Existing bug: https://bugs.chromium.org/p/chromium/issues/detail?id=774303\n    // Bug filed by us: https://bugs.chromium.org/p/chromium/issues/detail?id=783433\n    util.interceptEvent(this, 'track');\n  }\n\n  peerConnection.addEventListener('datachannel', function ondatachannel(event) {\n    shimDataChannel(event.channel);\n    self.dispatchEvent(event);\n  });\n\n  peerConnection.addEventListener('signalingstatechange', function onsignalingstatechange() {\n    if (!self._pendingLocalOffer && !self._pendingRemoteOffer) {\n      self.dispatchEvent.apply(self, arguments);\n    }\n  });\n\n  peerConnection.ontrack = function ontrack() {\n    // NOTE(mroberts): adapter.js's \"track\" event shim only kicks off if we set\n    // the ontrack property of the RTCPeerConnection.\n  };\n\n  peerConnection.addStream(this._localStream);\n  util.proxyProperties(PeerConnection.prototype, this, peerConnection);\n}\n\ninherits(ChromeRTCPeerConnection, EventTarget);\n\n// NOTE(mmalavalli): This shim supports our limited case of adding\n// all MediaStreamTracks to one MediaStream. It has been implemented this\n// keeping in mind that this is to be maintained only until \"addTrack\" is\n// supported natively in Chrome.\n// NOTE(mmalavalli): This shim also works around a Chrome bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=894231\n//\nChromeRTCPeerConnection.prototype.addTrack = function addTrack() {\n  var args = [].slice.call(arguments);\n  var track = args[0];\n  var sender = this._senders.get(track);\n\n  if (this._peerConnection.signalingState === 'closed') {\n    throw new Error('Cannot add MediaStreamTrack [' + track.id + ', '\n      + track.kind + ']: RTCPeerConnection is closed');\n  }\n  if (sender && sender.track) {\n    throw new Error('Cannot add MediaStreamTrack [' + track.id + ', '\n      + track.kind + ']: RTCPeerConnection already has it');\n  }\n  if (this._peerConnection.addTrack) {\n    if (this._sdpSemantics === 'unified-plan') {\n      sender = getActiveSenders(this._peerConnection).get(track)\n        || this._peerConnection.addTrack.apply(this._peerConnection, args);\n      this._senders.set(track, sender);\n      return sender;\n    }\n    return this._peerConnection.addTrack.apply(this._peerConnection, args);\n  }\n\n  this._peerConnection.removeStream(this._localStream);\n  this._localStream.addTrack(track);\n  this._peerConnection.addStream(this._localStream);\n\n  sender = new RTCRtpSenderShim(track);\n  this._senders.set(track, sender);\n  return sender;\n};\n\n// NOTE(mmalavalli): This shim works around a Chrome bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=894231\n//\nif (PeerConnection.prototype.addTransceiver) {\n  ChromeRTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n    var transceiver = this._peerConnection.addTransceiver.apply(this._peerConnection, arguments);\n    var sender = transceiver.sender;\n    var track = sender.track;\n    this._senders.set(track, sender);\n    return transceiver;\n  };\n}\n\n// NOTE(mmalavalli): This shim supports our limited case of removing\n// MediaStreamTracks from one MediaStream. It has been implemented this\n// keeping in mind that this is to be maintained only until \"removeTrack\" is\n// supported natively in Chrome.\n// NOTE(mmalavalli): This shim also works around a Chrome bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=894231\n//\nChromeRTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n  if (this._peerConnection.signalingState === 'closed') {\n    throw new Error('Cannot remove MediaStreamTrack: RTCPeerConnection is closed');\n  }\n\n  if (this._peerConnection.removeTrack) {\n    try {\n      if (this._sdpSemantics === 'unified-plan') {\n        if (sender.track) {\n          this._senders.set(sender.track, new RTCRtpSenderShim(null));\n        }\n      } else {\n        this._peerConnection.removeTrack(sender);\n      }\n    }\n    catch (error) {\n      // NOTE(mhuynh): Do nothing.\n      // In Chrome, will throw a 'sender was not created by this peer connection'\n      // This behavior does not seem to be spec compliant, so a temporary shim\n      // is introduced.\n    }\n    return;\n  }\n\n  var track = sender.track;\n  if (!track) {\n    return;\n  }\n  sender = this._senders.get(track);\n  if (sender && sender.track) {\n    sender.track = null;\n    this._peerConnection.removeStream(this._localStream);\n    this._localStream.removeTrack(track);\n    this._peerConnection.addStream(this._localStream);\n  }\n};\n\nChromeRTCPeerConnection.prototype.getSenders = function getSenders() {\n  return this._peerConnection.getSenders && this._sdpSemantics === 'plan-b'\n    ? this._peerConnection.getSenders()\n    : Array.from(this._senders.values());\n};\n\nChromeRTCPeerConnection.prototype.addIceCandidate = function addIceCandidate(candidate) {\n  var args = [].slice.call(arguments);\n  var promise;\n  var self = this;\n\n  if (this.signalingState === 'have-remote-offer') {\n    // NOTE(mroberts): Because the ChromeRTCPeerConnection simulates the\n    // \"have-remote-offer\" signalingStates, we only want to invoke the true\n    // addIceCandidates method when the remote description has been applied.\n    promise = this._signalingStateLatch.when('low').then(function signalingStatesResolved() {\n      return self._peerConnection.addIceCandidate(candidate);\n    });\n  } else {\n    promise = this._peerConnection.addIceCandidate(candidate);\n  }\n\n  return args.length > 1\n    ? util.legacyPromise(promise, args[1], args[2])\n    : promise;\n};\n\n// NOTE(mroberts): The WebRTC spec does not specify that close should throw an\n// Error; however, in Chrome it does. We workaround this by checking the\n// signalingState manually.\nChromeRTCPeerConnection.prototype.close = function close() {\n  if (this.signalingState !== 'closed') {\n    this._pendingLocalOffer = null;\n    this._pendingRemoteOffer = null;\n    this._peerConnection.close();\n  }\n};\n\n// NOTE(mroberts): Because we workaround Chrome's lack of rollback support by\n// \"faking\" setRemoteDescription, we cannot create an answer until we actually\n// apply the remote description. This means, once you call createAnswer, you\n// can no longer rollback. This is acceptable for our use case because we will\n// apply the newly-created answer almost immediately; however, this may be\n// unacceptable for other use cases.\nChromeRTCPeerConnection.prototype.createAnswer = function createAnswer() {\n  var args = [].slice.call(arguments);\n  var promise;\n  var isPlanB = this._sdpSemantics === 'plan-b';\n  var self = this;\n\n  if (this._pendingRemoteOffer) {\n    var mediaStreamTracks = isPlanB ? util.flatMap(this.getRemoteStreams(), function(mediaStream) {\n      return mediaStream.getTracks();\n    }) : [];\n\n    promise = this._peerConnection.setRemoteDescription(this._pendingRemoteOffer).then(function setRemoteDescriptionSucceeded() {\n      if (isPlanB) {\n        maybeDispatchTrackEvents(self, mediaStreamTracks);\n      }\n      // NOTE(mroberts): The signalingStates between the ChromeRTCPeerConnection\n      // and the underlying RTCPeerConnection implementation have converged. We\n      // can unblock any pending calls to addIceCandidate now.\n      self._signalingStateLatch.lower();\n      return self._peerConnection.createAnswer();\n    }).then(function createAnswerSucceeded(answer) {\n      self._pendingRemoteOffer = null;\n      return new RTCSessionDescription({\n        type: 'answer',\n        sdp: updateTrackIdsToSSRCs(self._sdpSemantics, self._tracksToSSRCs, answer.sdp)\n      });\n    }, function setRemoteDescriptionOrCreateAnswerFailed(error) {\n      self._pendingRemoteOffer = null;\n      throw error;\n    });\n  } else {\n    promise = this._peerConnection.createAnswer().then(function(answer) {\n      return new RTCSessionDescription({\n        type: 'answer',\n        sdp: updateTrackIdsToSSRCs(self._sdpSemantics, self._tracksToSSRCs, answer.sdp)\n      });\n    });\n  }\n\n  return args.length > 1\n    ? util.legacyPromise(promise, args[0], args[1])\n    : promise;\n};\n\nChromeRTCPeerConnection.prototype.createOffer = function createOffer() {\n  var args = [].slice.call(arguments);\n  var options = (args.length > 1 ? args[2] : args[0]) || {};\n  var self = this;\n\n  var promise = this._peerConnection.createOffer(options).then(function(offer) {\n    return new ChromeRTCSessionDescription({\n      type: offer.type,\n      sdp: updateTrackIdsToSSRCs(self._sdpSemantics, self._tracksToSSRCs, offer.sdp)\n    });\n  });\n\n  return args.length > 1\n    ? util.legacyPromise(promise, args[0], args[1])\n    : promise;\n};\n\nChromeRTCPeerConnection.prototype.createDataChannel = function createDataChannel(label, dataChannelDict) {\n  dataChannelDict = shimDataChannelInit(dataChannelDict);\n  var dataChannel = this._peerConnection.createDataChannel(label, dataChannelDict);\n  shimDataChannel(dataChannel);\n  return dataChannel;\n};\n\nChromeRTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\n  var args = [].slice.call(arguments);\n  var description = args[0];\n  var promise = setDescription(this, true, description);\n  return args.length > 1\n    ? util.legacyPromise(promise, args[1], args[2])\n    : promise;\n};\n\nChromeRTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n  var args = [].slice.call(arguments);\n  var description = args[0];\n  var promise = setDescription(this, false, description);\n  return args.length > 1\n    ? util.legacyPromise(promise, args[1], args[2])\n    : promise;\n};\n\nutil.delegateMethods(\n  PeerConnection.prototype,\n  ChromeRTCPeerConnection.prototype,\n  '_peerConnection');\n\n// Dispatch 'track' events to ChromeRTCPeerConnection if new\n// MediaStreamTracks have been added. This is a temporary workaround\n// for the unreliable MediaStreamTrack#addtrack event. Do this only if\n// the native RTCPeerConnection has not implemented 'ontrack'.\nfunction maybeDispatchTrackEvents(peerConnection, mediaStreamTracks) {\n  var currentMediaStreamTracks = util.flatMap(peerConnection.getRemoteStreams(), function(mediaStream) {\n    return mediaStream.getTracks();\n  });\n  var mediaStreamTracksAdded = util.difference(currentMediaStreamTracks, mediaStreamTracks);\n\n  mediaStreamTracksAdded.forEach(function(mediaStreamTrack) {\n    var newEvent = new Event('track');\n    newEvent.track = mediaStreamTrack;\n    peerConnection.dispatchEvent(newEvent);\n  });\n}\n\n// NOTE(mroberts): We workaround Chrome's lack of rollback support, per the\n// workaround suggested here: https://bugs.chromium.org/p/webrtc/issues/detail?id=5738#c3\n// Namely, we \"fake\" setting the local or remote description and instead buffer\n// it. If we receive or create an answer, then we will actually apply the\n// description. Until we receive or create an answer, we will be able to\n// \"rollback\" by simply discarding the buffer description.\nfunction setDescription(peerConnection, local, description) {\n  function setPendingLocalOffer(offer) {\n    if (local) {\n      peerConnection._pendingLocalOffer = offer;\n    } else {\n      peerConnection._pendingRemoteOffer = offer;\n    }\n  }\n\n  function clearPendingLocalOffer() {\n    if (local) {\n      peerConnection._pendingLocalOffer = null;\n    } else {\n      peerConnection._pendingRemoteOffer = null;\n    }\n  }\n\n  var pendingLocalOffer = local ? peerConnection._pendingLocalOffer : peerConnection._pendingRemoteOffer;\n  var pendingRemoteOffer = local ? peerConnection._pendingRemoteOffer : peerConnection._pendingLocalOffer;\n  var intermediateState = local ? 'have-local-offer' : 'have-remote-offer';\n  var setLocalDescription = local ? 'setLocalDescription' : 'setRemoteDescription';\n  var promise;\n\n  var isPlanB = peerConnection._sdpSemantics === 'plan-b';\n  var mediaStreamTracks = isPlanB ? util.flatMap(peerConnection.getRemoteStreams(), function(mediaStream) {\n    return mediaStream.getTracks();\n  }) : [];\n\n  if (!local && pendingRemoteOffer && description.type === 'answer') {\n    promise = setRemoteAnswer(peerConnection, description);\n  } else if (description.type === 'offer') {\n    if (peerConnection.signalingState !== intermediateState && peerConnection.signalingState !== 'stable') {\n      // NOTE(mroberts): Error message copied from Firefox.\n      return Promise.reject(new Error('Cannot set ' + (local ? 'local' : 'remote') +\n        ' offer in state ' + peerConnection.signalingState));\n    }\n\n    // We need to save this local offer in case of a rollback. We also need to\n    // check to see if the signalingState between the ChromeRTCPeerConnection\n    // and the underlying RTCPeerConnection implementation are about to diverge.\n    // If so, we need to ensure subsequent calls to addIceCandidate will block.\n    if (!pendingLocalOffer && peerConnection._signalingStateLatch.state === 'low') {\n      peerConnection._signalingStateLatch.raise();\n    }\n    var previousSignalingState = peerConnection.signalingState;\n    setPendingLocalOffer(unwrap(description));\n    promise = Promise.resolve();\n\n    // Only dispatch a signalingstatechange event if we transitioned.\n    if (peerConnection.signalingState !== previousSignalingState) {\n      promise.then(function dispatchSignalingStateChangeEvent() {\n        peerConnection.dispatchEvent(new Event('signalingstatechange'));\n      });\n    }\n\n  } else if (description.type === 'rollback') {\n    if (peerConnection.signalingState !== intermediateState) {\n      // NOTE(mroberts): Error message copied from Firefox.\n      promise = Promise.reject(new Error('Cannot rollback ' +\n        (local ? 'local' : 'remote') + ' description in ' + peerConnection.signalingState));\n    } else {\n      // Reset the pending offer.\n      clearPendingLocalOffer();\n      promise = Promise.resolve();\n      promise.then(function dispatchSignalingStateChangeEvent() {\n        peerConnection.dispatchEvent(new Event('signalingstatechange'));\n      });\n    }\n  }\n\n  return promise || peerConnection._peerConnection[setLocalDescription](unwrap(description)).then(function() {\n    if (!local && isPlanB) {\n      maybeDispatchTrackEvents(peerConnection, mediaStreamTracks);\n    }\n  });\n}\n\nfunction setRemoteAnswer(peerConnection, answer) {\n  var isPlanB = peerConnection._sdpSemantics === 'plan-b';\n  var mediaStreamTracks = isPlanB ? util.flatMap(peerConnection.getRemoteStreams(), function(mediaStream) {\n    return mediaStream.getTracks();\n  }) : [];\n  // Apply the pending local offer.\n  var pendingLocalOffer = peerConnection._pendingLocalOffer;\n  return peerConnection._peerConnection.setLocalDescription(pendingLocalOffer).then(function setLocalOfferSucceeded() {\n    peerConnection._pendingLocalOffer = null;\n    return peerConnection.setRemoteDescription(answer);\n  }).then(function setRemoteAnswerSucceeded() {\n    if (isPlanB) {\n      maybeDispatchTrackEvents(peerConnection, mediaStreamTracks);\n    }\n    // NOTE(mroberts): The signalingStates between the ChromeRTCPeerConnection\n    // and the underlying RTCPeerConnection implementation have converged. We\n    // can unblock any pending calls to addIceCandidate now.\n    peerConnection._signalingStateLatch.lower();\n  });\n}\n\nfunction unwrap(description) {\n  if (description instanceof ChromeRTCSessionDescription) {\n    if (description._description) {\n      return description._description;\n    }\n  }\n  return new RTCSessionDescription(description);\n}\n\n/**\n * Check whether or not we need to apply our maxPacketLifeTime shim. We are\n * pretty conservative: we'll only apply it if the legacy maxRetransmitTime\n * property is available _and_ the standard maxPacketLifeTime property is _not_\n * available (the thinking being that Chrome will land the standards-compliant\n * property).\n * @returns {boolean}\n */\nfunction needsMaxPacketLifeTimeShim() {\n  return 'maxRetransmitTime' in RTCDataChannel.prototype\n    && !('maxPacketLifeTime' in RTCDataChannel.prototype);\n}\n\n/**\n * Shim an RTCDataChannelInit dictionary (if necessary). This function returns\n * a copy of the original RTCDataChannelInit.\n * @param {RTCDataChannelInit} dataChannelDict\n * @returns {RTCDataChannelInit}\n */\nfunction shimDataChannelInit(dataChannelDict) {\n  dataChannelDict = Object.assign({}, dataChannelDict);\n  if (needsMaxPacketLifeTimeShim() && 'maxPacketLifeTime' in dataChannelDict) {\n    dataChannelDict.maxRetransmitTime = dataChannelDict.maxPacketLifeTime;\n  }\n  return dataChannelDict;\n}\n\n/**\n * Shim an RTCDataChannel (if necessary). This function mutates the\n * RTCDataChannel.\n * @param {RTCDataChannel} dataChannel\n * @returns {RTCDataChannel}\n */\nfunction shimDataChannel(dataChannel) {\n  Object.defineProperty(dataChannel, 'maxRetransmits', {\n    value: dataChannel.maxRetransmits === 65535\n      ? null\n      : dataChannel.maxRetransmits\n  });\n  if (needsMaxPacketLifeTimeShim()) {\n    // NOTE(mroberts): We can rename `maxRetransmitTime` to `maxPacketLifeTime`.\n    //\n    //   https://bugs.chromium.org/p/chromium/issues/detail?id=696681\n    //\n    Object.defineProperty(dataChannel, 'maxPacketLifeTime', {\n      value: dataChannel.maxRetransmitTime === 65535\n        ? null\n        : dataChannel.maxRetransmitTime\n    });\n  }\n  return dataChannel;\n}\n\n/**\n * Gets the active RTCRtpSenders of the RTCPeerConnection.\n * @param peerConnection\n * @returns {Map<MediaStreamTrack, RTCRtpSender>}\n */\nfunction getActiveSenders(peerConnection) {\n  return new Map(peerConnection.getSenders().filter(function(sender) {\n    return sender.track;\n  }).map(function(sender) {\n    return [sender.track, sender];\n  }));\n}\n\n/**\n * Get the actual `sdpSemantics`.\n * @param {SdpSemantics} sdpSemantics\n * @returns {SdpSemantics}\n */\nfunction getSdpSemantics(sdpSemantics) {\n  // NOTE(mmalavalli): Once Chrome stops supporting \"plan-b\" SDPs, it will\n  // ignore the \"sdpSemantics\" flag. So, in order to differentiate between\n  // versions of Chrome which support only \"plan-b\" SDPs and versions of Chrome\n  // which support only \"unified-plan\" SDPs, which check whether PeerConnection's\n  // addStream() method is present.\n  return sdpUtils.checkIfSdpSemanticsIsSupported()\n    ? sdpSemantics\n    : PeerConnection.prototype.addStream ? 'plan-b' : 'unified-plan';\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the SDP itself. This method\n * ensures that SSRCs never change once announced.\n * @param {SdpSemantics} sdpSemantics\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - an SDP whose format is determined by `sdpSemantics`\n * @returns {string} updatedSdp - updated SDP\n */\nfunction updateTrackIdsToSSRCs(sdpSemantics, tracksToSSRCs, sdp) {\n  return sdpSemantics === 'unified-plan'\n    ? sdpUtils.updateUnifiedPlanTrackIdsToSSRCs(tracksToSSRCs, sdp)\n    : sdpUtils.updatePlanBTrackIdsToSSRCs(tracksToSSRCs, sdp);\n}\n\nmodule.exports = ChromeRTCPeerConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///269\n");

/***/ }),
/* 270 */
/*!************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/process/browser.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///270\n");

/***/ }),
/* 271 */
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcz83YzJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMjcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///271\n");

/***/ }),
/* 272 */
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz8yYzJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMjcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///272\n");

/***/ }),
/* 273 */
/*!**********************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcpeerconnection/firefox.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals mozRTCPeerConnection, RTCPeerConnection */\n\n\nvar EventTarget = __webpack_require__(/*! ../util/eventtarget */ 222);\nvar FirefoxRTCSessionDescription = __webpack_require__(/*! ../rtcsessiondescription/firefox */ 233);\nvar RTCRtpSenderShim = __webpack_require__(/*! ../rtcrtpsender */ 223);\nvar inherits = __webpack_require__(/*! util */ 213).inherits;\nvar updateTracksToSSRCs = __webpack_require__(/*! ../util/sdp */ 224).updateUnifiedPlanTrackIdsToSSRCs;\nvar util = __webpack_require__(/*! ../util */ 210);\n\nvar PeerConnection = typeof RTCPeerConnection !== 'undefined'\n  ? RTCPeerConnection\n  : mozRTCPeerConnection;\n\n// NOTE(mroberts): This is a short-lived workaround. Checking the user agent\n// string might not fix every affected Firefox instance, but it should be good\n// enough for this bug.\nvar needsWorkaroundForBug1480277 = typeof navigator === 'object'\n  && navigator.userAgent\n  && (navigator.userAgent.match(/Firefox\\/61/) || navigator.userAgent.match(/Firefox\\/62/));\n\n// NOTE(mroberts): This class wraps Firefox's RTCPeerConnection implementation.\n// It provides some functionality not currently present in Firefox, namely the\n// abilities to\n//\n//   1. Call setLocalDescription and setRemoteDescription with new offers in\n//      signalingStates \"have-local-offer\" and \"have-remote-offer\",\n//      respectively.\n//\n//   2. The ability to call createOffer in signalingState \"have-local-offer\".\n//\n// Both of these are implemented using rollbacks to workaround the following\n// bug:\n//\n//   https://bugzilla.mozilla.org/show_bug.cgi?id=1072388\n//\n// We also provide a workaround for a bug where Firefox may change the\n// previously-negotiated DTLS role in an answer, which breaks Chrome:\n//\n//     https://bugzilla.mozilla.org/show_bug.cgi?id=1240897\n//\nfunction FirefoxRTCPeerConnection(configuration) {\n  if (!(this instanceof FirefoxRTCPeerConnection)) {\n    return new FirefoxRTCPeerConnection(configuration);\n  }\n\n  EventTarget.call(this);\n\n  util.interceptEvent(this, 'signalingstatechange');\n\n  /* eslint new-cap:0 */\n  var peerConnection = new PeerConnection(configuration);\n\n  Object.defineProperties(this, {\n    _initiallyNegotiatedDtlsRole: {\n      value: null,\n      writable: true\n    },\n    _isClosed: {\n      value: false,\n      writable: true\n    },\n    _peerConnection: {\n      value: peerConnection\n    },\n    _rollingBack: {\n      value: false,\n      writable: true\n    },\n    _senders: {\n      value: new Map()\n    },\n    _tracksToSSRCs: {\n      value: new Map()\n    },\n    iceGatheringState: {\n      enumerable: true,\n      get: function() {\n        return this._isClosed ? 'complete' : this._peerConnection.iceGatheringState;\n      }\n    },\n    localDescription: {\n      enumerable: true,\n      get: function() {\n        return overwriteWithInitiallyNegotiatedDtlsRole(this._peerConnection.localDescription, this._initiallyNegotiatedDtlsRole);\n      }\n    },\n    signalingState: {\n      enumerable: true,\n      get: function() {\n        return this._isClosed ? 'closed' : this._peerConnection.signalingState;\n      }\n    }\n  });\n\n  var self = this;\n  var previousSignalingState;\n\n  peerConnection.addEventListener('signalingstatechange', function onsignalingstatechange() {\n    if (!self._rollingBack && self.signalingState !== previousSignalingState) {\n      previousSignalingState = self.signalingState;\n\n      // NOTE(mmalavalli): In Firefox, 'signalingstatechange' event is\n      // triggered synchronously in the same tick after\n      // RTCPeerConnection#close() is called. So we mimic Chrome's behavior\n      // by triggering 'signalingstatechange' on the next tick.\n      var dispatchEventToSelf = self.dispatchEvent.apply.bind(self.dispatchEvent, self, arguments);\n      if (self._isClosed) {\n        setTimeout(dispatchEventToSelf);\n      } else {\n        dispatchEventToSelf();\n      }\n    }\n  });\n\n  util.proxyProperties(PeerConnection.prototype, this, peerConnection);\n}\n\ninherits(FirefoxRTCPeerConnection, EventTarget);\n\n// NOTE(mmalavalli): Firefox throws a TypeError when the PeerConnection's\n// prototype's \"peerIdentity\" property is accessed. In order to overcome\n// this, we ignore this property while delegating methods.\n// Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=1363815\nObject.defineProperty(FirefoxRTCPeerConnection.prototype, 'peerIdentity', {\n  enumerable: true,\n  value: Promise.resolve({\n    idp: '',\n    name: ''\n  })\n});\n\n// NOTE(mmalavalli): Because we are not delegating to the native\n// RTCPeerConnection#removeTrack(), we have to manually maintain a list of added\n// tracks. So we disable the delegation to the native RTCPeerConnection#addTrack()\n// for now.\nFirefoxRTCPeerConnection.prototype.addTrack = function addTrack() {\n  var args = [].slice.call(arguments);\n  var track = args[0];\n  var sender = this._senders.get(track);\n  if (sender && sender.track) {\n    throw new Error('Cannot add MediaStreamTrack [' + track.id + ', '\n      + track.kind + ']: RTCPeerConnection already has it');\n  }\n  sender = getActiveSenders(this._peerConnection).get(track)\n    || this._peerConnection.addTrack.apply(this._peerConnection, args);\n\n  if (needsWorkaroundForBug1480277) {\n    sender.replaceTrack(track);\n  }\n\n  this._senders.set(track, sender);\n  return sender;\n};\n\nif (PeerConnection.prototype.addTransceiver) {\n  FirefoxRTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n    var transceiver = this._peerConnection.addTransceiver.apply(this._peerConnection, arguments);\n    var sender = transceiver.sender;\n    var track = sender.track;\n    if (track && needsWorkaroundForBug1480277) {\n      sender.replaceTrack(track);\n    }\n    this._senders.set(track, sender);\n    return transceiver;\n  };\n}\n\n// NOTE(mmalavalli): RTCPeerConnection#removeTrack() has a bug in the\n// Firefox <--> Chrome interop case, which is mentioned below. So we disable\n// its delegation for now. Also, we maintain only one RTCRtpSender per\n// MediaStreamTrack for our use case, and not worry about multiple RTCRtpSenders\n// due to replaceTrack().\n// Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1133874\nFirefoxRTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n  if (this._isClosed) {\n    throw new Error('Cannot remove MediaStreamTrack: RTCPeerConnection is closed');\n  }\n  var track = sender.track;\n  if (!track) {\n    return;\n  }\n  sender = this._senders.get(track);\n  if (sender && sender.track) {\n    this._senders.set(track, new RTCRtpSenderShim(null));\n  }\n};\n\n// NOTE(mmalavalli): Because we are not delegating to the native\n// RTCPeerConnection#removeTrack(), we have to manually maintain a list of added\n// tracks. So we disable the delegation to the native RTCPeerConnection#getSenders()\n// for now.\nFirefoxRTCPeerConnection.prototype.getSenders = function getSenders() {\n  return Array.from(this._senders.values());\n};\n\nFirefoxRTCPeerConnection.prototype.createAnswer = function createAnswer() {\n  var args = [].slice.call(arguments);\n  var promise;\n  var self = this;\n\n  promise = this._peerConnection.createAnswer().then(function createAnswerSucceeded(answer) {\n    saveInitiallyNegotiatedDtlsRole(self, answer);\n    return overwriteWithInitiallyNegotiatedDtlsRole(answer, self._initiallyNegotiatedDtlsRole);\n  });\n\n  return typeof args[0] === 'function'\n    ? util.legacyPromise(promise, args[0], args[1])\n    : promise;\n};\n\n// NOTE(mroberts): The WebRTC spec allows you to call createOffer from any\n// signalingState other than \"closed\"; however, Firefox has not yet implemented\n// this (https://bugzilla.mozilla.org/show_bug.cgi?id=1072388). We workaround\n// this by rolling back if we are in state \"have-local-offer\" or\n// \"have-remote-offer\". This is acceptable for our use case because we will\n// apply the newly-created offer almost immediately; however, this may be\n// unacceptable for other use cases.\nFirefoxRTCPeerConnection.prototype.createOffer = function createOffer() {\n  var args = [].slice.call(arguments);\n  var options = (args.length > 1 ? args[2] : args[0]) || {};\n  var promise;\n  var self = this;\n\n  if (this.signalingState === 'have-local-offer' ||\n      this.signalingState === 'have-remote-offer') {\n    var local = this.signalingState === 'have-local-offer';\n    promise = rollback(this, local, function rollbackSucceeded() {\n      return self.createOffer(options);\n    });\n  } else {\n    promise = self._peerConnection.createOffer(options);\n  }\n\n  promise = promise.then(function(offer) {\n    return new FirefoxRTCSessionDescription({\n      type: offer.type,\n      sdp: updateTracksToSSRCs(self._tracksToSSRCs, offer.sdp)\n    });\n  });\n\n  return args.length > 1\n    ? util.legacyPromise(promise, args[0], args[1])\n    : promise;\n};\n\n// NOTE(mroberts): While Firefox will reject the Promise returned by\n// setLocalDescription when called from signalingState \"have-local-offer\" with\n// an answer, it still updates the .localDescription property. We workaround\n// this by explicitly handling this case.\nFirefoxRTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\n  var args = [].slice.call(arguments);\n  var description = args[0];\n  var promise;\n\n  if (description && description.type === 'answer' && this.signalingState === 'have-local-offer') {\n    promise = Promise.reject(new Error('Cannot set local answer in state have-local-offer'));\n  }\n\n  if (promise) {\n    return args.length > 1\n      ? util.legacyPromise(promise, args[1], args[2])\n      : promise;\n  }\n\n  return this._peerConnection.setLocalDescription.apply(this._peerConnection, args);\n};\n\n// NOTE(mroberts): The WebRTC spec allows you to call setRemoteDescription with\n// an offer multiple times in signalingState \"have-remote-offer\"; however,\n// Firefox has not yet implemented this (https://bugzilla.mozilla.org/show_bug.cgi?id=1072388).\n// We workaround this by rolling back if we are in state \"have-remote-offer\".\n// This is acceptable for our use case; however, this may be unacceptable for\n// other use cases.\n//\n// While Firefox will reject the Promise returned by setRemoteDescription when\n// called from signalingState \"have-remote-offer\" with an answer, it sill\n// updates the .remoteDescription property. We workaround this by explicitly\n// handling this case.\nFirefoxRTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n  var args = [].slice.call(arguments);\n  var description = args[0];\n  var promise;\n  var self = this;\n\n  if (description && this.signalingState === 'have-remote-offer') {\n    if (description.type === 'answer') {\n      promise = Promise.reject(new Error('Cannot set remote answer in state have-remote-offer'));\n    } else if (description.type === 'offer') {\n      promise = rollback(this, false, function rollbackSucceeded() {\n        return self._peerConnection.setRemoteDescription(description);\n      });\n    }\n  }\n\n  if (!promise) {\n    promise = this._peerConnection.setRemoteDescription(description);\n  }\n\n  promise = promise.then(function setRemoteDescriptionSucceeded() {\n    saveInitiallyNegotiatedDtlsRole(self, description, true);\n  });\n\n  return args.length > 1\n    ? util.legacyPromise(promise, args[1], args[2])\n    : promise;\n};\n\n// NOTE(mroberts): The WebRTC spec specifies that the PeerConnection's internal\n// isClosed slot should immediately be set to true; however, in Firefox it\n// occurs in the next tick. We workaround this by tracking isClosed manually.\nFirefoxRTCPeerConnection.prototype.close = function close() {\n  if (this.signalingState !== 'closed') {\n    this._isClosed = true;\n    this._peerConnection.close();\n  }\n};\n\nutil.delegateMethods(\n  PeerConnection.prototype,\n  FirefoxRTCPeerConnection.prototype,\n  '_peerConnection');\n\nfunction rollback(peerConnection, local, onceRolledBack) {\n  var setLocalDescription = local ? 'setLocalDescription' : 'setRemoteDescription';\n  peerConnection._rollingBack = true;\n  return peerConnection._peerConnection[setLocalDescription](new FirefoxRTCSessionDescription({\n    type: 'rollback'\n  })).then(onceRolledBack).then(function onceRolledBackSucceeded(result) {\n    peerConnection._rollingBack = false;\n    return result;\n  }, function rollbackOrOnceRolledBackFailed(error) {\n    peerConnection._rollingBack = false;\n    throw error;\n  });\n}\n\n/**\n * Extract the initially negotiated DTLS role out of an RTCSessionDescription's\n * sdp property and save it on the FirefoxRTCPeerConnection if and only if\n *\n *   1. A DTLS role was not already saved on the FirefoxRTCPeerConnection, and\n *   2. The description is an answer.\n *\n * @private\n * @param {FirefoxRTCPeerConnection} peerConnection\n * @param {RTCSessionDescription} description\n * @param {boolean} [remote=false] - if true, save the inverse of the DTLS role,\n *   e.g. \"active\" instead of \"passive\" and vice versa\n * @returns {undefined}\n */\nfunction saveInitiallyNegotiatedDtlsRole(peerConnection, description, remote) {\n  // NOTE(mroberts): JSEP specifies that offers always offer \"actpass\" as the\n  // DTLS role. We need to inspect answers to figure out the negotiated DTLS\n  // role.\n  if (peerConnection._initiallyNegotiatedDtlsRole || description.type === 'offer') {\n    return;\n  }\n\n  var match = description.sdp.match(/a=setup:([a-z]+)/);\n  if (!match) {\n    return;\n  }\n\n  var dtlsRole = match[1];\n  peerConnection._initiallyNegotiatedDtlsRole = remote ? {\n    active: 'passive',\n    passive: 'active'\n  }[dtlsRole] : dtlsRole;\n}\n\n/**\n * Overwrite the DTLS role in the sdp property of an RTCSessionDescription if\n * and only if\n *\n *   1. The description is an answer, and\n *   2. A DTLS role is provided.\n *\n * @private\n * @param {RTCSessionDescription} [description]\n * @param {string} [dtlsRole] - one of \"active\" or \"passive\"\n * @returns {?RTCSessionDescription} description\n */\nfunction overwriteWithInitiallyNegotiatedDtlsRole(description, dtlsRole) {\n  if (description && description.type === 'answer' && dtlsRole) {\n    return new FirefoxRTCSessionDescription({\n      type: description.type,\n      sdp: description.sdp.replace(/a=setup:[a-z]+/g, 'a=setup:' + dtlsRole)\n    });\n  }\n  return description;\n}\n\n/**\n * Gets the active RTCRtpSenders of the RTCPeerConnection.\n * @param peerConnection\n * @returns {Map<MediaStreamTrack, RTCRtpSender>}\n */\nfunction getActiveSenders(peerConnection) {\n  return new Map(peerConnection.getSenders().filter(function(sender) {\n    return sender.track;\n  }).map(function(sender) {\n    return [sender.track, sender];\n  }));\n}\n\nmodule.exports = FirefoxRTCPeerConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///273\n");

/***/ }),
/* 274 */
/*!*********************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcpeerconnection/safari.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals RTCPeerConnection, RTCRtpTransceiver, RTCSessionDescription */\n\n\nvar EventTarget = __webpack_require__(/*! ../util/eventtarget */ 222);\nvar inherits = __webpack_require__(/*! util */ 213).inherits;\nvar Latch = __webpack_require__(/*! ../util/latch */ 232);\nvar RTCRtpSenderShim = __webpack_require__(/*! ../rtcrtpsender */ 223);\nvar sdpUtils = __webpack_require__(/*! ../util/sdp */ 224);\nvar util = __webpack_require__(/*! ../util */ 210);\n\nvar isUnifiedPlan = 'currentDirection' in RTCRtpTransceiver.prototype;\n\nvar updateTrackIdsToSSRCs = isUnifiedPlan\n  ? sdpUtils.updateUnifiedPlanTrackIdsToSSRCs\n  : sdpUtils.updatePlanBTrackIdsToSSRCs;\n\nfunction SafariRTCPeerConnection(configuration) {\n  if (!(this instanceof SafariRTCPeerConnection)) {\n    return new SafariRTCPeerConnection(configuration);\n  }\n\n  EventTarget.call(this);\n\n  util.interceptEvent(this, 'datachannel');\n  util.interceptEvent(this, 'iceconnectionstatechange');\n  util.interceptEvent(this, 'signalingstatechange');\n  util.interceptEvent(this, 'track');\n\n  var peerConnection = new RTCPeerConnection(configuration);\n\n  Object.defineProperties(this, {\n    _audioTransceiver: {\n      value: null,\n      writable: true\n    },\n    _isClosed: {\n      value: false,\n      writable: true\n    },\n    _peerConnection: {\n      value: peerConnection\n    },\n    _pendingLocalOffer: {\n      value: null,\n      writable: true\n    },\n    _pendingRemoteOffer: {\n      value: null,\n      writable: true\n    },\n    _senders: {\n      value: new Map()\n    },\n    _signalingStateLatch: {\n      value: new Latch()\n    },\n    _tracksToSSRCs: {\n      value: new Map()\n    },\n    _videoTransceiver: {\n      value: null,\n      writable: true\n    },\n    localDescription: {\n      enumerable: true,\n      get: function() {\n        return this._pendingLocalOffer || this._peerConnection.localDescription;\n      }\n    },\n    iceConnectionState: {\n      enumerable: true,\n      get: function() {\n        return this._isClosed ? 'closed' : this._peerConnection.iceConnectionState;\n      }\n    },\n    iceGatheringState: {\n      enumerable: true,\n      get: function() {\n        return this._isClosed ? 'complete' : this._peerConnection.iceGatheringState;\n      }\n    },\n    // NOTE(mroberts): Keep this here until the following is fixed.\n    //\n    //   https://bugs.webkit.org/show_bug.cgi?id=174323\n    //\n    remoteDescription: {\n      enumerable: true,\n      get: function() {\n        return this._pendingRemoteOffer || this._peerConnection.remoteDescription;\n      }\n    },\n    signalingState: {\n      enumerable: true,\n      get: function() {\n        if (this._isClosed) {\n          return 'closed';\n        } else if (this._pendingLocalOffer) {\n          return 'have-local-offer';\n        } else if (this._pendingRemoteOffer) {\n          return 'have-remote-offer';\n        }\n        return this._peerConnection.signalingState;\n      }\n    }\n  });\n\n  var self = this;\n\n  peerConnection.addEventListener('datachannel', function ondatachannel(event) {\n    shimDataChannel(event.channel);\n    self.dispatchEvent(event);\n  });\n\n  peerConnection.addEventListener('iceconnectionstatechange', function oniceconnectionstatechange() {\n    if (self._isClosed) {\n      return;\n    }\n    self.dispatchEvent.apply(self, arguments);\n  });\n\n  peerConnection.addEventListener('signalingstatechange', function onsignalingstatechange() {\n    if (self._isClosed) {\n      return;\n    }\n    if (!self._pendingLocalOffer && !self._pendingRemoteOffer) {\n      self.dispatchEvent.apply(self, arguments);\n    }\n  });\n\n  // NOTE(syerrapragada): This ensures that SafariRTCPeerConnection's \"remoteDescription\", when accessed\n  // in an RTCTrackEvent listener, will point to the underlying RTCPeerConnection's\n  // \"remoteDescription\". Before this fix, this was still pointing to \"_pendingRemoteOffer\"\n  // even though a new remote RTCSessionDescription had already been applied.\n  peerConnection.addEventListener('track', function ontrack(event) {\n    self._pendingRemoteOffer = null;\n    self.dispatchEvent(event);\n  });\n\n  util.proxyProperties(RTCPeerConnection.prototype, this, peerConnection);\n}\n\ninherits(SafariRTCPeerConnection, EventTarget);\n\nSafariRTCPeerConnection.prototype.addIceCandidate = function addIceCandidate(candidate) {\n  var self = this;\n  if (this.signalingState === 'have-remote-offer') {\n    return this._signalingStateLatch.when('low').then(function signalingStatesResolved() {\n      return self._peerConnection.addIceCandidate(candidate);\n    });\n  }\n  return this._peerConnection.addIceCandidate(candidate);\n};\n\nSafariRTCPeerConnection.prototype.createOffer = function createOffer(options) {\n  options = Object.assign({}, options);\n  var self = this;\n\n  // NOTE(mroberts): In general, this is not the way to do this; however, it's\n  // good enough for our application.\n  if (options.offerToReceiveAudio && !this._audioTransceiver && !(isUnifiedPlan && hasSendersForTracksOfKind(this, 'audio'))) {\n    delete options.offerToReceiveAudio;\n    try {\n      this._audioTransceiver = isUnifiedPlan\n        ? this.addTransceiver('audio', { direction: 'recvonly' })\n        : this.addTransceiver('audio');\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  if (options.offerToReceiveVideo && !this._videoTransceiver && !(isUnifiedPlan && hasSendersForTracksOfKind(this, 'video'))) {\n    delete options.offerToReceiveVideo;\n    try {\n      this._videoTransceiver = isUnifiedPlan\n        ? this.addTransceiver('video', { direction: 'recvonly' })\n        : this.addTransceiver('video');\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  return this._peerConnection.createOffer(options).then(function(offer) {\n    return new RTCSessionDescription({\n      type: offer.type,\n      sdp: updateTrackIdsToSSRCs(self._tracksToSSRCs, offer.sdp)\n    });\n  });\n};\n\nSafariRTCPeerConnection.prototype.createAnswer = function createAnswer(options) {\n  var self = this;\n\n  if (this._pendingRemoteOffer) {\n    return this._peerConnection.setRemoteDescription(this._pendingRemoteOffer).then(function setRemoteDescriptionSucceeded() {\n      self._signalingStateLatch.lower();\n      return self._peerConnection.createAnswer();\n    }).then(function createAnswerSucceeded(answer) {\n      self._pendingRemoteOffer = null;\n      return isUnifiedPlan ? new RTCSessionDescription({\n        type: answer.type,\n        sdp: updateTrackIdsToSSRCs(self._tracksToSSRCs, answer.sdp)\n      }) : answer;\n    }, function setRemoteDescriptionOrCreateAnswerFailed(error) {\n      self._pendingRemoteOffer = null;\n      throw error;\n    });\n  }\n\n  return this._peerConnection.createAnswer(options).then(function(answer) {\n    return isUnifiedPlan ? new RTCSessionDescription({\n      type: answer.type,\n      sdp: updateTrackIdsToSSRCs(self._tracksToSSRCs, answer.sdp)\n    }) : answer;\n  });\n};\n\nSafariRTCPeerConnection.prototype.createDataChannel = function createDataChannel(label, dataChannelDict) {\n  var dataChannel = this._peerConnection.createDataChannel(label, dataChannelDict);\n  shimDataChannel(dataChannel);\n  return dataChannel;\n};\n\nSafariRTCPeerConnection.prototype.setLocalDescription = function setLocalDescription(description) {\n  return setDescription(this, true, description);\n};\n\nSafariRTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(description) {\n  return setDescription(this, false, description);\n};\n\nSafariRTCPeerConnection.prototype.close = function close() {\n  if (this._isClosed) {\n    return;\n  }\n  this._isClosed = true;\n  this._peerConnection.close();\n  var self = this;\n  setTimeout(function() {\n    self.dispatchEvent(new Event('iceconnectionstatechange'));\n    self.dispatchEvent(new Event('signalingstatechange'));\n  });\n};\n\n// NOTE(mmalavalli): Because we are not delegating to the native\n// RTCPeerConnection#removeTrack(), we have to manually maintain a list of added\n// tracks. So we disable the delegation to the native RTCPeerConnection#addTrack()\n// for now. Also, we maintain only one RTCRtpSender per MediaStreamTrack for our\n// use case, and not worry about multiple RTCRtpSenders due to replaceTrack().\nSafariRTCPeerConnection.prototype.addTrack = function addTrack() {\n  var args = [].slice.call(arguments);\n  var track = args[0];\n  var sender = this._senders.get(track);\n  if (sender && sender.track) {\n    throw new Error('Cannot add MediaStreamTrack [' + track.id + ', '\n      + track.kind + ']: RTCPeerConnection already has it');\n  }\n  sender = getActiveSenders(this._peerConnection).get(track)\n    || this._peerConnection.addTrack.apply(this._peerConnection, args);\n\n  // NOTE(mmalavalli): webrtc-adapter has a bug where the \"addTrack\" shim\n  // does not return an RTCRtpSender and returns undefined instead. An issue\n  // [https://github.com/webrtc/adapter/issues/714] has been filed. For now,\n  // we manually get the RTCRtpSender associated with the added track and\n  // return it.\n  sender = sender || getActiveSenders(this._peerConnection).get(track);\n  this._senders.set(track, sender);\n  return sender;\n};\n\n// NOTE(mmalavalli): This shim works around a Safari bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Safari bug: https://bugs.webkit.org/show_bug.cgi?id=192101\n//\nif (RTCPeerConnection.prototype.addTransceiver) {\n  SafariRTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n    var transceiver = this._peerConnection.addTransceiver.apply(this._peerConnection, arguments);\n    var sender = transceiver.sender;\n    var track = sender.track;\n    this._senders.set(track, sender);\n    return transceiver;\n  };\n}\n\n// NOTE(mroberts): We can't really remove tracks right now, at least if we\n// ever want to add them back...\n//\n//     https://bugs.webkit.org/show_bug.cgi?id=174327\n//\n// NOTE(mmalavalli): This shim also works around a Safari bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Safari bug: https://bugs.webkit.org/show_bug.cgi?id=192101\n//\nSafariRTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n  if (this._isClosed) {\n    throw new Error('Cannot remove MediaStreamTrack: RTCPeerConnection is closed');\n  }\n  var track = sender.track;\n  if (!track) {\n    return;\n  }\n  sender = this._senders.get(track);\n  if (sender && sender.track) {\n    this._senders.set(track, new RTCRtpSenderShim(null));\n  }\n};\n\n// NOTE(mmalavalli): Because we are not delegating to the native\n// RTCPeerConnection#removeTrack(), we have to manually maintain a list of added\n// tracks. So we disable the delegation to the native RTCPeerConnection#getSenders()\n// for now.\nSafariRTCPeerConnection.prototype.getSenders = function getSenders() {\n  return Array.from(this._senders.values());\n};\n\nutil.delegateMethods(\n  RTCPeerConnection.prototype,\n  SafariRTCPeerConnection.prototype,\n  '_peerConnection');\n\nfunction setDescription(peerConnection, local, description) {\n  function setPendingLocalOffer(offer) {\n    if (local) {\n      peerConnection._pendingLocalOffer = offer;\n    } else {\n      peerConnection._pendingRemoteOffer = offer;\n    }\n  }\n\n  function clearPendingLocalOffer() {\n    if (local) {\n      peerConnection._pendingLocalOffer = null;\n    } else {\n      peerConnection._pendingRemoteOffer = null;\n    }\n  }\n\n  var pendingLocalOffer = local ? peerConnection._pendingLocalOffer : peerConnection._pendingRemoteOffer;\n  var pendingRemoteOffer = local ? peerConnection._pendingRemoteOffer : peerConnection._pendingLocalOffer;\n  var intermediateState = local ? 'have-local-offer' : 'have-remote-offer';\n  var setLocalDescription = local ? 'setLocalDescription' : 'setRemoteDescription';\n\n  if (!local && pendingRemoteOffer && description.type === 'answer') {\n    return setRemoteAnswer(peerConnection, description);\n  } else if (description.type === 'offer') {\n    if (peerConnection.signalingState !== intermediateState && peerConnection.signalingState !== 'stable') {\n      return Promise.reject(new Error('Cannot set ' + (local ? 'local' : 'remote') +\n        ' offer in state ' + peerConnection.signalingState));\n    }\n\n    if (!pendingLocalOffer && peerConnection._signalingStateLatch.state === 'low') {\n      peerConnection._signalingStateLatch.raise();\n    }\n    var previousSignalingState = peerConnection.signalingState;\n    setPendingLocalOffer(description);\n\n    // Only dispatch a signalingstatechange event if we transitioned.\n    if (peerConnection.signalingState !== previousSignalingState) {\n      return Promise.resolve().then(function dispatchSignalingStateChangeEvent() {\n        peerConnection.dispatchEvent(new Event('signalingstatechange'));\n      });\n    }\n\n    return Promise.resolve();\n  } else if (description.type === 'rollback') {\n    if (peerConnection.signalingState !== intermediateState) {\n      return Promise.reject(new Error('Cannot rollback ' +\n        (local ? 'local' : 'remote') + ' description in ' + peerConnection.signalingState));\n    }\n    clearPendingLocalOffer();\n    return Promise.resolve().then(function dispatchSignalingStateChangeEvent() {\n      peerConnection.dispatchEvent(new Event('signalingstatechange'));\n    });\n  }\n\n  return peerConnection._peerConnection[setLocalDescription](description);\n}\n\nfunction setRemoteAnswer(peerConnection, answer) {\n  var pendingLocalOffer = peerConnection._pendingLocalOffer;\n  return peerConnection._peerConnection.setLocalDescription(pendingLocalOffer).then(function setLocalOfferSucceeded() {\n    peerConnection._pendingLocalOffer = null;\n    return peerConnection.setRemoteDescription(answer);\n  }).then(function setRemoteAnswerSucceeded() {\n    peerConnection._signalingStateLatch.lower();\n  });\n}\n\n/**\n * Whether a SafariRTCPeerConnection has any RTCRtpSender(s) for the given\n * MediaStreamTrack kind.\n * @param {SafariRTCPeerConnection} peerConnection\n * @param {'audio' | 'video'} kind\n * @returns {boolean}\n */\nfunction hasSendersForTracksOfKind(peerConnection, kind) {\n  return !!peerConnection.getTransceivers().find(function(transceiver) {\n    return transceiver.sender && transceiver.sender.track && transceiver.sender.track.kind === kind;\n  });\n}\n\n/**\n * Shim an RTCDataChannel. This function mutates the RTCDataChannel.\n * @param {RTCDataChannel} dataChannel\n * @returns {RTCDataChannel}\n */\nfunction shimDataChannel(dataChannel) {\n  return Object.defineProperties(dataChannel, {\n    maxPacketLifeTime: {\n      value: dataChannel.maxPacketLifeTime === 65535\n        ? null\n        : dataChannel.maxPacketLifeTime\n    },\n    maxRetransmits: {\n      value: dataChannel.maxRetransmits === 65535\n        ? null\n        : dataChannel.maxRetransmits\n    }\n  });\n}\n\n/**\n * Gets the active RTCRtpSenders of the RTCPeerConnection.\n * @param peerConnection\n * @returns {Map<MediaStreamTrack, RTCRtpSender>}\n */\nfunction getActiveSenders(peerConnection) {\n  return new Map(peerConnection.getSenders().filter(function(sender) {\n    return sender.track;\n  }).map(function(sender) {\n    return [sender.track, sender];\n  }));\n}\n\nmodule.exports = SafariRTCPeerConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///274\n");

/***/ }),
/* 275 */
/*!************************************************************************!*\
  !*** ./node_modules/@twilio/webrtc/lib/rtcsessiondescription/index.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar guessBrowser = __webpack_require__(/*! ../util */ 210).guessBrowser;\n\nswitch (guessBrowser()) {\n  case 'chrome':\n    module.exports = __webpack_require__(/*! ./chrome */ 231);\n    break;\n  case 'firefox':\n    module.exports = __webpack_require__(/*! ./firefox */ 233);\n    break;\n  default:\n    if (typeof RTCSessionDescription === 'undefined') {\n      break;\n    }\n    module.exports = RTCSessionDescription;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvbGliL3J0Y3Nlc3Npb25kZXNjcmlwdGlvbi9pbmRleC5qcz9jOTlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLGtCQUFTOztBQUVwQztBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsbUJBQVU7QUFDdkM7QUFDQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLG9CQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGd1ZXNzQnJvd3NlciA9IHJlcXVpcmUoJy4uL3V0aWwnKS5ndWVzc0Jyb3dzZXI7XG5cbnN3aXRjaCAoZ3Vlc3NCcm93c2VyKCkpIHtcbiAgY2FzZSAnY2hyb21lJzpcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2hyb21lJyk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2ZpcmVmb3gnOlxuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9maXJlZm94Jyk7XG4gICAgYnJlYWs7XG4gIGRlZmF1bHQ6XG4gICAgaWYgKHR5cGVvZiBSVENTZXNzaW9uRGVzY3JpcHRpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSVENTZXNzaW9uRGVzY3JpcHRpb247XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3dlYnJ0Yy9saWIvcnRjc2Vzc2lvbmRlc2NyaXB0aW9uL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///275\n");

/***/ }),
/* 276 */
/*!**************************************************!*\
  !*** ./node_modules/@twilio/webrtc/package.json ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"@twilio/webrtc\",\"version\":\"2.2.1\",\"description\":\"WebRTC-related APIs and shims used by twilio-video.js\",\"scripts\":{\"build\":\"npm-run-all clean lint test\",\"clean\":\"rimraf coverage\",\"lint\":\"eslint ./lib\",\"test:unit\":\"istanbul cover node_modules/mocha/bin/_mocha -- ./test/unit/index.js\",\"test:integration:native\":\"karma start karma/integration.conf.js\",\"test:integration:adapter\":\"karma start karma/integration.adapter.conf.js\",\"test:integration\":\"npm-run-all test:integration:*\",\"test\":\"npm-run-all test:*\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/twilio/twilio-webrtc.js.git\"},\"keywords\":[\"shim\",\"twilio\",\"video\",\"webrtc\"],\"author\":\"Manjesh Malavalli <mmalavalli@twilio.com>\",\"contributors\":[\"Mark Roberts <mroberts@twilio.com>\",\"Ryan Rowland <rrowland@twilio.com>\"],\"license\":\"BSD-3-Clause\",\"main\":\"./lib/index.js\",\"bugs\":{\"url\":\"https://github.com/twilio/twilio-webrtc.js/issues\"},\"homepage\":\"https://github.com/twilio/twilio-webrtc.js#readme\",\"devDependencies\":{\"browserify\":\"^14.4.0\",\"envify\":\"^4.1.0\",\"eslint\":\"^4.4.1\",\"istanbul\":\"^0.4.5\",\"karma\":\"^1.7.0\",\"karma-browserify\":\"^5.1.1\",\"karma-chrome-launcher\":\"^2.2.0\",\"karma-firefox-launcher\":\"^1.0.1\",\"karma-mocha\":\"^1.3.0\",\"karma-safari-launcher\":\"^1.0.0\",\"karma-spec-reporter\":\"0.0.31\",\"mocha\":\"^3.5.0\",\"npm-run-all\":\"^4.0.2\",\"release-tool\":\"^0.2.2\",\"rimraf\":\"^2.6.1\",\"travis-multirunner\":\"^4.2.3\",\"watchify\":\"^3.9.0\",\"webrtc-adapter\":\"^6.4.8\"}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby93ZWJydGMvcGFja2FnZS5qc29uP2ZkYmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLDJIQUEySCxzWUFBc1ksZUFBZSx3RUFBd0Usd1BBQXdQLDBEQUEwRCxtRkFBbUYiLCJmaWxlIjoiMjc2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XCJuYW1lXCI6XCJAdHdpbGlvL3dlYnJ0Y1wiLFwidmVyc2lvblwiOlwiMi4yLjFcIixcImRlc2NyaXB0aW9uXCI6XCJXZWJSVEMtcmVsYXRlZCBBUElzIGFuZCBzaGltcyB1c2VkIGJ5IHR3aWxpby12aWRlby5qc1wiLFwic2NyaXB0c1wiOntcImJ1aWxkXCI6XCJucG0tcnVuLWFsbCBjbGVhbiBsaW50IHRlc3RcIixcImNsZWFuXCI6XCJyaW1yYWYgY292ZXJhZ2VcIixcImxpbnRcIjpcImVzbGludCAuL2xpYlwiLFwidGVzdDp1bml0XCI6XCJpc3RhbmJ1bCBjb3ZlciBub2RlX21vZHVsZXMvbW9jaGEvYmluL19tb2NoYSAtLSAuL3Rlc3QvdW5pdC9pbmRleC5qc1wiLFwidGVzdDppbnRlZ3JhdGlvbjpuYXRpdmVcIjpcImthcm1hIHN0YXJ0IGthcm1hL2ludGVncmF0aW9uLmNvbmYuanNcIixcInRlc3Q6aW50ZWdyYXRpb246YWRhcHRlclwiOlwia2FybWEgc3RhcnQga2FybWEvaW50ZWdyYXRpb24uYWRhcHRlci5jb25mLmpzXCIsXCJ0ZXN0OmludGVncmF0aW9uXCI6XCJucG0tcnVuLWFsbCB0ZXN0OmludGVncmF0aW9uOipcIixcInRlc3RcIjpcIm5wbS1ydW4tYWxsIHRlc3Q6KlwifSxcInJlcG9zaXRvcnlcIjp7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS90d2lsaW8vdHdpbGlvLXdlYnJ0Yy5qcy5naXRcIn0sXCJrZXl3b3Jkc1wiOltcInNoaW1cIixcInR3aWxpb1wiLFwidmlkZW9cIixcIndlYnJ0Y1wiXSxcImF1dGhvclwiOlwiTWFuamVzaCBNYWxhdmFsbGkgPG1tYWxhdmFsbGlAdHdpbGlvLmNvbT5cIixcImNvbnRyaWJ1dG9yc1wiOltcIk1hcmsgUm9iZXJ0cyA8bXJvYmVydHNAdHdpbGlvLmNvbT5cIixcIlJ5YW4gUm93bGFuZCA8cnJvd2xhbmRAdHdpbGlvLmNvbT5cIl0sXCJsaWNlbnNlXCI6XCJCU0QtMy1DbGF1c2VcIixcIm1haW5cIjpcIi4vbGliL2luZGV4LmpzXCIsXCJidWdzXCI6e1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vdHdpbGlvL3R3aWxpby13ZWJydGMuanMvaXNzdWVzXCJ9LFwiaG9tZXBhZ2VcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS90d2lsaW8vdHdpbGlvLXdlYnJ0Yy5qcyNyZWFkbWVcIixcImRldkRlcGVuZGVuY2llc1wiOntcImJyb3dzZXJpZnlcIjpcIl4xNC40LjBcIixcImVudmlmeVwiOlwiXjQuMS4wXCIsXCJlc2xpbnRcIjpcIl40LjQuMVwiLFwiaXN0YW5idWxcIjpcIl4wLjQuNVwiLFwia2FybWFcIjpcIl4xLjcuMFwiLFwia2FybWEtYnJvd3NlcmlmeVwiOlwiXjUuMS4xXCIsXCJrYXJtYS1jaHJvbWUtbGF1bmNoZXJcIjpcIl4yLjIuMFwiLFwia2FybWEtZmlyZWZveC1sYXVuY2hlclwiOlwiXjEuMC4xXCIsXCJrYXJtYS1tb2NoYVwiOlwiXjEuMy4wXCIsXCJrYXJtYS1zYWZhcmktbGF1bmNoZXJcIjpcIl4xLjAuMFwiLFwia2FybWEtc3BlYy1yZXBvcnRlclwiOlwiMC4wLjMxXCIsXCJtb2NoYVwiOlwiXjMuNS4wXCIsXCJucG0tcnVuLWFsbFwiOlwiXjQuMC4yXCIsXCJyZWxlYXNlLXRvb2xcIjpcIl4wLjIuMlwiLFwicmltcmFmXCI6XCJeMi42LjFcIixcInRyYXZpcy1tdWx0aXJ1bm5lclwiOlwiXjQuMi4zXCIsXCJ3YXRjaGlmeVwiOlwiXjMuOS4wXCIsXCJ3ZWJydGMtYWRhcHRlclwiOlwiXjYuNC44XCJ9fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vd2VicnRjL3BhY2thZ2UuanNvblxuLy8gbW9kdWxlIGlkID0gMjc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///276\n");

/***/ }),
/* 277 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localaudiotrack.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar AudioTrack = __webpack_require__(/*! ./audiotrack */ 234);\nvar mixinLocalMediaTrack = __webpack_require__(/*! ./localmediatrack */ 236);\n\nvar LocalMediaAudioTrack = mixinLocalMediaTrack(AudioTrack);\n\n/**\n * A {@link LocalAudioTrack} is an {@link AudioTrack} representing audio that\n * your {@link LocalParticipant} can publish to a {@link Room}. It can be\n * enabled and disabled with {@link LocalAudioTrack#enable} and\n * {@link LocalAudioTrack#disable} or stopped completely with\n * {@link LocalAudioTrack#stop}.\n * @extends AudioTrack\n * @property {boolean} isStopped - Whether or not the {@link LocalAudioTrack} is\n *   stopped\n * @emits LocalAudioTrack#disabled\n * @emits LocalAudioTrack#enabled\n * @emits LocalAudioTrack#started\n * @emits LocalAudioTrack#stopped\n */\n\nvar LocalAudioTrack = function (_LocalMediaAudioTrack) {\n  _inherits(LocalAudioTrack, _LocalMediaAudioTrack);\n\n  /**\n   * Construct a {@link LocalAudioTrack} from a MediaStreamTrack.\n   * @param {MediaStreamTrack} mediaStreamTrack - An audio MediaStreamTrack\n   * @param {LocalTrackOptions} [options] - {@link LocalTrack} options\n   */\n  function LocalAudioTrack(mediaStreamTrack, options) {\n    _classCallCheck(this, LocalAudioTrack);\n\n    return _possibleConstructorReturn(this, (LocalAudioTrack.__proto__ || Object.getPrototypeOf(LocalAudioTrack)).call(this, mediaStreamTrack, options));\n  }\n\n  _createClass(LocalAudioTrack, [{\n    key: 'toString',\n    value: function toString() {\n      return '[LocalAudioTrack #' + this._instanceId + ': ' + this.id + ']';\n    }\n  }, {\n    key: 'attach',\n    value: function attach(el) {\n      el = _get(LocalAudioTrack.prototype.__proto__ || Object.getPrototypeOf(LocalAudioTrack.prototype), 'attach', this).call(this, el);\n      el.muted = true;\n      return el;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_end',\n    value: function _end() {\n      return _get(LocalAudioTrack.prototype.__proto__ || Object.getPrototypeOf(LocalAudioTrack.prototype), '_end', this).apply(this, arguments);\n    }\n\n    /**\n     * Disable the {@link LocalAudioTrack}. This is effectively \"mute\".\n     * @returns {this}\n     * @fires LocalAudioTrack#disabled\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      return _get(LocalAudioTrack.prototype.__proto__ || Object.getPrototypeOf(LocalAudioTrack.prototype), 'disable', this).apply(this, arguments);\n    }\n\n    /**\n     * Enable the {@link LocalAudioTrack}. This is effectively \"unmute\".\n     * @returns {this}\n     * @fires LocalAudioTrack#enabled\n    */ /**\n       * Enable or disable the {@link LocalAudioTrack}. This is effectively \"unmute\"\n       * or \"mute\".\n       * @param {boolean} [enabled] - Specify false to mute the\n       *   {@link LocalAudioTrack}\n       * @returns {this}\n       * @fires LocalAudioTrack#disabled\n       * @fires LocalAudioTrack#enabled\n       */\n\n  }, {\n    key: 'enable',\n    value: function enable() {\n      return _get(LocalAudioTrack.prototype.__proto__ || Object.getPrototypeOf(LocalAudioTrack.prototype), 'enable', this).apply(this, arguments);\n    }\n\n    /**\n     * Calls stop on the underlying MediaStreamTrack. If you choose to stop a\n     * {@link LocalAudioTrack}, you should unpublish it after stopping.\n     * @returns {this}\n     * @fires LocalAudioTrack#stopped\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      return _get(LocalAudioTrack.prototype.__proto__ || Object.getPrototypeOf(LocalAudioTrack.prototype), 'stop', this).apply(this, arguments);\n    }\n  }]);\n\n  return LocalAudioTrack;\n}(LocalMediaAudioTrack);\n\n/**\n * The {@link LocalAudioTrack} was disabled, i.e. \"muted\".\n * @param {LocalAudioTrack} track - The {@link LocalAudioTrack} that was\n *   disabled\n * @event LocalAudioTrack#disabled\n */\n\n/**\n * The {@link LocalAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {LocalAudioTrack} track - The {@link LocalAudioTrack} that was enabled\n * @event LocalAudioTrack#enabled\n */\n\n/**\n * The {@link LocalAudioTrack} started. This means there is enough audio data to\n * begin playback.\n * @param {LocalAudioTrack} track - The {@link LocalAudioTrack} that started\n * @event LocalAudioTrack#started\n */\n\n/**\n * The {@link LocalAudioTrack} stopped, either because\n * {@link LocalAudioTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalAudioTrack} track - The {@link LocalAudioTrack} that stopped\n * @event LocalAudioTrack#stopped\n */\n\nmodule.exports = LocalAudioTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///277\n");

/***/ }),
/* 278 */
/*!*********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localdatatrack.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Track = __webpack_require__(/*! ./ */ 225);\nvar DefaultDataTrackSender = __webpack_require__(/*! ../../data/sender */ 279);\n\n/**\n * A {@link LocalDataTrack} is a {@link Track} representing data that your\n * {@link LocalParticipant} can publish to a {@link Room}.\n * @extends Track\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which the {@link LocalDataTrack} will send\n *   or re-send data if not acknowledged on the underlying RTCDataChannel(s).\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the {@link LocalDataTrack} will resend data if not successfully\n *   delivered on the underlying RTCDataChannel(s).\n * @property {boolean} ordered - true if data on the {@link LocalDataTrack} is\n *   guaranteed to be sent in order.\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of times the {@link LocalDataTrack} will attempt to send\n *   data, ensuring \"reliable\" transmission.\n * @example\n * var Video = require('twilio-video');\n *\n * var localDataTrack = new Video.LocalDataTrack();\n * window.addEventListener('mousemove', function(event) {\n *   localDataTrack.send({\n *     x: e.clientX,\n *     y: e.clientY\n *   });\n * });\n *\n * var token1 = getAccessToken();\n * Video.connect(token1, {\n *   name: 'my-cool-room',\n *   tracks: [localDataTrack]\n * });\n *\n * var token2 = getAccessToken();\n * Video.connect(token2, {\n *   name: 'my-cool-room',\n *   tracks: []\n * }).then(function(room) {\n *   room.on('trackSubscribed', function(track) {\n *     track.on('message', function(message) {\n *       console.log(message); // { x: <number>, y: <number> }\n *     });\n *   });\n * });\n */\n\nvar LocalDataTrack = function (_Track) {\n  _inherits(LocalDataTrack, _Track);\n\n  /**\n   * Construct a {@link LocalDataTrack}.\n   * @param {LocalDataTrackOptions} [options] - {@link LocalDataTrack} options\n   */\n  function LocalDataTrack(options) {\n    _classCallCheck(this, LocalDataTrack);\n\n    options = Object.assign({\n      DataTrackSender: DefaultDataTrackSender,\n      maxPacketLifeTime: null,\n      maxRetransmits: null,\n      ordered: true\n    }, options);\n\n    var DataTrackSender = options.DataTrackSender;\n    var dataTrackSender = new DataTrackSender(options.maxPacketLifeTime, options.maxRetransmits, options.ordered);\n\n    var _this = _possibleConstructorReturn(this, (LocalDataTrack.__proto__ || Object.getPrototypeOf(LocalDataTrack)).call(this, dataTrackSender.id, 'data', options));\n\n    Object.defineProperties(_this, {\n      _trackSender: {\n        value: dataTrackSender\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: options.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: options.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: options.ordered\n      },\n      reliable: {\n        enumerable: true,\n        value: options.maxPacketLifeTime === null && options.maxRetransmits === null\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Send a message over the {@link LocalDataTrack}.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {void}\n   */\n\n\n  _createClass(LocalDataTrack, [{\n    key: 'send',\n    value: function send(data) {\n      this._trackSender.send(data);\n    }\n  }]);\n\n  return LocalDataTrack;\n}(Track);\n\n/**\n * {@link LocalDataTrack} options\n * @typedef {LocalTrackOptions} LocalDataTrackOptions\n * @property {?number} [maxPacketLifeTime=null] - Set this to limit the time\n *   (in milliseconds) during which the LocalDataTrack will send or re-send data\n *   if not successfully delivered on the underlying RTCDataChannel(s). It is an\n *   error to specify both this and <code>maxRetransmits</code>.\n * @property {?number} [maxRetransmits=null] - Set this to limit the number of\n *   times the {@link LocalDataTrack} will send or re-send data if not\n *   acknowledged on the underlying RTCDataChannel(s). It is an error to specify\n *   both this and <code>maxPacketLifeTime</code>.\n * @property {boolean} [ordered=true] - Set this to false to allow data on the\n *   LocalDataTrack to be sent out-of-order.\n */\n\nmodule.exports = LocalDataTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///278\n");

/***/ }),
/* 279 */
/*!******************************************************!*\
  !*** ./node_modules/twilio-video/es5/data/sender.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DataTrackTransceiver = __webpack_require__(/*! ./transceiver */ 240);\nvar makeUUID = __webpack_require__(/*! ../util */ 206).makeUUID;\n\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\n\nvar DataTrackSender = function (_DataTrackTransceiver) {\n  _inherits(DataTrackSender, _DataTrackTransceiver);\n\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n  function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n    _classCallCheck(this, DataTrackSender);\n\n    var _this = _possibleConstructorReturn(this, (DataTrackSender.__proto__ || Object.getPrototypeOf(DataTrackSender)).call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered));\n\n    Object.defineProperties(_this, {\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  _createClass(DataTrackSender, [{\n    key: 'addDataChannel',\n    value: function addDataChannel(dataChannel) {\n      this._dataChannels.add(dataChannel);\n      return this;\n    }\n\n    /**\n     * Remove an RTCDataChannel from the {@link DataTrackSender}.\n     * @param {RTCDataChannel} dataChannel\n     * @returns {this}\n     */\n\n  }, {\n    key: 'removeDataChannel',\n    value: function removeDataChannel(dataChannel) {\n      this._dataChannels.delete(dataChannel);\n      return this;\n    }\n\n    /**\n     * Send data over the {@link DataTrackSender}. Internally, this calls\n     * <code>send</code> over each of the underlying RTCDataChannels.\n     * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n     * @returns {this}\n     */\n\n  }, {\n    key: 'send',\n    value: function send(data) {\n      this._dataChannels.forEach(function (dataChannel) {\n        try {\n          dataChannel.send(data);\n        } catch (error) {\n          // Do nothing.\n        }\n      });\n      return this;\n    }\n  }]);\n\n  return DataTrackSender;\n}(DataTrackTransceiver);\n\nmodule.exports = DataTrackSender;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3NlbmRlci5qcz8zN2U2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLDJCQUEyQixtQkFBTyxDQUFDLHdCQUFlO0FBQ2xELGVBQWUsbUJBQU8sQ0FBQyxrQkFBUzs7QUFFaEM7QUFDQSxNQUFNLHNCQUFzQixlQUFlLDJCQUEyQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QyxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQyxzQkFBc0I7QUFDekQsYUFBYSxlQUFlO0FBQzVCLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLHNCQUFzQjtBQUNoRSxlQUFlLGVBQWU7QUFDOUIsaUJBQWlCO0FBQ2pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLHNCQUFzQjtBQUNqRDtBQUNBLGVBQWUsd0NBQXdDO0FBQ3ZELGlCQUFpQjtBQUNqQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyNzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERhdGFUcmFja1RyYW5zY2VpdmVyID0gcmVxdWlyZSgnLi90cmFuc2NlaXZlcicpO1xudmFyIG1ha2VVVUlEID0gcmVxdWlyZSgnLi4vdXRpbCcpLm1ha2VVVUlEO1xuXG4vKipcbiAqIEEge0BsaW5rIERhdGFUcmFja1NlbmRlcn0gcmVwcmVzZW50cyBhIHtAbGluayBEYXRhVHJhY2tUcmFuc2NlaXZlcn0gb3ZlclxuICogd2hpY2ggZGF0YSBjYW4gYmUgc2VudC4gSW50ZXJuYWxseSwgaXQgdXNlcyBhIGNvbGxlY3Rpb24gb2YgUlRDRGF0YUNoYW5uZWxzXG4gKiB0byBzZW5kIGRhdGEuXG4gKiBAZXh0ZW5kcyBEYXRhVHJhY2tUcmFuc2NlaXZlclxuICovXG5cbnZhciBEYXRhVHJhY2tTZW5kZXIgPSBmdW5jdGlvbiAoX0RhdGFUcmFja1RyYW5zY2VpdmVyKSB7XG4gIF9pbmhlcml0cyhEYXRhVHJhY2tTZW5kZXIsIF9EYXRhVHJhY2tUcmFuc2NlaXZlcik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBEYXRhVHJhY2tTZW5kZXJ9LlxuICAgKiBAcGFyYW0gez9udW1iZXJ9IG1heFBhY2tldExpZmVUaW1lXG4gICAqIEBwYXJhbSB7P251bWJlcn0gbWF4UmV0cmFuc21pdHNcbiAgICogQHBhcmFtIHtib29sZWFufSBvcmRlcmVkXG4gICAqL1xuICBmdW5jdGlvbiBEYXRhVHJhY2tTZW5kZXIobWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtdGlzLCBvcmRlcmVkKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFUcmFja1NlbmRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGF0YVRyYWNrU2VuZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGF0YVRyYWNrU2VuZGVyKSkuY2FsbCh0aGlzLCBtYWtlVVVJRCgpLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc210aXMsIG9yZGVyZWQpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfZGF0YUNoYW5uZWxzOiB7XG4gICAgICAgIHZhbHVlOiBuZXcgU2V0KClcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIFJUQ0RhdGFDaGFubmVsIHRvIHRoZSB7QGxpbmsgRGF0YVRyYWNrU2VuZGVyfS5cbiAgICogQHBhcmFtIHtSVENEYXRhQ2hhbm5lbH0gZGF0YUNoYW5uZWxcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKERhdGFUcmFja1NlbmRlciwgW3tcbiAgICBrZXk6ICdhZGREYXRhQ2hhbm5lbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZERhdGFDaGFubmVsKGRhdGFDaGFubmVsKSB7XG4gICAgICB0aGlzLl9kYXRhQ2hhbm5lbHMuYWRkKGRhdGFDaGFubmVsKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBSVENEYXRhQ2hhbm5lbCBmcm9tIHRoZSB7QGxpbmsgRGF0YVRyYWNrU2VuZGVyfS5cbiAgICAgKiBAcGFyYW0ge1JUQ0RhdGFDaGFubmVsfSBkYXRhQ2hhbm5lbFxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVEYXRhQ2hhbm5lbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZURhdGFDaGFubmVsKGRhdGFDaGFubmVsKSB7XG4gICAgICB0aGlzLl9kYXRhQ2hhbm5lbHMuZGVsZXRlKGRhdGFDaGFubmVsKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBvdmVyIHRoZSB7QGxpbmsgRGF0YVRyYWNrU2VuZGVyfS4gSW50ZXJuYWxseSwgdGhpcyBjYWxsc1xuICAgICAqIDxjb2RlPnNlbmQ8L2NvZGU+IG92ZXIgZWFjaCBvZiB0aGUgdW5kZXJseWluZyBSVENEYXRhQ2hhbm5lbHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QmxvYnxBcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlclZpZXd9IGRhdGFcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2VuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmQoZGF0YSkge1xuICAgICAgdGhpcy5fZGF0YUNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKGRhdGFDaGFubmVsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGF0YUNoYW5uZWwuc2VuZChkYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEYXRhVHJhY2tTZW5kZXI7XG59KERhdGFUcmFja1RyYW5zY2VpdmVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVHJhY2tTZW5kZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3NlbmRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///279\n");

/***/ }),
/* 280 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localvideotrack.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar mixinLocalMediaTrack = __webpack_require__(/*! ./localmediatrack */ 236);\nvar VideoTrack = __webpack_require__(/*! ./videotrack */ 241);\n\nvar LocalMediaVideoTrack = mixinLocalMediaTrack(VideoTrack);\n\n/**\n * A {@link LocalVideoTrack} is a {@link VideoTrack} representing video that\n * your {@link LocalParticipant} can publish to a {@link Room}. It can be\n * enabled and disabled with {@link LocalVideoTrack#enable} and\n * {@link LocalVideoTrack#disable} or stopped completely with\n * {@link LocalVideoTrack#stop}.\n * @extends VideoTrack\n * @property {boolean} isStopped - Whether or not the {@link LocalVideoTrack} is\n *   stopped\n * @emits LocalVideoTrack#stopped\n */\n\nvar LocalVideoTrack = function (_LocalMediaVideoTrack) {\n  _inherits(LocalVideoTrack, _LocalMediaVideoTrack);\n\n  /**\n   * Construct a {@link LocalVideoTrack} from a MediaStreamTrack.\n   * @param {MediaStreamTrack} mediaStreamTrack - The underlying MediaStreamTrack\n   * @param {LocalTrackOptions} [options] - {@link LocalTrack} options\n   */\n  function LocalVideoTrack(mediaStreamTrack, options) {\n    _classCallCheck(this, LocalVideoTrack);\n\n    return _possibleConstructorReturn(this, (LocalVideoTrack.__proto__ || Object.getPrototypeOf(LocalVideoTrack)).call(this, mediaStreamTrack, options));\n  }\n\n  _createClass(LocalVideoTrack, [{\n    key: 'toString',\n    value: function toString() {\n      return '[LocalVideoTrack #' + this._instanceId + ': ' + this.id + ']';\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_end',\n    value: function _end() {\n      return _get(LocalVideoTrack.prototype.__proto__ || Object.getPrototypeOf(LocalVideoTrack.prototype), '_end', this).apply(this, arguments);\n    }\n\n    /**\n     * Disable the {@link LocalVideoTrack}. This is effectively \"pause\".\n     * @returns {this}\n     * @fires VideoTrack#disabled\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      return _get(LocalVideoTrack.prototype.__proto__ || Object.getPrototypeOf(LocalVideoTrack.prototype), 'disable', this).apply(this, arguments);\n    }\n\n    /**\n     * Enable the {@link LocalVideoTrack}. This is effectively \"unpause\".\n     * @returns {this}\n     * @fires VideoTrack#enabled\n    */ /**\n       * Enable or disable the {@link LocalVideoTrack}. This is effectively \"unpause\"\n       * or \"pause\".\n       * @param {boolean} [enabled] - Specify false to pause the\n       *   {@link LocalVideoTrack}\n       * @returns {this}\n       * @fires VideoTrack#disabled\n       * @fires VideoTrack#enabled\n       */\n\n  }, {\n    key: 'enable',\n    value: function enable() {\n      return _get(LocalVideoTrack.prototype.__proto__ || Object.getPrototypeOf(LocalVideoTrack.prototype), 'enable', this).apply(this, arguments);\n    }\n\n    /**\n     * Calls stop on the underlying MediaStreamTrack. If you choose to stop a\n     * {@link LocalVideoTrack}, you should unpublish it after stopping.\n     * @returns {this}\n     * @fires LocalVideoTrack#stopped\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      return _get(LocalVideoTrack.prototype.__proto__ || Object.getPrototypeOf(LocalVideoTrack.prototype), 'stop', this).apply(this, arguments);\n    }\n  }]);\n\n  return LocalVideoTrack;\n}(LocalMediaVideoTrack);\n\n/**\n * The {@link LocalVideoTrack} was disabled, i.e. \"muted\".\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that was\n *   disabled\n * @event LocalVideoTrack#disabled\n */\n\n/**\n * The {@link LocalVideoTrack} was enabled, i.e. \"unmuted\".\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that was enabled\n * @event LocalVideoTrack#enabled\n */\n\n/**\n * The {@link LocalVideoTrack} started. This means there is enough video data\n * to begin playback.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that started\n * @event LocalVideoTrack#started\n */\n\n/**\n * The {@link LocalVideoTrack} stopped, either because\n * {@link LocalVideoTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that stopped\n * @event LocalVideoTrack#stopped\n */\n\nmodule.exports = LocalVideoTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///280\n");

/***/ }),
/* 281 */
/*!********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/webaudio/workaround180748.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar detectSilence = __webpack_require__(/*! ./detectsilence */ 282);\n\n/**\n * This function attempts to workaround WebKit Bug 180748. It does so by\n *\n *   1. Calling `getUserMedia`, and\n *   2. Checking to see if the resulting MediaStream is silent.\n *   3. If so, repeat Step 1; otherwise, return the MediaStream.\n *\n * The function only repeats up to `n` times, and it only waits `timeout`\n * milliseconds when detecting silence. Assuming `getUserMedia` is\n * instantaneous, in the best case, this function returns a Promise that\n * resolves immediately; in the worst case, this function returns a Promise that\n * resolves in `n` * `timeout` milliseconds.\n *\n * @param {Log} log\n * @param {function(MediaStreamConstraints): Promise<MediaStream>} getUserMedia\n * @param {MediaStreamConstraints} constraints\n * @param {number} [n=3]\n * @param {number} [timeout=250]\n * @returns Promise<MediaStream>\n */\nfunction workaround(log, getUserMedia, constraints, n, timeout) {\n  n = typeof n === 'number' ? n : 3;\n  var retry = 0;\n\n  // NOTE(mroberts): We have to delay require-ing AudioContextFactory, because\n  // it exports a default instance whose constructor calls Object.assign.\n  var AudioContextFactory = __webpack_require__(/*! ./audiocontext */ 242);\n  var holder = {};\n  var audioContext = AudioContextFactory.getOrCreate(holder);\n\n  /**\n   * We can't use async/await yet, so I need to factor this out.\n   * @returns {Promise<MediaStream>}\n   */\n  function doWorkaround() {\n    return getUserMedia(constraints).then(function (stream) {\n      var isSilentPromise = constraints.audio ? detectSilence(audioContext, stream, timeout).catch(function () {\n        return true;\n      }) : Promise.resolve(false);\n      return isSilentPromise.then(function (isSilent) {\n        if (!isSilent) {\n          log.info('Got a non-silent audio MediaStreamTrack; returning it.');\n          return stream;\n        } else if (n <= 0) {\n          log.warn('Got a silent audio MediaStreamTrack. Normally we would try \\\nto get a new one, but we\\'ve run out of retries; returning it anyway.');\n          return stream;\n        }\n        log.warn('Got a silent audio MediaStreamTrack. Stopping all MediaStreamTracks and calling getUserMedia again. This is retry #' + ++retry + '.');\n        stream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n        n--;\n        return doWorkaround();\n      });\n    });\n  }\n\n  return doWorkaround().then(function (stream) {\n    AudioContextFactory.release(holder);\n    return stream;\n  }, function (error) {\n    AudioContextFactory.release(holder);\n    throw error;\n  });\n}\n\nmodule.exports = workaround;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS93ZWJhdWRpby93b3JrYXJvdW5kMTgwNzQ4LmpzPzgwZGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsb0JBQW9CLG1CQUFPLENBQUMsMEJBQWlCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxXQUFXLElBQUk7QUFDZixXQUFXLHVEQUF1RDtBQUNsRSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixtQkFBTyxDQUFDLHlCQUFnQjtBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMjgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGV0ZWN0U2lsZW5jZSA9IHJlcXVpcmUoJy4vZGV0ZWN0c2lsZW5jZScpO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYXR0ZW1wdHMgdG8gd29ya2Fyb3VuZCBXZWJLaXQgQnVnIDE4MDc0OC4gSXQgZG9lcyBzbyBieVxuICpcbiAqICAgMS4gQ2FsbGluZyBgZ2V0VXNlck1lZGlhYCwgYW5kXG4gKiAgIDIuIENoZWNraW5nIHRvIHNlZSBpZiB0aGUgcmVzdWx0aW5nIE1lZGlhU3RyZWFtIGlzIHNpbGVudC5cbiAqICAgMy4gSWYgc28sIHJlcGVhdCBTdGVwIDE7IG90aGVyd2lzZSwgcmV0dXJuIHRoZSBNZWRpYVN0cmVhbS5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gb25seSByZXBlYXRzIHVwIHRvIGBuYCB0aW1lcywgYW5kIGl0IG9ubHkgd2FpdHMgYHRpbWVvdXRgXG4gKiBtaWxsaXNlY29uZHMgd2hlbiBkZXRlY3Rpbmcgc2lsZW5jZS4gQXNzdW1pbmcgYGdldFVzZXJNZWRpYWAgaXNcbiAqIGluc3RhbnRhbmVvdXMsIGluIHRoZSBiZXN0IGNhc2UsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIFByb21pc2UgdGhhdFxuICogcmVzb2x2ZXMgaW1tZWRpYXRlbHk7IGluIHRoZSB3b3JzdCBjYXNlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlIHRoYXRcbiAqIHJlc29sdmVzIGluIGBuYCAqIGB0aW1lb3V0YCBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtMb2d9IGxvZ1xuICogQHBhcmFtIHtmdW5jdGlvbihNZWRpYVN0cmVhbUNvbnN0cmFpbnRzKTogUHJvbWlzZTxNZWRpYVN0cmVhbT59IGdldFVzZXJNZWRpYVxuICogQHBhcmFtIHtNZWRpYVN0cmVhbUNvbnN0cmFpbnRzfSBjb25zdHJhaW50c1xuICogQHBhcmFtIHtudW1iZXJ9IFtuPTNdXG4gKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXQ9MjUwXVxuICogQHJldHVybnMgUHJvbWlzZTxNZWRpYVN0cmVhbT5cbiAqL1xuZnVuY3Rpb24gd29ya2Fyb3VuZChsb2csIGdldFVzZXJNZWRpYSwgY29uc3RyYWludHMsIG4sIHRpbWVvdXQpIHtcbiAgbiA9IHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IG4gOiAzO1xuICB2YXIgcmV0cnkgPSAwO1xuXG4gIC8vIE5PVEUobXJvYmVydHMpOiBXZSBoYXZlIHRvIGRlbGF5IHJlcXVpcmUtaW5nIEF1ZGlvQ29udGV4dEZhY3RvcnksIGJlY2F1c2VcbiAgLy8gaXQgZXhwb3J0cyBhIGRlZmF1bHQgaW5zdGFuY2Ugd2hvc2UgY29uc3RydWN0b3IgY2FsbHMgT2JqZWN0LmFzc2lnbi5cbiAgdmFyIEF1ZGlvQ29udGV4dEZhY3RvcnkgPSByZXF1aXJlKCcuL2F1ZGlvY29udGV4dCcpO1xuICB2YXIgaG9sZGVyID0ge307XG4gIHZhciBhdWRpb0NvbnRleHQgPSBBdWRpb0NvbnRleHRGYWN0b3J5LmdldE9yQ3JlYXRlKGhvbGRlcik7XG5cbiAgLyoqXG4gICAqIFdlIGNhbid0IHVzZSBhc3luYy9hd2FpdCB5ZXQsIHNvIEkgbmVlZCB0byBmYWN0b3IgdGhpcyBvdXQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1lZGlhU3RyZWFtPn1cbiAgICovXG4gIGZ1bmN0aW9uIGRvV29ya2Fyb3VuZCgpIHtcbiAgICByZXR1cm4gZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgIHZhciBpc1NpbGVudFByb21pc2UgPSBjb25zdHJhaW50cy5hdWRpbyA/IGRldGVjdFNpbGVuY2UoYXVkaW9Db250ZXh0LCBzdHJlYW0sIHRpbWVvdXQpLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KSA6IFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgICByZXR1cm4gaXNTaWxlbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGlzU2lsZW50KSB7XG4gICAgICAgIGlmICghaXNTaWxlbnQpIHtcbiAgICAgICAgICBsb2cuaW5mbygnR290IGEgbm9uLXNpbGVudCBhdWRpbyBNZWRpYVN0cmVhbVRyYWNrOyByZXR1cm5pbmcgaXQuJyk7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgfSBlbHNlIGlmIChuIDw9IDApIHtcbiAgICAgICAgICBsb2cud2FybignR290IGEgc2lsZW50IGF1ZGlvIE1lZGlhU3RyZWFtVHJhY2suIE5vcm1hbGx5IHdlIHdvdWxkIHRyeSBcXFxudG8gZ2V0IGEgbmV3IG9uZSwgYnV0IHdlXFwndmUgcnVuIG91dCBvZiByZXRyaWVzOyByZXR1cm5pbmcgaXQgYW55d2F5LicpO1xuICAgICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICAgIH1cbiAgICAgICAgbG9nLndhcm4oJ0dvdCBhIHNpbGVudCBhdWRpbyBNZWRpYVN0cmVhbVRyYWNrLiBTdG9wcGluZyBhbGwgTWVkaWFTdHJlYW1UcmFja3MgYW5kIGNhbGxpbmcgZ2V0VXNlck1lZGlhIGFnYWluLiBUaGlzIGlzIHJldHJ5ICMnICsgKytyZXRyeSArICcuJyk7XG4gICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICAgIHJldHVybiB0cmFjay5zdG9wKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBuLS07XG4gICAgICAgIHJldHVybiBkb1dvcmthcm91bmQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRvV29ya2Fyb3VuZCgpLnRoZW4oZnVuY3Rpb24gKHN0cmVhbSkge1xuICAgIEF1ZGlvQ29udGV4dEZhY3RvcnkucmVsZWFzZShob2xkZXIpO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIEF1ZGlvQ29udGV4dEZhY3RvcnkucmVsZWFzZShob2xkZXIpO1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3b3JrYXJvdW5kO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvd2ViYXVkaW8vd29ya2Fyb3VuZDE4MDc0OC5qc1xuLy8gbW9kdWxlIGlkID0gMjgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///281\n");

/***/ }),
/* 282 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/webaudio/detectsilence.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Return a Promise that resolves after `timeout` milliseconds.\n * @param {?number} [timeout=0]\n * @returns {Promise<void>}\n */\n\nfunction delay(timeout) {\n  timeout = typeof timeout === 'number' ? timeout : 0;\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, timeout);\n  });\n}\n\n/**\n * Attempt to detect silence. The Promise returned by this function returns\n * false as soon as audio is detected or true after `timeout` milliseconds.\n * @param {AudioContext} audioContext\n * @param {MediaStream} stream\n * @param {?number} [timeout=250]\n * @returns {Promise<boolean>}\n */\nfunction detectSilence(audioContext, stream, timeout) {\n  timeout = typeof timeout === 'number' ? timeout : 250;\n\n  var source = audioContext.createMediaStreamSource(stream);\n  var analyser = audioContext.createAnalyser();\n  analyser.fftSize = 2048;\n  source.connect(analyser);\n\n  var samples = new Uint8Array(analyser.fftSize);\n\n  var timeoutDidFire = false;\n  setTimeout(function () {\n    timeoutDidFire = true;\n  }, timeout);\n\n  /**\n   * We can't use async/await yet, so I need to factor this out.\n   * @returns {Promise<boolean>}\n   */\n  function doDetectSilence() {\n    if (timeoutDidFire) {\n      return Promise.resolve(true);\n    }\n    analyser.getByteTimeDomainData(samples);\n    return samples.some(function (sample) {\n      return sample;\n    }) ? Promise.resolve(false) : delay().then(doDetectSilence);\n  }\n\n  return doDetectSilence().then(function (isSilent) {\n    source.disconnect();\n    return isSilent;\n  }, function (error) {\n    source.disconnect();\n    throw error;\n  });\n}\n\nmodule.exports = detectSilence;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS93ZWJhdWRpby9kZXRlY3RzaWxlbmNlLmpzPzNkM2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIyODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmV0dXJuIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIGB0aW1lb3V0YCBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0gez9udW1iZXJ9IFt0aW1lb3V0PTBdXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuXG5mdW5jdGlvbiBkZWxheSh0aW1lb3V0KSB7XG4gIHRpbWVvdXQgPSB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogMDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gZGV0ZWN0IHNpbGVuY2UuIFRoZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgZnVuY3Rpb24gcmV0dXJuc1xuICogZmFsc2UgYXMgc29vbiBhcyBhdWRpbyBpcyBkZXRlY3RlZCBvciB0cnVlIGFmdGVyIGB0aW1lb3V0YCBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0ge0F1ZGlvQ29udGV4dH0gYXVkaW9Db250ZXh0XG4gKiBAcGFyYW0ge01lZGlhU3RyZWFtfSBzdHJlYW1cbiAqIEBwYXJhbSB7P251bWJlcn0gW3RpbWVvdXQ9MjUwXVxuICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gKi9cbmZ1bmN0aW9uIGRldGVjdFNpbGVuY2UoYXVkaW9Db250ZXh0LCBzdHJlYW0sIHRpbWVvdXQpIHtcbiAgdGltZW91dCA9IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiAyNTA7XG5cbiAgdmFyIHNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0pO1xuICB2YXIgYW5hbHlzZXIgPSBhdWRpb0NvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcbiAgYW5hbHlzZXIuZmZ0U2l6ZSA9IDIwNDg7XG4gIHNvdXJjZS5jb25uZWN0KGFuYWx5c2VyKTtcblxuICB2YXIgc2FtcGxlcyA9IG5ldyBVaW50OEFycmF5KGFuYWx5c2VyLmZmdFNpemUpO1xuXG4gIHZhciB0aW1lb3V0RGlkRmlyZSA9IGZhbHNlO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB0aW1lb3V0RGlkRmlyZSA9IHRydWU7XG4gIH0sIHRpbWVvdXQpO1xuXG4gIC8qKlxuICAgKiBXZSBjYW4ndCB1c2UgYXN5bmMvYXdhaXQgeWV0LCBzbyBJIG5lZWQgdG8gZmFjdG9yIHRoaXMgb3V0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIGZ1bmN0aW9uIGRvRGV0ZWN0U2lsZW5jZSgpIHtcbiAgICBpZiAodGltZW91dERpZEZpcmUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgfVxuICAgIGFuYWx5c2VyLmdldEJ5dGVUaW1lRG9tYWluRGF0YShzYW1wbGVzKTtcbiAgICByZXR1cm4gc2FtcGxlcy5zb21lKGZ1bmN0aW9uIChzYW1wbGUpIHtcbiAgICAgIHJldHVybiBzYW1wbGU7XG4gICAgfSkgPyBQcm9taXNlLnJlc29sdmUoZmFsc2UpIDogZGVsYXkoKS50aGVuKGRvRGV0ZWN0U2lsZW5jZSk7XG4gIH1cblxuICByZXR1cm4gZG9EZXRlY3RTaWxlbmNlKCkudGhlbihmdW5jdGlvbiAoaXNTaWxlbnQpIHtcbiAgICBzb3VyY2UuZGlzY29ubmVjdCgpO1xuICAgIHJldHVybiBpc1NpbGVudDtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgc291cmNlLmRpc2Nvbm5lY3QoKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGV0ZWN0U2lsZW5jZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3dlYmF1ZGlvL2RldGVjdHNpbGVuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDI4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///282\n");

/***/ }),
/* 283 */
/*!*******************************************************************!*\
  !*** ./node_modules/twilio-video/es5/iceserversource/constant.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\nvar instances = 0;\n\n/**\n * A {@link ConstantIceServerSource} only ever returns a single set of ICE\n * servers. It is useful for providing a hard-coded set of ICE servers.\n * @extends EventEmitter\n * @implements {IceServerSource}\n */\n\nvar ConstantIceServerSource = function (_EventEmitter) {\n  _inherits(ConstantIceServerSource, _EventEmitter);\n\n  /**\n   * Construct a {@link ConstantIceServerSource}.\n   * @param {Array<RTCIceServerInit>} iceServers\n   */\n  function ConstantIceServerSource(iceServers) {\n    _classCallCheck(this, ConstantIceServerSource);\n\n    var _this = _possibleConstructorReturn(this, (ConstantIceServerSource.__proto__ || Object.getPrototypeOf(ConstantIceServerSource)).call(this));\n\n    Object.defineProperties(_this, {\n      _instance: {\n        value: ++instances\n      },\n      _iceServers: {\n        enumerable: true,\n        value: iceServers,\n        writable: true\n      },\n      _isStarted: {\n        value: false,\n        writable: true\n      },\n      isStarted: {\n        enumerable: true,\n        get: function get() {\n          return this._isStarted;\n        }\n      },\n      status: {\n        enumerable: true,\n        value: 'overrode'\n      }\n    });\n    return _this;\n  }\n\n  _createClass(ConstantIceServerSource, [{\n    key: 'start',\n    value: function start() {\n      this._isStarted = true;\n      return Promise.resolve(this._iceServers);\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this._isStarted = false;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[ConstantIceServerSource #' + this._instance + ']';\n    }\n  }]);\n\n  return ConstantIceServerSource;\n}(EventEmitter);\n\nmodule.exports = ConstantIceServerSource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9pY2VzZXJ2ZXJzb3VyY2UvY29uc3RhbnQuanM/MTAyMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSxtQkFBbUIsbUJBQU8sQ0FBQyxpQkFBUTs7QUFFbkM7O0FBRUE7QUFDQSxNQUFNLDhCQUE4QjtBQUNwQztBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsOEJBQThCO0FBQ2hELGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIGluc3RhbmNlcyA9IDA7XG5cbi8qKlxuICogQSB7QGxpbmsgQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2V9IG9ubHkgZXZlciByZXR1cm5zIGEgc2luZ2xlIHNldCBvZiBJQ0VcbiAqIHNlcnZlcnMuIEl0IGlzIHVzZWZ1bCBmb3IgcHJvdmlkaW5nIGEgaGFyZC1jb2RlZCBzZXQgb2YgSUNFIHNlcnZlcnMuXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqIEBpbXBsZW1lbnRzIHtJY2VTZXJ2ZXJTb3VyY2V9XG4gKi9cblxudmFyIENvbnN0YW50SWNlU2VydmVyU291cmNlID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKENvbnN0YW50SWNlU2VydmVyU291cmNlLCBfRXZlbnRFbWl0dGVyKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIENvbnN0YW50SWNlU2VydmVyU291cmNlfS5cbiAgICogQHBhcmFtIHtBcnJheTxSVENJY2VTZXJ2ZXJJbml0Pn0gaWNlU2VydmVyc1xuICAgKi9cbiAgZnVuY3Rpb24gQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2UoaWNlU2VydmVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25zdGFudEljZVNlcnZlclNvdXJjZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb25zdGFudEljZVNlcnZlclNvdXJjZSkpLmNhbGwodGhpcykpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIF9pbnN0YW5jZToge1xuICAgICAgICB2YWx1ZTogKytpbnN0YW5jZXNcbiAgICAgIH0sXG4gICAgICBfaWNlU2VydmVyczoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogaWNlU2VydmVycyxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBfaXNTdGFydGVkOiB7XG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBpc1N0YXJ0ZWQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU3RhcnRlZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHN0YXR1czoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogJ292ZXJyb2RlJ1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb25zdGFudEljZVNlcnZlclNvdXJjZSwgW3tcbiAgICBrZXk6ICdzdGFydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgdGhpcy5faXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5faWNlU2VydmVycyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLl9pc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICdbQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2UgIycgKyB0aGlzLl9pbnN0YW5jZSArICddJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2U7XG59KEV2ZW50RW1pdHRlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uc3RhbnRJY2VTZXJ2ZXJTb3VyY2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9pY2VzZXJ2ZXJzb3VyY2UvY29uc3RhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDI4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///283\n");

/***/ }),
/* 284 */
/*!***********************************************!*\
  !*** ./node_modules/twilio-video/es5/room.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\nvar RemoteParticipant = __webpack_require__(/*! ./remoteparticipant */ 285);\nvar StatsReport = __webpack_require__(/*! ./stats/statsreport */ 246);\n\nvar _require = __webpack_require__(/*! ./util */ 206),\n    deprecateEvents = _require.deprecateEvents;\n\nvar _require2 = __webpack_require__(/*! ./util/twilio-video-errors */ 209),\n    MediaConnectionError = _require2.MediaConnectionError;\n\nvar nInstances = 0;\n\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackAdded\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackRemoved\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\n\nvar Room = function (_EventEmitter) {\n  _inherits(Room, _EventEmitter);\n\n  /**\n   * Construct a {@link Room}.\n   * @param {RoomSignaling} signaling\n   * @param {?object} [options={}]\n   */\n  function Room(localParticipant, signaling, options) {\n    _classCallCheck(this, Room);\n\n    var _this = _possibleConstructorReturn(this, (Room.__proto__ || Object.getPrototypeOf(Room)).call(this));\n\n    var log = options.log.createLog('default', _this);\n    var participants = new Map();\n\n    /* istanbul ignore next */\n    Object.defineProperties(_this, {\n      _log: {\n        value: log\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _options: {\n        value: options\n      },\n      _participants: {\n        value: participants\n      },\n      _signaling: {\n        value: signaling\n      },\n      dominantSpeaker: {\n        enumerable: true,\n        get: function get() {\n          return this.participants.get(signaling.dominantSpeakerSid) || null;\n        }\n      },\n      isRecording: {\n        enumerable: true,\n        get: function get() {\n          return signaling.recording.isEnabled || false;\n        }\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: signaling.name\n      },\n      participants: {\n        enumerable: true,\n        value: participants\n      },\n      sid: {\n        enumerable: true,\n        value: signaling.sid\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      }\n    });\n\n    deprecateEvents('Room', _this, new Map([['trackAdded', 'trackSubscribed'], ['trackRemoved', 'trackUnsubscribed']]), log);\n\n    handleRecordingEvents(_this, signaling.recording);\n    handleSignalingEvents(_this, signaling);\n\n    log.info('Created a new Room:', _this.name);\n    log.debug('Initial RemoteParticipants:', Array.from(_this._participants.values()));\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: 'toString',\n    value: function toString() {\n      return '[Room #' + this._instanceId + ': ' + this.sid + ']';\n    }\n\n    /**\n     * Disconnect from the {@link Room}.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._log.info('Disconnecting');\n      this._signaling.disconnect();\n      return this;\n    }\n\n    /**\n     * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n     * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n     *\n     * @returns {Promise.<Array<StatsReport>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      return this._signaling.getStats().then(function (responses) {\n        return Array.from(responses).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              id = _ref2[0],\n              response = _ref2[1];\n\n          return new StatsReport(id, response);\n        });\n      });\n    }\n  }]);\n\n  return Room;\n}(EventEmitter);\n\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} joined the {@link Room}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} left the {@link Room}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n\n/**\n * Your application is reconnecting to the {@link Room}. Typically this happens\n * when there is a disruption in your media connection. When this event is\n * emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {TwilioError} error - A {@link TwilioError} explaining why your\n *   application is reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   console.warn('Reconnecting!', error);\n * });\n * @event Room#reconnecting\n */\n\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n\n/**\n * A {@link RemoteTrack} was added by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was added\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   added the {@link RemoteTrack}\n * @event Room#trackAdded\n * @deprecated Use {@link RemoteParticipant#trackSubscribed} instead\n * @example\n * room.on('trackAdded', function(track, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was disabled\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was enabled\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteVideoTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n\n/**\n * A {@link RemoteTrack} was removed by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was removed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   removed the {@link RemoteTrack}\n * @event Room#trackRemoved\n * @deprecated Use {@link RemoteParticipant#trackUnsubscribed} instead\n * @example\n * room.on('trackRemoved', function(track, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\nfunction connectParticipant(room, participantSignaling) {\n  var log = room._log;\n  var participant = new RemoteParticipant(participantSignaling, { log: log });\n\n  log.info('A new RemoteParticipant connected:', participant);\n  room._participants.set(participant.sid, participant);\n  room.emit('participantConnected', participant);\n\n  // Reemit Track events from the RemoteParticipant.\n  var eventListeners = [['trackSubscribed', 'trackAdded'], 'trackDimensionsChanged', 'trackDisabled', 'trackEnabled', 'trackMessage', 'trackPublished', ['trackUnsubscribed', 'trackRemoved'], 'trackStarted', 'trackSubscribed', 'trackSubscriptionFailed', 'trackUnpublished', 'trackUnsubscribed'].map(function (eventOrEventPair) {\n    var participantEvent = typeof eventOrEventPair === 'string' ? eventOrEventPair : eventOrEventPair[0];\n    var roomEvent = typeof eventOrEventPair === 'string' ? eventOrEventPair : eventOrEventPair[1];\n    function reemit() {\n      var args = [].slice.call(arguments);\n      args.unshift(roomEvent);\n      args.push(participant);\n      room.emit.apply(room, _toConsumableArray(args));\n    }\n    participant.on(participantEvent, reemit);\n    return [participantEvent, reemit];\n  });\n\n  // Reemit state transition events from the RemoteParticipant.\n  participant.once('disconnected', function participantDisconnected() {\n    var dominantSpeaker = room.dominantSpeaker;\n    log.info('RemoteParticipant disconnected:', participant);\n    room._participants.delete(participant.sid);\n    eventListeners.forEach(function (args) {\n      participant.removeListener(args[0], args[1]);\n    });\n    room.emit('participantDisconnected', participant);\n    if (participant === dominantSpeaker) {\n      room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n    }\n  });\n}\n\nfunction handleRecordingEvents(room, recording) {\n  recording.on('updated', function updated() {\n    var started = recording.isEnabled;\n    room._log.info('Recording ' + (started ? 'started' : 'stopped'));\n    room.emit('recording' + (started ? 'Started' : 'Stopped'));\n  });\n}\n\nfunction handleSignalingEvents(room, signaling) {\n  var log = room._log;\n\n  // Reemit RemoteParticipant events from the RoomSignaling.\n  log.debug('Creating a new RemoteParticipant for each ParticipantSignaling ' + 'in the RoomSignaling');\n  signaling.participants.forEach(connectParticipant.bind(null, room));\n  log.debug('Setting up RemoteParticipant creation for all subsequent ' + 'ParticipantSignalings that connect to the RoomSignaling');\n  signaling.on('participantConnected', connectParticipant.bind(null, room));\n\n  signaling.on('dominantSpeakerChanged', function () {\n    return room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n  });\n\n  // Reemit state transition events from the RoomSignaling.\n  signaling.on('stateChanged', function stateChanged(state, error) {\n    log.info('Transitioned to state:', state);\n    switch (state) {\n      case 'disconnected':\n        room.participants.forEach(function (participant) {\n          participant._unsubscribeTracks();\n        });\n        room.emit(state, room, error);\n        signaling.removeListener('stateChanged', stateChanged);\n        break;\n      case 'reconnecting':\n        room.emit('reconnecting', new MediaConnectionError());\n        break;\n      default:\n        room.emit('reconnected');\n    }\n  });\n}\n\nmodule.exports = Room;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///284\n");

/***/ }),
/* 285 */
/*!************************************************************!*\
  !*** ./node_modules/twilio-video/es5/remoteparticipant.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Participant = __webpack_require__(/*! ./participant */ 243);\n\nvar _require = __webpack_require__(/*! ./util */ 206),\n    deprecateEvents = _require.deprecateEvents;\n\n/**\n * A {@link RemoteParticipant} represents a remote {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, RemoteAudioTrack>} audioTracks -\n *    The {@link Participant}'s {@link RemoteAudioTrack}s\n * @property {Map<Track.SID, RemoteAudioTrackPublication>} audioTrackPublications -\n *    The {@link Participant}'s {@link RemoteAudioTrackPublication}s\n * @property {Map<Track.SID, RemoteDataTrack>} dataTracks -\n *    The {@link Participant}'s {@link RemoteDataTrack}s\n * @property {Map<Track.SID, RemoteDataTrackPublication>} dataTrackPublications -\n *    The {@link Participant}'s {@link RemoteDataTrackPublication}s\n * @property {Map<Track.SID, RemoteTrack>} tracks -\n *    The {@link Participant}'s {@link RemoteTrack}s\n * @property {Map<Track.SID, RemoteTrackPublication>} trackPublications -\n *    The {@link Participant}'s {@link RemoteTrackPublication}s\n * @property {Map<Track.SID, RemoteVideoTrack>} videoTracks -\n *    The {@link Participant}'s {@link RemoteVideoTrack}s\n * @property {Map<Track.SID, RemoteVideoTrackPublication>} videoTrackPublications -\n *    The {@link Participant}'s {@link RemoteVideoTrackPublication}s\n * @emits RemoteParticipant#trackAdded\n * @emits RemoteParticipant#trackDimensionsChanged\n * @emits RemoteParticipant#trackDisabled\n * @emits RemoteParticipant#trackEnabled\n * @emits RemoteParticipant#trackMessage\n * @emits RemoteParticipant#trackPublished\n * @emits RemoteParticipant#trackRemoved\n * @emits RemoteParticipant#trackStarted\n * @emits RemoteParticipant#trackSubscribed\n * @emits RemoteParticipant#trackSubscriptionFailed\n * @emits RemoteParticipant#trackUnpublished\n * @emits RemoteParticipant#trackUnsubscribed\n */\n\n\nvar RemoteParticipant = function (_Participant) {\n  _inherits(RemoteParticipant, _Participant);\n\n  /**\n   * Construct a {@link RemoteParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n  function RemoteParticipant(signaling, options) {\n    _classCallCheck(this, RemoteParticipant);\n\n    var _this = _possibleConstructorReturn(this, (RemoteParticipant.__proto__ || Object.getPrototypeOf(RemoteParticipant)).call(this, signaling, options));\n\n    deprecateEvents('RemoteParticipant', _this, new Map([['trackAdded', 'trackSubscribed'], ['trackRemoved', 'trackUnsubscribed']]), _this._log);\n\n    _this._handleTrackSignalingEvents();\n    _this.once('disconnected', _this._unsubscribeTracks.bind(_this));\n    return _this;\n  }\n\n  _createClass(RemoteParticipant, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteParticipant #' + this._instanceId + (this.sid ? ': ' + this.sid : '') + ']';\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrack} remoteTrack\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrack}\n     */\n\n  }, {\n    key: '_addTrack',\n    value: function _addTrack(remoteTrack, publication) {\n      remoteTrack._setSid(publication.trackSid);\n      if (!_get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_addTrack', this).call(this, remoteTrack)) {\n        return null;\n      }\n      publication._subscribed(remoteTrack);\n      this.emit('trackSubscribed', remoteTrack);\n      return remoteTrack;\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n\n  }, {\n    key: '_addTrackPublication',\n    value: function _addTrackPublication(publication) {\n      var addedPublication = _get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_addTrackPublication', this).call(this, publication);\n      if (!addedPublication) {\n        return null;\n      }\n      this.emit('trackPublished', addedPublication);\n      return addedPublication;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getTrackPublicationEvents',\n    value: function _getTrackPublicationEvents() {\n      return [].concat(_toConsumableArray(_get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_getTrackPublicationEvents', this).call(this)), [['subscriptionFailed', 'trackSubscriptionFailed']]);\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_unsubscribeTracks',\n    value: function _unsubscribeTracks() {\n      var _this2 = this;\n\n      this.trackPublications.forEach(function (publication) {\n        if (publication.isSubscribed) {\n          var track = publication.track;\n          publication._unsubscribe();\n          _this2.emit('trackUnsubscribed', track);\n        }\n      });\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrack} remoteTrack\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrack}\n     */\n\n  }, {\n    key: '_removeTrack',\n    value: function _removeTrack(remoteTrack, publication) {\n      var unsubscribedTrack = this.tracks.get(remoteTrack._id);\n      if (!unsubscribedTrack) {\n        return null;\n      }\n\n      this._deleteTrack(unsubscribedTrack);\n      publication._unsubscribe();\n      this.emit('trackUnsubscribed', unsubscribedTrack);\n      this.emit('trackRemoved', unsubscribedTrack);\n      return unsubscribedTrack;\n    }\n\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n\n  }, {\n    key: '_removeTrackPublication',\n    value: function _removeTrackPublication(publication) {\n      var removedPublication = _get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_removeTrackPublication', this).call(this, publication);\n      if (!removedPublication) {\n        return null;\n      }\n      this.emit('trackUnpublished', removedPublication);\n      return removedPublication;\n    }\n  }]);\n\n  return RemoteParticipant;\n}(Participant);\n\n/**\n * A {@link RemoteTrack} was added by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was added\n * @event RemoteParticipant#trackAdded\n * @deprecated Use {@link RemoteParticipant#trackSubscribed} instead\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteVideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @event RemoteParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was disabled\n * @event RemoteParticipant#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was enabled\n * @event RemoteParticipant#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}s.\n * @event RemoteParticipant#trackMessage\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n */\n\n/**\n * A {@link RemoteTrack} was published by the {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event RemoteParticipant#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @example\n * function trackPublished(publication) {\n *   console.log(`Track ${publication.trackSid} was published`);\n * }\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(trackPublished);\n *\n *   // Handle RemoteTracks published after connecting to the Room.\n *   participant.on('trackPublished', trackPublished);\n * });\n */\n\n/**\n * A {@link RemoteTrack} was removed by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was removed\n * @event RemoteParticipant#trackRemoved\n * @deprecated Use {@link RemoteParticipant#trackUnsubscribed} instead\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteTrack}s started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @event RemoteParticipant#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed to\n * @event RemoteParticipant#trackSubscribed\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @event RemoteParticipant#trackSubscriptionFailed\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by the {@link RemoteParticipant}.\n * @event RemoteParticipant#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed from\n * @event RemoteParticipant#trackUnsubscribed\n */\n\nmodule.exports = RemoteParticipant;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///285\n");

/***/ }),
/* 286 */
/*!***********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remoteaudiotrack.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar AudioTrack = __webpack_require__(/*! ./audiotrack */ 234);\nvar mixinRemoteMediaTrack = __webpack_require__(/*! ./remotemediatrack */ 244);\n\nvar RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isSubscribed - Whether the {@link RemoteAudioTrack} is\n *   currently subscribed to\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#unsubscribed\n */\n\nvar RemoteAudioTrack = function (_RemoteMediaAudioTrac) {\n  _inherits(RemoteAudioTrack, _RemoteMediaAudioTrac);\n\n  /**\n   * Construct a {@link RemoteAudioTrack}.\n   * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n   * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n  function RemoteAudioTrack(mediaTrackReceiver, isEnabled, options) {\n    _classCallCheck(this, RemoteAudioTrack);\n\n    return _possibleConstructorReturn(this, (RemoteAudioTrack.__proto__ || Object.getPrototypeOf(RemoteAudioTrack)).call(this, mediaTrackReceiver, isEnabled, options));\n  }\n\n  _createClass(RemoteAudioTrack, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteAudioTrack #' + this._instanceId + ': ' + this.sid + ']';\n    }\n  }]);\n\n  return RemoteAudioTrack;\n}(RemoteMediaAudioTrack);\n\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n\n/**\n * The {@link RemoteAudioTrack} was unsubscribed from.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   unsubscribed from\n * @event RemoteAudioTrack#unsubscribed\n * @deprecated Use the parent {@link RemoteAudioTrackPublication}'s\n *   \"unsubscribed\" event instead\n */\n\nmodule.exports = RemoteAudioTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGVhdWRpb3RyYWNrLmpzP2IyOTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsaUJBQWlCLG1CQUFPLENBQUMsdUJBQWM7QUFDdkMsNEJBQTRCLG1CQUFPLENBQUMsNkJBQW9COztBQUV4RDs7QUFFQTtBQUNBLE1BQU0sdUJBQXVCLGdCQUFnQixpQkFBaUI7QUFDOUQsSUFBSSxXQUFXLE9BQU8sd0JBQXdCO0FBQzlDO0FBQ0EsY0FBYyxRQUFRLDZCQUE2Qix1QkFBdUI7QUFDMUU7QUFDQSxjQUFjLFVBQVUsWUFBWSx1QkFBdUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QyxhQUFhLG1CQUFtQjtBQUNoQyxhQUFhLFFBQVEsMEJBQTBCLHVCQUF1QjtBQUN0RSxjQUFjLFVBQVUsZ0JBQWdCLGtCQUFrQjtBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQjtBQUNBLFdBQVcsaUJBQWlCLGNBQWMsdUJBQXVCO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0EsK0JBQStCLGtDQUFrQztBQUNqRTtBQUNBOztBQUVBIiwiZmlsZSI6IjI4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQXVkaW9UcmFjayA9IHJlcXVpcmUoJy4vYXVkaW90cmFjaycpO1xudmFyIG1peGluUmVtb3RlTWVkaWFUcmFjayA9IHJlcXVpcmUoJy4vcmVtb3RlbWVkaWF0cmFjaycpO1xuXG52YXIgUmVtb3RlTWVkaWFBdWRpb1RyYWNrID0gbWl4aW5SZW1vdGVNZWRpYVRyYWNrKEF1ZGlvVHJhY2spO1xuXG4vKipcbiAqIEEge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9IHJlcHJlc2VudHMgYW4ge0BsaW5rIEF1ZGlvVHJhY2t9IHB1Ymxpc2hlZCB0byBhXG4gKiB7QGxpbmsgUm9vbX0gYnkgYSB7QGxpbmsgUmVtb3RlUGFydGljaXBhbnR9LlxuICogQGV4dGVuZHMgQXVkaW9UcmFja1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc1N1YnNjcmliZWQgLSBXaGV0aGVyIHRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gaXNcbiAqICAgY3VycmVudGx5IHN1YnNjcmliZWQgdG9cbiAqIEBwcm9wZXJ0eSB7VHJhY2suU0lEfSBzaWQgLSBUaGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9J3MgU0lEXG4gKiBAZW1pdHMgUmVtb3RlQXVkaW9UcmFjayNkaXNhYmxlZFxuICogQGVtaXRzIFJlbW90ZUF1ZGlvVHJhY2sjZW5hYmxlZFxuICogQGVtaXRzIFJlbW90ZUF1ZGlvVHJhY2sjc3RhcnRlZFxuICogQGVtaXRzIFJlbW90ZUF1ZGlvVHJhY2sjdW5zdWJzY3JpYmVkXG4gKi9cblxudmFyIFJlbW90ZUF1ZGlvVHJhY2sgPSBmdW5jdGlvbiAoX1JlbW90ZU1lZGlhQXVkaW9UcmFjKSB7XG4gIF9pbmhlcml0cyhSZW1vdGVBdWRpb1RyYWNrLCBfUmVtb3RlTWVkaWFBdWRpb1RyYWMpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30uXG4gICAqIEBwYXJhbSB7TWVkaWFUcmFja1JlY2VpdmVyfSBtZWRpYVRyYWNrUmVjZWl2ZXIgLSBBbiBhdWRpbyBNZWRpYVN0cmVhbVRyYWNrIGNvbnRhaW5lclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRW5hYmxlZCAtIFdoZXRoZXIgdGhlIHtAbGluayBSZW1vdGVBdWRpb1RyYWNrfSBpcyBlbmFibGVkXG4gICAqIEBwYXJhbSB7e2xvZzogTG9nfX0gb3B0aW9ucyAtIFRoZSB7QGxpbmsgUmVtb3RlVHJhY2t9IG9wdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIFJlbW90ZUF1ZGlvVHJhY2sobWVkaWFUcmFja1JlY2VpdmVyLCBpc0VuYWJsZWQsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVtb3RlQXVkaW9UcmFjayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZUF1ZGlvVHJhY2suX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVBdWRpb1RyYWNrKSkuY2FsbCh0aGlzLCBtZWRpYVRyYWNrUmVjZWl2ZXIsIGlzRW5hYmxlZCwgb3B0aW9ucykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlbW90ZUF1ZGlvVHJhY2ssIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnW1JlbW90ZUF1ZGlvVHJhY2sgIycgKyB0aGlzLl9pbnN0YW5jZUlkICsgJzogJyArIHRoaXMuc2lkICsgJ10nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZW1vdGVBdWRpb1RyYWNrO1xufShSZW1vdGVNZWRpYUF1ZGlvVHJhY2spO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gd2FzIGRpc2FibGVkLCBpLmUuIFwibXV0ZWRcIi5cbiAqIEBwYXJhbSB7UmVtb3RlQXVkaW9UcmFja30gdHJhY2sgLSBUaGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9IHRoYXQgd2FzXG4gKiAgIGRpc2FibGVkXG4gKiBAZXZlbnQgUmVtb3RlQXVkaW9UcmFjayNkaXNhYmxlZFxuICovXG5cbi8qKlxuICogVGhlIHtAbGluayBSZW1vdGVBdWRpb1RyYWNrfSB3YXMgZW5hYmxlZCwgaS5lLiBcInVubXV0ZWRcIi5cbiAqIEBwYXJhbSB7UmVtb3RlQXVkaW9UcmFja30gdHJhY2sgLSBUaGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9IHRoYXQgd2FzXG4gKiAgIGVuYWJsZWRcbiAqIEBldmVudCBSZW1vdGVBdWRpb1RyYWNrI2VuYWJsZWRcbiAqL1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gc3RhcnRlZC4gVGhpcyBtZWFucyB0aGVyZSBpcyBlbm91Z2ggYXVkaW8gZGF0YVxuICogdG8gYmVnaW4gcGxheWJhY2suXG4gKiBAcGFyYW0ge1JlbW90ZUF1ZGlvVHJhY2t9IHRyYWNrIC0gVGhlIHtAbGluayBSZW1vdGVBdWRpb1RyYWNrfSB0aGF0IHN0YXJ0ZWRcbiAqIEBldmVudCBSZW1vdGVBdWRpb1RyYWNrI3N0YXJ0ZWRcbiAqL1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gd2FzIHVuc3Vic2NyaWJlZCBmcm9tLlxuICogQHBhcmFtIHtSZW1vdGVBdWRpb1RyYWNrfSB0cmFjayAtIFRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gdGhhdCB3YXNcbiAqICAgdW5zdWJzY3JpYmVkIGZyb21cbiAqIEBldmVudCBSZW1vdGVBdWRpb1RyYWNrI3Vuc3Vic2NyaWJlZFxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBwYXJlbnQge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbn0nc1xuICogICBcInVuc3Vic2NyaWJlZFwiIGV2ZW50IGluc3RlYWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW90ZUF1ZGlvVHJhY2s7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGVhdWRpb3RyYWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAyODZcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///286\n");

/***/ }),
/* 287 */
/*!**********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remoteaudiotrackpublication.js ***!
  \**********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteTrackPublication = __webpack_require__(/*! ./remotetrackpublication */ 226);\n\n/**\n * A {@link RemoteAudioTrackPublication} represents a {@link RemoteAudioTrack}\n * that has been published to a {@link Room}.\n * @property {Track.Kind} kind - \"audio\"\n * @property {?RemoteAudioTrack} track - unless you have subscribed to the\n *   {@link RemoteAudioTrack}, this property is null\n * @emits RemoteAudioTrackPublication#subscribed\n * @emits RemoteAudioTrackPublication#trackDisabled\n * @emits RemoteAudioTrackPublication#trackEnabled\n * @emits RemoteAudioTrackPublication#unsubscribed\n */\n\nvar RemoteAudioTrackPublication = function (_RemoteTrackPublicati) {\n  _inherits(RemoteAudioTrackPublication, _RemoteTrackPublicati);\n\n  /**\n   * Construct a {@link RemoteAudioTrackPublication}.\n   * @param {RemoteTrackPublicationSignaling} signaling - {@link RemoteTrackPublication} signaling\n   * @param {RemoteTrackPublicationOptions} options - {@link RemoteTrackPublication}\n   *   options\n   */\n  function RemoteAudioTrackPublication(signaling, options) {\n    _classCallCheck(this, RemoteAudioTrackPublication);\n\n    return _possibleConstructorReturn(this, (RemoteAudioTrackPublication.__proto__ || Object.getPrototypeOf(RemoteAudioTrackPublication)).call(this, signaling, options));\n  }\n\n  _createClass(RemoteAudioTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteAudioTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return RemoteAudioTrackPublication;\n}(RemoteTrackPublication);\n\n/**\n * Your {@link LocalParticipant} subscribed to the {@link RemoteAudioTrack}.\n * @param {RemoteAudioTrack} track - the {@link RemoteAudioTrack} that was subscribed to\n * @event RemoteAudioTrackPublication#subscribed\n */\n\n/**\n * The {@link RemoteAudioTrack} was disabled.\n * @event RemoteAudioTrackPublication#trackDisabled\n */\n\n/**\n * The {@link RemoteAudioTrack} was enabled.\n * @event RemoteAudioTrackPublication#trackEnabled\n */\n\n/**\n * Your {@link LocalParticipant} unsubscribed from the {@link RemoteAudioTrack}.\n * @param {RemoteAudioTrack} track - the {@link RemoteAudioTrack} that was unsubscribed from\n * @event RemoteAudioTrackPublication#unsubscribed\n */\n\nmodule.exports = RemoteAudioTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGVhdWRpb3RyYWNrcHVibGljYXRpb24uanM/NjNlYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSw2QkFBNkIsbUJBQU8sQ0FBQyxtQ0FBMEI7O0FBRS9EO0FBQ0EsTUFBTSxrQ0FBa0MsZUFBZTtBQUN2RCxpQ0FBaUMsV0FBVztBQUM1QyxjQUFjLFdBQVc7QUFDekIsY0FBYyxrQkFBa0I7QUFDaEMsTUFBTSx1QkFBdUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGtDQUFrQztBQUNwRCxhQUFhLGdDQUFnQyxjQUFjLDZCQUE2QjtBQUN4RixhQUFhLDhCQUE4QixZQUFZO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0EsU0FBUyx1QkFBdUIsb0JBQW9CLHVCQUF1QjtBQUMzRSxXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBOztBQUVBO0FBQ0EsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTs7QUFFQTtBQUNBLFFBQVEsdUJBQXVCO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLHVCQUF1Qix3QkFBd0IsdUJBQXVCO0FBQy9FLFdBQVcsaUJBQWlCLGNBQWMsdUJBQXVCO0FBQ2pFO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZW1vdGVUcmFja1B1YmxpY2F0aW9uID0gcmVxdWlyZSgnLi9yZW1vdGV0cmFja3B1YmxpY2F0aW9uJyk7XG5cbi8qKlxuICogQSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9ufSByZXByZXNlbnRzIGEge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9XG4gKiB0aGF0IGhhcyBiZWVuIHB1Ymxpc2hlZCB0byBhIHtAbGluayBSb29tfS5cbiAqIEBwcm9wZXJ0eSB7VHJhY2suS2luZH0ga2luZCAtIFwiYXVkaW9cIlxuICogQHByb3BlcnR5IHs/UmVtb3RlQXVkaW9UcmFja30gdHJhY2sgLSB1bmxlc3MgeW91IGhhdmUgc3Vic2NyaWJlZCB0byB0aGVcbiAqICAge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9LCB0aGlzIHByb3BlcnR5IGlzIG51bGxcbiAqIEBlbWl0cyBSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb24jc3Vic2NyaWJlZFxuICogQGVtaXRzIFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbiN0cmFja0Rpc2FibGVkXG4gKiBAZW1pdHMgUmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9uI3RyYWNrRW5hYmxlZFxuICogQGVtaXRzIFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbiN1bnN1YnNjcmliZWRcbiAqL1xuXG52YXIgUmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9uID0gZnVuY3Rpb24gKF9SZW1vdGVUcmFja1B1YmxpY2F0aSkge1xuICBfaW5oZXJpdHMoUmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9uLCBfUmVtb3RlVHJhY2tQdWJsaWNhdGkpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9ufS5cbiAgICogQHBhcmFtIHtSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nfSBzaWduYWxpbmcgLSB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvbn0gc2lnbmFsaW5nXG4gICAqIEBwYXJhbSB7UmVtb3RlVHJhY2tQdWJsaWNhdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvbn1cbiAgICogICBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb24oc2lnbmFsaW5nLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbikpLmNhbGwodGhpcywgc2lnbmFsaW5nLCBvcHRpb25zKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVtb3RlQXVkaW9UcmFja1B1YmxpY2F0aW9uLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ1tSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb24gIycgKyB0aGlzLl9pbnN0YW5jZUlkICsgJzogJyArIHRoaXMudHJhY2tTaWQgKyAnXSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbjtcbn0oUmVtb3RlVHJhY2tQdWJsaWNhdGlvbik7XG5cbi8qKlxuICogWW91ciB7QGxpbmsgTG9jYWxQYXJ0aWNpcGFudH0gc3Vic2NyaWJlZCB0byB0aGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9LlxuICogQHBhcmFtIHtSZW1vdGVBdWRpb1RyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gdGhhdCB3YXMgc3Vic2NyaWJlZCB0b1xuICogQGV2ZW50IFJlbW90ZUF1ZGlvVHJhY2tQdWJsaWNhdGlvbiNzdWJzY3JpYmVkXG4gKi9cblxuLyoqXG4gKiBUaGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9IHdhcyBkaXNhYmxlZC5cbiAqIEBldmVudCBSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb24jdHJhY2tEaXNhYmxlZFxuICovXG5cbi8qKlxuICogVGhlIHtAbGluayBSZW1vdGVBdWRpb1RyYWNrfSB3YXMgZW5hYmxlZC5cbiAqIEBldmVudCBSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb24jdHJhY2tFbmFibGVkXG4gKi9cblxuLyoqXG4gKiBZb3VyIHtAbGluayBMb2NhbFBhcnRpY2lwYW50fSB1bnN1YnNjcmliZWQgZnJvbSB0aGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9LlxuICogQHBhcmFtIHtSZW1vdGVBdWRpb1RyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgUmVtb3RlQXVkaW9UcmFja30gdGhhdCB3YXMgdW5zdWJzY3JpYmVkIGZyb21cbiAqIEBldmVudCBSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb24jdW5zdWJzY3JpYmVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdGVBdWRpb1RyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGVhdWRpb3RyYWNrcHVibGljYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDI4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///287\n");

/***/ }),
/* 288 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remotedatatrack.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! ../../util */ 206),\n    deprecateEvents = _require.deprecateEvents;\n\nvar Track = __webpack_require__(/*! ./ */ 225);\n\n/**\n * A {@link RemoteDataTrack} represents data published to a {@link Room} by a\n * {@link RemoteParticipant}.\n * @extends Track\n * @property {boolean} isEnabled - true\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which data will be transmitted or\n *   retransmitted if not acknowledged on the underlying RTCDataChannel.\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the data will be retransmitted if not successfully received on the\n *   underlying RTCDataChannel.\n * @property {boolean} ordered - true if data on the {@link RemoteDataTrack} can\n *   be received out-of-order.\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of retransmits that will be attempted, ensuring \"reliable\"\n *   transmission.\n * @emits RemoteDataTrack#message\n * @emits RemoteDataTrack#unsubscribed\n */\n\nvar RemoteDataTrack = function (_Track) {\n  _inherits(RemoteDataTrack, _Track);\n\n  /**\n   * Construct a {@link RemoteDataTrack} from a {@link DataTrackReceiver}.\n   * @param {DataTrackReceiver} dataTrackReceiver\n   * @param {{log: Log, name: ?string}} options\n   */\n  function RemoteDataTrack(dataTrackReceiver, options) {\n    _classCallCheck(this, RemoteDataTrack);\n\n    var _this = _possibleConstructorReturn(this, (RemoteDataTrack.__proto__ || Object.getPrototypeOf(RemoteDataTrack)).call(this, dataTrackReceiver.id, 'data', options));\n\n    Object.defineProperties(_this, {\n      _isSubscribed: {\n        value: true,\n        writable: true\n      },\n      _sid: {\n        value: null,\n        writable: true\n      },\n      isEnabled: {\n        enumerable: true,\n        value: true\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: dataTrackReceiver.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: dataTrackReceiver.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: dataTrackReceiver.ordered\n      },\n      reliable: {\n        enumerable: true,\n        value: dataTrackReceiver.maxPacketLifeTime === null && dataTrackReceiver.maxRetransmits === null\n      }\n    });\n\n    deprecateEvents('RemoteDataTrack', _this, new Map([['unsubscribed', null]]), _this._log);\n\n    dataTrackReceiver.on('message', function (data) {\n      _this.emit('message', data, _this);\n    });\n    return _this;\n  }\n\n  /**\n   * The {@link RemoteDataTrack}'s ID.\n   * @property {Track.ID}\n   * @deprecated Use the parent {@link RemoteTrackPublication}'s .trackName\n   *   or .trackSid instead\n   */\n\n\n  _createClass(RemoteDataTrack, [{\n    key: '_setEnabled',\n\n\n    /**\n     * @private\n     */\n    value: function _setEnabled() {}\n    // Do nothing.\n\n\n    /**\n     * @private\n     * @param {Track.SID} sid\n     */\n\n  }, {\n    key: '_setSid',\n    value: function _setSid(sid) {\n      if (!this._sid) {\n        this._sid = sid;\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe() {\n      if (this._isSubscribed) {\n        this._isSubscribed = false;\n        this.emit('unsubscribed', this);\n      }\n    }\n  }, {\n    key: 'id',\n    get: function get() {\n      this._log.deprecated('RemoteDataTrack#id has been deprecated and is ' + 'scheduled for removal in twilio-video.js@2.0.0. Use the parent ' + 'RemoteTrackPublication\\'s .trackName or .trackSid instead.');\n      return this._id;\n    }\n\n    /**\n     * Whether the {@link RemoteDataTrack} is subscribed to\n     * @property {boolean}\n     * @deprecated Use the parent {@link RemoteTrackPublication}'s .isSubscribed\n     *   instead\n     */\n\n  }, {\n    key: 'isSubscribed',\n    get: function get() {\n      this._log.deprecated('RemoteDataTrack#isSubscribed has been deprecated and is ' + 'scheduled for removal in twilio-video.js@2.0.0. Use the ' + 'parent RemoteTrackPublication\\'s .isSubscribed instead.');\n      return this._isSubscribed;\n    }\n\n    /**\n     * The SID assigned to the {@link RemoteMediaTrack}\n     * @property {Track.SID}\n     */\n\n  }, {\n    key: 'sid',\n    get: function get() {\n      return this._sid;\n    }\n  }]);\n\n  return RemoteDataTrack;\n}(Track);\n\n/**\n * A message was received over the {@link RemoteDataTrack}.\n * @event RemoteDataTrack#message\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that received\n *   the message\n */\n\n/**\n * The {@link RemoteDataTrack} was unsubscribed from.\n * @event RemoteDataTrack#unsubscribed\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} that was\n *   unsubscribed from\n * @deprecated Use the parent {@link RemoteTrackPublication}'s \"unsubscribed\"\n *   event instead\n */\n\nmodule.exports = RemoteDataTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///288\n");

/***/ }),
/* 289 */
/*!*********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remotedatatrackpublication.js ***!
  \*********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteTrackPublication = __webpack_require__(/*! ./remotetrackpublication */ 226);\n\n/**\n * A {@link RemoteDataTrackPublication} represents a {@link RemoteDataTrack}\n * that has been published to a {@link Room}.\n * @property {Track.Kind} kind - \"data\"\n * @property {?RemoteDataTrack} track - unless you have subscribed to the\n *   {@link RemoteDataTrack}, this property is null\n * @emits RemoteDataTrackPublication#subscribed\n * @emits RemoteDataTrackPublication#unsubscribed\n */\n\nvar RemoteDataTrackPublication = function (_RemoteTrackPublicati) {\n  _inherits(RemoteDataTrackPublication, _RemoteTrackPublicati);\n\n  /**\n   * Construct a {@link RemoteDataTrackPublication}.\n   * @param {RemoteTrackPublicationSignaling} signaling - {@link RemoteTrackPublication} signaling\n   * @param {RemoteTrackPublicationOptions} options - {@link RemoteTrackPublication}\n   *   options\n   */\n  function RemoteDataTrackPublication(signaling, options) {\n    _classCallCheck(this, RemoteDataTrackPublication);\n\n    return _possibleConstructorReturn(this, (RemoteDataTrackPublication.__proto__ || Object.getPrototypeOf(RemoteDataTrackPublication)).call(this, signaling, options));\n  }\n\n  _createClass(RemoteDataTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteDataTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return RemoteDataTrackPublication;\n}(RemoteTrackPublication);\n\n/**\n * Your {@link LocalParticipant} subscribed to the {@link RemoteDataTrack}.\n * @param {RemoteDataTrack} track - the {@link RemoteDataTrack} that was subscribed to\n * @event RemoteDataTrackPublication#subscribed\n */\n\n/**\n * Your {@link LocalParticipant} unsubscribed from the {@link RemoteDataTrack}.\n * @param {RemoteDataTrack} track - the {@link RemoteDataTrack} that was unsubscribed from\n * @event RemoteDataTrackPublication#unsubscribed\n */\n\nmodule.exports = RemoteDataTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGVkYXRhdHJhY2twdWJsaWNhdGlvbi5qcz8wYTFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLDZCQUE2QixtQkFBTyxDQUFDLG1DQUEwQjs7QUFFL0Q7QUFDQSxNQUFNLGlDQUFpQyxlQUFlO0FBQ3RELGlDQUFpQyxXQUFXO0FBQzVDLGNBQWMsV0FBVztBQUN6QixjQUFjLGlCQUFpQjtBQUMvQixNQUFNLHNCQUFzQjtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixpQ0FBaUM7QUFDbkQsYUFBYSxnQ0FBZ0MsY0FBYyw2QkFBNkI7QUFDeEYsYUFBYSw4QkFBOEIsWUFBWTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLFNBQVMsdUJBQXVCLG9CQUFvQixzQkFBc0I7QUFDMUUsV0FBVyxnQkFBZ0IsY0FBYyxzQkFBc0I7QUFDL0Q7QUFDQTs7QUFFQTtBQUNBLFNBQVMsdUJBQXVCLHdCQUF3QixzQkFBc0I7QUFDOUUsV0FBVyxnQkFBZ0IsY0FBYyxzQkFBc0I7QUFDL0Q7QUFDQTs7QUFFQSIsImZpbGUiOiIyODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlbW90ZVRyYWNrUHVibGljYXRpb24gPSByZXF1aXJlKCcuL3JlbW90ZXRyYWNrcHVibGljYXRpb24nKTtcblxuLyoqXG4gKiBBIHtAbGluayBSZW1vdGVEYXRhVHJhY2tQdWJsaWNhdGlvbn0gcmVwcmVzZW50cyBhIHtAbGluayBSZW1vdGVEYXRhVHJhY2t9XG4gKiB0aGF0IGhhcyBiZWVuIHB1Ymxpc2hlZCB0byBhIHtAbGluayBSb29tfS5cbiAqIEBwcm9wZXJ0eSB7VHJhY2suS2luZH0ga2luZCAtIFwiZGF0YVwiXG4gKiBAcHJvcGVydHkgez9SZW1vdGVEYXRhVHJhY2t9IHRyYWNrIC0gdW5sZXNzIHlvdSBoYXZlIHN1YnNjcmliZWQgdG8gdGhlXG4gKiAgIHtAbGluayBSZW1vdGVEYXRhVHJhY2t9LCB0aGlzIHByb3BlcnR5IGlzIG51bGxcbiAqIEBlbWl0cyBSZW1vdGVEYXRhVHJhY2tQdWJsaWNhdGlvbiNzdWJzY3JpYmVkXG4gKiBAZW1pdHMgUmVtb3RlRGF0YVRyYWNrUHVibGljYXRpb24jdW5zdWJzY3JpYmVkXG4gKi9cblxudmFyIFJlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9uID0gZnVuY3Rpb24gKF9SZW1vdGVUcmFja1B1YmxpY2F0aSkge1xuICBfaW5oZXJpdHMoUmVtb3RlRGF0YVRyYWNrUHVibGljYXRpb24sIF9SZW1vdGVUcmFja1B1YmxpY2F0aSk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBSZW1vdGVEYXRhVHJhY2tQdWJsaWNhdGlvbn0uXG4gICAqIEBwYXJhbSB7UmVtb3RlVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZ30gc2lnbmFsaW5nIC0ge0BsaW5rIFJlbW90ZVRyYWNrUHVibGljYXRpb259IHNpZ25hbGluZ1xuICAgKiBAcGFyYW0ge1JlbW90ZVRyYWNrUHVibGljYXRpb25PcHRpb25zfSBvcHRpb25zIC0ge0BsaW5rIFJlbW90ZVRyYWNrUHVibGljYXRpb259XG4gICAqICAgb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gUmVtb3RlRGF0YVRyYWNrUHVibGljYXRpb24oc2lnbmFsaW5nLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVtb3RlRGF0YVRyYWNrUHVibGljYXRpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVEYXRhVHJhY2tQdWJsaWNhdGlvbikpLmNhbGwodGhpcywgc2lnbmFsaW5nLCBvcHRpb25zKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVtb3RlRGF0YVRyYWNrUHVibGljYXRpb24sIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnW1JlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9uICMnICsgdGhpcy5faW5zdGFuY2VJZCArICc6ICcgKyB0aGlzLnRyYWNrU2lkICsgJ10nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZW1vdGVEYXRhVHJhY2tQdWJsaWNhdGlvbjtcbn0oUmVtb3RlVHJhY2tQdWJsaWNhdGlvbik7XG5cbi8qKlxuICogWW91ciB7QGxpbmsgTG9jYWxQYXJ0aWNpcGFudH0gc3Vic2NyaWJlZCB0byB0aGUge0BsaW5rIFJlbW90ZURhdGFUcmFja30uXG4gKiBAcGFyYW0ge1JlbW90ZURhdGFUcmFja30gdHJhY2sgLSB0aGUge0BsaW5rIFJlbW90ZURhdGFUcmFja30gdGhhdCB3YXMgc3Vic2NyaWJlZCB0b1xuICogQGV2ZW50IFJlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9uI3N1YnNjcmliZWRcbiAqL1xuXG4vKipcbiAqIFlvdXIge0BsaW5rIExvY2FsUGFydGljaXBhbnR9IHVuc3Vic2NyaWJlZCBmcm9tIHRoZSB7QGxpbmsgUmVtb3RlRGF0YVRyYWNrfS5cbiAqIEBwYXJhbSB7UmVtb3RlRGF0YVRyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgUmVtb3RlRGF0YVRyYWNrfSB0aGF0IHdhcyB1bnN1YnNjcmliZWQgZnJvbVxuICogQGV2ZW50IFJlbW90ZURhdGFUcmFja1B1YmxpY2F0aW9uI3Vuc3Vic2NyaWJlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVtb3RlRGF0YVRyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGVkYXRhdHJhY2twdWJsaWNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///289\n");

/***/ }),
/* 290 */
/*!***********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remotevideotrack.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar mixinRemoteMediaTrack = __webpack_require__(/*! ./remotemediatrack */ 244);\nvar VideoTrack = __webpack_require__(/*! ./videotrack */ 241);\n\nvar RemoteMediaVideoTrack = mixinRemoteMediaTrack(VideoTrack);\n\n/**\n * A {@link RemoteVideoTrack} represents a {@link VideoTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends VideoTrack\n * @property {boolean} isSubscribed - Whether the {@link RemoteVideoTrack} is\n *   currently subscribed to\n * @property {Track.SID} sid - The {@link RemoteVideoTrack}'s SID\n * @emits RemoteVideoTrack#dimensionsChanged\n * @emits RemoteVideoTrack#disabled\n * @emits RemoteVideoTrack#enabled\n * @emits RemoteVideoTrack#started\n * @emits RemoteVideoTrack#unsubscribed\n */\n\nvar RemoteVideoTrack = function (_RemoteMediaVideoTrac) {\n  _inherits(RemoteVideoTrack, _RemoteMediaVideoTrac);\n\n  /**\n   * Construct a {@link RemoteVideoTrack}.\n   * @param {MediaTrackReceiver} mediaTrackReceiver - A video MediaStreamTrack container\n   * @param {boolean} isEnabled - whether the {@link RemoteAudioTrack} is enabled\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n  function RemoteVideoTrack(mediaTrackReceiver, isEnabled, options) {\n    _classCallCheck(this, RemoteVideoTrack);\n\n    return _possibleConstructorReturn(this, (RemoteVideoTrack.__proto__ || Object.getPrototypeOf(RemoteVideoTrack)).call(this, mediaTrackReceiver, isEnabled, options));\n  }\n\n  _createClass(RemoteVideoTrack, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteVideoTrack #' + this._instanceId + ': ' + this.sid + ']';\n    }\n  }]);\n\n  return RemoteVideoTrack;\n}(RemoteMediaVideoTrack);\n\n/**\n * The {@link RemoteVideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose\n *   dimensions changed\n * @event RemoteVideoTrack#dimensionsChanged\n */\n\n/**\n * The {@link RemoteVideoTrack} was disabled, i.e. \"paused\".\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} that was\n *   disabled\n * @event RemoteVideoTrack#disabled\n */\n\n/**\n * The {@link RemoteVideoTrack} was enabled, i.e. \"unpaused\".\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} that was\n *   enabled\n * @event RemoteVideoTrack#enabled\n */\n\n/**\n * The {@link RemoteVideoTrack} was unsubscribed from.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} that was\n *   unsubscribed from\n * @event RemoteVideoTrack#unsubscribed\n * @deprecated Use the parent {@link RemoteVideoTrackPublication}'s\n *   \"unsubscribed\" event instead\n */\n\nmodule.exports = RemoteVideoTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGV2aWRlb3RyYWNrLmpzP2YzNTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsNEJBQTRCLG1CQUFPLENBQUMsNkJBQW9CO0FBQ3hELGlCQUFpQixtQkFBTyxDQUFDLHVCQUFjOztBQUV2Qzs7QUFFQTtBQUNBLE1BQU0sdUJBQXVCLGVBQWUsaUJBQWlCO0FBQzdELElBQUksV0FBVyxPQUFPLHdCQUF3QjtBQUM5QztBQUNBLGNBQWMsUUFBUSw2QkFBNkIsdUJBQXVCO0FBQzFFO0FBQ0EsY0FBYyxVQUFVLFlBQVksdUJBQXVCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QyxhQUFhLG1CQUFtQjtBQUNoQyxhQUFhLFFBQVEsMEJBQTBCLHVCQUF1QjtBQUN0RSxjQUFjLFVBQVUsZ0JBQWdCLGtCQUFrQjtBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQixXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBO0FBQ0EsK0JBQStCLGtDQUFrQztBQUNqRTtBQUNBOztBQUVBIiwiZmlsZSI6IjI5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgbWl4aW5SZW1vdGVNZWRpYVRyYWNrID0gcmVxdWlyZSgnLi9yZW1vdGVtZWRpYXRyYWNrJyk7XG52YXIgVmlkZW9UcmFjayA9IHJlcXVpcmUoJy4vdmlkZW90cmFjaycpO1xuXG52YXIgUmVtb3RlTWVkaWFWaWRlb1RyYWNrID0gbWl4aW5SZW1vdGVNZWRpYVRyYWNrKFZpZGVvVHJhY2spO1xuXG4vKipcbiAqIEEge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9IHJlcHJlc2VudHMgYSB7QGxpbmsgVmlkZW9UcmFja30gcHVibGlzaGVkIHRvIGFcbiAqIHtAbGluayBSb29tfSBieSBhIHtAbGluayBSZW1vdGVQYXJ0aWNpcGFudH0uXG4gKiBAZXh0ZW5kcyBWaWRlb1RyYWNrXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzU3Vic2NyaWJlZCAtIFdoZXRoZXIgdGhlIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrfSBpc1xuICogICBjdXJyZW50bHkgc3Vic2NyaWJlZCB0b1xuICogQHByb3BlcnR5IHtUcmFjay5TSUR9IHNpZCAtIFRoZSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30ncyBTSURcbiAqIEBlbWl0cyBSZW1vdGVWaWRlb1RyYWNrI2RpbWVuc2lvbnNDaGFuZ2VkXG4gKiBAZW1pdHMgUmVtb3RlVmlkZW9UcmFjayNkaXNhYmxlZFxuICogQGVtaXRzIFJlbW90ZVZpZGVvVHJhY2sjZW5hYmxlZFxuICogQGVtaXRzIFJlbW90ZVZpZGVvVHJhY2sjc3RhcnRlZFxuICogQGVtaXRzIFJlbW90ZVZpZGVvVHJhY2sjdW5zdWJzY3JpYmVkXG4gKi9cblxudmFyIFJlbW90ZVZpZGVvVHJhY2sgPSBmdW5jdGlvbiAoX1JlbW90ZU1lZGlhVmlkZW9UcmFjKSB7XG4gIF9pbmhlcml0cyhSZW1vdGVWaWRlb1RyYWNrLCBfUmVtb3RlTWVkaWFWaWRlb1RyYWMpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30uXG4gICAqIEBwYXJhbSB7TWVkaWFUcmFja1JlY2VpdmVyfSBtZWRpYVRyYWNrUmVjZWl2ZXIgLSBBIHZpZGVvIE1lZGlhU3RyZWFtVHJhY2sgY29udGFpbmVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFbmFibGVkIC0gd2hldGhlciB0aGUge0BsaW5rIFJlbW90ZUF1ZGlvVHJhY2t9IGlzIGVuYWJsZWRcbiAgICogQHBhcmFtIHt7bG9nOiBMb2d9fSBvcHRpb25zIC0gVGhlIHtAbGluayBSZW1vdGVUcmFja30gb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gUmVtb3RlVmlkZW9UcmFjayhtZWRpYVRyYWNrUmVjZWl2ZXIsIGlzRW5hYmxlZCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZW1vdGVWaWRlb1RyYWNrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVtb3RlVmlkZW9UcmFjay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlbW90ZVZpZGVvVHJhY2spKS5jYWxsKHRoaXMsIG1lZGlhVHJhY2tSZWNlaXZlciwgaXNFbmFibGVkLCBvcHRpb25zKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVtb3RlVmlkZW9UcmFjaywgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICdbUmVtb3RlVmlkZW9UcmFjayAjJyArIHRoaXMuX2luc3RhbmNlSWQgKyAnOiAnICsgdGhpcy5zaWQgKyAnXSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlbW90ZVZpZGVvVHJhY2s7XG59KFJlbW90ZU1lZGlhVmlkZW9UcmFjayk7XG5cbi8qKlxuICogVGhlIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrfSdzIGRpbWVuc2lvbnMgY2hhbmdlZC5cbiAqIEBwYXJhbSB7UmVtb3RlVmlkZW9UcmFja30gdHJhY2sgLSBUaGUge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9IHdob3NlXG4gKiAgIGRpbWVuc2lvbnMgY2hhbmdlZFxuICogQGV2ZW50IFJlbW90ZVZpZGVvVHJhY2sjZGltZW5zaW9uc0NoYW5nZWRcbiAqL1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30gd2FzIGRpc2FibGVkLCBpLmUuIFwicGF1c2VkXCIuXG4gKiBAcGFyYW0ge1JlbW90ZVZpZGVvVHJhY2t9IHRyYWNrIC0gVGhlIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrfSB0aGF0IHdhc1xuICogICBkaXNhYmxlZFxuICogQGV2ZW50IFJlbW90ZVZpZGVvVHJhY2sjZGlzYWJsZWRcbiAqL1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30gd2FzIGVuYWJsZWQsIGkuZS4gXCJ1bnBhdXNlZFwiLlxuICogQHBhcmFtIHtSZW1vdGVWaWRlb1RyYWNrfSB0cmFjayAtIFRoZSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30gdGhhdCB3YXNcbiAqICAgZW5hYmxlZFxuICogQGV2ZW50IFJlbW90ZVZpZGVvVHJhY2sjZW5hYmxlZFxuICovXG5cbi8qKlxuICogVGhlIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrfSB3YXMgdW5zdWJzY3JpYmVkIGZyb20uXG4gKiBAcGFyYW0ge1JlbW90ZVZpZGVvVHJhY2t9IHRyYWNrIC0gVGhlIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrfSB0aGF0IHdhc1xuICogICB1bnN1YnNjcmliZWQgZnJvbVxuICogQGV2ZW50IFJlbW90ZVZpZGVvVHJhY2sjdW5zdWJzY3JpYmVkXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIHBhcmVudCB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9ufSdzXG4gKiAgIFwidW5zdWJzY3JpYmVkXCIgZXZlbnQgaW5zdGVhZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVtb3RlVmlkZW9UcmFjaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L21lZGlhL3RyYWNrL3JlbW90ZXZpZGVvdHJhY2suanNcbi8vIG1vZHVsZSBpZCA9IDI5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///290\n");

/***/ }),
/* 291 */
/*!**********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/remotevideotrackpublication.js ***!
  \**********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteTrackPublication = __webpack_require__(/*! ./remotetrackpublication */ 226);\n\n/**\n * A {@link RemoteVideoTrackPublication} represents a {@link RemoteVideoTrack}\n * that has been published to a {@link Room}.\n * @property {Track.Kind} kind - \"video\"\n * @property {?RemoteVideoTrack} track - unless you have subscribed to the\n *   {@link RemoteVideoTrack}, this property is null\n * @emits RemoteVideoTrackPublication#subscribed\n * @emits RemoteVideoTrackPublication#trackDisabled\n * @emits RemoteVideoTrackPublication#trackEnabled\n * @emits RemoteVideoTrackPublication#unsubscribed\n */\n\nvar RemoteVideoTrackPublication = function (_RemoteTrackPublicati) {\n  _inherits(RemoteVideoTrackPublication, _RemoteTrackPublicati);\n\n  /**\n   * Construct a {@link RemoteVideoTrackPublication}.\n   * @param {RemoteTrackPublicationSignaling} signaling - {@link RemoteTrackPublication} signaling\n   * @param {RemoteTrackPublicationOptions} options - {@link RemoteTrackPublication}\n   *   options\n   */\n  function RemoteVideoTrackPublication(signaling, options) {\n    _classCallCheck(this, RemoteVideoTrackPublication);\n\n    return _possibleConstructorReturn(this, (RemoteVideoTrackPublication.__proto__ || Object.getPrototypeOf(RemoteVideoTrackPublication)).call(this, signaling, options));\n  }\n\n  _createClass(RemoteVideoTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteVideoTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return RemoteVideoTrackPublication;\n}(RemoteTrackPublication);\n\n/**\n * Your {@link LocalParticipant} subscribed to the {@link RemoteVideoTrack}.\n * @param {RemoteVideoTrack} track - the {@link RemoteVideoTrack} that was subscribed to\n * @event RemoteVideoTrackPublication#subscribed\n */\n\n/**\n * The {@link RemoteVideoTrack} was disabled.\n * @event RemoteVideoTrackPublication#trackDisabled\n */\n\n/**\n * The {@link RemoteVideoTrack} was enabled.\n * @event RemoteVideoTrackPublication#trackEnabled\n */\n\n/**\n * Your {@link LocalParticipant} unsubscribed from the {@link RemoteVideoTrack}.\n * @param {RemoteVideoTrack} track - the {@link RemoteVideoTrack} that was unsubscribed from\n * @event RemoteVideoTrackPublication#unsubscribed\n */\n\nmodule.exports = RemoteVideoTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGV2aWRlb3RyYWNrcHVibGljYXRpb24uanM/MDU1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSw2QkFBNkIsbUJBQU8sQ0FBQyxtQ0FBMEI7O0FBRS9EO0FBQ0EsTUFBTSxrQ0FBa0MsZUFBZTtBQUN2RCxpQ0FBaUMsV0FBVztBQUM1QyxjQUFjLFdBQVc7QUFDekIsY0FBYyxrQkFBa0I7QUFDaEMsTUFBTSx1QkFBdUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGtDQUFrQztBQUNwRCxhQUFhLGdDQUFnQyxjQUFjLDZCQUE2QjtBQUN4RixhQUFhLDhCQUE4QixZQUFZO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0EsU0FBUyx1QkFBdUIsb0JBQW9CLHVCQUF1QjtBQUMzRSxXQUFXLGlCQUFpQixjQUFjLHVCQUF1QjtBQUNqRTtBQUNBOztBQUVBO0FBQ0EsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTs7QUFFQTtBQUNBLFFBQVEsdUJBQXVCO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLHVCQUF1Qix3QkFBd0IsdUJBQXVCO0FBQy9FLFdBQVcsaUJBQWlCLGNBQWMsdUJBQXVCO0FBQ2pFO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjkxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZW1vdGVUcmFja1B1YmxpY2F0aW9uID0gcmVxdWlyZSgnLi9yZW1vdGV0cmFja3B1YmxpY2F0aW9uJyk7XG5cbi8qKlxuICogQSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9ufSByZXByZXNlbnRzIGEge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9XG4gKiB0aGF0IGhhcyBiZWVuIHB1Ymxpc2hlZCB0byBhIHtAbGluayBSb29tfS5cbiAqIEBwcm9wZXJ0eSB7VHJhY2suS2luZH0ga2luZCAtIFwidmlkZW9cIlxuICogQHByb3BlcnR5IHs/UmVtb3RlVmlkZW9UcmFja30gdHJhY2sgLSB1bmxlc3MgeW91IGhhdmUgc3Vic2NyaWJlZCB0byB0aGVcbiAqICAge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9LCB0aGlzIHByb3BlcnR5IGlzIG51bGxcbiAqIEBlbWl0cyBSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb24jc3Vic2NyaWJlZFxuICogQGVtaXRzIFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbiN0cmFja0Rpc2FibGVkXG4gKiBAZW1pdHMgUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9uI3RyYWNrRW5hYmxlZFxuICogQGVtaXRzIFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbiN1bnN1YnNjcmliZWRcbiAqL1xuXG52YXIgUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9uID0gZnVuY3Rpb24gKF9SZW1vdGVUcmFja1B1YmxpY2F0aSkge1xuICBfaW5oZXJpdHMoUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9uLCBfUmVtb3RlVHJhY2tQdWJsaWNhdGkpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9ufS5cbiAgICogQHBhcmFtIHtSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nfSBzaWduYWxpbmcgLSB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvbn0gc2lnbmFsaW5nXG4gICAqIEBwYXJhbSB7UmVtb3RlVHJhY2tQdWJsaWNhdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvbn1cbiAgICogICBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb24oc2lnbmFsaW5nLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbikpLmNhbGwodGhpcywgc2lnbmFsaW5nLCBvcHRpb25zKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVtb3RlVmlkZW9UcmFja1B1YmxpY2F0aW9uLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ1tSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb24gIycgKyB0aGlzLl9pbnN0YW5jZUlkICsgJzogJyArIHRoaXMudHJhY2tTaWQgKyAnXSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbjtcbn0oUmVtb3RlVHJhY2tQdWJsaWNhdGlvbik7XG5cbi8qKlxuICogWW91ciB7QGxpbmsgTG9jYWxQYXJ0aWNpcGFudH0gc3Vic2NyaWJlZCB0byB0aGUge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9LlxuICogQHBhcmFtIHtSZW1vdGVWaWRlb1RyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30gdGhhdCB3YXMgc3Vic2NyaWJlZCB0b1xuICogQGV2ZW50IFJlbW90ZVZpZGVvVHJhY2tQdWJsaWNhdGlvbiNzdWJzY3JpYmVkXG4gKi9cblxuLyoqXG4gKiBUaGUge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9IHdhcyBkaXNhYmxlZC5cbiAqIEBldmVudCBSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb24jdHJhY2tEaXNhYmxlZFxuICovXG5cbi8qKlxuICogVGhlIHtAbGluayBSZW1vdGVWaWRlb1RyYWNrfSB3YXMgZW5hYmxlZC5cbiAqIEBldmVudCBSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb24jdHJhY2tFbmFibGVkXG4gKi9cblxuLyoqXG4gKiBZb3VyIHtAbGluayBMb2NhbFBhcnRpY2lwYW50fSB1bnN1YnNjcmliZWQgZnJvbSB0aGUge0BsaW5rIFJlbW90ZVZpZGVvVHJhY2t9LlxuICogQHBhcmFtIHtSZW1vdGVWaWRlb1RyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgUmVtb3RlVmlkZW9UcmFja30gdGhhdCB3YXMgdW5zdWJzY3JpYmVkIGZyb21cbiAqIEBldmVudCBSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb24jdW5zdWJzY3JpYmVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdGVWaWRlb1RyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZW1vdGV2aWRlb3RyYWNrcHVibGljYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDI5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///291\n");

/***/ }),
/* 292 */
/*!*********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/localaudiotrackstats.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LocalTrackStats = __webpack_require__(/*! ./localtrackstats */ 247);\n\n/**\n * Statistics for a {@link LocalAudioTrack}.\n * @extends LocalTrackStats\n * @property {?AudioLevel} audioLevel - Input {@link AudioLevel}\n * @property {?number} jitter - Audio jitter in milliseconds\n */\n\nvar LocalAudioTrackStats = function (_LocalTrackStats) {\n  _inherits(LocalAudioTrackStats, _LocalTrackStats);\n\n  /**\n   * @param {string} trackId - {@link LocalAudioTrack} ID\n   * @param {StandardizedTrackStatsReport} statsReport\n   */\n  function LocalAudioTrackStats(trackId, statsReport) {\n    _classCallCheck(this, LocalAudioTrackStats);\n\n    var _this = _possibleConstructorReturn(this, (LocalAudioTrackStats.__proto__ || Object.getPrototypeOf(LocalAudioTrackStats)).call(this, trackId, statsReport));\n\n    Object.defineProperties(_this, {\n      audioLevel: {\n        value: typeof statsReport.audioInputLevel === 'number' ? statsReport.audioInputLevel : null,\n        enumerable: true\n      },\n      jitter: {\n        value: typeof statsReport.jitter === 'number' ? statsReport.jitter : null,\n        enumerable: true\n      }\n    });\n    return _this;\n  }\n\n  return LocalAudioTrackStats;\n}(LocalTrackStats);\n\n/**\n * The maximum absolute amplitude of a set of audio samples in the\n * range of 0 to 32767 inclusive.\n * @typedef {number} AudioLevel\n */\n\nmodule.exports = LocalAudioTrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9sb2NhbGF1ZGlvdHJhY2tzdGF0cy5qcz9lOTNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsc0JBQXNCLG1CQUFPLENBQUMsNEJBQW1COztBQUVqRDtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQSxjQUFjLFlBQVkscUJBQXFCO0FBQy9DLGNBQWMsUUFBUTtBQUN0Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxPQUFPLFlBQVksc0JBQXNCO0FBQ3RELGFBQWEsNkJBQTZCO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7O0FBRUEiLCJmaWxlIjoiMjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMb2NhbFRyYWNrU3RhdHMgPSByZXF1aXJlKCcuL2xvY2FsdHJhY2tzdGF0cycpO1xuXG4vKipcbiAqIFN0YXRpc3RpY3MgZm9yIGEge0BsaW5rIExvY2FsQXVkaW9UcmFja30uXG4gKiBAZXh0ZW5kcyBMb2NhbFRyYWNrU3RhdHNcbiAqIEBwcm9wZXJ0eSB7P0F1ZGlvTGV2ZWx9IGF1ZGlvTGV2ZWwgLSBJbnB1dCB7QGxpbmsgQXVkaW9MZXZlbH1cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gaml0dGVyIC0gQXVkaW8gaml0dGVyIGluIG1pbGxpc2Vjb25kc1xuICovXG5cbnZhciBMb2NhbEF1ZGlvVHJhY2tTdGF0cyA9IGZ1bmN0aW9uIChfTG9jYWxUcmFja1N0YXRzKSB7XG4gIF9pbmhlcml0cyhMb2NhbEF1ZGlvVHJhY2tTdGF0cywgX0xvY2FsVHJhY2tTdGF0cyk7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFja0lkIC0ge0BsaW5rIExvY2FsQXVkaW9UcmFja30gSURcbiAgICogQHBhcmFtIHtTdGFuZGFyZGl6ZWRUcmFja1N0YXRzUmVwb3J0fSBzdGF0c1JlcG9ydFxuICAgKi9cbiAgZnVuY3Rpb24gTG9jYWxBdWRpb1RyYWNrU3RhdHModHJhY2tJZCwgc3RhdHNSZXBvcnQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxBdWRpb1RyYWNrU3RhdHMpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExvY2FsQXVkaW9UcmFja1N0YXRzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9jYWxBdWRpb1RyYWNrU3RhdHMpKS5jYWxsKHRoaXMsIHRyYWNrSWQsIHN0YXRzUmVwb3J0KSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgYXVkaW9MZXZlbDoge1xuICAgICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LmF1ZGlvSW5wdXRMZXZlbCA9PT0gJ251bWJlcicgPyBzdGF0c1JlcG9ydC5hdWRpb0lucHV0TGV2ZWwgOiBudWxsLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgaml0dGVyOiB7XG4gICAgICAgIHZhbHVlOiB0eXBlb2Ygc3RhdHNSZXBvcnQuaml0dGVyID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LmppdHRlciA6IG51bGwsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gTG9jYWxBdWRpb1RyYWNrU3RhdHM7XG59KExvY2FsVHJhY2tTdGF0cyk7XG5cbi8qKlxuICogVGhlIG1heGltdW0gYWJzb2x1dGUgYW1wbGl0dWRlIG9mIGEgc2V0IG9mIGF1ZGlvIHNhbXBsZXMgaW4gdGhlXG4gKiByYW5nZSBvZiAwIHRvIDMyNzY3IGluY2x1c2l2ZS5cbiAqIEB0eXBlZGVmIHtudW1iZXJ9IEF1ZGlvTGV2ZWxcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsQXVkaW9UcmFja1N0YXRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc3RhdHMvbG9jYWxhdWRpb3RyYWNrc3RhdHMuanNcbi8vIG1vZHVsZSBpZCA9IDI5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///292\n");

/***/ }),
/* 293 */
/*!*********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/localvideotrackstats.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LocalTrackStats = __webpack_require__(/*! ./localtrackstats */ 247);\n\n/**\n * Statistics for a {@link LocalVideoTrack}.\n * @extends LocalTrackStats\n * @property {?VideoTrack#Dimensions} captureDimensions - Video capture resolution\n * @property {?VideoTrack#Dimensions} dimensions - Video encoding resolution\n * @property {?number} captureFrameRate - Video capture frame rate\n * @property {?number} frameRate - Video encoding frame rate\n */\n\nvar LocalVideoTrackStats = function (_LocalTrackStats) {\n  _inherits(LocalVideoTrackStats, _LocalTrackStats);\n\n  /**\n   * @param {string} trackId - {@link LocalVideoTrack} ID\n   * @param {StandardizedTrackStatsReport} statsReport\n   */\n  function LocalVideoTrackStats(trackId, statsReport) {\n    _classCallCheck(this, LocalVideoTrackStats);\n\n    var _this = _possibleConstructorReturn(this, (LocalVideoTrackStats.__proto__ || Object.getPrototypeOf(LocalVideoTrackStats)).call(this, trackId, statsReport));\n\n    var captureDimensions = null;\n    if (typeof statsReport.frameWidthInput === 'number' && typeof statsReport.frameHeightInput === 'number') {\n      captureDimensions = {};\n\n      Object.defineProperties(captureDimensions, {\n        width: {\n          value: statsReport.frameWidthInput,\n          enumerable: true\n        },\n        height: {\n          value: statsReport.frameHeightInput,\n          enumerable: true\n        }\n      });\n    }\n\n    var dimensions = null;\n    if (typeof statsReport.frameWidthSent === 'number' && typeof statsReport.frameHeightSent === 'number') {\n      dimensions = {};\n\n      Object.defineProperties(dimensions, {\n        width: {\n          value: statsReport.frameWidthSent,\n          enumerable: true\n        },\n        height: {\n          value: statsReport.frameHeightSent,\n          enumerable: true\n        }\n      });\n    }\n\n    Object.defineProperties(_this, {\n      captureDimensions: {\n        value: captureDimensions,\n        enumerable: true\n      },\n      dimensions: {\n        value: dimensions,\n        enumerable: true\n      },\n      captureFrameRate: {\n        value: typeof statsReport.frameRateInput === 'number' ? statsReport.frameRateInput : null,\n        enumerable: true\n      },\n      frameRate: {\n        value: typeof statsReport.frameRateSent === 'number' ? statsReport.frameRateSent : null,\n        enumerable: true\n      }\n    });\n    return _this;\n  }\n\n  return LocalVideoTrackStats;\n}(LocalTrackStats);\n\nmodule.exports = LocalVideoTrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9sb2NhbHZpZGVvdHJhY2tzdGF0cy5qcz85NDk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsc0JBQXNCLG1CQUFPLENBQUMsNEJBQW1COztBQUVqRDtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQSxjQUFjLHVCQUF1QjtBQUNyQyxjQUFjLHVCQUF1QjtBQUNyQyxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE9BQU8sWUFBWSxzQkFBc0I7QUFDdEQsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyOTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvY2FsVHJhY2tTdGF0cyA9IHJlcXVpcmUoJy4vbG9jYWx0cmFja3N0YXRzJyk7XG5cbi8qKlxuICogU3RhdGlzdGljcyBmb3IgYSB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrfS5cbiAqIEBleHRlbmRzIExvY2FsVHJhY2tTdGF0c1xuICogQHByb3BlcnR5IHs/VmlkZW9UcmFjayNEaW1lbnNpb25zfSBjYXB0dXJlRGltZW5zaW9ucyAtIFZpZGVvIGNhcHR1cmUgcmVzb2x1dGlvblxuICogQHByb3BlcnR5IHs/VmlkZW9UcmFjayNEaW1lbnNpb25zfSBkaW1lbnNpb25zIC0gVmlkZW8gZW5jb2RpbmcgcmVzb2x1dGlvblxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBjYXB0dXJlRnJhbWVSYXRlIC0gVmlkZW8gY2FwdHVyZSBmcmFtZSByYXRlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGZyYW1lUmF0ZSAtIFZpZGVvIGVuY29kaW5nIGZyYW1lIHJhdGVcbiAqL1xuXG52YXIgTG9jYWxWaWRlb1RyYWNrU3RhdHMgPSBmdW5jdGlvbiAoX0xvY2FsVHJhY2tTdGF0cykge1xuICBfaW5oZXJpdHMoTG9jYWxWaWRlb1RyYWNrU3RhdHMsIF9Mb2NhbFRyYWNrU3RhdHMpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2tJZCAtIHtAbGluayBMb2NhbFZpZGVvVHJhY2t9IElEXG4gICAqIEBwYXJhbSB7U3RhbmRhcmRpemVkVHJhY2tTdGF0c1JlcG9ydH0gc3RhdHNSZXBvcnRcbiAgICovXG4gIGZ1bmN0aW9uIExvY2FsVmlkZW9UcmFja1N0YXRzKHRyYWNrSWQsIHN0YXRzUmVwb3J0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsVmlkZW9UcmFja1N0YXRzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbFZpZGVvVHJhY2tTdGF0cy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvY2FsVmlkZW9UcmFja1N0YXRzKSkuY2FsbCh0aGlzLCB0cmFja0lkLCBzdGF0c1JlcG9ydCkpO1xuXG4gICAgdmFyIGNhcHR1cmVEaW1lbnNpb25zID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHN0YXRzUmVwb3J0LmZyYW1lV2lkdGhJbnB1dCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHN0YXRzUmVwb3J0LmZyYW1lSGVpZ2h0SW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICBjYXB0dXJlRGltZW5zaW9ucyA9IHt9O1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYXB0dXJlRGltZW5zaW9ucywge1xuICAgICAgICB3aWR0aDoge1xuICAgICAgICAgIHZhbHVlOiBzdGF0c1JlcG9ydC5mcmFtZVdpZHRoSW5wdXQsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBoZWlnaHQ6IHtcbiAgICAgICAgICB2YWx1ZTogc3RhdHNSZXBvcnQuZnJhbWVIZWlnaHRJbnB1dCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBkaW1lbnNpb25zID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHN0YXRzUmVwb3J0LmZyYW1lV2lkdGhTZW50ID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygc3RhdHNSZXBvcnQuZnJhbWVIZWlnaHRTZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgZGltZW5zaW9ucyA9IHt9O1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhkaW1lbnNpb25zLCB7XG4gICAgICAgIHdpZHRoOiB7XG4gICAgICAgICAgdmFsdWU6IHN0YXRzUmVwb3J0LmZyYW1lV2lkdGhTZW50LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgaGVpZ2h0OiB7XG4gICAgICAgICAgdmFsdWU6IHN0YXRzUmVwb3J0LmZyYW1lSGVpZ2h0U2VudCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBjYXB0dXJlRGltZW5zaW9uczoge1xuICAgICAgICB2YWx1ZTogY2FwdHVyZURpbWVuc2lvbnMsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBkaW1lbnNpb25zOiB7XG4gICAgICAgIHZhbHVlOiBkaW1lbnNpb25zLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgY2FwdHVyZUZyYW1lUmF0ZToge1xuICAgICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LmZyYW1lUmF0ZUlucHV0ID09PSAnbnVtYmVyJyA/IHN0YXRzUmVwb3J0LmZyYW1lUmF0ZUlucHV0IDogbnVsbCxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LmZyYW1lUmF0ZVNlbnQgPT09ICdudW1iZXInID8gc3RhdHNSZXBvcnQuZnJhbWVSYXRlU2VudCA6IG51bGwsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gTG9jYWxWaWRlb1RyYWNrU3RhdHM7XG59KExvY2FsVHJhY2tTdGF0cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxWaWRlb1RyYWNrU3RhdHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9sb2NhbHZpZGVvdHJhY2tzdGF0cy5qc1xuLy8gbW9kdWxlIGlkID0gMjkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///293\n");

/***/ }),
/* 294 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/remoteaudiotrackstats.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteTrackStats = __webpack_require__(/*! ./remotetrackstats */ 249);\n\n/**\n * Statistics for an {@link AudioTrack}.\n * @extends RemoteTrackStats\n * @property {?AudioLevel} audioLevel - Output {@link AudioLevel}\n * @property {?number} jitter - Audio jitter in milliseconds\n */\n\nvar RemoteAudioTrackStats = function (_RemoteTrackStats) {\n  _inherits(RemoteAudioTrackStats, _RemoteTrackStats);\n\n  /**\n   * @param {string} trackId - {@link AudioTrack} ID\n   * @param {StandardizedTrackStatsReport} statsReport\n   */\n  function RemoteAudioTrackStats(trackId, statsReport) {\n    _classCallCheck(this, RemoteAudioTrackStats);\n\n    var _this = _possibleConstructorReturn(this, (RemoteAudioTrackStats.__proto__ || Object.getPrototypeOf(RemoteAudioTrackStats)).call(this, trackId, statsReport));\n\n    Object.defineProperties(_this, {\n      audioLevel: {\n        value: typeof statsReport.audioOutputLevel === 'number' ? statsReport.audioOutputLevel : null,\n        enumerable: true\n      },\n      jitter: {\n        value: typeof statsReport.jitter === 'number' ? statsReport.jitter : null,\n        enumerable: true\n      }\n    });\n    return _this;\n  }\n\n  return RemoteAudioTrackStats;\n}(RemoteTrackStats);\n\nmodule.exports = RemoteAudioTrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9yZW1vdGVhdWRpb3RyYWNrc3RhdHMuanM/OGUyYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLHVCQUF1QixtQkFBTyxDQUFDLDZCQUFvQjs7QUFFbkQ7QUFDQSxzQkFBc0IsaUJBQWlCO0FBQ3ZDO0FBQ0EsY0FBYyxZQUFZLHNCQUFzQjtBQUNoRCxjQUFjLFFBQVE7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGFBQWEsT0FBTyxZQUFZLGlCQUFpQjtBQUNqRCxhQUFhLDZCQUE2QjtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMjk0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZW1vdGVUcmFja1N0YXRzID0gcmVxdWlyZSgnLi9yZW1vdGV0cmFja3N0YXRzJyk7XG5cbi8qKlxuICogU3RhdGlzdGljcyBmb3IgYW4ge0BsaW5rIEF1ZGlvVHJhY2t9LlxuICogQGV4dGVuZHMgUmVtb3RlVHJhY2tTdGF0c1xuICogQHByb3BlcnR5IHs/QXVkaW9MZXZlbH0gYXVkaW9MZXZlbCAtIE91dHB1dCB7QGxpbmsgQXVkaW9MZXZlbH1cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gaml0dGVyIC0gQXVkaW8gaml0dGVyIGluIG1pbGxpc2Vjb25kc1xuICovXG5cbnZhciBSZW1vdGVBdWRpb1RyYWNrU3RhdHMgPSBmdW5jdGlvbiAoX1JlbW90ZVRyYWNrU3RhdHMpIHtcbiAgX2luaGVyaXRzKFJlbW90ZUF1ZGlvVHJhY2tTdGF0cywgX1JlbW90ZVRyYWNrU3RhdHMpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2tJZCAtIHtAbGluayBBdWRpb1RyYWNrfSBJRFxuICAgKiBAcGFyYW0ge1N0YW5kYXJkaXplZFRyYWNrU3RhdHNSZXBvcnR9IHN0YXRzUmVwb3J0XG4gICAqL1xuICBmdW5jdGlvbiBSZW1vdGVBdWRpb1RyYWNrU3RhdHModHJhY2tJZCwgc3RhdHNSZXBvcnQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVtb3RlQXVkaW9UcmFja1N0YXRzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZW1vdGVBdWRpb1RyYWNrU3RhdHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVBdWRpb1RyYWNrU3RhdHMpKS5jYWxsKHRoaXMsIHRyYWNrSWQsIHN0YXRzUmVwb3J0KSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgYXVkaW9MZXZlbDoge1xuICAgICAgICB2YWx1ZTogdHlwZW9mIHN0YXRzUmVwb3J0LmF1ZGlvT3V0cHV0TGV2ZWwgPT09ICdudW1iZXInID8gc3RhdHNSZXBvcnQuYXVkaW9PdXRwdXRMZXZlbCA6IG51bGwsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBqaXR0ZXI6IHtcbiAgICAgICAgdmFsdWU6IHR5cGVvZiBzdGF0c1JlcG9ydC5qaXR0ZXIgPT09ICdudW1iZXInID8gc3RhdHNSZXBvcnQuaml0dGVyIDogbnVsbCxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBSZW1vdGVBdWRpb1RyYWNrU3RhdHM7XG59KFJlbW90ZVRyYWNrU3RhdHMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW90ZUF1ZGlvVHJhY2tTdGF0cztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3N0YXRzL3JlbW90ZWF1ZGlvdHJhY2tzdGF0cy5qc1xuLy8gbW9kdWxlIGlkID0gMjk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///294\n");

/***/ }),
/* 295 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/remotevideotrackstats.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteTrackStats = __webpack_require__(/*! ./remotetrackstats */ 249);\n\n/**\n * Statistics for a {@link VideoTrack}.\n * @extends RemoteTrackStats\n * @property {?VideoTrack#Dimensions} dimensions - Received video resolution\n * @property {?number} frameRate - Received video frame rate\n */\n\nvar RemoteVideoTrackStats = function (_RemoteTrackStats) {\n  _inherits(RemoteVideoTrackStats, _RemoteTrackStats);\n\n  /**\n   * @param {string} trackId - {@link VideoTrack} ID\n   * @param {StandardizedTrackStatsReport} statsReport\n   */\n  function RemoteVideoTrackStats(trackId, statsReport) {\n    _classCallCheck(this, RemoteVideoTrackStats);\n\n    var _this = _possibleConstructorReturn(this, (RemoteVideoTrackStats.__proto__ || Object.getPrototypeOf(RemoteVideoTrackStats)).call(this, trackId, statsReport));\n\n    var dimensions = null;\n    if (typeof statsReport.frameWidthReceived === 'number' && typeof statsReport.frameHeightReceived === 'number') {\n      dimensions = {};\n\n      Object.defineProperties(dimensions, {\n        width: {\n          value: statsReport.frameWidthReceived,\n          enumerable: true\n        },\n        height: {\n          value: statsReport.frameHeightReceived,\n          enumerable: true\n        }\n      });\n    }\n\n    Object.defineProperties(_this, {\n      dimensions: {\n        value: dimensions,\n        enumerable: true\n      },\n      frameRate: {\n        value: typeof statsReport.frameRateReceived === 'number' ? statsReport.frameRateReceived : null,\n        enumerable: true\n      }\n    });\n    return _this;\n  }\n\n  return RemoteVideoTrackStats;\n}(RemoteTrackStats);\n\nmodule.exports = RemoteVideoTrackStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9yZW1vdGV2aWRlb3RyYWNrc3RhdHMuanM/N2M2YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLHVCQUF1QixtQkFBTyxDQUFDLDZCQUFvQjs7QUFFbkQ7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0EsY0FBYyx1QkFBdUI7QUFDckMsY0FBYyxRQUFRO0FBQ3RCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE9BQU8sWUFBWSxpQkFBaUI7QUFDakQsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyOTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlbW90ZVRyYWNrU3RhdHMgPSByZXF1aXJlKCcuL3JlbW90ZXRyYWNrc3RhdHMnKTtcblxuLyoqXG4gKiBTdGF0aXN0aWNzIGZvciBhIHtAbGluayBWaWRlb1RyYWNrfS5cbiAqIEBleHRlbmRzIFJlbW90ZVRyYWNrU3RhdHNcbiAqIEBwcm9wZXJ0eSB7P1ZpZGVvVHJhY2sjRGltZW5zaW9uc30gZGltZW5zaW9ucyAtIFJlY2VpdmVkIHZpZGVvIHJlc29sdXRpb25cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gZnJhbWVSYXRlIC0gUmVjZWl2ZWQgdmlkZW8gZnJhbWUgcmF0ZVxuICovXG5cbnZhciBSZW1vdGVWaWRlb1RyYWNrU3RhdHMgPSBmdW5jdGlvbiAoX1JlbW90ZVRyYWNrU3RhdHMpIHtcbiAgX2luaGVyaXRzKFJlbW90ZVZpZGVvVHJhY2tTdGF0cywgX1JlbW90ZVRyYWNrU3RhdHMpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2tJZCAtIHtAbGluayBWaWRlb1RyYWNrfSBJRFxuICAgKiBAcGFyYW0ge1N0YW5kYXJkaXplZFRyYWNrU3RhdHNSZXBvcnR9IHN0YXRzUmVwb3J0XG4gICAqL1xuICBmdW5jdGlvbiBSZW1vdGVWaWRlb1RyYWNrU3RhdHModHJhY2tJZCwgc3RhdHNSZXBvcnQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVtb3RlVmlkZW9UcmFja1N0YXRzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZW1vdGVWaWRlb1RyYWNrU3RhdHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVWaWRlb1RyYWNrU3RhdHMpKS5jYWxsKHRoaXMsIHRyYWNrSWQsIHN0YXRzUmVwb3J0KSk7XG5cbiAgICB2YXIgZGltZW5zaW9ucyA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBzdGF0c1JlcG9ydC5mcmFtZVdpZHRoUmVjZWl2ZWQgPT09ICdudW1iZXInICYmIHR5cGVvZiBzdGF0c1JlcG9ydC5mcmFtZUhlaWdodFJlY2VpdmVkID09PSAnbnVtYmVyJykge1xuICAgICAgZGltZW5zaW9ucyA9IHt9O1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhkaW1lbnNpb25zLCB7XG4gICAgICAgIHdpZHRoOiB7XG4gICAgICAgICAgdmFsdWU6IHN0YXRzUmVwb3J0LmZyYW1lV2lkdGhSZWNlaXZlZCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGhlaWdodDoge1xuICAgICAgICAgIHZhbHVlOiBzdGF0c1JlcG9ydC5mcmFtZUhlaWdodFJlY2VpdmVkLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgICAgdmFsdWU6IGRpbWVuc2lvbnMsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBmcmFtZVJhdGU6IHtcbiAgICAgICAgdmFsdWU6IHR5cGVvZiBzdGF0c1JlcG9ydC5mcmFtZVJhdGVSZWNlaXZlZCA9PT0gJ251bWJlcicgPyBzdGF0c1JlcG9ydC5mcmFtZVJhdGVSZWNlaXZlZCA6IG51bGwsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gUmVtb3RlVmlkZW9UcmFja1N0YXRzO1xufShSZW1vdGVUcmFja1N0YXRzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdGVWaWRlb1RyYWNrU3RhdHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9yZW1vdGV2aWRlb3RyYWNrc3RhdHMuanNcbi8vIG1vZHVsZSBpZCA9IDI5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///295\n");

/***/ }),
/* 296 */
/*!***********************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/twilioerror.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @extends Error\n * @property {number} code - Error code\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TwilioError = function (_Error) {\n  _inherits(TwilioError, _Error);\n\n  /**\n   * Creates a new {@link TwilioError}\n   * @param {number} code - Error code\n   * @param {string} [message] - Error message\n   * @param {string} [fileName] - Name of the script file where error was generated\n   * @param {number} [lineNumber] - Line number of the script file where error was generated\n   */\n  function TwilioError(code) {\n    var _ref;\n\n    _classCallCheck(this, TwilioError);\n\n    var args = [].slice.call(arguments, 1);\n\n    var _this = _possibleConstructorReturn(this, (_ref = TwilioError.__proto__ || Object.getPrototypeOf(TwilioError)).call.apply(_ref, [this].concat(_toConsumableArray(args))));\n\n    var error = Error.apply(_this, args);\n    error.name = 'TwilioError';\n\n    Object.defineProperty(_this, 'code', {\n      value: code,\n      enumerable: true\n    });\n\n    Object.getOwnPropertyNames(error).forEach(function (prop) {\n      Object.defineProperty(this, prop, {\n        value: error[prop],\n        enumerable: true\n      });\n    }, _this);\n    return _this;\n  }\n\n  /**\n   * Returns human readable string describing the error.\n   * @returns {string}\n   */\n\n\n  _createClass(TwilioError, [{\n    key: 'toString',\n    value: function toString() {\n      var message = this.message ? ': ' + this.message : '';\n      return this.name + ' ' + this.code + message;\n    }\n  }]);\n\n  return TwilioError;\n}(Error);\n\nmodule.exports = TwilioError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL3R3aWxpb2Vycm9yLmpzP2UzNGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjs7QUFFQSxnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsa0NBQWtDLDBCQUEwQiwwQ0FBMEMsZ0JBQWdCLE9BQU8sa0JBQWtCLEVBQUUsYUFBYSxFQUFFLE9BQU8sd0JBQXdCLEVBQUU7O0FBRWpNLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWU7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIyOTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGV4dGVuZHMgRXJyb3JcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2RlIC0gRXJyb3IgY29kZVxuICovXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUd2lsaW9FcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKFR3aWxpb0Vycm9yLCBfRXJyb3IpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHtAbGluayBUd2lsaW9FcnJvcn1cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvZGUgLSBFcnJvciBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV0gLSBFcnJvciBtZXNzYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZU5hbWVdIC0gTmFtZSBvZiB0aGUgc2NyaXB0IGZpbGUgd2hlcmUgZXJyb3Igd2FzIGdlbmVyYXRlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbmVOdW1iZXJdIC0gTGluZSBudW1iZXIgb2YgdGhlIHNjcmlwdCBmaWxlIHdoZXJlIGVycm9yIHdhcyBnZW5lcmF0ZWRcbiAgICovXG4gIGZ1bmN0aW9uIFR3aWxpb0Vycm9yKGNvZGUpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUd2lsaW9FcnJvcik7XG5cbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gVHdpbGlvRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUd2lsaW9FcnJvcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKSk7XG5cbiAgICB2YXIgZXJyb3IgPSBFcnJvci5hcHBseShfdGhpcywgYXJncyk7XG4gICAgZXJyb3IubmFtZSA9ICdUd2lsaW9FcnJvcic7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMsICdjb2RlJywge1xuICAgICAgdmFsdWU6IGNvZGUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlcnJvcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3AsIHtcbiAgICAgICAgdmFsdWU6IGVycm9yW3Byb3BdLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LCBfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaHVtYW4gcmVhZGFibGUgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIGVycm9yLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhUd2lsaW9FcnJvciwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJyc7XG4gICAgICByZXR1cm4gdGhpcy5uYW1lICsgJyAnICsgdGhpcy5jb2RlICsgbWVzc2FnZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHdpbGlvRXJyb3I7XG59KEVycm9yKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUd2lsaW9FcnJvcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3V0aWwvdHdpbGlvZXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDI5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///296\n");

/***/ }),
/* 297 */
/*!*************************************************************!*\
  !*** ./node_modules/twilio-video/es5/encodingparameters.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\n\nvar EncodingParametersImpl = function (_EventEmitter) {\n  _inherits(EncodingParametersImpl, _EventEmitter);\n\n  /**\n   * Construct an {@link EncodingParametersImpl}.\n   * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n   */\n  function EncodingParametersImpl(encodingParameters) {\n    _classCallCheck(this, EncodingParametersImpl);\n\n    var _this = _possibleConstructorReturn(this, (EncodingParametersImpl.__proto__ || Object.getPrototypeOf(EncodingParametersImpl)).call(this));\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: null,\n      maxVideoBitrate: null\n    }, encodingParameters);\n\n    Object.defineProperties(_this, {\n      maxAudioBitrate: {\n        value: encodingParameters.maxAudioBitrate,\n        writable: true\n      },\n      maxVideoBitrate: {\n        value: encodingParameters.maxVideoBitrate,\n        writable: true\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Returns the bitrate values in an {@link EncodingParameters}.\n   * @returns {EncodingParameters}\n   */\n\n\n  _createClass(EncodingParametersImpl, [{\n    key: 'toJSON',\n    value: function toJSON() {\n      return {\n        maxAudioBitrate: this.maxAudioBitrate,\n        maxVideoBitrate: this.maxVideoBitrate\n      };\n    }\n\n    /**\n     * Update the bitrate values with those in the given {@link EncodingParameters}.\n     * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n     * @fires EncodingParametersImpl#changed\n     */\n\n  }, {\n    key: 'update',\n    value: function update(encodingParameters) {\n      var _this2 = this;\n\n      encodingParameters = Object.assign({\n        maxAudioBitrate: this.maxAudioBitrate,\n        maxVideoBitrate: this.maxVideoBitrate\n      }, encodingParameters);\n\n      var shouldEmitChanged = ['maxAudioBitrate', 'maxVideoBitrate'].reduce(function (shouldEmitChanged, maxKindBitrate) {\n        if (_this2[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n          _this2[maxKindBitrate] = encodingParameters[maxKindBitrate];\n          shouldEmitChanged = true;\n        }\n        return shouldEmitChanged;\n      }, false);\n\n      if (shouldEmitChanged) {\n        this.emit('changed');\n      }\n    }\n  }]);\n\n  return EncodingParametersImpl;\n}(EventEmitter);\n\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\n\nmodule.exports = EncodingParametersImpl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9lbmNvZGluZ3BhcmFtZXRlcnMuanM/YTdlMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSxtQkFBbUIsbUJBQU8sQ0FBQyxpQkFBUTs7QUFFbkM7QUFDQSxJQUFJLDZCQUE2QjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQiw2QkFBNkI7QUFDaEQsYUFBYSxrQkFBa0IsK0JBQStCO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUMseUJBQXlCO0FBQ2hFLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBEQUEwRCx5QkFBeUI7QUFDbkYsZUFBZSxtQkFBbUIsK0JBQStCO0FBQ2pFO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTs7QUFFQSIsImZpbGUiOiIyOTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuLyoqXG4gKiB7QGxpbmsgRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbH0gcmVwcmVzZW50cyBhbiBvYmplY3Qgd2hpY2ggbm90aWZpZXMgaXRzXG4gKiBsaXN0ZW5lcnMgb2YgYW55IGNoYW5nZXMgaW4gdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcy5cbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICogQGltcGxlbWVudHMgRW5jb2RpbmdQYXJhbWV0ZXJzXG4gKiBAZW1pdHMgRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbCNjaGFuZ2VkXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IG1heEF1ZGlvQml0cmF0ZVxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBtYXhWaWRlb0JpdHJhdGVcbiAqL1xuXG52YXIgRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbCA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhFbmNvZGluZ1BhcmFtZXRlcnNJbXBsLCBfRXZlbnRFbWl0dGVyKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGFuIHtAbGluayBFbmNvZGluZ1BhcmFtZXRlcnNJbXBsfS5cbiAgICogQHBhcmFtIHtFbmNvZGluZ1BhcmFtdGVyc30gZW5jb2RpbmdQYXJhbWV0ZXJzIC0gSW5pdGlhbCB7QGxpbmsgRW5jb2RpbmdQYXJhbWV0ZXJzfVxuICAgKi9cbiAgZnVuY3Rpb24gRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbChlbmNvZGluZ1BhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEVuY29kaW5nUGFyYW1ldGVyc0ltcGwpKS5jYWxsKHRoaXMpKTtcblxuICAgIGVuY29kaW5nUGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgbWF4QXVkaW9CaXRyYXRlOiBudWxsLFxuICAgICAgbWF4VmlkZW9CaXRyYXRlOiBudWxsXG4gICAgfSwgZW5jb2RpbmdQYXJhbWV0ZXJzKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBtYXhBdWRpb0JpdHJhdGU6IHtcbiAgICAgICAgdmFsdWU6IGVuY29kaW5nUGFyYW1ldGVycy5tYXhBdWRpb0JpdHJhdGUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWF4VmlkZW9CaXRyYXRlOiB7XG4gICAgICAgIHZhbHVlOiBlbmNvZGluZ1BhcmFtZXRlcnMubWF4VmlkZW9CaXRyYXRlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBiaXRyYXRlIHZhbHVlcyBpbiBhbiB7QGxpbmsgRW5jb2RpbmdQYXJhbWV0ZXJzfS5cbiAgICogQHJldHVybnMge0VuY29kaW5nUGFyYW1ldGVyc31cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbCwgW3tcbiAgICBrZXk6ICd0b0pTT04nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXhBdWRpb0JpdHJhdGU6IHRoaXMubWF4QXVkaW9CaXRyYXRlLFxuICAgICAgICBtYXhWaWRlb0JpdHJhdGU6IHRoaXMubWF4VmlkZW9CaXRyYXRlXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgYml0cmF0ZSB2YWx1ZXMgd2l0aCB0aG9zZSBpbiB0aGUgZ2l2ZW4ge0BsaW5rIEVuY29kaW5nUGFyYW1ldGVyc30uXG4gICAgICogQHBhcmFtIHtFbmNvZGluZ1BhcmFtZXRlcnN9IGVuY29kaW5nUGFyYW1ldGVycyAtIFRoZSBuZXcge0BsaW5rIEVuY29kaW5nUGFyYW1ldGVyc31cbiAgICAgKiBAZmlyZXMgRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbCNjaGFuZ2VkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShlbmNvZGluZ1BhcmFtZXRlcnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBlbmNvZGluZ1BhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWF4QXVkaW9CaXRyYXRlOiB0aGlzLm1heEF1ZGlvQml0cmF0ZSxcbiAgICAgICAgbWF4VmlkZW9CaXRyYXRlOiB0aGlzLm1heFZpZGVvQml0cmF0ZVxuICAgICAgfSwgZW5jb2RpbmdQYXJhbWV0ZXJzKTtcblxuICAgICAgdmFyIHNob3VsZEVtaXRDaGFuZ2VkID0gWydtYXhBdWRpb0JpdHJhdGUnLCAnbWF4VmlkZW9CaXRyYXRlJ10ucmVkdWNlKGZ1bmN0aW9uIChzaG91bGRFbWl0Q2hhbmdlZCwgbWF4S2luZEJpdHJhdGUpIHtcbiAgICAgICAgaWYgKF90aGlzMlttYXhLaW5kQml0cmF0ZV0gIT09IGVuY29kaW5nUGFyYW1ldGVyc1ttYXhLaW5kQml0cmF0ZV0pIHtcbiAgICAgICAgICBfdGhpczJbbWF4S2luZEJpdHJhdGVdID0gZW5jb2RpbmdQYXJhbWV0ZXJzW21heEtpbmRCaXRyYXRlXTtcbiAgICAgICAgICBzaG91bGRFbWl0Q2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3VsZEVtaXRDaGFuZ2VkO1xuICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICBpZiAoc2hvdWxkRW1pdENoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGFuZ2VkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVuY29kaW5nUGFyYW1ldGVyc0ltcGw7XG59KEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogQXQgbGVhc3Qgb25lIG9mIHRoZSB7QGxpbmsgRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbH0ncyBiaXRyYXRlIHZhbHVlcyBjaGFuZ2VkLlxuICogQGV2ZW50IEVuY29kaW5nUGFyYW1ldGVyc0ltcGwjY2hhbmdlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRW5jb2RpbmdQYXJhbWV0ZXJzSW1wbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L2VuY29kaW5ncGFyYW1ldGVycy5qc1xuLy8gbW9kdWxlIGlkID0gMjk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///297\n");

/***/ }),
/* 298 */
/*!***********************************************************!*\
  !*** ./node_modules/twilio-video/es5/localparticipant.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar util = __webpack_require__(/*! ./util */ 206);\nvar E = __webpack_require__(/*! ./util/constants */ 208).typeErrors;\nvar LocalAudioTrack = __webpack_require__(/*! ./media/track/es5/localaudiotrack */ 216);\nvar LocalDataTrack = __webpack_require__(/*! ./media/track/es5/localdatatrack */ 217);\nvar LocalVideoTrack = __webpack_require__(/*! ./media/track/es5/localvideotrack */ 218);\nvar MediaStreamTrack = __webpack_require__(/*! @twilio/webrtc */ 212).MediaStreamTrack;\nvar Participant = __webpack_require__(/*! ./participant */ 243);\nvar LocalAudioTrackPublication = __webpack_require__(/*! ./media/track/localaudiotrackpublication */ 299);\nvar LocalDataTrackPublication = __webpack_require__(/*! ./media/track/localdatatrackpublication */ 300);\nvar LocalVideoTrackPublication = __webpack_require__(/*! ./media/track/localvideotrackpublication */ 301);\n\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTrackPublications -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.ID, LocalAudioTrack>} audioTracks -\n *   The {@link LocalParticipant}'s {@link LocalAudioTrack}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTrackPublications -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.ID, LocalDataTrack>} dataTracks -\n *   The {@link LocalParticipant}'s {@link LocalDataTrack}s\n * @property {Map<Track.SID, LocalTrackPublication>} trackPublications -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.ID, LocalTrack>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrack}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTrackPublications -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {Map<Track.ID, LocalVideoTrack>} videoTracks -\n *   The {@link LocalParticipant}'s {@link LocalVideoTrack}s\n * @emits LocalParticipant#trackAdded\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackRemoved\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n */\n\nvar LocalParticipant = function (_Participant) {\n  _inherits(LocalParticipant, _Participant);\n\n  /**\n   * Construct a {@link LocalParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {Array<LocalTrack>} localTracks\n   * @param {Object} options\n   */\n  function LocalParticipant(signaling, localTracks, options) {\n    _classCallCheck(this, LocalParticipant);\n\n    options = Object.assign({\n      LocalAudioTrack: LocalAudioTrack,\n      LocalVideoTrack: LocalVideoTrack,\n      LocalDataTrack: LocalDataTrack,\n      MediaStreamTrack: MediaStreamTrack,\n      LocalAudioTrackPublication: LocalAudioTrackPublication,\n      LocalVideoTrackPublication: LocalVideoTrackPublication,\n      LocalDataTrackPublication: LocalDataTrackPublication,\n      shouldStopLocalTracks: false,\n      tracks: localTracks\n    }, options);\n\n    var tracksToStop = options.shouldStopLocalTracks ? new Set(localTracks.filter(function (localTrack) {\n      return localTrack.kind !== 'data';\n    })) : new Set();\n\n    var _this = _possibleConstructorReturn(this, (LocalParticipant.__proto__ || Object.getPrototypeOf(LocalParticipant)).call(this, signaling, options));\n\n    Object.defineProperties(_this, {\n      _LocalAudioTrack: {\n        value: options.LocalAudioTrack\n      },\n      _LocalDataTrack: {\n        value: options.LocalDataTrack\n      },\n      _LocalVideoTrack: {\n        value: options.LocalVideoTrack\n      },\n      _MediaStreamTrack: {\n        value: options.MediaStreamTrack\n      },\n      _LocalAudioTrackPublication: {\n        value: options.LocalAudioTrackPublication\n      },\n      _LocalDataTrackPublication: {\n        value: options.LocalDataTrackPublication\n      },\n      _LocalVideoTrackPublication: {\n        value: options.LocalVideoTrackPublication\n      },\n      _tracksToStop: {\n        value: tracksToStop\n      }\n    });\n\n    _this._handleTrackSignalingEvents();\n\n    util.deprecateEvents('LocalParticipant', _this, new Map([['trackAdded', null], ['trackRemoved', null]]), _this._log);\n    return _this;\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @returns {?LocalTrack}\n   */\n\n\n  _createClass(LocalParticipant, [{\n    key: '_addTrack',\n    value: function _addTrack(track) {\n      var addedTrack = _get(LocalParticipant.prototype.__proto__ || Object.getPrototypeOf(LocalParticipant.prototype), '_addTrack', this).call(this, track);\n      if (addedTrack && this.state !== 'disconnected') {\n        this._addLocalTrack(track);\n      }\n      return addedTrack;\n    }\n\n    /**\n     * @private\n     * @param {LocalTrack} track\n     * @returns {void}\n     */\n\n  }, {\n    key: '_addLocalTrack',\n    value: function _addLocalTrack(track) {\n      this._signaling.addTrack(track._trackSender, track.name);\n      this._log.info('Added a new ' + util.trackClass(track, true) + ':', track.id);\n      this._log.debug(util.trackClass(track, true) + ':', track);\n    }\n\n    /**\n     * @private\n     * @param {LocalTrack} track\n     * @returns {?LocalTrack}\n     */\n\n  }, {\n    key: '_removeTrack',\n    value: function _removeTrack(track) {\n      var removedTrack = _get(LocalParticipant.prototype.__proto__ || Object.getPrototypeOf(LocalParticipant.prototype), '_removeTrack', this).call(this, track);\n      if (removedTrack && this.state !== 'disconnected') {\n        this._signaling.removeTrack(track._trackSender);\n        this._log.info('Removed a ' + util.trackClass(track, true) + ':', track.id);\n        this._log.debug(util.trackClass(track, true) + ':', track);\n      }\n      return removedTrack;\n    }\n\n    /**\n     * Get the {@link LocalTrack} events to re-emit.\n     * @private\n     * @returns {Array<Array<string>>} events\n     */\n\n  }, {\n    key: '_getTrackEvents',\n    value: function _getTrackEvents() {\n      return _get(LocalParticipant.prototype.__proto__ || Object.getPrototypeOf(LocalParticipant.prototype), '_getTrackEvents', this).call(this).concat([['stopped', 'trackStopped']]);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[LocalParticipant #' + this._instanceId + (this.sid ? ': ' + this.sid : '') + ']';\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_handleTrackSignalingEvents',\n    value: function _handleTrackSignalingEvents() {\n      var _this2 = this;\n\n      var log = this._log;\n\n      if (this.state === 'disconnected') {\n        return;\n      }\n\n      var signaling = this._signaling;\n\n      function localTrackDisabled(localTrack) {\n        var trackSignaling = signaling.tracks.get(localTrack.id);\n        if (trackSignaling) {\n          trackSignaling.disable();\n          log.debug('Disabled the ' + util.trackClass(localTrack, true) + ':', localTrack.id);\n        }\n      }\n\n      function localTrackEnabled(localTrack) {\n        var trackSignaling = signaling.tracks.get(localTrack.id);\n        if (trackSignaling) {\n          trackSignaling.enable();\n          log.debug('Enabled the ' + util.trackClass(localTrack, true) + ':', localTrack.id);\n        }\n      }\n\n      this.on('trackDisabled', localTrackDisabled);\n      this.on('trackEnabled', localTrackEnabled);\n\n      this.tracks.forEach(function (track) {\n        _this2._addLocalTrack(track);\n        _this2._getOrCreateLocalTrackPublication(track).catch(function () {\n          // Do nothing for now.\n        });\n      });\n\n      var self = this;\n      signaling.on('stateChanged', function stateChanged(state) {\n        log.debug('Transitioned to state:', state);\n        if (state === 'disconnected') {\n          log.debug('Removing LocalTrack event listeners');\n          signaling.removeListener('stateChanged', stateChanged);\n          self.removeListener('trackDisabled', localTrackDisabled);\n          self.removeListener('trackEnabled', localTrackEnabled);\n\n          log.info('LocalParticipant disconnected. Stopping ' + self._tracksToStop.size + ' automatically-acquired LocalTracks');\n          self._tracksToStop.forEach(function (track) {\n            track.stop();\n          });\n        }\n      });\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getOrCreateLocalTrackPublication',\n    value: function _getOrCreateLocalTrackPublication(localTrack) {\n      var localTrackPublication = getTrackPublication(this.trackPublications, localTrack);\n      if (localTrackPublication) {\n        return localTrackPublication;\n      }\n\n      var log = this._log;\n      var self = this;\n\n      var trackSignaling = this._signaling.tracks.get(localTrack.id);\n      if (!trackSignaling) {\n        return Promise.reject(new Error('Unexpected error: The ' + localTrack + ' cannot be published'));\n      }\n\n      function unpublish(publication) {\n        self.unpublishTrack(publication.track);\n      }\n\n      return new Promise(function (resolve, reject) {\n        function updated() {\n          var error = trackSignaling.error;\n          if (error) {\n            trackSignaling.removeListener('updated', updated);\n            log.warn('Failed to publish the ' + util.trackClass(localTrack, true) + ': ' + error.message);\n            self._removeTrack(localTrack);\n            setTimeout(function () {\n              self.emit('trackPublicationFailed', error, localTrack);\n            });\n            reject(error);\n            return;\n          }\n\n          if (!self.tracks.has(localTrack.id)) {\n            trackSignaling.removeListener('updated', updated);\n            reject(new Error('The ' + localTrack + ' was unpublished'));\n            return;\n          }\n\n          var sid = trackSignaling.sid;\n          if (!sid) {\n            return;\n          }\n\n          trackSignaling.removeListener('updated', updated);\n\n          var options = {\n            log: log,\n            LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n            LocalDataTrackPublication: self._LocalDataTrackPublication,\n            LocalVideoTrackPublication: self._LocalVideoTrackPublication\n          };\n\n          localTrackPublication = getTrackPublication(self.trackPublications, localTrack);\n\n          if (!localTrackPublication) {\n            localTrackPublication = util.asLocalTrackPublication(localTrack, sid, unpublish, options);\n            self._addTrackPublication(localTrackPublication);\n          }\n\n          if (self._signaling.state === 'connected') {\n            setTimeout(function () {\n              self.emit('trackPublished', localTrackPublication);\n            });\n          }\n          resolve(localTrackPublication);\n        }\n\n        trackSignaling.on('updated', updated);\n      });\n    }\n\n    /**\n     * Adds a {@link LocalTrack} to the {@link LocalParticipant}.\n     * @deprecated Use {@link LocalParticipant#publishTrack} instead\n     * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack} to add;\n     *   if a MediaStreamTrack is provided, and a corresponding {@link LocalTrack}\n     *   has not yet been added, this method will construct one\n     * @returns {?LocalTrack} - The {@link LocalTrack} if added, null if already\n     *   present\n     * @fires Participant#trackAdded\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: 'addTrack',\n    value: function addTrack(track) {\n      this._log.deprecated('LocalParticipant#addTrack has been deprecated. ' + 'Use LocalParticipant#publishTrack instead.');\n      util.validateLocalTrack(track, {\n        LocalAudioTrack: this._LocalAudioTrack,\n        LocalDataTrack: this._LocalDataTrack,\n        LocalVideoTrack: this._LocalVideoTrack,\n        MediaStreamTrack: this._MediaStreamTrack\n      });\n      if (this.tracks.has(track.id)) {\n        return null;\n      }\n      this.publishTrack(track).catch(function () {\n        // Do nothing.\n      });\n      return this.tracks.get(track.id);\n    }\n\n    /**\n     * Adds multiple {@link LocalTrack}s to the {@link LocalParticipant}.\n     * @deprecated Use {@link LocalParticipant#publishTracks} instead\n     * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n     *   to add; for any MediaStreamTracks provided, if a corresponding\n     *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been added,\n     *   this method will construct one\n     * @returns {Array<LocalTrack>} - The {@link LocalTrack}s that were successfully\n     *   added; if the {@link LocalParticipant} already has a {@link LocalTrack},\n     *   it won't be included in the Array\n     * @fires Participant#trackAdded\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: 'addTracks',\n    value: function addTracks(tracks) {\n      this._log.deprecated('LocalParticipant#addTracks has been deprecated. ' + 'Use LocalParticipant#publishTracks instead.');\n      if (!Array.isArray(tracks)) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n      }\n      tracks = tracks.filter(function (track) {\n        return !this.tracks.has(track.id);\n      }, this);\n      this.publishTracks(tracks).catch(function () {\n        // Do nothing.\n      });\n      return tracks.map(function (track) {\n        return this.tracks.get(track.id);\n      }, this);\n    }\n\n    /**\n     * Publishes a {@link LocalTrack} to the {@link Room}.\n     * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n     * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n     *   {@link LocalTrackPublication} if successful\n     * @fires Participant#trackAdded\n    */ /**\n       * Publishes a MediaStreamTrack to the {@link Room}.\n       * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n       *   to publish; if a corresponding {@link LocalAudioTrack} or\n       *   {@link LocalVideoTrack} has not yet been published, this method will\n       *   construct one\n       * @param {LocalTrackOptions} [options] - The {@link LocalTrackOptions} for\n       *   constructing the  MediaStreamTrack's corresponding {@link LocalAudioTrack}\n       *   or {@link LocalVideoTrack}\n       * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n       *   {@link LocalTrackPublication} if successful\n       * @fires Participant#trackAdded\n       * @example\n       * var Video = require('twilio-video');\n       *\n       * Video.connect(token, {\n       *   name: 'my-cool-room',\n       *   audio: true\n       * }).then(function(room) {\n       *   // Publish a video MediaStreamTrack with a custom name\n       *   return room.localParticipant.publishTrack(mediaStreamTrack, {\n       *     name: 'camera'\n       *   });\n       * }).then(function(publication) {\n       *   console.log('The LocalTrack \"' + publication.trackName + '\" was successfully published');\n       * });\n       */\n\n  }, {\n    key: 'publishTrack',\n    value: function publishTrack(localTrackOrMediaStreamTrack, options) {\n      var trackPublication = getTrackPublication(this.trackPublications, localTrackOrMediaStreamTrack);\n      if (trackPublication) {\n        return Promise.resolve(trackPublication);\n      }\n\n      options = Object.assign({\n        log: this._log,\n        LocalAudioTrack: this._LocalAudioTrack,\n        LocalDataTrack: this._LocalDataTrack,\n        LocalVideoTrack: this._LocalVideoTrack,\n        MediaStreamTrack: this._MediaStreamTrack\n      }, options);\n\n      var localTrack = void 0;\n      try {\n        localTrack = util.asLocalTrack(localTrackOrMediaStreamTrack, options);\n      } catch (error) {\n        return Promise.reject(error);\n      }\n\n      localTrack = this._addTrack(localTrack) || this.tracks.get(localTrack.id);\n      return this._getOrCreateLocalTrackPublication(localTrack);\n    }\n\n    /**\n     * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n     * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n     *   to publish; for any MediaStreamTracks provided, if a corresponding\n     *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n     *   published, this method will construct one\n     * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n     *   {@link LocalTrackPublication}s\n     * @fires Participant#trackAdded\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: 'publishTracks',\n    value: function publishTracks(tracks) {\n      if (!Array.isArray(tracks)) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n      }\n      return Promise.all(tracks.map(this.publishTrack, this));\n    }\n\n    /**\n     * Removes a {@link LocalTrack} from the {@link LocalParticipant}.\n     * @deprecated Use {@link LocalParticipant#unpublishTrack} instead\n     * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n     *   to remove; if a MediaStreamTrack is provided, this method looks up the\n     *   corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to remove\n     * @param {?boolean} [stop=true] - Whether or not to call\n     *   {@link LocalAudioTrack#stop} or {@link LocalVideoTrack#stop}\n     * @returns {?LocalTrack} - The {@link LocalTrack} removed, otherwise null\n     * @fires Participant#trackRemoved\n     * @throws {TypeError}\n    */\n\n  }, {\n    key: 'removeTrack',\n    value: function removeTrack(track, stop) {\n      this._log.deprecated('LocalParticipant#removeTrack has been deprecated. ' + 'Use LocalParticipant#unpublishTrack instead.');\n      var publication = this.unpublishTrack(track);\n      track = publication && publication.track;\n      stop = typeof stop === 'boolean' ? stop : true;\n      if (track && stop && track.kind !== 'data') {\n        track.stop();\n        this._log.info('Stopped LocalTrack:', track);\n      }\n      return track;\n    }\n\n    /**\n     * Removes multiple {@link LocalTrack}s from the {@link LocalParticipant}.\n     * @deprecated Use {@link LocalParticipant#unpublishTracks} instead\n     * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n     *   to remove; for any MediaStreamTracks provided, this method looks up the\n     *   corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to remove\n     * @param {?boolean} [stop=true] - Whether or not to call\n     *   {@link LocalAudioTrack#stop} or {@link LocalVideoTrack#stop} on each\n     *   {@link LocalAudioTrack} or {@link LocalVideoTrack} that was successfully\n     *   removed\n     * @returns {Array<LocalTrack>} - The {@link LocalTrack}s that were successfully\n     *   removed\n     * @fires Participant#trackRemoved\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: 'removeTracks',\n    value: function removeTracks(tracks, stop) {\n      this._log.deprecated('LocalParticipant#removeTracks has been deprecated. ' + 'Use LocalParticipant#unpublishTracks instead.');\n      stop = typeof stop === 'boolean' ? stop : true;\n      return this.unpublishTracks(tracks).map(function (publication) {\n        var track = publication.track;\n        if (stop && track.kind !== 'data') {\n          track.stop();\n        }\n        return track;\n      });\n    }\n\n    /**\n     * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n     * @param {?EncodingParameters} [encodingParameters] - The new\n     *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n     *   If not specified, then the existing bitrate limits are preserved\n     * @returns {this}\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: 'setParameters',\n    value: function setParameters(encodingParameters) {\n      if (typeof encodingParameters !== 'undefined' && (typeof encodingParameters === 'undefined' ? 'undefined' : _typeof(encodingParameters)) !== 'object') {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('encodingParameters', 'EncodingParameters, null or undefined');\n      }\n\n      if (encodingParameters) {\n        ['maxAudioBitrate', 'maxVideoBitrate'].forEach(function (prop) {\n          if (typeof encodingParameters[prop] !== 'undefined' && typeof encodingParameters[prop] !== 'number' && encodingParameters[prop] !== null) {\n            // eslint-disable-next-line new-cap\n            throw E.INVALID_TYPE('encodingParameters.' + prop, 'number, null or undefined');\n          }\n        });\n      } else if (encodingParameters === null) {\n        encodingParameters = { maxAudioBitrate: null, maxVideoBitrate: null };\n      }\n\n      this._signaling.setParameters(encodingParameters);\n      return this;\n    }\n\n    /**\n     * Stops publishing a {@link LocalTrack} to the {@link Room}.\n     * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n     *   to stop publishing; if a MediaStreamTrack is provided, this method\n     *   looks up the corresponding {@link LocalAudioTrack} or\n     *   {@link LocalVideoTrack} to stop publishing\n     * @returns {?LocalTrackPublication} - The corresponding\n     *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n     *   published, null otherwise\n     * @fires Participant#trackRemoved\n     * @throws {TypeError}\n    */\n\n  }, {\n    key: 'unpublishTrack',\n    value: function unpublishTrack(track) {\n      util.validateLocalTrack(track, {\n        LocalAudioTrack: this._LocalAudioTrack,\n        LocalDataTrack: this._LocalDataTrack,\n        LocalVideoTrack: this._LocalVideoTrack,\n        MediaStreamTrack: this._MediaStreamTrack\n      });\n\n      var localTrack = this.tracks.get(track.id);\n      if (!localTrack) {\n        return null;\n      }\n\n      var trackSignaling = this._signaling.tracks.get(localTrack.id);\n      trackSignaling.publishFailed(new Error('The ' + localTrack + ' was unpublished'));\n\n      var localTrackPublication = getTrackPublication(this.trackPublications, localTrack);\n      this._removeTrack(localTrack);\n      if (localTrackPublication) {\n        this._removeTrackPublication(localTrackPublication);\n      }\n\n      return localTrackPublication;\n    }\n\n    /**\n     * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n     * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n     *   to stop publishing; for any MediaStreamTracks provided, this method looks\n     *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n     *   stop publishing\n     * @returns {Array<LocalTrackPublication>} - The corresponding\n     *   {@link LocalTrackPublication}s that were successfully unpublished\n     * @fires Participant#trackRemoved\n     * @throws {TypeError}\n     */\n\n  }, {\n    key: 'unpublishTracks',\n    value: function unpublishTracks(tracks) {\n      var _this3 = this;\n\n      if (!Array.isArray(tracks)) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n      }\n\n      return tracks.reduce(function (unpublishedTracks, track) {\n        var unpublishedTrack = _this3.unpublishTrack(track);\n        return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n      }, []);\n    }\n  }]);\n\n  return LocalParticipant;\n}(Participant);\n\n/**\n * A {@link LocalTrack} was added by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was added\n * @event LocalParticipant#trackAdded\n * @deprecated If you are using this event to monitor {@link LocalTrack}s that\n *   are published to the {@link Room}, alternatively you can access the .tracks\n *   collection which contains the newly added {@link LocalTrack}s right after\n *   {@link LocalParticipant#publishTrack}(s) is called\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n\n/**\n * A {@link LocalTrack} was successfully published.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n\n/**\n * A {@link LocalTrack} was removed by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was removed\n * @event LocalParticipant#trackRemoved\n * @deprecated If you are using this event to monitor {@link LocalTrack}s that\n *   are unpublished from the {@link Room}, alternatively you can monitor the\n *   return value of {@link LocalParticipant#unpublishTrack}(s), which is the\n *   removed {@link LocalTrack}(s)\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code>\n *   value removes any previously set bitrate limit\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code>\n *   value removes any previously set bitrate limit\n */\n\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\n\n\nfunction getTrackPublication(trackPublications, track) {\n  return Array.from(trackPublications.values()).find(function (trackPublication) {\n    return trackPublication.track === track || trackPublication.track.mediaStreamTrack === track;\n  }) || null;\n}\n\nmodule.exports = LocalParticipant;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///298\n");

/***/ }),
/* 299 */
/*!*********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localaudiotrackpublication.js ***!
  \*********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LocalTrackPublication = __webpack_require__(/*! ./localtrackpublication */ 227);\n\n/**\n * A {@link LocalAudioTrackPublication} is a {@link LocalAudioTrack} that has\n * been published to a {@link Room}.\n * @extends LocalTrackPublication\n * @property {Track.Kind} kind - \"audio\"\n * @property {LocalAudioTrack} track - the {@link LocalAudioTrack}\n */\n\nvar LocalAudioTrackPublication = function (_LocalTrackPublicatio) {\n  _inherits(LocalAudioTrackPublication, _LocalTrackPublicatio);\n\n  /**\n   * Construct a {@link LocalAudioTrackPublication}.\n   * @param {Track.SID} trackSid - SID assigned to the published {@link LocalAudioTrack}\n   * @param {LocalAudioTrack} track - the {@link LocalAudioTrack}\n   * @param {function(LocalTrackPublication): void} unpublish - The callback\n   *    that unpublishes the {@link LocalTrackPublication}\n   * @param {TrackPublicationOptions} options - {@link LocalTrackPublication} options\n   */\n  function LocalAudioTrackPublication(trackSid, track, unpublish, options) {\n    _classCallCheck(this, LocalAudioTrackPublication);\n\n    return _possibleConstructorReturn(this, (LocalAudioTrackPublication.__proto__ || Object.getPrototypeOf(LocalAudioTrackPublication)).call(this, trackSid, track, unpublish, options));\n  }\n\n  _createClass(LocalAudioTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[LocalAudioTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return LocalAudioTrackPublication;\n}(LocalTrackPublication);\n\nmodule.exports = LocalAudioTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbGF1ZGlvdHJhY2twdWJsaWNhdGlvbi5qcz82N2I1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLDRCQUE0QixtQkFBTyxDQUFDLGtDQUF5Qjs7QUFFN0Q7QUFDQSxNQUFNLGlDQUFpQyxPQUFPLHNCQUFzQjtBQUNwRSx3QkFBd0IsV0FBVztBQUNuQztBQUNBLGNBQWMsV0FBVztBQUN6QixjQUFjLGdCQUFnQixjQUFjO0FBQzVDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25ELGFBQWEsVUFBVSwyQ0FBMkM7QUFDbEUsYUFBYSxnQkFBZ0IsY0FBYztBQUMzQyxhQUFhLHNDQUFzQztBQUNuRCw4QkFBOEI7QUFDOUIsYUFBYSx3QkFBd0IsWUFBWSw0QkFBNEI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjI5OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTG9jYWxUcmFja1B1YmxpY2F0aW9uID0gcmVxdWlyZSgnLi9sb2NhbHRyYWNrcHVibGljYXRpb24nKTtcblxuLyoqXG4gKiBBIHtAbGluayBMb2NhbEF1ZGlvVHJhY2tQdWJsaWNhdGlvbn0gaXMgYSB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrfSB0aGF0IGhhc1xuICogYmVlbiBwdWJsaXNoZWQgdG8gYSB7QGxpbmsgUm9vbX0uXG4gKiBAZXh0ZW5kcyBMb2NhbFRyYWNrUHVibGljYXRpb25cbiAqIEBwcm9wZXJ0eSB7VHJhY2suS2luZH0ga2luZCAtIFwiYXVkaW9cIlxuICogQHByb3BlcnR5IHtMb2NhbEF1ZGlvVHJhY2t9IHRyYWNrIC0gdGhlIHtAbGluayBMb2NhbEF1ZGlvVHJhY2t9XG4gKi9cblxudmFyIExvY2FsQXVkaW9UcmFja1B1YmxpY2F0aW9uID0gZnVuY3Rpb24gKF9Mb2NhbFRyYWNrUHVibGljYXRpbykge1xuICBfaW5oZXJpdHMoTG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb24sIF9Mb2NhbFRyYWNrUHVibGljYXRpbyk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBMb2NhbEF1ZGlvVHJhY2tQdWJsaWNhdGlvbn0uXG4gICAqIEBwYXJhbSB7VHJhY2suU0lEfSB0cmFja1NpZCAtIFNJRCBhc3NpZ25lZCB0byB0aGUgcHVibGlzaGVkIHtAbGluayBMb2NhbEF1ZGlvVHJhY2t9XG4gICAqIEBwYXJhbSB7TG9jYWxBdWRpb1RyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgTG9jYWxBdWRpb1RyYWNrfVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKExvY2FsVHJhY2tQdWJsaWNhdGlvbik6IHZvaWR9IHVucHVibGlzaCAtIFRoZSBjYWxsYmFja1xuICAgKiAgICB0aGF0IHVucHVibGlzaGVzIHRoZSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9ufVxuICAgKiBAcGFyYW0ge1RyYWNrUHVibGljYXRpb25PcHRpb25zfSBvcHRpb25zIC0ge0BsaW5rIExvY2FsVHJhY2tQdWJsaWNhdGlvbn0gb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gTG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb24odHJhY2tTaWQsIHRyYWNrLCB1bnB1Ymxpc2gsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbEF1ZGlvVHJhY2tQdWJsaWNhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvY2FsQXVkaW9UcmFja1B1YmxpY2F0aW9uKSkuY2FsbCh0aGlzLCB0cmFja1NpZCwgdHJhY2ssIHVucHVibGlzaCwgb3B0aW9ucykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsQXVkaW9UcmFja1B1YmxpY2F0aW9uLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ1tMb2NhbEF1ZGlvVHJhY2tQdWJsaWNhdGlvbiAjJyArIHRoaXMuX2luc3RhbmNlSWQgKyAnOiAnICsgdGhpcy50cmFja1NpZCArICddJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb247XG59KExvY2FsVHJhY2tQdWJsaWNhdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxBdWRpb1RyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbGF1ZGlvdHJhY2twdWJsaWNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///299\n");

/***/ }),
/* 300 */
/*!********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localdatatrackpublication.js ***!
  \********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LocalTrackPublication = __webpack_require__(/*! ./localtrackpublication */ 227);\n\n/**\n * A {@link LocalDataTrackPublication} is a {@link LocalDataTrack} that has been\n * published to a {@link Room}.\n * @extends LocalTrackPublication\n * @property {Track.Kind} kind - \"data\"\n * @property {LocalDataTrack} track - the {@link LocalDataTrack}\n */\n\nvar LocalDataTrackPublication = function (_LocalTrackPublicatio) {\n  _inherits(LocalDataTrackPublication, _LocalTrackPublicatio);\n\n  /**\n   * Construct a {@link LocalDataTrackPublication}.\n   * @param {Track.SID} trackSid - SID assigned to the published {@link LocalDataTrack}\n   * @param {LocalDataTrack} track - the {@link LocalDataTrack}\n   * @param {function(LocalTrackPublication): void} unpublish - The callback\n   *    that unpublishes the {@link LocalTrackPublication}\n   * @param {TrackPublicationOptions} options - {@link LocalTrackPublication} options\n   */\n  function LocalDataTrackPublication(trackSid, track, unpublish, options) {\n    _classCallCheck(this, LocalDataTrackPublication);\n\n    return _possibleConstructorReturn(this, (LocalDataTrackPublication.__proto__ || Object.getPrototypeOf(LocalDataTrackPublication)).call(this, trackSid, track, unpublish, options));\n  }\n\n  _createClass(LocalDataTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[LocalDataTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return LocalDataTrackPublication;\n}(LocalTrackPublication);\n\nmodule.exports = LocalDataTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbGRhdGF0cmFja3B1YmxpY2F0aW9uLmpzPzg4NDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsNEJBQTRCLG1CQUFPLENBQUMsa0NBQXlCOztBQUU3RDtBQUNBLE1BQU0sZ0NBQWdDLE9BQU8scUJBQXFCO0FBQ2xFLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCLGNBQWMsZUFBZSxjQUFjO0FBQzNDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsZ0NBQWdDO0FBQ2xELGFBQWEsVUFBVSwyQ0FBMkM7QUFDbEUsYUFBYSxlQUFlLGNBQWM7QUFDMUMsYUFBYSxzQ0FBc0M7QUFDbkQsOEJBQThCO0FBQzlCLGFBQWEsd0JBQXdCLFlBQVksNEJBQTRCO0FBQzdFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvY2FsVHJhY2tQdWJsaWNhdGlvbiA9IHJlcXVpcmUoJy4vbG9jYWx0cmFja3B1YmxpY2F0aW9uJyk7XG5cbi8qKlxuICogQSB7QGxpbmsgTG9jYWxEYXRhVHJhY2tQdWJsaWNhdGlvbn0gaXMgYSB7QGxpbmsgTG9jYWxEYXRhVHJhY2t9IHRoYXQgaGFzIGJlZW5cbiAqIHB1Ymxpc2hlZCB0byBhIHtAbGluayBSb29tfS5cbiAqIEBleHRlbmRzIExvY2FsVHJhY2tQdWJsaWNhdGlvblxuICogQHByb3BlcnR5IHtUcmFjay5LaW5kfSBraW5kIC0gXCJkYXRhXCJcbiAqIEBwcm9wZXJ0eSB7TG9jYWxEYXRhVHJhY2t9IHRyYWNrIC0gdGhlIHtAbGluayBMb2NhbERhdGFUcmFja31cbiAqL1xuXG52YXIgTG9jYWxEYXRhVHJhY2tQdWJsaWNhdGlvbiA9IGZ1bmN0aW9uIChfTG9jYWxUcmFja1B1YmxpY2F0aW8pIHtcbiAgX2luaGVyaXRzKExvY2FsRGF0YVRyYWNrUHVibGljYXRpb24sIF9Mb2NhbFRyYWNrUHVibGljYXRpbyk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9ufS5cbiAgICogQHBhcmFtIHtUcmFjay5TSUR9IHRyYWNrU2lkIC0gU0lEIGFzc2lnbmVkIHRvIHRoZSBwdWJsaXNoZWQge0BsaW5rIExvY2FsRGF0YVRyYWNrfVxuICAgKiBAcGFyYW0ge0xvY2FsRGF0YVRyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgTG9jYWxEYXRhVHJhY2t9XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oTG9jYWxUcmFja1B1YmxpY2F0aW9uKTogdm9pZH0gdW5wdWJsaXNoIC0gVGhlIGNhbGxiYWNrXG4gICAqICAgIHRoYXQgdW5wdWJsaXNoZXMgdGhlIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb259XG4gICAqIEBwYXJhbSB7VHJhY2tQdWJsaWNhdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9ufSBvcHRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9uKHRyYWNrU2lkLCB0cmFjaywgdW5wdWJsaXNoLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsRGF0YVRyYWNrUHVibGljYXRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9jYWxEYXRhVHJhY2tQdWJsaWNhdGlvbikpLmNhbGwodGhpcywgdHJhY2tTaWQsIHRyYWNrLCB1bnB1Ymxpc2gsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9uLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ1tMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9uICMnICsgdGhpcy5faW5zdGFuY2VJZCArICc6ICcgKyB0aGlzLnRyYWNrU2lkICsgJ10nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2NhbERhdGFUcmFja1B1YmxpY2F0aW9uO1xufShMb2NhbFRyYWNrUHVibGljYXRpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsRGF0YVRyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbGRhdGF0cmFja3B1YmxpY2F0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///300\n");

/***/ }),
/* 301 */
/*!*********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/localvideotrackpublication.js ***!
  \*********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LocalTrackPublication = __webpack_require__(/*! ./localtrackpublication */ 227);\n\n/**\n * A {@link LocalVideoTrackPublication} is a {@link LocalVideoTrack} that has\n * been published to a {@link Room}.\n * @extends LocalTrackPublication\n * @property {Track.Kind} kind - \"video\"\n * @property {LocalVideoTrack} track - the {@link LocalVideoTrack}\n */\n\nvar LocalVideoTrackPublication = function (_LocalTrackPublicatio) {\n  _inherits(LocalVideoTrackPublication, _LocalTrackPublicatio);\n\n  /**\n   * Construct a {@link LocalVideoTrackPublication}.\n   * @param {Track.SID} trackSid - SID assigned to the published {@link LocalVideoTrack}\n   * @param {LocalVideoTrack} track - the {@link LocalVideoTrack}\n   * @param {function(LocalTrackPublication): void} unpublish - The callback\n   *    that unpublishes the {@link LocalTrackPublication}\n   * @param {TrackPublicationOptions} options - {@link LocalTrackPublication} options\n   */\n  function LocalVideoTrackPublication(trackSid, track, unpublish, options) {\n    _classCallCheck(this, LocalVideoTrackPublication);\n\n    return _possibleConstructorReturn(this, (LocalVideoTrackPublication.__proto__ || Object.getPrototypeOf(LocalVideoTrackPublication)).call(this, trackSid, track, unpublish, options));\n  }\n\n  _createClass(LocalVideoTrackPublication, [{\n    key: 'toString',\n    value: function toString() {\n      return '[LocalVideoTrackPublication #' + this._instanceId + ': ' + this.trackSid + ']';\n    }\n  }]);\n\n  return LocalVideoTrackPublication;\n}(LocalTrackPublication);\n\nmodule.exports = LocalVideoTrackPublication;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbHZpZGVvdHJhY2twdWJsaWNhdGlvbi5qcz8wMTVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLDRCQUE0QixtQkFBTyxDQUFDLGtDQUF5Qjs7QUFFN0Q7QUFDQSxNQUFNLGlDQUFpQyxPQUFPLHNCQUFzQjtBQUNwRSx3QkFBd0IsV0FBVztBQUNuQztBQUNBLGNBQWMsV0FBVztBQUN6QixjQUFjLGdCQUFnQixjQUFjO0FBQzVDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25ELGFBQWEsVUFBVSwyQ0FBMkM7QUFDbEUsYUFBYSxnQkFBZ0IsY0FBYztBQUMzQyxhQUFhLHNDQUFzQztBQUNuRCw4QkFBOEI7QUFDOUIsYUFBYSx3QkFBd0IsWUFBWSw0QkFBNEI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTG9jYWxUcmFja1B1YmxpY2F0aW9uID0gcmVxdWlyZSgnLi9sb2NhbHRyYWNrcHVibGljYXRpb24nKTtcblxuLyoqXG4gKiBBIHtAbGluayBMb2NhbFZpZGVvVHJhY2tQdWJsaWNhdGlvbn0gaXMgYSB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrfSB0aGF0IGhhc1xuICogYmVlbiBwdWJsaXNoZWQgdG8gYSB7QGxpbmsgUm9vbX0uXG4gKiBAZXh0ZW5kcyBMb2NhbFRyYWNrUHVibGljYXRpb25cbiAqIEBwcm9wZXJ0eSB7VHJhY2suS2luZH0ga2luZCAtIFwidmlkZW9cIlxuICogQHByb3BlcnR5IHtMb2NhbFZpZGVvVHJhY2t9IHRyYWNrIC0gdGhlIHtAbGluayBMb2NhbFZpZGVvVHJhY2t9XG4gKi9cblxudmFyIExvY2FsVmlkZW9UcmFja1B1YmxpY2F0aW9uID0gZnVuY3Rpb24gKF9Mb2NhbFRyYWNrUHVibGljYXRpbykge1xuICBfaW5oZXJpdHMoTG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb24sIF9Mb2NhbFRyYWNrUHVibGljYXRpbyk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBMb2NhbFZpZGVvVHJhY2tQdWJsaWNhdGlvbn0uXG4gICAqIEBwYXJhbSB7VHJhY2suU0lEfSB0cmFja1NpZCAtIFNJRCBhc3NpZ25lZCB0byB0aGUgcHVibGlzaGVkIHtAbGluayBMb2NhbFZpZGVvVHJhY2t9XG4gICAqIEBwYXJhbSB7TG9jYWxWaWRlb1RyYWNrfSB0cmFjayAtIHRoZSB7QGxpbmsgTG9jYWxWaWRlb1RyYWNrfVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKExvY2FsVHJhY2tQdWJsaWNhdGlvbik6IHZvaWR9IHVucHVibGlzaCAtIFRoZSBjYWxsYmFja1xuICAgKiAgICB0aGF0IHVucHVibGlzaGVzIHRoZSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9ufVxuICAgKiBAcGFyYW0ge1RyYWNrUHVibGljYXRpb25PcHRpb25zfSBvcHRpb25zIC0ge0BsaW5rIExvY2FsVHJhY2tQdWJsaWNhdGlvbn0gb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gTG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb24odHJhY2tTaWQsIHRyYWNrLCB1bnB1Ymxpc2gsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbFZpZGVvVHJhY2tQdWJsaWNhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvY2FsVmlkZW9UcmFja1B1YmxpY2F0aW9uKSkuY2FsbCh0aGlzLCB0cmFja1NpZCwgdHJhY2ssIHVucHVibGlzaCwgb3B0aW9ucykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsVmlkZW9UcmFja1B1YmxpY2F0aW9uLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ1tMb2NhbFZpZGVvVHJhY2tQdWJsaWNhdGlvbiAjJyArIHRoaXMuX2luc3RhbmNlSWQgKyAnOiAnICsgdGhpcy50cmFja1NpZCArICddJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb247XG59KExvY2FsVHJhY2tQdWJsaWNhdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxWaWRlb1RyYWNrUHVibGljYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9sb2NhbHZpZGVvdHJhY2twdWJsaWNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///301\n");

/***/ }),
/* 302 */
/*!**************************************************************!*\
  !*** ./node_modules/twilio-video/es5/iceserversource/nts.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar constants = __webpack_require__(/*! ../util/constants */ 208);\nvar ECS = __webpack_require__(/*! ../ecs */ 303);\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\nvar Log = __webpack_require__(/*! ../util/log */ 214);\nvar TimeoutPromise = __webpack_require__(/*! ../util/timeoutpromise */ 306);\nvar util = __webpack_require__(/*! ../util */ 206);\n\nvar _require = __webpack_require__(/*! ../util/twilio-video-errors */ 209),\n    ConfigurationAcquireFailedError = _require.ConfigurationAcquireFailedError;\n\nvar version = __webpack_require__(/*! ../../package.json */ 219).version;\n\nvar instances = 0;\n\n/**\n * @typedef {ECS.getConfigurationOptions} NTSIceServerSourceOptions\n * @property {Array<RTCIceServerInit>} [defaultIceServers]\n * @property {number} [defaultTTL]\n * @property {string} [ecsServer]\n * @property {string} [environment=\"prod\"]\n * @property {function(string, ECS.getConfigurationOptions): Promise<object>} [getConfiguration]\n * @property {string} [realm=\"us1\"]\n * @property {Log} [log]\n * @property {number} [timeout]\n */\n\n/**\n * A Network Traversal Service (NTS)-backed implementation of\n * {@link IceServerSource}; useful for getting fresh TURN servers from Twilio.\n * @extends EventEmitter\n * @implements {IceServerSource}\n */\n\nvar NTSIceServerSource = function (_EventEmitter) {\n  _inherits(NTSIceServerSource, _EventEmitter);\n\n  /**\n   * Construct an {@link NTSIceServerSource}.\n   * @param {string} token - Access Token\n   * @param {NTSIceServerSourceOptions} [options]\n   */\n  function NTSIceServerSource(token, options) {\n    _classCallCheck(this, NTSIceServerSource);\n\n    var _this = _possibleConstructorReturn(this, (NTSIceServerSource.__proto__ || Object.getPrototypeOf(NTSIceServerSource)).call(this));\n\n    options = Object.assign({\n      abortOnTimeout: false,\n      defaultTTL: constants.ICE_SERVERS_DEFAULT_TTL,\n      environment: constants.DEFAULT_ENVIRONMENT,\n      getConfiguration: ECS.getConfiguration,\n      realm: constants.DEFAULT_REALM,\n      timeout: constants.ICE_SERVERS_TIMEOUT_MS\n    }, options);\n\n    /* eslint-disable new-cap */\n    var defaultIceServers = constants.DEFAULT_ICE_SERVERS(options.environment);\n    var ecsServer = options.ecsServer || constants.ECS_SERVER(options.environment, options.realm);\n    /* eslint-enable new-cap */\n\n    var log = options.log ? options.log.createLog('default', _this) : new Log('default', _this, util.buildLogLevels('off'));\n\n    Object.defineProperties(_this, {\n      _abortOnTimeout: {\n        value: options.abortOnTimeout\n      },\n      // This Promise represents the current invocation of `poll`. `start` sets it\n      // and `stop` clears it out.\n      _currentPoll: {\n        value: null,\n        writable: true\n      },\n      // In the event that ECS or NTS fail to return ICE servers in a timely\n      // manner, NTSIceServerSource falls back to these servers.\n      _defaultIceServers: {\n        value: defaultIceServers\n      },\n      _defaultTTL: {\n        value: options.defaultTTL\n      },\n      // This is the ECS server NTSIceServerSource communicates with.\n      _ecsServer: {\n        value: ecsServer\n      },\n      _getConfiguration: {\n        value: options.getConfiguration\n      },\n      _instance: {\n        value: ++instances\n      },\n      // This timer ID represents the next invocation of `poll`.\n      _nextPoll: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _status: {\n        value: null,\n        writable: true\n      },\n      // This Deferred remains unresolved until `stop` is called. We use it to\n      // short-circuit in `poll`.\n      _stopped: {\n        value: util.defer(),\n        writable: true\n      },\n      // This value configures the amount of time NTSIceServerSource will wait\n      // when fetching ICE servers.\n      _timeout: {\n        value: options.timeout\n      },\n      // This is the Access Token NTSIceServerSource makes requests to ECS with.\n      _token: {\n        value: token\n      }\n    });\n\n    _this._log.info('Created a new NTSIceServerSource');\n    _this._log.debug('ECS server:', _this._ecsServer);\n    return _this;\n  }\n\n  _createClass(NTSIceServerSource, [{\n    key: 'start',\n    value: function start() {\n      if (!this.isStarted) {\n        this._log.info('Starting');\n        this._currentPoll = poll(this);\n      } else {\n        this._log.warn('Already started');\n      }\n      return this._currentPoll;\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (!this.isStarted) {\n        this._log.warn('Already stopped');\n        return;\n      }\n      this._log.info('Stopping');\n      this._currentPoll = null;\n      clearTimeout(this._nextPoll);\n      this._stopped.resolve();\n      this._stopped = util.defer();\n      this._log.debug('Stopped');\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[NTSIceServerSource #' + this._instance + ']';\n    }\n  }, {\n    key: 'isStarted',\n    get: function get() {\n      return !!this._currentPoll;\n    }\n  }, {\n    key: 'status',\n    get: function get() {\n      return this._status;\n    }\n  }]);\n\n  return NTSIceServerSource;\n}(EventEmitter);\n\n/**\n * Parse an ECS configuration value, log any warnings, and return a tuple of\n * ICE servers and TTL.\n * @param {NTSIceServerSource} client\n * @param {object} config\n * @returns {Array<Array<RTCIceServerInit>|Number>} iceServersAndTTL\n * @throws {Error}\n */\n\n\nfunction parseECSConfig(client, config) {\n  var nts = util.getOrNull(config, 'video.network_traversal_service');\n  if (!nts) {\n    throw new Error('network_traversal_service not available');\n  } else if (nts.warning) {\n    client._log.warn(nts.warning);\n  }\n\n  var iceServers = nts.ice_servers;\n  if (!iceServers) {\n    throw new Error('ice_servers not available');\n  }\n  client._log.info('Got ICE servers: ' + JSON.stringify(iceServers));\n\n  var ttl = nts.ttl || client._defaultTTL;\n  return [iceServers, ttl];\n}\n\n/**\n * Get ICE servers and their TTL.\n * @private\n * @param {NTSIceServerSource} nts\n * @returns {Promise<Array<RTCIceServerInit>>} iceServers\n */\nfunction poll(client) {\n  // We race `getConfiguration` against the `_stopped` Promise so that, when\n  // `stop` is called on the NTSIceServerSource, we can immediately proceed\n  // without waiting on `getConfiguration`.\n  client._log.debug('Getting ECS configuration');\n\n  var options = {\n    configUrl: client._ecsServer + '/v2/Configuration',\n    body: {\n      service: 'video',\n      /* eslint-disable camelcase */\n      sdk_version: version\n      /* eslint-enable camelcase */\n    }\n  };\n\n  var alreadyStopped = new Error('Already stopped');\n  var config = client._getConfiguration(client._token, options);\n  var configWithTimeout = new TimeoutPromise(config, client._timeout);\n\n  return Promise.race([configWithTimeout, client._stopped.promise]).then(function (config) {\n    if (!config) {\n      throw alreadyStopped;\n    }\n    var iceServersAndTTL = parseECSConfig(client, config);\n    client._status = 'success';\n    return iceServersAndTTL;\n  }).catch(function (error) {\n    client._status = 'failure';\n    if (!client.isStarted) {\n      throw alreadyStopped;\n    } else if (configWithTimeout.isTimedOut) {\n      if (client._abortOnTimeout) {\n        client._log.warn('Getting ICE servers took too long');\n        throw new ConfigurationAcquireFailedError();\n      }\n      client._log.warn('Getting ICE servers took too long (using defaults)');\n    } else {\n      // NOTE(mroberts): Stop if we get an Access Token error (2xxxx)\n      if (error.code && Math.floor(error.code / 10000) === 2) {\n        client.stop();\n      }\n      client._log.warn('Failed to get ICE servers (using defaults):', error);\n    }\n    return [client._defaultIceServers, client._defaultTTL];\n  }).then(function (iceServersAndTTL) {\n    var iceServers = iceServersAndTTL[0];\n    var ttl = iceServersAndTTL[1];\n\n    if (client.isStarted) {\n      client._log.info('Getting ICE servers again in ' + ttl + ' seconds');\n      client._nextPoll = setTimeout(function nextPoll() {\n        if (client.isStarted) {\n          client._currentPoll = poll(client);\n        }\n      }, (ttl - constants.ECS_TIMEOUT) * 1000);\n    }\n\n    client._iceServers = iceServers;\n    try {\n      client.emit('iceServers', iceServers);\n    } catch (error) {\n      // Do nothing.\n    }\n    return iceServers;\n  });\n}\n\nmodule.exports = NTSIceServerSource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///302\n");

/***/ }),
/* 303 */
/*!**********************************************!*\
  !*** ./node_modules/twilio-video/es5/ecs.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar request = __webpack_require__(/*! ./request */ 304);\nvar createTwilioError = __webpack_require__(/*! ./util/twilio-video-errors */ 209).createTwilioError;\nvar ConfigurationAcquireFailedError = __webpack_require__(/*! ./util/twilio-video-errors */ 209).ConfigurationAcquireFailedError;\n\nvar CONFIG_URL = 'https://ecs.us1.twilio.com/v1/Configuration';\n\n/**\n * Request a configuration setting for the specified JWT.\n * @param {String} token - A JWT String representing a valid AccessToken.\n * @param {?ECS.getConfigurationOptions} [options]\n * @returns {Promise<Object>} configuration - An unformatted map of\n *   configuration settings specific to the specified service.\n * @throws {TwilioError}\n*/ /**\n   * @typedef {Object} ECS.getConfigurationOptions\n   * @property {?Object} [body] - A valid JSON payload to send to the\n   *   ECS endpoint.\n   * @property {?String} [configUrl='https://ecs.us1.twilio.com/v1/Configuration'] - A\n   *   custom URL to POST ECS configuration requests to.\n   */\nfunction getConfiguration(token, options) {\n  if (!token) {\n    throw new Error('<String>token is a required argument.');\n  }\n\n  options = Object.assign({\n    configUrl: CONFIG_URL\n  }, options);\n\n  var postData = {\n    url: options.configUrl,\n    headers: {\n      'X-Twilio-Token': token,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  if (options.body) {\n    postData.body = toQueryString(options.body);\n  }\n\n  return request.post(postData).then(function (responseText) {\n    return parseJsonTextFromECS(responseText);\n  }, function (errorText) {\n    var error = parseJsonTextFromECS(errorText);\n    throw createTwilioError(error.code, error.message);\n  });\n}\n\nfunction parseJsonTextFromECS(jsonText) {\n  var json = null;\n  try {\n    json = JSON.parse(jsonText);\n  } catch (error) {\n    throw new ConfigurationAcquireFailedError();\n  }\n  return json;\n}\n\nfunction toQueryString(params) {\n  return Object.keys(params || {}).map(function (key) {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n  }).join('&');\n}\n\nmodule.exports.getConfiguration = getConfiguration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9lY3MuanM/OGMzNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsb0JBQVc7QUFDakMsd0JBQXdCLG1CQUFPLENBQUMscUNBQTRCO0FBQzVELHNDQUFzQyxtQkFBTyxDQUFDLHFDQUE0Qjs7QUFFMUU7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLDZCQUE2QjtBQUN4QyxhQUFhLGdCQUFnQjtBQUM3QjtBQUNBLFlBQVk7QUFDWjtBQUNBLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6IjMwMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKTtcbnZhciBjcmVhdGVUd2lsaW9FcnJvciA9IHJlcXVpcmUoJy4vdXRpbC90d2lsaW8tdmlkZW8tZXJyb3JzJykuY3JlYXRlVHdpbGlvRXJyb3I7XG52YXIgQ29uZmlndXJhdGlvbkFjcXVpcmVGYWlsZWRFcnJvciA9IHJlcXVpcmUoJy4vdXRpbC90d2lsaW8tdmlkZW8tZXJyb3JzJykuQ29uZmlndXJhdGlvbkFjcXVpcmVGYWlsZWRFcnJvcjtcblxudmFyIENPTkZJR19VUkwgPSAnaHR0cHM6Ly9lY3MudXMxLnR3aWxpby5jb20vdjEvQ29uZmlndXJhdGlvbic7XG5cbi8qKlxuICogUmVxdWVzdCBhIGNvbmZpZ3VyYXRpb24gc2V0dGluZyBmb3IgdGhlIHNwZWNpZmllZCBKV1QuXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW4gLSBBIEpXVCBTdHJpbmcgcmVwcmVzZW50aW5nIGEgdmFsaWQgQWNjZXNzVG9rZW4uXG4gKiBAcGFyYW0gez9FQ1MuZ2V0Q29uZmlndXJhdGlvbk9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gY29uZmlndXJhdGlvbiAtIEFuIHVuZm9ybWF0dGVkIG1hcCBvZlxuICogICBjb25maWd1cmF0aW9uIHNldHRpbmdzIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgc2VydmljZS5cbiAqIEB0aHJvd3Mge1R3aWxpb0Vycm9yfVxuKi8gLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEVDUy5nZXRDb25maWd1cmF0aW9uT3B0aW9uc1xuICAgKiBAcHJvcGVydHkgez9PYmplY3R9IFtib2R5XSAtIEEgdmFsaWQgSlNPTiBwYXlsb2FkIHRvIHNlbmQgdG8gdGhlXG4gICAqICAgRUNTIGVuZHBvaW50LlxuICAgKiBAcHJvcGVydHkgez9TdHJpbmd9IFtjb25maWdVcmw9J2h0dHBzOi8vZWNzLnVzMS50d2lsaW8uY29tL3YxL0NvbmZpZ3VyYXRpb24nXSAtIEFcbiAgICogICBjdXN0b20gVVJMIHRvIFBPU1QgRUNTIGNvbmZpZ3VyYXRpb24gcmVxdWVzdHMgdG8uXG4gICAqL1xuZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvbih0b2tlbiwgb3B0aW9ucykge1xuICBpZiAoIXRva2VuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc8U3RyaW5nPnRva2VuIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQuJyk7XG4gIH1cblxuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgY29uZmlnVXJsOiBDT05GSUdfVVJMXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBwb3N0RGF0YSA9IHtcbiAgICB1cmw6IG9wdGlvbnMuY29uZmlnVXJsLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdYLVR3aWxpby1Ub2tlbic6IHRva2VuLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgfVxuICB9O1xuXG4gIGlmIChvcHRpb25zLmJvZHkpIHtcbiAgICBwb3N0RGF0YS5ib2R5ID0gdG9RdWVyeVN0cmluZyhvcHRpb25zLmJvZHkpO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3QucG9zdChwb3N0RGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2VUZXh0KSB7XG4gICAgcmV0dXJuIHBhcnNlSnNvblRleHRGcm9tRUNTKHJlc3BvbnNlVGV4dCk7XG4gIH0sIGZ1bmN0aW9uIChlcnJvclRleHQpIHtcbiAgICB2YXIgZXJyb3IgPSBwYXJzZUpzb25UZXh0RnJvbUVDUyhlcnJvclRleHQpO1xuICAgIHRocm93IGNyZWF0ZVR3aWxpb0Vycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VKc29uVGV4dEZyb21FQ1MoanNvblRleHQpIHtcbiAgdmFyIGpzb24gPSBudWxsO1xuICB0cnkge1xuICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25UZXh0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvbkFjcXVpcmVGYWlsZWRFcnJvcigpO1xuICB9XG4gIHJldHVybiBqc29uO1xufVxuXG5mdW5jdGlvbiB0b1F1ZXJ5U3RyaW5nKHBhcmFtcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMocGFyYW1zIHx8IHt9KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSk7XG4gIH0pLmpvaW4oJyYnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2V0Q29uZmlndXJhdGlvbiA9IGdldENvbmZpZ3VyYXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9lY3MuanNcbi8vIG1vZHVsZSBpZCA9IDMwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///303\n");

/***/ }),
/* 304 */
/*!**************************************************!*\
  !*** ./node_modules/twilio-video/es5/request.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar XHR = __webpack_require__(/*! xmlhttprequest */ 305).XMLHttpRequest;\n\n/**\n * Make a network request.\n * @param {String} method - HTTP method to use. e.g: GET, POST.\n * @param {RequestParams} params\n * @returns {Promise<String>} responseText\n*/ /**\n   * @typedef {Object} RequestParams\n   * @property {String} url - URL to access.\n   * @property {Object} [headers] - An unformatted map of headers.\n   * @property {Object} [body] - An unformatted map representing\n   *   post body.\n   * @property {Boolean} [withCredentials=false] - Whether to set the\n   *   XHR withCredentials flag.\n   */\nfunction request(method, params) {\n  return new Promise(function (resolve, reject) {\n    if (typeof method !== 'string' || !params) {\n      throw new Error('<String>method and <Object>params are required args.');\n    }\n\n    var xhr = new XHR();\n    xhr.open(method.toUpperCase(), params.url, true);\n    xhr.withCredentials = !!params.withCredentials;\n\n    xhr.onreadystatechange = function onreadystatechange() {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (200 <= xhr.status && xhr.status < 300) {\n        resolve(xhr.responseText);\n      } else {\n        reject(xhr.responseText);\n      }\n    };\n\n    for (var headerName in params.headers) {\n      xhr.setRequestHeader(headerName, params.headers[headerName]);\n    }\n\n    xhr.send(params.body);\n  });\n}\n\nrequest.get = request.bind(null, 'GET');\nrequest.post = request.bind(null, 'POST');\n\nmodule.exports = request;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9yZXF1ZXN0LmpzPzU3MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLHlCQUFnQjs7QUFFbEM7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLGNBQWM7QUFDekIsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQSxlQUFlLE9BQU87QUFDdEIsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMzA0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgWEhSID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3QnKS5YTUxIdHRwUmVxdWVzdDtcblxuLyoqXG4gKiBNYWtlIGEgbmV0d29yayByZXF1ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAtIEhUVFAgbWV0aG9kIHRvIHVzZS4gZS5nOiBHRVQsIFBPU1QuXG4gKiBAcGFyYW0ge1JlcXVlc3RQYXJhbXN9IHBhcmFtc1xuICogQHJldHVybnMge1Byb21pc2U8U3RyaW5nPn0gcmVzcG9uc2VUZXh0XG4qLyAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUmVxdWVzdFBhcmFtc1xuICAgKiBAcHJvcGVydHkge1N0cmluZ30gdXJsIC0gVVJMIHRvIGFjY2Vzcy5cbiAgICogQHByb3BlcnR5IHtPYmplY3R9IFtoZWFkZXJzXSAtIEFuIHVuZm9ybWF0dGVkIG1hcCBvZiBoZWFkZXJzLlxuICAgKiBAcHJvcGVydHkge09iamVjdH0gW2JvZHldIC0gQW4gdW5mb3JtYXR0ZWQgbWFwIHJlcHJlc2VudGluZ1xuICAgKiAgIHBvc3QgYm9keS5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBbd2l0aENyZWRlbnRpYWxzPWZhbHNlXSAtIFdoZXRoZXIgdG8gc2V0IHRoZVxuICAgKiAgIFhIUiB3aXRoQ3JlZGVudGlhbHMgZmxhZy5cbiAgICovXG5mdW5jdGlvbiByZXF1ZXN0KG1ldGhvZCwgcGFyYW1zKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnIHx8ICFwYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignPFN0cmluZz5tZXRob2QgYW5kIDxPYmplY3Q+cGFyYW1zIGFyZSByZXF1aXJlZCBhcmdzLicpO1xuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWEhSKCk7XG4gICAgeGhyLm9wZW4obWV0aG9kLnRvVXBwZXJDYXNlKCksIHBhcmFtcy51cmwsIHRydWUpO1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSAhIXBhcmFtcy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gb25yZWFkeXN0YXRlY2hhbmdlKCkge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKDIwMCA8PSB4aHIuc3RhdHVzICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaGVhZGVyTmFtZSBpbiBwYXJhbXMuaGVhZGVycykge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyTmFtZSwgcGFyYW1zLmhlYWRlcnNbaGVhZGVyTmFtZV0pO1xuICAgIH1cblxuICAgIHhoci5zZW5kKHBhcmFtcy5ib2R5KTtcbiAgfSk7XG59XG5cbnJlcXVlc3QuZ2V0ID0gcmVxdWVzdC5iaW5kKG51bGwsICdHRVQnKTtcbnJlcXVlc3QucG9zdCA9IHJlcXVlc3QuYmluZChudWxsLCAnUE9TVCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVlc3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9yZXF1ZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///304\n");

/***/ }),
/* 305 */
/*!*********************************************************!*\
  !*** ./node_modules/twilio-video/src/xmlhttprequest.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("exports.XMLHttpRequest = XMLHttpRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL3NyYy94bWxodHRwcmVxdWVzdC5qcz8yNzYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMwNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuWE1MSHR0cFJlcXVlc3QgPSBYTUxIdHRwUmVxdWVzdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9zcmMveG1saHR0cHJlcXVlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDMwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///305\n");

/***/ }),
/* 306 */
/*!**************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/timeoutpromise.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\nvar util = __webpack_require__(/*! ./ */ 206);\n\n/**\n * A Promise that can time out.\n * @extends EventEmitter\n * @implements Promise\n * @property {?number} timeout - the timeout, in milliseconds\n * @property {boolean} isTimedOut - whether or not the\n *   {@link TimeoutPromise} timed out\n * @emits TimeoutPromise#timedOut\n */\n\nvar TimeoutPromise = function (_EventEmitter) {\n  _inherits(TimeoutPromise, _EventEmitter);\n\n  /**\n   * Construct a new {@link TimeoutPromise}.\n   * @param {Promise} original - a Promise\n   * @param {?number} [timeout] - the timeout, in milliseconds; providing this in\n   *   the constructor invokes {@link TimeoutPromise#start} (otherwise, you must\n   *   call {@link TimeoutPromise#start} yourself)\n   */\n  function TimeoutPromise(original, initialTimeout) {\n    _classCallCheck(this, TimeoutPromise);\n\n    var _this = _possibleConstructorReturn(this, (TimeoutPromise.__proto__ || Object.getPrototypeOf(TimeoutPromise)).call(this));\n\n    var deferred = util.defer();\n    var isTimedOut = false;\n    var timedOut = new Error('Timed out');\n    var timeout = null;\n    var timer = null;\n\n    /* istanbul ignore next */\n    Object.defineProperties(_this, {\n      _deferred: {\n        value: deferred\n      },\n      _isTimedOut: {\n        get: function get() {\n          return isTimedOut;\n        },\n        set: function set(_isTimedOut) {\n          isTimedOut = _isTimedOut;\n        }\n      },\n      _timedOut: {\n        value: timedOut\n      },\n      _timeout: {\n        get: function get() {\n          return timeout;\n        },\n        set: function set(_timeout) {\n          timeout = _timeout;\n        }\n      },\n      _timer: {\n        get: function get() {\n          return timer;\n        },\n        set: function set(_timer) {\n          timer = _timer;\n        }\n      },\n      _promise: {\n        value: deferred.promise\n      },\n      isTimedOut: {\n        enumerable: true,\n        get: function get() {\n          return isTimedOut;\n        }\n      },\n      timeout: {\n        enumerable: true,\n        get: function get() {\n          return timeout;\n        }\n      }\n    });\n\n    original.then(function (result) {\n      clearTimeout(_this._timer);\n      deferred.resolve(result);\n    }, function (reason) {\n      clearTimeout(_this._timer);\n      deferred.reject(reason);\n    });\n\n    if (initialTimeout) {\n      _this.start(initialTimeout);\n    }\n    return _this;\n  }\n\n  _createClass(TimeoutPromise, [{\n    key: 'catch',\n    value: function _catch() {\n      var _promise;\n\n      return (_promise = this._promise).catch.apply(_promise, arguments);\n    }\n\n    /**\n     * Start the timer that will time out the {@link TimeoutPromise} if the\n     * original Promise has neither resolved nor rejected. Subsequent calls have no\n     * effect once the {@link TimeoutPromise} is started.\n     * @param {number} timeout - the timeout, in milliseconds\n     * @returns {this}\n     */\n\n  }, {\n    key: 'start',\n    value: function start(timeout) {\n      var _this2 = this;\n\n      if (this._timer) {\n        return this;\n      }\n      this._timeout = timeout;\n      this._timer = setTimeout(function () {\n        if (_this2._timer) {\n          _this2._isTimedOut = true;\n          _this2.emit('timedOut', _this2);\n          _this2._deferred.reject(_this2._timedOut);\n        }\n      }, this.timeout);\n      return this;\n    }\n  }, {\n    key: 'then',\n    value: function then() {\n      var _promise2;\n\n      return (_promise2 = this._promise).then.apply(_promise2, arguments);\n    }\n  }]);\n\n  return TimeoutPromise;\n}(EventEmitter);\n\n/**\n * The {@link TimeoutPromise} timed out.\n * @param {TimeoutPromise} promise - The {@link TimeoutPromise}\n * @event TimeoutPromise#timedOut\n */\n\nmodule.exports = TimeoutPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///306\n");

/***/ }),
/* 307 */
/*!*************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/index.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar constants = __webpack_require__(/*! ../../util/constants */ 208);\nvar defaultCreateCancelableRoomSignalingPromise = __webpack_require__(/*! ./cancelableroomsignalingpromise */ 308);\nvar LocalParticipantV2 = __webpack_require__(/*! ./localparticipant */ 375);\nvar Signaling = __webpack_require__(/*! ../ */ 378);\nvar SIP = __webpack_require__(/*! ../../sip */ 229);\nvar SIPJSMediaHandler = __webpack_require__(/*! ./sipjsmediahandler */ 260);\nvar util = __webpack_require__(/*! ../../util */ 206);\n\n/**\n * {@link SignalingV2} implements version 2 of our signaling protocol.\n * @extends Signaling\n */\n\nvar SignalingV2 = function (_Signaling) {\n  _inherits(SignalingV2, _Signaling);\n\n  /**\n   * Construct {@link SignalingV2}.\n   * @param {string} wsServer\n   * @param {?object} [options={}]\n   */\n  function SignalingV2(wsServer, options) {\n    _classCallCheck(this, SignalingV2);\n\n    var uri = util.makeClientSIPURI();\n\n    /* eslint new-cap:0 */\n    options = Object.assign({\n      createCancelableRoomSignalingPromise: defaultCreateCancelableRoomSignalingPromise,\n      registrarServer: constants.REGISTRAR_SERVER,\n      UA: SIP.UA\n    }, options);\n\n    var debug = options.logLevel === 'debug';\n    var useWssHack = wsServer.startsWith('wss://');\n\n    var UA = options.UA;\n    var ua = new UA({\n      autostart: false,\n      log: {\n        builtinEnabled: debug\n      },\n      extraSupported: ['room-signaling', 'timer'],\n      hackAllowUnregisteredOptionTags: true,\n      keepAliveInterval: 30,\n      mediaHandlerFactory: SIPJSMediaHandler.defaultFactory,\n      register: false,\n      registrarServer: options.registrarServer,\n      traceSip: debug,\n      uri: uri,\n      wsServers: wsServer,\n      hackWssInTransport: useWssHack\n    });\n\n    var _this = _possibleConstructorReturn(this, (SignalingV2.__proto__ || Object.getPrototypeOf(SignalingV2)).call(this));\n\n    Object.defineProperties(_this, {\n      _createCancelableRoomSignalingPromise: {\n        value: options.createCancelableRoomSignalingPromise\n      },\n      _options: {\n        value: options\n      },\n      _ua: {\n        value: ua\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(SignalingV2, [{\n    key: '_close',\n    value: function _close(key) {\n      this.transition('closing', key);\n      this._ua.stop();\n      this._ua.transport.disconnect();\n      this.transition('closed', key);\n      return Promise.resolve(this);\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_open',\n    value: function _open(key) {\n      var _this2 = this;\n\n      var ua = this._ua;\n\n      function startUA() {\n        ua.start();\n      }\n\n      this.transition('opening', key);\n      return util.promiseFromEvents(startUA, ua, 'connected', 'disconnected').then(function () {\n        _this2.transition('open', key);\n        return _this2;\n      }, function () {\n        _this2.transition('closed', key);\n        throw new Error('Open failed');\n      });\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_connect',\n    value: function _connect(localParticipant, token, iceServerSource, encodingParameters, preferredCodecs, options) {\n      options = Object.assign({}, this._options, options);\n\n      var ua = this._ua;\n\n      return this._createCancelableRoomSignalingPromise.bind(null, token, ua, localParticipant, iceServerSource, encodingParameters, preferredCodecs, options);\n    }\n  }, {\n    key: 'createLocalParticipantSignaling',\n    value: function createLocalParticipantSignaling(encodingParameters) {\n      return new LocalParticipantV2(encodingParameters);\n    }\n  }]);\n\n  return SignalingV2;\n}(Signaling);\n\nmodule.exports = SignalingV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///307\n");

/***/ }),
/* 308 */
/*!**************************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/cancelableroomsignalingpromise.js ***!
  \**************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar CancelablePromise = __webpack_require__(/*! ../../util/cancelablepromise */ 220);\nvar DefaultPeerConnectionManager = __webpack_require__(/*! ./peerconnectionmanager */ 309);\nvar DefaultRoomV2 = __webpack_require__(/*! ./room */ 322);\nvar DefaultTransport = __webpack_require__(/*! ./transport */ 338);\nvar SignalingConnectionDisconnectedError = __webpack_require__(/*! ../../util/twilio-video-errors */ 209).SignalingConnectionDisconnectedError;\nvar SignalingIncomingMessageInvalidError = __webpack_require__(/*! ../../util/twilio-video-errors */ 209).SignalingIncomingMessageInvalidError;\nvar flatMap = __webpack_require__(/*! ../../util */ 206).flatMap;\n\nfunction createCancelableRoomSignalingPromise(token, ua, localParticipant, iceServerSource, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n\n  if (options._sdpSemantics) {\n    options.sdpSemantics = options._sdpSemantics;\n  }\n\n  var transport = void 0;\n\n  var PeerConnectionManager = options.PeerConnectionManager;\n  var RoomV2 = options.RoomV2;\n\n  var peerConnectionManager = new PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options);\n\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n\n  peerConnectionManager.setConfiguration(options);\n  peerConnectionManager.setTrackSenders(trackSenders);\n\n  var cancelationError = new Error('Canceled');\n\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    peerConnectionManager.createAndOffer().then(function createAndOfferSucceeded() {\n      // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n      // initial offer in the event queue for the 'description' event. So,\n      // we are dequeueing to prevent the spurious 'update' message sent by\n      // the client after connecting to a room.\n      peerConnectionManager.dequeue('description');\n\n      return new Promise(function (resolve, reject) {\n        if (isCanceled()) {\n          reject(cancelationError);\n          return;\n        }\n\n        var transportOptions = typeof options.wsServerInsights === 'string' ? { wsServerInsights: options.wsServerInsights } : {};\n\n        if (options.InsightsPublisher) {\n          transportOptions.InsightsPublisher = options.InsightsPublisher;\n        }\n\n        if (options.NullInsightsPublisher) {\n          transportOptions.NullInsightsPublisher = options.NullInsightsPublisher;\n        }\n\n        transportOptions = Object.assign({\n          dominantSpeaker: options.dominantSpeaker,\n          environment: options.environment,\n          networkQuality: options.networkQuality,\n          iceServerSourceStatus: iceServerSource.status,\n          insights: options.insights,\n          realm: options.realm,\n          sdpSemantics: options.sdpSemantics\n        }, transportOptions);\n\n        var Transport = options.Transport;\n        transport = new Transport(options.name, token, localParticipant, peerConnectionManager, ua, transportOptions);\n\n        transport.once('connected', function connected(initialState) {\n          if (isCanceled()) {\n            reject(cancelationError);\n            return;\n          }\n\n          var localParticipantState = initialState.participant;\n          if (!localParticipantState) {\n            reject(new SignalingIncomingMessageInvalidError());\n            return;\n          }\n\n          resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n        });\n\n        transport.once('stateChanged', function stateChanged(state, error) {\n          if (state === 'disconnected') {\n            error = error || new SignalingConnectionDisconnectedError();\n            transport = null;\n            reject(error);\n          }\n        });\n      });\n    }).then(function createRoomSignalingSucceeded(roomSignaling) {\n      if (isCanceled()) {\n        peerConnectionManager.close();\n        roomSignaling.disconnect();\n        reject(cancelationError);\n        return;\n      }\n      resolve(roomSignaling);\n    }).catch(function onError(error) {\n      if (transport) {\n        transport.disconnect();\n        transport = null;\n      }\n      peerConnectionManager.close();\n      reject(error);\n    });\n  }, function onCancel() {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvY2FuY2VsYWJsZXJvb21zaWduYWxpbmdwcm9taXNlLmpzP2I2OGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsd0JBQXdCLG1CQUFPLENBQUMsdUNBQThCO0FBQzlELG1DQUFtQyxtQkFBTyxDQUFDLGtDQUF5QjtBQUNwRSxvQkFBb0IsbUJBQU8sQ0FBQyxpQkFBUTtBQUNwQyx1QkFBdUIsbUJBQU8sQ0FBQyxzQkFBYTtBQUM1QywyQ0FBMkMsbUJBQU8sQ0FBQyx5Q0FBZ0M7QUFDbkYsMkNBQTJDLG1CQUFPLENBQUMseUNBQWdDO0FBQ25GLGNBQWMsbUJBQU8sQ0FBQyxxQkFBWTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtFQUErRSw2Q0FBNkM7O0FBRTVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMzA4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsYWJsZVByb21pc2UgPSByZXF1aXJlKCcuLi8uLi91dGlsL2NhbmNlbGFibGVwcm9taXNlJyk7XG52YXIgRGVmYXVsdFBlZXJDb25uZWN0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vcGVlcmNvbm5lY3Rpb25tYW5hZ2VyJyk7XG52YXIgRGVmYXVsdFJvb21WMiA9IHJlcXVpcmUoJy4vcm9vbScpO1xudmFyIERlZmF1bHRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydCcpO1xudmFyIFNpZ25hbGluZ0Nvbm5lY3Rpb25EaXNjb25uZWN0ZWRFcnJvciA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvdHdpbGlvLXZpZGVvLWVycm9ycycpLlNpZ25hbGluZ0Nvbm5lY3Rpb25EaXNjb25uZWN0ZWRFcnJvcjtcbnZhciBTaWduYWxpbmdJbmNvbWluZ01lc3NhZ2VJbnZhbGlkRXJyb3IgPSByZXF1aXJlKCcuLi8uLi91dGlsL3R3aWxpby12aWRlby1lcnJvcnMnKS5TaWduYWxpbmdJbmNvbWluZ01lc3NhZ2VJbnZhbGlkRXJyb3I7XG52YXIgZmxhdE1hcCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKS5mbGF0TWFwO1xuXG5mdW5jdGlvbiBjcmVhdGVDYW5jZWxhYmxlUm9vbVNpZ25hbGluZ1Byb21pc2UodG9rZW4sIHVhLCBsb2NhbFBhcnRpY2lwYW50LCBpY2VTZXJ2ZXJTb3VyY2UsIGVuY29kaW5nUGFyYW1ldGVycywgcHJlZmVycmVkQ29kZWNzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBQZWVyQ29ubmVjdGlvbk1hbmFnZXI6IERlZmF1bHRQZWVyQ29ubmVjdGlvbk1hbmFnZXIsXG4gICAgUm9vbVYyOiBEZWZhdWx0Um9vbVYyLFxuICAgIFRyYW5zcG9ydDogRGVmYXVsdFRyYW5zcG9ydFxuICB9LCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucy5fc2RwU2VtYW50aWNzKSB7XG4gICAgb3B0aW9ucy5zZHBTZW1hbnRpY3MgPSBvcHRpb25zLl9zZHBTZW1hbnRpY3M7XG4gIH1cblxuICB2YXIgdHJhbnNwb3J0ID0gdm9pZCAwO1xuXG4gIHZhciBQZWVyQ29ubmVjdGlvbk1hbmFnZXIgPSBvcHRpb25zLlBlZXJDb25uZWN0aW9uTWFuYWdlcjtcbiAgdmFyIFJvb21WMiA9IG9wdGlvbnMuUm9vbVYyO1xuXG4gIHZhciBwZWVyQ29ubmVjdGlvbk1hbmFnZXIgPSBuZXcgUGVlckNvbm5lY3Rpb25NYW5hZ2VyKGljZVNlcnZlclNvdXJjZSwgZW5jb2RpbmdQYXJhbWV0ZXJzLCBwcmVmZXJyZWRDb2RlY3MsIG9wdGlvbnMpO1xuXG4gIHZhciB0cmFja1NlbmRlcnMgPSBmbGF0TWFwKGxvY2FsUGFydGljaXBhbnQudHJhY2tzLCBmdW5jdGlvbiAodHJhY2tWMikge1xuICAgIHJldHVybiBbdHJhY2tWMi50cmFja1RyYW5zY2VpdmVyXTtcbiAgfSk7XG5cbiAgcGVlckNvbm5lY3Rpb25NYW5hZ2VyLnNldENvbmZpZ3VyYXRpb24ob3B0aW9ucyk7XG4gIHBlZXJDb25uZWN0aW9uTWFuYWdlci5zZXRUcmFja1NlbmRlcnModHJhY2tTZW5kZXJzKTtcblxuICB2YXIgY2FuY2VsYXRpb25FcnJvciA9IG5ldyBFcnJvcignQ2FuY2VsZWQnKTtcblxuICByZXR1cm4gbmV3IENhbmNlbGFibGVQcm9taXNlKGZ1bmN0aW9uIG9uQ3JlYXRlKHJlc29sdmUsIHJlamVjdCwgaXNDYW5jZWxlZCkge1xuICAgIHBlZXJDb25uZWN0aW9uTWFuYWdlci5jcmVhdGVBbmRPZmZlcigpLnRoZW4oZnVuY3Rpb24gY3JlYXRlQW5kT2ZmZXJTdWNjZWVkZWQoKSB7XG4gICAgICAvLyBOT1RFKG1tYWxhdmFsbGkpOiBQZWVyQ29ubmVjdGlvbk1hbmFnZXIjY3JlYXRlQW5kT2ZmZXIoKSBxdWV1ZXMgdGhlXG4gICAgICAvLyBpbml0aWFsIG9mZmVyIGluIHRoZSBldmVudCBxdWV1ZSBmb3IgdGhlICdkZXNjcmlwdGlvbicgZXZlbnQuIFNvLFxuICAgICAgLy8gd2UgYXJlIGRlcXVldWVpbmcgdG8gcHJldmVudCB0aGUgc3B1cmlvdXMgJ3VwZGF0ZScgbWVzc2FnZSBzZW50IGJ5XG4gICAgICAvLyB0aGUgY2xpZW50IGFmdGVyIGNvbm5lY3RpbmcgdG8gYSByb29tLlxuICAgICAgcGVlckNvbm5lY3Rpb25NYW5hZ2VyLmRlcXVldWUoJ2Rlc2NyaXB0aW9uJyk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGlmIChpc0NhbmNlbGVkKCkpIHtcbiAgICAgICAgICByZWplY3QoY2FuY2VsYXRpb25FcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zcG9ydE9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucy53c1NlcnZlckluc2lnaHRzID09PSAnc3RyaW5nJyA/IHsgd3NTZXJ2ZXJJbnNpZ2h0czogb3B0aW9ucy53c1NlcnZlckluc2lnaHRzIH0gOiB7fTtcblxuICAgICAgICBpZiAob3B0aW9ucy5JbnNpZ2h0c1B1Ymxpc2hlcikge1xuICAgICAgICAgIHRyYW5zcG9ydE9wdGlvbnMuSW5zaWdodHNQdWJsaXNoZXIgPSBvcHRpb25zLkluc2lnaHRzUHVibGlzaGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuTnVsbEluc2lnaHRzUHVibGlzaGVyKSB7XG4gICAgICAgICAgdHJhbnNwb3J0T3B0aW9ucy5OdWxsSW5zaWdodHNQdWJsaXNoZXIgPSBvcHRpb25zLk51bGxJbnNpZ2h0c1B1Ymxpc2hlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zcG9ydE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICBkb21pbmFudFNwZWFrZXI6IG9wdGlvbnMuZG9taW5hbnRTcGVha2VyLFxuICAgICAgICAgIGVudmlyb25tZW50OiBvcHRpb25zLmVudmlyb25tZW50LFxuICAgICAgICAgIG5ldHdvcmtRdWFsaXR5OiBvcHRpb25zLm5ldHdvcmtRdWFsaXR5LFxuICAgICAgICAgIGljZVNlcnZlclNvdXJjZVN0YXR1czogaWNlU2VydmVyU291cmNlLnN0YXR1cyxcbiAgICAgICAgICBpbnNpZ2h0czogb3B0aW9ucy5pbnNpZ2h0cyxcbiAgICAgICAgICByZWFsbTogb3B0aW9ucy5yZWFsbSxcbiAgICAgICAgICBzZHBTZW1hbnRpY3M6IG9wdGlvbnMuc2RwU2VtYW50aWNzXG4gICAgICAgIH0sIHRyYW5zcG9ydE9wdGlvbnMpO1xuXG4gICAgICAgIHZhciBUcmFuc3BvcnQgPSBvcHRpb25zLlRyYW5zcG9ydDtcbiAgICAgICAgdHJhbnNwb3J0ID0gbmV3IFRyYW5zcG9ydChvcHRpb25zLm5hbWUsIHRva2VuLCBsb2NhbFBhcnRpY2lwYW50LCBwZWVyQ29ubmVjdGlvbk1hbmFnZXIsIHVhLCB0cmFuc3BvcnRPcHRpb25zKTtcblxuICAgICAgICB0cmFuc3BvcnQub25jZSgnY29ubmVjdGVkJywgZnVuY3Rpb24gY29ubmVjdGVkKGluaXRpYWxTdGF0ZSkge1xuICAgICAgICAgIGlmIChpc0NhbmNlbGVkKCkpIHtcbiAgICAgICAgICAgIHJlamVjdChjYW5jZWxhdGlvbkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbG9jYWxQYXJ0aWNpcGFudFN0YXRlID0gaW5pdGlhbFN0YXRlLnBhcnRpY2lwYW50O1xuICAgICAgICAgIGlmICghbG9jYWxQYXJ0aWNpcGFudFN0YXRlKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IFNpZ25hbGluZ0luY29taW5nTWVzc2FnZUludmFsaWRFcnJvcigpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKG5ldyBSb29tVjIobG9jYWxQYXJ0aWNpcGFudCwgaW5pdGlhbFN0YXRlLCB0cmFuc3BvcnQsIHBlZXJDb25uZWN0aW9uTWFuYWdlciwgb3B0aW9ucykpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0cmFuc3BvcnQub25jZSgnc3RhdGVDaGFuZ2VkJywgZnVuY3Rpb24gc3RhdGVDaGFuZ2VkKHN0YXRlLCBlcnJvcikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIGVycm9yID0gZXJyb3IgfHwgbmV3IFNpZ25hbGluZ0Nvbm5lY3Rpb25EaXNjb25uZWN0ZWRFcnJvcigpO1xuICAgICAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gY3JlYXRlUm9vbVNpZ25hbGluZ1N1Y2NlZWRlZChyb29tU2lnbmFsaW5nKSB7XG4gICAgICBpZiAoaXNDYW5jZWxlZCgpKSB7XG4gICAgICAgIHBlZXJDb25uZWN0aW9uTWFuYWdlci5jbG9zZSgpO1xuICAgICAgICByb29tU2lnbmFsaW5nLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbGF0aW9uRXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNvbHZlKHJvb21TaWduYWxpbmcpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgIGlmICh0cmFuc3BvcnQpIHtcbiAgICAgICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHBlZXJDb25uZWN0aW9uTWFuYWdlci5jbG9zZSgpO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfSwgZnVuY3Rpb24gb25DYW5jZWwoKSB7XG4gICAgaWYgKHRyYW5zcG9ydCkge1xuICAgICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDYW5jZWxhYmxlUm9vbVNpZ25hbGluZ1Byb21pc2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvY2FuY2VsYWJsZXJvb21zaWduYWxpbmdwcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///308\n");

/***/ }),
/* 309 */
/*!*****************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/peerconnectionmanager.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PeerConnectionV2 = __webpack_require__(/*! ./peerconnection */ 310);\nvar MediaTrackSender = __webpack_require__(/*! ../../media/track/sender */ 237);\nvar QueueingEventEmitter = __webpack_require__(/*! ../../queueingeventemitter */ 321);\nvar util = __webpack_require__(/*! ../../util */ 206);\n\nvar isFirefox = util.guessBrowser() === 'firefox';\n\n/**\n * {@link PeerConnectionManager} manages multiple {@link PeerConnectionV2}s.\n * @extends QueueingEventEmitter\n * @emits PeerConnectionManager#candidates\n * @emits PeerConnectionManager#description\n * @emits PeerConnectionManager#iceConnectionStateChanged\n * @emits PeerConnectionManager#trackAdded\n */\n\nvar PeerConnectionManager = function (_QueueingEventEmitter) {\n  _inherits(PeerConnectionManager, _QueueingEventEmitter);\n\n  /**\n   * Construct {@link PeerConnectionManager}.\n   * @param {IceServerSource} iceServerSource\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   */\n  function PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionManager);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionManager.__proto__ || Object.getPrototypeOf(PeerConnectionManager)).call(this));\n\n    options = Object.assign({\n      audioContextFactory: isFirefox ? __webpack_require__(/*! ../../webaudio/audiocontext */ 242) : null,\n      PeerConnectionV2: PeerConnectionV2\n    }, options);\n\n    var audioContext = options.audioContextFactory ? options.audioContextFactory.getOrCreate(_this) : null;\n\n    // NOTE(mroberts): If we're using an AudioContext, we don't need to specify\n    // `offerToReceiveAudio` in RTCOfferOptions.\n    var offerOptions = audioContext ? { offerToReceiveVideo: true } : { offerToReceiveAudio: true, offerToReceiveVideo: true };\n\n    Object.defineProperties(_this, {\n      _audioContextFactory: {\n        value: options.audioContextFactory\n      },\n      _closedPeerConnectionIds: {\n        value: new Set()\n      },\n      _configuration: {\n        writable: true,\n        value: null\n      },\n      _configurationDeferred: {\n        writable: true,\n        value: util.defer()\n      },\n      _dummyAudioTrackSender: {\n        value: audioContext ? new MediaTrackSender(createDummyAudioMediaStreamTrack(audioContext)) : null\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _iceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _iceServerSource: {\n        value: iceServerSource\n      },\n      _dataTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _mediaTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _offerOptions: {\n        value: offerOptions\n      },\n      _peerConnections: {\n        value: new Map()\n      },\n      _preferredCodecs: {\n        value: preferredCodecs\n      },\n      _PeerConnectionV2: {\n        value: options.PeerConnectionV2\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * A summarized RTCIceConnectionState across all the\n   * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n   * @property {RTCIceConnectionState}\n   */\n\n\n  _createClass(PeerConnectionManager, [{\n    key: '_getConfiguration',\n\n\n    /**\n     * Get the {@link PeerConnectionManager}'s configuration.\n     * @private\n     * @returns {Promise<object>}\n     */\n    value: function _getConfiguration() {\n      return this._configurationDeferred.promise;\n    }\n\n    /**\n     * Get or create a {@link PeerConnectionV2}.\n     * @private\n     * @param {string} id\n     * @param {object} [configuration]\n     * @returns {PeerConnectionV2}\n     */\n\n  }, {\n    key: '_getOrCreate',\n    value: function _getOrCreate(id, configuration) {\n      var _this2 = this;\n\n      var self = this;\n      var peerConnection = this._peerConnections.get(id);\n      if (!peerConnection) {\n        var _PeerConnectionV = this._PeerConnectionV2;\n\n        var options = Object.assign({\n          dummyAudioMediaStreamTrack: this._dummyAudioTrackSender ? this._dummyAudioTrackSender.track : null,\n          offerOptions: this._offerOptions\n        }, configuration);\n        peerConnection = new _PeerConnectionV(id, this._encodingParameters, this._preferredCodecs, options);\n\n        this._peerConnections.set(peerConnection.id, peerConnection);\n        peerConnection.on('candidates', this.queue.bind(this, 'candidates'));\n        peerConnection.on('description', this.queue.bind(this, 'description'));\n        peerConnection.on('trackAdded', this.queue.bind(this, 'trackAdded'));\n        peerConnection.on('stateChanged', function stateChanged(state) {\n          if (state === 'closed') {\n            peerConnection.removeListener('stateChanged', stateChanged);\n            self._peerConnections.delete(peerConnection.id);\n            self._closedPeerConnectionIds.add(peerConnection.id);\n            updateIceConnectionState(self);\n          }\n        });\n        peerConnection.on('iceConnectionStateChanged', function () {\n          return updateIceConnectionState(_this2);\n        });\n\n        this._dataTrackSenders.forEach(peerConnection.addDataTrackSender, peerConnection);\n        this._mediaTrackSenders.forEach(peerConnection.addMediaTrackSender, peerConnection);\n\n        updateIceConnectionState(this);\n      }\n      return peerConnection;\n    }\n\n    /**\n     * Close all the {@link PeerConnectionV2}s in this {@link PeerConnectionManager}.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._iceServerSource.isStarted) {\n        this._iceServerSource.stop();\n      }\n      this._peerConnections.forEach(function (peerConnection) {\n        peerConnection.close();\n      });\n      if (this._dummyAudioTrackSender) {\n        this._dummyAudioTrackSender.track.stop();\n      }\n      if (this._audioContextFactory) {\n        this._audioContextFactory.release(this);\n      }\n      updateIceConnectionState(this);\n      return this;\n    }\n\n    /**\n     * Create a new {@link PeerConnectionV2} on this {@link PeerConnectionManager}.\n     * Then, create a new offer with the newly-created {@link PeerConnectionV2}.\n     * @return {Promise<this>}\n     */\n\n  }, {\n    key: 'createAndOffer',\n    value: function createAndOffer() {\n      var _this3 = this;\n\n      return this._getConfiguration().then(function (configuration) {\n        var id = void 0;\n        do {\n          id = util.makeUUID();\n        } while (_this3._peerConnections.has(id));\n\n        return _this3._getOrCreate(id, configuration);\n      }).then(function (peerConnection) {\n        return peerConnection.offer();\n      }).then(function () {\n        return _this3;\n      });\n    }\n\n    /**\n     * Get the {@link DataTrackReceiver}s and {@link MediaTrackReceiver}s of all\n     * the {@link PeerConnectionV2}s.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return util.flatMap(this._peerConnections, function (peerConnection) {\n        return peerConnection.getTrackReceivers();\n      });\n    }\n\n    /**\n     * Get the states of all {@link PeerConnectionV2}s.\n     * @returns {Array<object>}\n     */\n\n  }, {\n    key: 'getStates',\n    value: function getStates() {\n      var peerConnectionStates = [];\n      this._peerConnections.forEach(function (peerConnection) {\n        var peerConnectionState = peerConnection.getState();\n        if (peerConnectionState) {\n          peerConnectionStates.push(peerConnectionState);\n        }\n      });\n      return peerConnectionStates;\n    }\n\n    /**\n     * Set the {@link PeerConnectionManager}'s configuration.\n     * @param {object} configuration\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (this._configuration) {\n        this._configurationDeferred = util.defer();\n        this._peerConnections.forEach(function (peerConnection) {\n          peerConnection.setConfiguration(configuration);\n        });\n      }\n      this._configuration = configuration;\n      this._configurationDeferred.resolve(configuration);\n      return this;\n    }\n\n    /**\n     * Set the {@link DataTrackSender}s and {@link MediaTrackSenders} on the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @param {Array<DataTrackSender|MediaTrackSender>} trackSenders\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setTrackSenders',\n    value: function setTrackSenders(trackSenders) {\n      var dataTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n        return trackSender.kind === 'data';\n      }));\n\n      var mediaTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n        return trackSender && (trackSender.kind === 'audio' || trackSender.kind === 'video');\n      }));\n\n      var changes = getTrackSenderChanges(this, dataTrackSenders, mediaTrackSenders);\n      this._dataTrackSenders = dataTrackSenders;\n      this._mediaTrackSenders = mediaTrackSenders;\n      applyTrackSenderChanges(this, changes);\n\n      return this;\n    }\n\n    /**\n     * Update the {@link PeerConnectionManager}.\n     * @param {Array<object>} peerConnectionStates\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionStates) {\n      var _this4 = this;\n\n      return this._getConfiguration().then(function (configuration) {\n        return Promise.all(peerConnectionStates.map(function (peerConnectionState) {\n          if (_this4._closedPeerConnectionIds.has(peerConnectionState.id)) {\n            return null;\n          }\n          var peerConnection = _this4._getOrCreate(peerConnectionState.id, configuration);\n          return peerConnection.update(peerConnectionState);\n        }));\n      }).then(function () {\n        return _this4;\n      });\n    }\n\n    /**\n     * Get the {@link PeerConnectionManager}'s media statistics.\n     * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var peerConnections = Array.from(this._peerConnections.values());\n      return Promise.all(peerConnections.map(function (peerConnection) {\n        return peerConnection.getStats().then(function (response) {\n          return [peerConnection.id, response];\n        });\n      })).then(function (responses) {\n        return new Map(responses);\n      });\n    }\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._iceConnectionState;\n    }\n  }]);\n\n  return PeerConnectionManager;\n}(QueueingEventEmitter);\n\n/**\n * Create a dummy audio MediaStreamTrack with the given AudioContext.\n * @private\n * @param {AudioContext} audioContext\n * @return {MediaStreamTrack}\n */\n\n\nfunction createDummyAudioMediaStreamTrack(audioContext) {\n  var mediaStreamDestination = audioContext.createMediaStreamDestination();\n  return mediaStreamDestination.stream.getAudioTracks()[0];\n}\n\n/**\n * @event {PeerConnectionManager#candidates}\n * @param {object} candidates\n */\n\n/**\n * @event {PeerConnectionManager#description}\n * @param {object} description\n */\n\n/**\n * @event {PeerConnectionManager#iceConnectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#trackAdded}\n * @param {MediaStreamTrack|DataTrackReceiver} mediaStreamTrackOrDataTrackReceiver\n */\n\n/**\n * Apply {@link TrackSenderChanges}.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {TrackSenderChanges} changes\n * @returns {void}\n */\nfunction applyTrackSenderChanges(peerConnectionManager, changes) {\n  if (changes.data.add.size || changes.data.remove.size || changes.media.add.size || changes.media.remove.size) {\n    peerConnectionManager._peerConnections.forEach(function (peerConnection) {\n      changes.data.remove.forEach(peerConnection.removeDataTrackSender, peerConnection);\n      changes.media.remove.forEach(peerConnection.removeMediaTrackSender, peerConnection);\n      changes.data.add.forEach(peerConnection.addDataTrackSender, peerConnection);\n      changes.media.add.forEach(peerConnection.addMediaTrackSender, peerConnection);\n      peerConnection.offer();\n    });\n  }\n}\n\n/**\n * @interface DataTrackSenderChanges\n * @property {Set<DataTrackSender>} add\n * @property {Set<DataTrackSender>} remove\n */\n\n/**\n * Get the {@Link DataTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @returns {DataTrackSenderChanges} changes\n */\nfunction getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders) {\n  var dataTrackSendersToAdd = util.difference(dataTrackSenders, peerConnectionManager._dataTrackSenders);\n  var dataTrackSendersToRemove = util.difference(peerConnectionManager._dataTrackSenders, dataTrackSenders);\n  return {\n    add: dataTrackSendersToAdd,\n    remove: dataTrackSendersToRemove\n  };\n}\n\n/**\n * @interface TrackSenderChanges\n * @property {DataTrackSenderChanges} data\n * @property {MediaTrackSenderChanges} media\n */\n\n/**\n * Get {@link DataTrackSender} and {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {TrackSenderChanges} changes\n */\nfunction getTrackSenderChanges(peerConnectionManager, dataTrackSenders, mediaTrackSenders) {\n  return {\n    data: getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders),\n    media: getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders)\n  };\n}\n\n/**\n * @interface MediaTrackSenderChanges\n * @property {Set<MediaTrackSender>} add\n * @property {Set<MediaTrackSender>} remove\n */\n\n/**\n * Get the {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {MediaTrackSenderChanges} changes\n */\nfunction getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders) {\n  var mediaTrackSendersToAdd = util.difference(mediaTrackSenders, peerConnectionManager._mediaTrackSenders);\n  var mediaTrackSendersToRemove = util.difference(peerConnectionManager._mediaTrackSenders, mediaTrackSenders);\n  return {\n    add: mediaTrackSendersToAdd,\n    remove: mediaTrackSendersToRemove\n  };\n}\n\n/**\n * This object maps RTCIceConnectionState values to a \"rank\".\n */\nvar toRank = {\n  new: 0,\n  checking: 1,\n  connected: 2,\n  completed: 3,\n  disconnected: -1,\n  failed: -2,\n  closed: -3\n};\n\n/**\n * This object maps \"rank\" back to RTCIceConnectionState values.\n */\nvar fromRank = void 0;\n\n/**\n * `Object.keys` is not supported in older browsers, so we can't just\n * synchronously call it in this module; we need to defer invoking it until we\n * know we're in a modern environment (i.e., anything that supports WebRTC).\n * @returns {object} fromRank\n */\nfunction createFromRank() {\n  return Object.keys(toRank).reduce(function (fromRank, state) {\n    return Object.assign(fromRank, _defineProperty({}, toRank[state], state));\n  }, {});\n}\n\n/**\n * Summarize ICE connection stats.\n * @param {Array<RTCIceConnectionState>} states\n * @returns {RTCIceConnectionState} summary\n */\nfunction summarizeIceConnectionStates(states) {\n  if (!states.length) {\n    return 'new';\n  }\n  fromRank = fromRank || createFromRank();\n  return states.reduce(function (state1, state2) {\n    return fromRank[Math.max(toRank[state1], toRank[state2])];\n  });\n}\n\n/**\n * Update the {@link PeerConnectionManager}'s `iceConnectionState`, and emit an\n * \"iceConnectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\nfunction updateIceConnectionState(pcm) {\n  pcm._lastIceConnectionState = pcm.iceConnectionState;\n  pcm._iceConnectionState = summarizeIceConnectionStates([].concat(_toConsumableArray(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.iceConnectionState;\n  }));\n  if (pcm.iceConnectionState !== pcm._lastIceConnectionState) {\n    pcm.emit('iceConnectionStateChanged');\n  }\n}\n\nmodule.exports = PeerConnectionManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///309\n");

/***/ }),
/* 310 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/peerconnection.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar WebRTC = __webpack_require__(/*! @twilio/webrtc */ 212);\nvar DefaultMediaStream = WebRTC.MediaStream;\nvar DefaultRTCIceCandidate = WebRTC.RTCIceCandidate;\nvar DefaultRTCPeerConnection = WebRTC.RTCPeerConnection;\nvar DefaultRTCSessionDescription = WebRTC.RTCSessionDescription;\nvar getStatistics = WebRTC.getStats;\nvar getMediaSections = __webpack_require__(/*! ../../util/sdp */ 211).getMediaSections;\nvar guessBrowser = __webpack_require__(/*! ../../util */ 206).guessBrowser;\nvar oncePerTick = __webpack_require__(/*! ../../util */ 206).oncePerTick;\nvar setBitrateParameters = __webpack_require__(/*! ../../util/sdp */ 211).setBitrateParameters;\nvar setCodecPreferences = __webpack_require__(/*! ../../util/sdp */ 211).setCodecPreferences;\nvar setSimulcast = __webpack_require__(/*! ../../util/sdp */ 211).setSimulcast;\nvar IceBox = __webpack_require__(/*! ./icebox */ 312);\nvar MediaClientLocalDescFailedError = __webpack_require__(/*! ../../util/twilio-video-errors */ 209).MediaClientLocalDescFailedError;\nvar MediaClientRemoteDescFailedError = __webpack_require__(/*! ../../util/twilio-video-errors */ 209).MediaClientRemoteDescFailedError;\nvar DataTrackReceiver = __webpack_require__(/*! ../../data/receiver */ 314);\nvar MediaTrackReceiver = __webpack_require__(/*! ../../media/track/receiver */ 316);\nvar StateMachine = __webpack_require__(/*! ../../statemachine */ 215);\n\nvar _require = __webpack_require__(/*! ../../util */ 206),\n    buildLogLevels = _require.buildLogLevels,\n    getSdpFormat = _require.getSdpFormat,\n    makeUUID = _require.makeUUID;\n\nvar _require2 = __webpack_require__(/*! ../../util/constants */ 208),\n    DEFAULT_LOG_LEVEL = _require2.DEFAULT_LOG_LEVEL;\n\nvar Log = __webpack_require__(/*! ../../util/log */ 214);\nvar IdentityTrackMatcher = __webpack_require__(/*! ../../util/sdp/trackmatcher/identity */ 317);\nvar OrderedTrackMatcher = __webpack_require__(/*! ../../util/sdp/trackmatcher/ordered */ 318);\nvar MIDTrackMatcher = __webpack_require__(/*! ../../util/sdp/trackmatcher/mid */ 319);\nvar workaroundIssue8329 = __webpack_require__(/*! ../../util/sdp/issue8329 */ 320);\n\nvar isChrome = guessBrowser() === 'chrome';\nvar isFirefox = guessBrowser() === 'firefox';\nvar isSafari = guessBrowser() === 'safari';\n\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\n\nvar PeerConnectionV2 = function (_StateMachine) {\n  _inherits(PeerConnectionV2, _StateMachine);\n\n  /**\n   * Construct a {@link PeerConnectionV2}.\n   * @param {string} id\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} [options]\n   */\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionV2);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\n\n    options = Object.assign({\n      dummyAudioMediaStreamTrack: null,\n      iceServers: [],\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription\n    }, options);\n\n    var configuration = getConfiguration(options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n    var sdpFormat = getSdpFormat(options.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n\n    var localMediaStream = isUnifiedPlan && RTCPeerConnection.prototype.addTransceiver ? null : new options.MediaStream();\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    }\n\n    // NOTE(mroberts): We do this to workaround the following bug:\n    //\n    //   https://bugzilla.mozilla.org/show_bug.cgi?id=1481335\n    //\n    if (isFirefox) {\n      peerConnection.createDataChannel(makeUUID());\n    }\n\n    Object.defineProperties(_this, {\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: options.log ? options.log.createLog('signaling', _this) : new Log('webrtc', _this, logLevels)\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        value: options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map()\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n\n    encodingParameters.on('changed', oncePerTick(_this.offer.bind(_this)));\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n\n    var self = _this;\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n      self.removeListener('stateChanged', stateChanged);\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n    return _this;\n  }\n\n  /**\n   * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n   * RTCIceConnectionState.\n   * @property {RTCIceConnectionState}\n   */\n\n\n  _createClass(PeerConnectionV2, [{\n    key: '_addIceCandidate',\n\n\n    /**\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\n     * @private\n     * @param {object} candidate\n     * @returns {Promise<void>}\n     */\n    value: function _addIceCandidate(candidate) {\n      var _this2 = this;\n\n      return Promise.resolve().then(function () {\n        candidate = new _this2._RTCIceCandidate(candidate);\n        return _this2._peerConnection.addIceCandidate(candidate);\n      });\n    }\n\n    /**\n     * Add ICE candidates to the {@link PeerConnectionV2}.\n     * @private\n     * @param {Array<object>} candidates\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_addIceCandidates',\n    value: function _addIceCandidates(candidates) {\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n    }\n\n    /**\n     * Check the {@link IceBox}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_checkIceBox',\n    value: function _checkIceBox(description) {\n      var ufrag = getUfrag(description);\n      if (!ufrag) {\n        return Promise.resolve();\n      }\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\n      return this._addIceCandidates(candidates);\n    }\n\n    /**\n     * Create an answer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_answer',\n    value: function _answer(offer) {\n      var _this3 = this;\n\n      return Promise.resolve().then(function () {\n        if (!_this3._negotiationRole) {\n          _this3._negotiationRole = 'answerer';\n        }\n        return _this3._setRemoteDescription(offer);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        return _this3._peerConnection.createAnswer();\n      }).then(function (answer) {\n        if (!isFirefox) {\n          answer = workaroundIssue8329(answer);\n        }\n        return _this3._setLocalDescription(answer);\n      }).then(function () {\n        return _this3._checkIceBox(offer);\n      }).then(function () {\n        return _this3._queuedDescription && _this3._updateDescription(_this3._queuedDescription);\n      }).then(function () {\n        _this3._queuedDescription = null;\n        return _this3._maybeReoffer(_this3._peerConnection.localDescription);\n      }).catch(function (error) {\n        throw error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n      });\n    }\n\n    /**\n     * Close the underlying RTCPeerConnection. Returns false if the\n     * RTCPeerConnection was already closed.\n     * @private\n     * @returns {boolean}\n     */\n\n  }, {\n    key: '_close',\n    value: function _close() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.close();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Handle a \"datachannel\" event.\n     * @private\n     * @param {RTCDataChannelEvent} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleDataChannelEvent',\n    value: function _handleDataChannelEvent(event) {\n      var _this4 = this;\n\n      var dataChannel = event.channel;\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n      this._dataTrackReceivers.add(dataTrackReceiver);\n\n      dataChannel.addEventListener('close', function () {\n        _this4._dataTrackReceivers.delete(dataTrackReceiver);\n      });\n\n      this.emit('trackAdded', dataTrackReceiver);\n    }\n\n    /**\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_handleGlare',\n    value: function _handleGlare(offer) {\n      var _this5 = this;\n\n      this._log.debug('Glare detected; rolling back');\n      if (this._isRestartingIce) {\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n        this._isRestartingIce = false;\n        this._shouldRestartIce = true;\n      }\n      return Promise.resolve().then(function () {\n        return _this5._setLocalDescription({ type: 'rollback' });\n      }).then(function () {\n        _this5._needsAnswer = false;\n        return _this5._answer(offer);\n      }).then(function (didReoffer) {\n        return didReoffer ? Promise.resolve() : _this5._offer();\n      });\n    }\n\n    /**\n     * Handle an ICE candidate event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceCandidateEvent',\n    value: function _handleIceCandidateEvent(event) {\n      if (event.candidate) {\n        this._localCandidates.push(event.candidate);\n      }\n      var peerConnectionState = {\n        ice: {\n          candidates: this._localCandidates.slice(),\n          revision: this._localCandidatesRevision++,\n          ufrag: this._localUfrag\n        },\n        id: this.id\n      };\n      if (!event.candidate) {\n        peerConnectionState.ice.complete = true;\n      }\n      this.emit('candidates', peerConnectionState);\n    }\n\n    /**\n     * Handle an ICE connection state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceConnectionStateChange',\n    value: function _handleIceConnectionStateChange() {\n      var iceConnectionState = this._peerConnection.iceConnectionState;\n\n\n      this._log.debug('ICE connection state is \"' + iceConnectionState + '\"');\n\n      // Case 1: Transition to \"failed\".\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n        this._log.warn('ICE failed; attempting to restart ICE');\n        this._shouldRestartIce = true;\n        this.offer();\n      }\n\n      // Case 2: Transition from \"failed\".\n      else if (this._lastIceConnectionState === 'failed' && (iceConnectionState === 'connected' || iceConnectionState === 'completed')) {\n          this._log.info('ICE reconnected');\n        }\n\n      this._lastIceConnectionState = iceConnectionState;\n      this.emit('iceConnectionStateChanged');\n    }\n\n    /**\n     * Handle a signaling state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleSignalingStateChange',\n    value: function _handleSignalingStateChange() {\n      if (this._peerConnection.signalingState === 'closed' && this.state !== 'closed') {\n        this.preempt('closed');\n      }\n    }\n\n    /**\n     * Handle a track event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleTrackEvent',\n    value: function _handleTrackEvent(event) {\n      var _this6 = this;\n\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n      if (!this._trackMatcher) {\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher()\n        // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n        // support, we have to use the same hacky solution as Safari. Revisit\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\n        // the same technique as Firefox.\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n      }\n\n      // NOTE(mmalavalli): For unified plan sdps, calling addTransceiver with\n      // the same MediaStreamTrack a second time will generate sdps where the\n      // MediaStreamTrack ID does not match the MSID in the corresponding\n      // m= section. Due to this, MIDTrackMatcher#update will not update the\n      // mid corresponding to the MediaStreamTrack ID. Therefore, \"trackSubscribed\"\n      // will not be fired for the corresponding RemoteTrack.\n      //\n      // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=894231\n      // Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1498036\n      //\n      // TODO(mmalavalli): Revisit this either when the bugs are fixed or when we\n      // get clarification about spec-compliant behavior of addTransceiver.\n      //\n      this._trackMatcher.update(sdp);\n\n      var mediaStreamTrack = event.track;\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack);\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\n\n      mediaStreamTrack.addEventListener('ended', function () {\n        _this6._mediaTrackReceivers.delete(mediaTrackReceiver);\n      });\n\n      this.emit('trackAdded', mediaTrackReceiver);\n    }\n\n    /**\n     * Conditionally re-offer.\n     * @private\n     * @param {?RTCSessionDescriptionInit} localDescription\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_maybeReoffer',\n    value: function _maybeReoffer(localDescription) {\n      var shouldReoffer = this._shouldOffer;\n\n      if (localDescription && localDescription.sdp) {\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the remote RTCPeerConnection sends\n        // an offer with fewer audio m= lines than the number of audio RTCRTPSenders\n        // in the local RTCPeerConnection, then the local RTCPeerConnection creates\n        // an answer with the same number of audio m= lines as in the offer. This\n        // behavior was triggered by the removal of 'offerToReceiveAudio' from the\n        // default RTCOfferOptions. Ideally, the local RTCPeerConnection should create\n        // an answer with the same number of audio m= lines as the number of\n        // RTCRTPSenders. In order to achieve this,the local RTCPeerConnection\n        // initiates renegotiation.\n        //\n        // We can reduce the number of cases where renegotiation is needed by\n        // re-introducing 'offerToReceiveAudio' to the default RTCOfferOptions with a\n        // value > 1.\n        if (this._isUnifiedPlan && localDescription.type === 'answer') {\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\n            return sender.track;\n          });\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\n          }, shouldReoffer);\n        }\n\n        // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n        // but no m= application section.\n        var hasDataTrack = this._dataChannels.size > 0;\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n      }\n\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\n      return promise.then(function () {\n        return shouldReoffer;\n      });\n    }\n\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_offer',\n    value: function _offer() {\n      var _this7 = this;\n\n      var offerOptions = Object.assign({}, this._offerOptions);\n      this._needsAnswer = true;\n      if (this._shouldRestartIce) {\n        this._shouldRestartIce = false;\n        this._isRestartingIce = true;\n        offerOptions.iceRestart = true;\n      }\n      return Promise.resolve().then(function () {\n        return _this7._peerConnection.createOffer(offerOptions);\n      }).catch(function () {\n        throw new MediaClientLocalDescFailedError();\n      }).then(function (offer) {\n        if (!isFirefox) {\n          offer = workaroundIssue8329(offer);\n        }\n\n        var updatedSdp = _this7._setCodecPreferences(offer.sdp, _this7._preferredAudioCodecs, _this7._preferredVideoCodecs);\n\n        _this7._shouldOffer = false;\n        if (!_this7._negotiationRole) {\n          _this7._negotiationRole = 'offerer';\n        }\n        return _this7._setLocalDescription({\n          type: 'offer',\n          sdp: updatedSdp\n        });\n      });\n    }\n\n    /**\n     * Set a local description on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setLocalDescription',\n    value: function _setLocalDescription(description) {\n      var _this8 = this;\n\n      var vp8SimulcastRequested = this._preferredVideoCodecs.some(function (codecSettings) {\n        return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n      });\n\n      return Promise.resolve().then(function () {\n        if (description.sdp) {\n          // NOTE(mmalavalli): We do not directly modify \"description.sdp\" here as\n          // \"description\" might be an RTCSessionDescription, in which case its\n          // properties are immutable.\n          description = {\n            type: description.type,\n            sdp: isChrome && vp8SimulcastRequested ? _this8._setSimulcast(description.sdp, _this8._sdpFormat, _this8._trackIdsToAttributes) : description.sdp\n          };\n        }\n        description = new _this8._RTCSessionDescription(description);\n        return _this8._peerConnection.setLocalDescription(description);\n      }).catch(function (error) {\n        _this8._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n        if (description.sdp) {\n          _this8._log.warn('The SDP was ' + description.sdp);\n        }\n        throw new MediaClientLocalDescFailedError();\n      }).then(function () {\n        if (description.type !== 'rollback') {\n          _this8._localDescription = description;\n          _this8._localCandidates = [];\n          if (description.type === 'offer') {\n            _this8._descriptionRevision++;\n          } else if (description.type === 'answer') {\n            _this8._lastStableDescriptionRevision = _this8._descriptionRevision;\n          }\n          _this8._localUfrag = getUfrag(description);\n          _this8.emit('description', _this8.getState());\n        }\n      });\n    }\n\n    /**\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setRemoteDescription',\n    value: function _setRemoteDescription(description) {\n      var _this9 = this;\n\n      if (description.sdp) {\n        description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\n        // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n        // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n        // doesn't include any new MediaStreams in Firefox. Its `streams` member\n        // will always be the empty Array.\n        if (isFirefox) {\n          description.sdp = filterOutMediaStreamIds(description.sdp);\n        }\n      }\n      description = new this._RTCSessionDescription(description);\n      return this._peerConnection.setRemoteDescription(description).then(function () {\n        if (description.type === 'answer' && _this9._isRestartingIce) {\n          _this9._log.debug('An ICE restart was in-progress and is now completed');\n          _this9._isRestartingIce = false;\n        }\n        if (_this9._isUnifiedPlan) {\n          _this9._peerConnection.getTransceivers().forEach(function (transceiver) {\n            if (shouldStopTransceiver(description.sdp, transceiver)) {\n              transceiver.stop();\n            }\n          });\n        }\n      }, function (error) {\n        _this9._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n        if (description.sdp) {\n          _this9._log.warn('The SDP was ' + description.sdp);\n        }\n        throw error;\n      });\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}'s description.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateDescription',\n    value: function _updateDescription(description) {\n      var _this10 = this;\n\n      switch (description.type) {\n        case 'answer':\n        case 'pranswer':\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n            return Promise.resolve();\n          }\n          this._descriptionRevision = description.revision;\n          break;\n        case 'close':\n          return this._close();\n        case 'create-offer':\n          if (description.revision <= this._lastStableDescriptionRevision) {\n            return Promise.resolve();\n          } else if (this._needsAnswer) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n          this._descriptionRevision = description.revision;\n          return this._offer();\n        case 'offer':\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n            return Promise.resolve();\n          }\n          if (this._peerConnection.signalingState === 'have-local-offer') {\n            if (this._needsAnswer && this._descriptionRevision === 1) {\n              this._queuedDescription = description;\n              return Promise.resolve();\n            }\n            this._descriptionRevision = description.revision;\n            return this._handleGlare(description);\n          }\n          this._descriptionRevision = description.revision;\n          return this._answer(description).then(function () {});\n        default:\n        // Do nothing.\n      }\n\n      // Handle answer or pranswer.\n      var revision = description.revision;\n      return Promise.resolve().then(function () {\n        return _this10._setRemoteDescription(description);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        _this10._lastStableDescriptionRevision = revision;\n        _this10._needsAnswer = false;\n        return _this10._checkIceBox(description);\n      }).then(function () {\n        return _this10._queuedDescription && _this10._updateDescription(_this10._queuedDescription);\n      }).then(function () {\n        _this10._queuedDescription = null;\n        return _this10._maybeReoffer(_this10._peerConnection.localDescription).then(function () {});\n      });\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\n     * @private\n     * @param {object} iceState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateIce',\n    value: function _updateIce(iceState) {\n      var candidates = this._remoteCandidates.update(iceState);\n      return this._addIceCandidates(candidates);\n    }\n\n    /**\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addDataTrackSender',\n    value: function addDataTrackSender(dataTrackSender) {\n      if (this._dataChannels.has(dataTrackSender)) {\n        return;\n      }\n      try {\n        var dataChannelDict = {\n          ordered: dataTrackSender.ordered\n        };\n        if (dataTrackSender.maxPacketLifeTime !== null) {\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n        }\n        if (dataTrackSender.maxRetransmits !== null) {\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n        }\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n        dataTrackSender.addDataChannel(dataChannel);\n        this._dataChannels.set(dataTrackSender, dataChannel);\n      } catch (error) {\n        // Do nothing.\n      }\n    }\n\n    /**\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addMediaTrackSender',\n    value: function addMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n      var sender = void 0;\n      if (this._localMediaStream) {\n        this._localMediaStream.addTrack(mediaTrackSender.track);\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n      } else {\n        var transceiver = this._peerConnection.addTransceiver(mediaTrackSender.track);\n        sender = transceiver.sender;\n      }\n      mediaTrackSender.addSender(sender);\n      this._rtpSenders.set(mediaTrackSender, sender);\n    }\n\n    /**\n     * Close the {@link PeerConnectionV2}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._close()) {\n        this._descriptionRevision++;\n        this._localDescription = { type: 'close' };\n        this.emit('description', this.getState());\n      }\n    }\n\n    /**\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n     * {@link PeerConnectionV2}.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    }\n\n    /**\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n     * @returns {?object}\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      if (!this._localDescription) {\n        return null;\n      }\n      var localDescription = {\n        type: this._localDescription.type,\n        revision: this._descriptionRevision\n      };\n      if (this._localDescription.sdp) {\n        localDescription.sdp = this._localDescription.sdp;\n      }\n      return {\n        description: localDescription,\n        id: this.id\n      };\n    }\n\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'offer',\n    value: function offer() {\n      var _this11 = this;\n\n      if (this._needsAnswer || this._isRestartingIce) {\n        this._shouldOffer = true;\n        return Promise.resolve();\n      }\n\n      return this.bracket('offering', function (key) {\n        _this11.transition('updating', key);\n        var promise = _this11._needsAnswer || _this11._isRestartingIce ? Promise.resolve() : _this11._offer();\n        return promise.then(function () {\n          _this11.tryTransition('open', key);\n        }, function (error) {\n          _this11.tryTransition('open', key);\n          throw error;\n        });\n      });\n    }\n\n    /**\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeDataTrackSender',\n    value: function removeDataTrackSender(dataTrackSender) {\n      var dataChannel = this._dataChannels.get(dataTrackSender);\n      if (dataChannel) {\n        dataTrackSender.removeDataChannel(dataChannel);\n        this._dataChannels.delete(dataTrackSender);\n        dataChannel.close();\n      }\n    }\n\n    /**\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeMediaTrackSender',\n    value: function removeMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || !this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n      var sender = this._rtpSenders.get(mediaTrackSender);\n      this._peerConnection.removeTrack(sender);\n      if (this._localMediaStream) {\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\n      }\n      mediaTrackSender.removeSender(sender);\n      this._rtpSenders.delete(mediaTrackSender);\n    }\n\n    /**\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\n     * @param {RTCConfiguration} configuration\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (typeof this._peerConnection.setConfiguration === 'function') {\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\n      }\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}.\n     * @param {object} peerConnectionState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionState) {\n      var _this12 = this;\n\n      return this.bracket('updating', function (key) {\n        if (_this12.state === 'closed') {\n          return Promise.resolve();\n        }\n\n        _this12.transition('updating', key);\n\n        var updates = [];\n\n        if (peerConnectionState.ice) {\n          updates.push(_this12._updateIce(peerConnectionState.ice));\n        }\n\n        if (peerConnectionState.description) {\n          updates.push(_this12._updateDescription(peerConnectionState.description));\n        }\n\n        return Promise.all(updates).then(function () {\n          _this12.tryTransition('open', key);\n        }, function (error) {\n          _this12.tryTransition('open', key);\n          throw error;\n        });\n      });\n    }\n\n    /**\n     * Get the {@link PeerConnectionV2}'s media statistics.\n     * @returns {Promise<StandardizedStatsResponse>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this13 = this;\n\n      return getStatistics(this._peerConnection).then(function (response) {\n        return rewriteTrackIds(_this13, response);\n      });\n    }\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._peerConnection.iceConnectionState;\n    }\n  }]);\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, { trackId: trackId });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    })\n  });\n}\n\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n    if (match) {\n      return match[1];\n    }\n  }\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRTPSender} sender\n * @return {boolean}\n */\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n\n/**\n * @param {string} sdp\n * @param {string} mid\n * @returns {?string} direction\n */\nfunction getTransceiverDirection(sdp, mid) {\n  var section = getMediaSections(sdp).find(function (section) {\n    return section.match('a=mid:' + mid);\n  });\n  if (!section) {\n    return null;\n  }\n  var match = section.match(/a=(sendrecv|sendonly|recvonly|inactive)/);\n  return match ? match[1] : null;\n}\n\n/**\n * @param {string} sdp\n * @returns {{audio: Array<string>, video: Array<string>}} mids\n */\nfunction getMids(sdp) {\n  return ['audio', 'video'].reduce(function (mids, kind) {\n    mids[kind] = getMediaSections(sdp, kind).map(function (section) {\n      return section.match(/^a=mid:(.+)$/m)[1];\n    });\n    return mids;\n  }, {});\n}\n\n/**\n * @param {string} sdp\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean} shouldStop\n */\nfunction shouldStopTransceiver(sdp, transceiver) {\n  if (!transceiver.stop || transceiver.stopped || !transceiver.mid) {\n    return false;\n  }\n\n  // NOTE(mroberts): We don't want to stop the initial two audio and video\n  // RTCRtpTransceivers that everyone negotiates with.\n  var mids = getMids(sdp);\n  if (transceiver.mid === mids.audio[0] || transceiver.mid === mids.video[0]) {\n    return false;\n  }\n\n  if (transceiver.currentDirection === 'inactive') {\n    return true;\n  }\n\n  var direction = getTransceiverDirection(sdp, transceiver.mid);\n  if (direction === 'inactive') {\n    return true;\n  } else if (direction === 'recvonly' && !transceiver.sender.track) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = PeerConnectionV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///310\n");

/***/ }),
/* 311 */
/*!*************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/sdp/simulcast.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar difference = __webpack_require__(/*! ../ */ 206).difference;\nvar flatMap = __webpack_require__(/*! ../ */ 206).flatMap;\n\n/**\n * Create a random {@link SSRC}.\n * @returns {SSRC}\n */\nfunction createSSRC() {\n  var ssrcMax = 0xffffffff;\n  return String(Math.floor(Math.random() * ssrcMax));\n}\n\n/**\n * @property {string} cName\n * @property {boolean} isSimulcastEnabled\n * @property {Map<RtxSSRC, PrimarySSRC>} rtxPairs\n * @property {Set<PrimarySSRC>} primarySSRCs\n * @property {MediaStreamID} streamId\n * @property {Track.ID} trackId\n */\n\nvar TrackAttributes = function () {\n  /**\n   * Construct a {@link MediaStreamTrack} attribute store.\n   * @param {Track.ID} trackId - The MediaStreamTrack ID\n   * @param {MediaStreamID} streamId - The MediaStream ID\n   * @param {string} cName - The MediaStream cname\n   */\n  function TrackAttributes(trackId, streamId, cName) {\n    _classCallCheck(this, TrackAttributes);\n\n    Object.defineProperties(this, {\n      cName: {\n        enumerable: true,\n        value: cName\n      },\n      isSimulcastEnabled: {\n        enumerable: true,\n        value: false,\n        writable: true\n      },\n      primarySSRCs: {\n        enumerable: true,\n        value: new Set()\n      },\n      rtxPairs: {\n        enumerable: true,\n        value: new Map()\n      },\n      streamId: {\n        enumerable: true,\n        value: streamId\n      },\n      trackId: {\n        enumerable: true,\n        value: trackId\n      }\n    });\n  }\n\n  /**\n   * Add {@link SimSSRC}s to the {@link TrackAttributes}.\n   * @returns {void}\n   */\n\n\n  _createClass(TrackAttributes, [{\n    key: 'addSimulcastSSRCs',\n    value: function addSimulcastSSRCs() {\n      if (this.isSimulcastEnabled) {\n        return;\n      }\n      var simulcastSSRCs = [createSSRC(), createSSRC()];\n      simulcastSSRCs.forEach(function (ssrc) {\n        this.primarySSRCs.add(ssrc);\n      }, this);\n\n      if (this.rtxPairs.size) {\n        simulcastSSRCs.forEach(function (ssrc) {\n          this.rtxPairs.set(createSSRC(), ssrc);\n        }, this);\n      }\n    }\n\n    /**\n     * Add the given {@link PrimarySSRC} or {@link RtxSSRC} to the {@link TrackAttributes}\n     * and update the \"isSimulcastEnabled\" flag if it is also a {@link SimSSRC}.\n     * @param {SSRC} ssrc - The {@link SSRC} to be added\n     * @param {?PrimarySSRC} primarySSRC - The {@link PrimarySSRC}; if the given\n     *   {@link SSRC} itself is the {@link PrimarySSRC}, then this is set to null\n     * @param {boolean} isSimSSRC - true if the given {@link SSRC} is a\n     *   {@link SimSSRC}; false otherwise\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addSSRC',\n    value: function addSSRC(ssrc, primarySSRC, isSimSSRC) {\n      if (primarySSRC) {\n        this.rtxPairs.set(ssrc, primarySSRC);\n      } else {\n        this.primarySSRCs.add(ssrc);\n      }\n      this.isSimulcastEnabled = this.isSimulcastEnabled || isSimSSRC;\n    }\n\n    /**\n     * Construct the SDP lines for the {@link TrackAttributes}.\n     * @param {boolean} [excludeRtx=false]\n     * @returns {Array<string>} Array of SDP lines\n     */\n\n  }, {\n    key: 'toSdpLines',\n    value: function toSdpLines(excludeRtx) {\n      var _this = this;\n\n      var rtxPairs = excludeRtx ? [] : Array.from(this.rtxPairs.entries()).map(function (rtxPair) {\n        return rtxPair.reverse();\n      });\n\n      var simSSRCs = Array.from(this.primarySSRCs.values());\n      var ssrcs = rtxPairs.length ? flatMap(rtxPairs) : simSSRCs;\n\n      var attrLines = flatMap(ssrcs, function (ssrc) {\n        return ['a=ssrc:' + ssrc + ' cname:' + _this.cName, 'a=ssrc:' + ssrc + ' msid:' + _this.streamId + ' ' + _this.trackId];\n      });\n      var rtxPairLines = rtxPairs.map(function (rtxPair) {\n        return 'a=ssrc-group:FID ' + rtxPair.join(' ');\n      });\n      var simGroupLines = ['a=ssrc-group:SIM ' + simSSRCs.join(' ')];\n\n      return rtxPairLines.concat(attrLines).concat(simGroupLines);\n    }\n  }]);\n\n  return TrackAttributes;\n}();\n\n/**\n * Get the matches for a given RegEx pattern.\n * @param {string} section - SDP media section\n * @param {string} pattern - RegEx pattern\n * @returns {Array<Array<string>>} - Array of pattern matches\n */\n\n\nfunction getMatches(section, pattern) {\n  var matches = section.match(new RegExp(pattern, 'gm')) || [];\n  return matches.map(function (match) {\n    var matches = match.match(new RegExp(pattern)) || [];\n    return matches.slice(1);\n  });\n}\n\n/**\n * Get the {@link SimSSRC}s that belong to a simulcast group.\n * @param {string} section - SDP media section\n * @returns {Set<SimSSRC>} Set of simulcast {@link SSRC}s\n */\nfunction getSimulcastSSRCs(section) {\n  var simGroupPattern = '^a=ssrc-group:SIM ([0-9]+) ([0-9]+) ([0-9]+)$';\n  return new Set(flatMap(getMatches(section, simGroupPattern)));\n}\n\n/**\n * Get the value of the given attribute for an SSRC.\n * @param {string} section - SDP media section\n * @param {SSRC} ssrc - {@link SSRC} whose attribute's value is to be determinded\n * @param {string} attribute - {@link SSRC} attribute name\n * @param {string} - {@link SSRC} attribute value\n */\nfunction getSSRCAttribute(section, ssrc, attribute) {\n  var pattern = 'a=ssrc:' + ssrc + ' ' + attribute + ':(.+)';\n  return section.match(new RegExp(pattern))[1];\n}\n\n/**\n * Create a Map of {@link PrimarySSRC}s and their {@link RtxSSRC}s.\n * @param {string} section - SDP media section\n * @returns {Map<RtxSSRC, PrimarySSRC>} - Map of {@link RtxSSRC}s and their\n *   corresponding {@link PrimarySSRC}s\n */\nfunction getSSRCRtxPairs(section) {\n  var rtxPairPattern = '^a=ssrc-group:FID ([0-9]+) ([0-9]+)$';\n  return new Map(getMatches(section, rtxPairPattern).map(function (pair) {\n    return pair.reverse();\n  }));\n}\n\n/**\n * Create SSRC attribute tuples.\n * @param {string} section\n * @param {'planb' | 'unified'} sdpFormat\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\nfunction createSSRCAttributeTuples(section, sdpFormat) {\n  return {\n    planb: createPlanBSSRCAttributeTuples,\n    unified: createUnifiedPlanSSRCAttributeTuples\n  }[sdpFormat](section);\n}\n/**\n * Create \"plan-b\" SSRC attribute tuples.\n * @param {string} section\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\nfunction createPlanBSSRCAttributeTuples(section) {\n  return getMatches(section, '^a=ssrc:([0-9]+) msid:([^\\\\s]+) ([^\\\\s]+)$');\n}\n/**\n * Create \"unified-plan\" SSRC attribute tuples.\n * @param {string} section\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\nfunction createUnifiedPlanSSRCAttributeTuples(section) {\n  var _flatMap = flatMap(getMatches(section, '^a=msid:(.+) (.+)$')),\n      _flatMap2 = _slicedToArray(_flatMap, 2),\n      streamId = _flatMap2[0],\n      trackId = _flatMap2[1];\n\n  var ssrcs = flatMap(getMatches(section, '^a=ssrc:(.+) cname:.+$'));\n  return ssrcs.map(function (ssrc) {\n    return [ssrc, streamId, trackId];\n  });\n}\n\n/**\n * Create a Map of MediaStreamTrack IDs and their {@link TrackAttributes}.\n * @param {string} section - SDP media section\n * @param {'planb' | 'unified'} sdpFormat\n * @returns {Map<Track.ID, TrackAttributes>}\n */\nfunction createTrackIdsToAttributes(section, sdpFormat) {\n  var simSSRCs = getSimulcastSSRCs(section);\n  var rtxPairs = getSSRCRtxPairs(section);\n  var ssrcAttrTuples = createSSRCAttributeTuples(section, sdpFormat);\n\n  return ssrcAttrTuples.reduce(function (trackIdsToSSRCs, tuple) {\n    var ssrc = tuple[0];\n    var streamId = tuple[1];\n    var trackId = tuple[2];\n\n    var trackAttributes = trackIdsToSSRCs.get(trackId) || new TrackAttributes(trackId, streamId, getSSRCAttribute(section, ssrc, 'cname'));\n\n    var primarySSRC = rtxPairs.get(ssrc) || null;\n    trackAttributes.addSSRC(ssrc, primarySSRC, simSSRCs.has(ssrc));\n    return trackIdsToSSRCs.set(trackId, trackAttributes);\n  }, new Map());\n}\n\n/**\n * Apply simulcast settings to the given SDP media section.\n * @param {string} section - SDP media section\n * @param {'planb' | 'unified'} sdpFormat\n * @param {Map<Track.ID, TrackAttributes>} trackIdsToAttributes - Existing\n *   map which will be updated for new MediaStreamTrack IDs\n * @returns {string} - The transformed SDP media section\n */\nfunction setSimulcastInMediaSection(section, sdpFormat, trackIdsToAttributes) {\n  var newTrackIdsToAttributes = createTrackIdsToAttributes(section, sdpFormat);\n  var newTrackIds = Array.from(newTrackIdsToAttributes.keys());\n  var trackIds = Array.from(trackIdsToAttributes.keys());\n  var trackIdsToAdd = difference(newTrackIds, trackIds);\n  var trackIdsToIgnore = difference(trackIds, newTrackIds);\n\n  // Update \"trackIdsToAttributes\" with TrackAttributes for new\n  // MediaStreamTrack IDs.\n  var trackAttributesToAdd = flatMap(trackIdsToAdd, function (trackId) {\n    return newTrackIdsToAttributes.get(trackId);\n  });\n  trackAttributesToAdd.forEach(function (trackAttributes) {\n    trackAttributes.addSimulcastSSRCs();\n    trackIdsToAttributes.set(trackAttributes.trackId, trackAttributes);\n  });\n\n  // Get the SDP lines of the relevant MediaStreamTrack IDs from\n  // \"trackIdsToAttributes\".\n  trackIds = Array.from(trackIdsToAttributes.keys());\n  var relevantTrackIds = difference(trackIds, trackIdsToIgnore);\n  var relevantTrackAttributes = flatMap(relevantTrackIds, function (trackId) {\n    return trackIdsToAttributes.get(trackId);\n  });\n  var excludeRtx = !section.match(/a=rtpmap:[0-9]+ rtx/);\n  var relevantSdpLines = flatMap(relevantTrackAttributes, function (trackAttributes) {\n    return trackAttributes.toSdpLines(excludeRtx);\n  });\n\n  // Add the simulcast SSRC SDP lines to the media section. The Set ensures\n  // that the duplicates of the SSRC SDP lines that are in both \"section\" and\n  // \"relevantSdpLines\" are removed.\n  var sectionLines = new Set(section.split('\\r\\n').concat(relevantSdpLines));\n  return flatMap(sectionLines).join('\\r\\n');\n}\n\n/**\n * String representing a MediaStream ID.\n * @typedef {string} MediaStreamID\n */\n\n/**\n * String representing the SSRC of a MediaStreamTrack.\n * @typedef {string} SSRC\n */\n\n/**\n * Primary SSRC.\n * @typedef {SSRC} PrimarySSRC\n */\n\n/**\n * Retransmission SSRC.\n * @typedef {SSRC} RtxSSRC\n */\n\n/**\n * Simulcast SSRC.\n * @typedef {SSRC} SimSSRC\n */\n\nmodule.exports = setSimulcastInMediaSection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///311\n");

/***/ }),
/* 312 */
/*!**************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/icebox.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Filter = __webpack_require__(/*! ../../util/filter */ 313);\n\n/**\n * An {@link IceBox} stores trickled ICE candidates. Candidates added to the\n * {@link IceBox} via {@link IceBox#update} are compared against previously\n * trickled candidates and only new candidates will be returned (assuming they\n * match the current ICE username fragment set by {@link IceBox#setUfrag}).\n * @property {?string} ufrag\n */\n\nvar IceBox = function () {\n  /**\n   * Construct an {@link IceBox}.\n   */\n  function IceBox() {\n    _classCallCheck(this, IceBox);\n\n    Object.defineProperties(this, {\n      _filter: {\n        value: new Filter({\n          getKey: function getKey(iceState) {\n            return iceState.ufrag;\n          },\n          isLessThanOrEqualTo: function isLessThanOrEqualTo(a, b) {\n            return a.revision <= b.revision;\n          }\n        })\n      },\n      _ufrag: {\n        writable: true,\n        value: null\n      },\n      ufrag: {\n        enumerable: true,\n        get: function get() {\n          return this._ufrag;\n        }\n      }\n    });\n  }\n\n  /**\n   * Set the ICE username fragment on the {@link IceBox}. This method returns any\n   * ICE candidates associated with the username fragment.\n   * @param {string} ufrag\n   * @returns {Array<RTCIceCandidateInit>}\n   */\n\n\n  _createClass(IceBox, [{\n    key: 'setUfrag',\n    value: function setUfrag(ufrag) {\n      this._ufrag = ufrag;\n      var ice = this._filter.toMap().get(ufrag);\n      return ice ? ice.candidates : [];\n    }\n\n    /**\n     * Update the {@link IceBox}. This method returns any new ICE candidates\n     * associated with the current username fragment.\n     * @param {object} iceState\n     * @returns {Array<RTCIceCandidateInit>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(iceState) {\n      // NOTE(mroberts): The Server sometimes does not set the candidates property.\n      iceState.candidates = iceState.candidates || [];\n      var oldIceState = this._filter.toMap().get(iceState.ufrag);\n      var oldCandidates = oldIceState ? oldIceState.candidates : [];\n      return this._filter.update(iceState) && this._ufrag === iceState.ufrag ? iceState.candidates.slice(oldCandidates.length) : [];\n    }\n  }]);\n\n  return IceBox;\n}();\n\nmodule.exports = IceBox;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvaWNlYm94LmpzP2RkNTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGFBQWEsbUJBQU8sQ0FBQyw0QkFBbUI7O0FBRXhDO0FBQ0EsT0FBTyxhQUFhO0FBQ3BCLElBQUksYUFBYSxNQUFNLG9CQUFvQjtBQUMzQztBQUNBLG1EQUFtRCxzQkFBc0I7QUFDekUsY0FBYyxRQUFRO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsYUFBYTtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSwyQ0FBMkMsYUFBYTtBQUN4RDtBQUNBLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGFBQWE7QUFDaEM7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMzEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRmlsdGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9maWx0ZXInKTtcblxuLyoqXG4gKiBBbiB7QGxpbmsgSWNlQm94fSBzdG9yZXMgdHJpY2tsZWQgSUNFIGNhbmRpZGF0ZXMuIENhbmRpZGF0ZXMgYWRkZWQgdG8gdGhlXG4gKiB7QGxpbmsgSWNlQm94fSB2aWEge0BsaW5rIEljZUJveCN1cGRhdGV9IGFyZSBjb21wYXJlZCBhZ2FpbnN0IHByZXZpb3VzbHlcbiAqIHRyaWNrbGVkIGNhbmRpZGF0ZXMgYW5kIG9ubHkgbmV3IGNhbmRpZGF0ZXMgd2lsbCBiZSByZXR1cm5lZCAoYXNzdW1pbmcgdGhleVxuICogbWF0Y2ggdGhlIGN1cnJlbnQgSUNFIHVzZXJuYW1lIGZyYWdtZW50IHNldCBieSB7QGxpbmsgSWNlQm94I3NldFVmcmFnfSkuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVmcmFnXG4gKi9cblxudmFyIEljZUJveCA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiB7QGxpbmsgSWNlQm94fS5cbiAgICovXG4gIGZ1bmN0aW9uIEljZUJveCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSWNlQm94KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIF9maWx0ZXI6IHtcbiAgICAgICAgdmFsdWU6IG5ldyBGaWx0ZXIoe1xuICAgICAgICAgIGdldEtleTogZnVuY3Rpb24gZ2V0S2V5KGljZVN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWNlU3RhdGUudWZyYWc7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0xlc3NUaGFuT3JFcXVhbFRvOiBmdW5jdGlvbiBpc0xlc3NUaGFuT3JFcXVhbFRvKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJldmlzaW9uIDw9IGIucmV2aXNpb247XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIF91ZnJhZzoge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sXG4gICAgICB1ZnJhZzoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fdWZyYWc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIElDRSB1c2VybmFtZSBmcmFnbWVudCBvbiB0aGUge0BsaW5rIEljZUJveH0uIFRoaXMgbWV0aG9kIHJldHVybnMgYW55XG4gICAqIElDRSBjYW5kaWRhdGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlcm5hbWUgZnJhZ21lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1ZnJhZ1xuICAgKiBAcmV0dXJucyB7QXJyYXk8UlRDSWNlQ2FuZGlkYXRlSW5pdD59XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEljZUJveCwgW3tcbiAgICBrZXk6ICdzZXRVZnJhZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVmcmFnKHVmcmFnKSB7XG4gICAgICB0aGlzLl91ZnJhZyA9IHVmcmFnO1xuICAgICAgdmFyIGljZSA9IHRoaXMuX2ZpbHRlci50b01hcCgpLmdldCh1ZnJhZyk7XG4gICAgICByZXR1cm4gaWNlID8gaWNlLmNhbmRpZGF0ZXMgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHtAbGluayBJY2VCb3h9LiBUaGlzIG1ldGhvZCByZXR1cm5zIGFueSBuZXcgSUNFIGNhbmRpZGF0ZXNcbiAgICAgKiBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgdXNlcm5hbWUgZnJhZ21lbnQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGljZVN0YXRlXG4gICAgICogQHJldHVybnMge0FycmF5PFJUQ0ljZUNhbmRpZGF0ZUluaXQ+fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoaWNlU3RhdGUpIHtcbiAgICAgIC8vIE5PVEUobXJvYmVydHMpOiBUaGUgU2VydmVyIHNvbWV0aW1lcyBkb2VzIG5vdCBzZXQgdGhlIGNhbmRpZGF0ZXMgcHJvcGVydHkuXG4gICAgICBpY2VTdGF0ZS5jYW5kaWRhdGVzID0gaWNlU3RhdGUuY2FuZGlkYXRlcyB8fCBbXTtcbiAgICAgIHZhciBvbGRJY2VTdGF0ZSA9IHRoaXMuX2ZpbHRlci50b01hcCgpLmdldChpY2VTdGF0ZS51ZnJhZyk7XG4gICAgICB2YXIgb2xkQ2FuZGlkYXRlcyA9IG9sZEljZVN0YXRlID8gb2xkSWNlU3RhdGUuY2FuZGlkYXRlcyA6IFtdO1xuICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlci51cGRhdGUoaWNlU3RhdGUpICYmIHRoaXMuX3VmcmFnID09PSBpY2VTdGF0ZS51ZnJhZyA/IGljZVN0YXRlLmNhbmRpZGF0ZXMuc2xpY2Uob2xkQ2FuZGlkYXRlcy5sZW5ndGgpIDogW107XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEljZUJveDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJY2VCb3g7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvaWNlYm94LmpzXG4vLyBtb2R1bGUgaWQgPSAzMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///312\n");

/***/ }),
/* 313 */
/*!******************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/filter.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Filter = function () {\n  function Filter(options) {\n    _classCallCheck(this, Filter);\n\n    options = Object.assign({\n      getKey: function defaultGetKey(a) {\n        return a;\n      },\n      getValue: function defaultGetValue(a) {\n        return a;\n      },\n      isLessThanOrEqualTo: function defaultIsLessThanOrEqualTo(a, b) {\n        return a <= b;\n      }\n    }, options);\n    Object.defineProperties(this, {\n      _getKey: {\n        value: options.getKey\n      },\n      _getValue: {\n        value: options.getValue\n      },\n      _isLessThanOrEqualTo: {\n        value: options.isLessThanOrEqualTo\n      },\n      _map: {\n        value: new Map()\n      }\n    });\n  }\n\n  _createClass(Filter, [{\n    key: 'toMap',\n    value: function toMap() {\n      return new Map(this._map);\n    }\n  }, {\n    key: 'updateAndFilter',\n    value: function updateAndFilter(entries) {\n      return entries.filter(this.update, this);\n    }\n  }, {\n    key: 'update',\n    value: function update(entry) {\n      var key = this._getKey(entry);\n      var value = this._getValue(entry);\n      if (this._map.has(key) && this._isLessThanOrEqualTo(value, this._map.get(key))) {\n        return false;\n      }\n      this._map.set(key, value);\n      return true;\n    }\n  }]);\n\n  return Filter;\n}();\n\nmodule.exports = Filter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL2ZpbHRlci5qcz84MGViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZpbHRlcihvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbHRlcik7XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBnZXRLZXk6IGZ1bmN0aW9uIGRlZmF1bHRHZXRLZXkoYSkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0sXG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gZGVmYXVsdEdldFZhbHVlKGEpIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9LFxuICAgICAgaXNMZXNzVGhhbk9yRXF1YWxUbzogZnVuY3Rpb24gZGVmYXVsdElzTGVzc1RoYW5PckVxdWFsVG8oYSwgYikge1xuICAgICAgICByZXR1cm4gYSA8PSBiO1xuICAgICAgfVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIF9nZXRLZXk6IHtcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuZ2V0S2V5XG4gICAgICB9LFxuICAgICAgX2dldFZhbHVlOiB7XG4gICAgICAgIHZhbHVlOiBvcHRpb25zLmdldFZhbHVlXG4gICAgICB9LFxuICAgICAgX2lzTGVzc1RoYW5PckVxdWFsVG86IHtcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMuaXNMZXNzVGhhbk9yRXF1YWxUb1xuICAgICAgfSxcbiAgICAgIF9tYXA6IHtcbiAgICAgICAgdmFsdWU6IG5ldyBNYXAoKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZpbHRlciwgW3tcbiAgICBrZXk6ICd0b01hcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvTWFwKCkge1xuICAgICAgcmV0dXJuIG5ldyBNYXAodGhpcy5fbWFwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVBbmRGaWx0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVBbmRGaWx0ZXIoZW50cmllcykge1xuICAgICAgcmV0dXJuIGVudHJpZXMuZmlsdGVyKHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZW50cnkpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLl9nZXRLZXkoZW50cnkpO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZ2V0VmFsdWUoZW50cnkpO1xuICAgICAgaWYgKHRoaXMuX21hcC5oYXMoa2V5KSAmJiB0aGlzLl9pc0xlc3NUaGFuT3JFcXVhbFRvKHZhbHVlLCB0aGlzLl9tYXAuZ2V0KGtleSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX21hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmlsdGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbHRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3V0aWwvZmlsdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///313\n");

/***/ }),
/* 314 */
/*!********************************************************!*\
  !*** ./node_modules/twilio-video/es5/data/receiver.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DataTrackTransceiver = __webpack_require__(/*! ./transceiver */ 240);\nvar DataTransport = __webpack_require__(/*! ./transport */ 315);\n\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n */\n\nvar DataTrackReceiver = function (_DataTrackTransceiver) {\n  _inherits(DataTrackReceiver, _DataTrackTransceiver);\n\n  /**\n   * Construct an {@link DataTrackReceiver}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  function DataTrackReceiver(dataChannel) {\n    _classCallCheck(this, DataTrackReceiver);\n\n    var _this = _possibleConstructorReturn(this, (DataTrackReceiver.__proto__ || Object.getPrototypeOf(DataTrackReceiver)).call(this, dataChannel.label, dataChannel.maxPacketLifeTime, dataChannel.maxRetransmits, dataChannel.ordered));\n\n    Object.defineProperties(_this, {\n      _dataChannel: {\n        value: dataChannel\n      }\n    });\n\n    // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n    // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n    // and Safari.\n    dataChannel.binaryType = 'arraybuffer';\n\n    dataChannel.addEventListener('message', function (event) {\n      _this.emit('message', event.data);\n    });\n    return _this;\n  }\n\n  /**\n   * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n   * @returns {DataTransport}\n   */\n\n\n  _createClass(DataTrackReceiver, [{\n    key: 'toDataTransport',\n    value: function toDataTransport() {\n      return new DataTransport(this._dataChannel);\n    }\n  }]);\n\n  return DataTrackReceiver;\n}(DataTrackTransceiver);\n\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n\nmodule.exports = DataTrackReceiver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3JlY2VpdmVyLmpzPzdhNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsMkJBQTJCLG1CQUFPLENBQUMsd0JBQWU7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsc0JBQWE7O0FBRXpDO0FBQ0EsTUFBTSx3QkFBd0IsZUFBZSwyQkFBMkI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHdCQUF3QjtBQUMzQyxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG9CQUFvQixXQUFXLHdCQUF3QjtBQUN0RSxlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUI7O0FBRUEiLCJmaWxlIjoiMzE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBEYXRhVHJhY2tUcmFuc2NlaXZlciA9IHJlcXVpcmUoJy4vdHJhbnNjZWl2ZXInKTtcbnZhciBEYXRhVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblxuLyoqXG4gKiBBIHtAbGluayBEYXRhVHJhY2tSZWNlaXZlcn0gcmVwcmVzZW50cyBhIHtAbGluayBEYXRhVHJhY2tUcmFuc2NlaXZlcn0gb3ZlclxuICogd2hpY2ggZGF0YSBjYW4gYmUgcmVjZWl2ZWQuIEludGVybmFsbHksIGl0IHVzZXJzIGEgc2luZ2xlIFJUQ0RhdGFDaGFubmVsIHRvXG4gKiByZWNlaXZlIGRhdGEuXG4gKiBAZXh0ZW5kcyBEYXRhVHJhY2tUcmFuc2NlaXZlclxuICogQGVtaXRzIERhdGFUcmFja1JlY2VpdmVyI21lc3NhZ2VcbiAqL1xuXG52YXIgRGF0YVRyYWNrUmVjZWl2ZXIgPSBmdW5jdGlvbiAoX0RhdGFUcmFja1RyYW5zY2VpdmVyKSB7XG4gIF9pbmhlcml0cyhEYXRhVHJhY2tSZWNlaXZlciwgX0RhdGFUcmFja1RyYW5zY2VpdmVyKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGFuIHtAbGluayBEYXRhVHJhY2tSZWNlaXZlcn0uXG4gICAqIEBwYXJhbSB7UlRDRGF0YUNoYW5uZWx9IGRhdGFDaGFubmVsXG4gICAqL1xuICBmdW5jdGlvbiBEYXRhVHJhY2tSZWNlaXZlcihkYXRhQ2hhbm5lbCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhVHJhY2tSZWNlaXZlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGF0YVRyYWNrUmVjZWl2ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYXRhVHJhY2tSZWNlaXZlcikpLmNhbGwodGhpcywgZGF0YUNoYW5uZWwubGFiZWwsIGRhdGFDaGFubmVsLm1heFBhY2tldExpZmVUaW1lLCBkYXRhQ2hhbm5lbC5tYXhSZXRyYW5zbWl0cywgZGF0YUNoYW5uZWwub3JkZXJlZCkpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIF9kYXRhQ2hhbm5lbDoge1xuICAgICAgICB2YWx1ZTogZGF0YUNoYW5uZWxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE5PVEUobW1hbGF2YWxsaSk6IEluIEZpcmVmb3gsIHRoZSBkZWZhdWx0IHZhbHVlIGZvciBcImJpbmFyeVR5cGVcIiBpcyBcImJsb2JcIi5cbiAgICAvLyBTbywgd2Ugc2V0IGl0IHRvIFwiYXJyYXlidWZmZXJcIiB0byBlbnN1cmUgdGhhdCBpdCBpcyBjb25zaXN0ZW50IHdpdGggQ2hyb21lXG4gICAgLy8gYW5kIFNhZmFyaS5cbiAgICBkYXRhQ2hhbm5lbC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcblxuICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmVtaXQoJ21lc3NhZ2UnLCBldmVudC5kYXRhKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEge0BsaW5rIERhdGFUcmFuc3BvcnR9IGZyb20gdGhlIHtAbGluayBEYXRhVHJhY2tSZWNlaXZlcn0uXG4gICAqIEByZXR1cm5zIHtEYXRhVHJhbnNwb3J0fVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhEYXRhVHJhY2tSZWNlaXZlciwgW3tcbiAgICBrZXk6ICd0b0RhdGFUcmFuc3BvcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0RhdGFUcmFuc3BvcnQoKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGFUcmFuc3BvcnQodGhpcy5fZGF0YUNoYW5uZWwpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEYXRhVHJhY2tSZWNlaXZlcjtcbn0oRGF0YVRyYWNrVHJhbnNjZWl2ZXIpO1xuXG4vKipcbiAqIEBldmVudCBEYXRhVHJhY2tSZWNlaXZlciNtZXNzYWdlXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheUJ1ZmZlcn0gZGF0YVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVRyYWNrUmVjZWl2ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3JlY2VpdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///314\n");

/***/ }),
/* 315 */
/*!*********************************************************!*\
  !*** ./node_modules/twilio-video/es5/data/transport.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! events */ 207),\n    EventEmitter = _require.EventEmitter;\n\n/**\n * @classdesc A {@link DataTransport} implements {@link MediaSignalingTransport}\n *   in terms of an RTCDataChannel.\n * @extends EventEmitter\n * @implements MediaSignalingTransport\n * @emits DataTransport#message\n */\n\n\nvar DataTransport = function (_EventEmitter) {\n  _inherits(DataTransport, _EventEmitter);\n\n  /**\n   * Construct a {@link DataTransport}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  function DataTransport(dataChannel) {\n    _classCallCheck(this, DataTransport);\n\n    var _this = _possibleConstructorReturn(this, (DataTransport.__proto__ || Object.getPrototypeOf(DataTransport)).call(this));\n\n    Object.defineProperties(_this, {\n      _dataChannel: {\n        value: dataChannel\n      },\n      _messageQueue: {\n        value: []\n      }\n    });\n\n    dataChannel.addEventListener('open', function () {\n      _this._messageQueue.splice(0).forEach(function (message) {\n        return _this._publish(message);\n      });\n    });\n\n    dataChannel.addEventListener('message', function (_ref) {\n      var data = _ref.data;\n\n      try {\n        var message = JSON.parse(data);\n        _this.emit('message', message);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n\n    _this.publish({ type: 'ready' });\n    return _this;\n  }\n\n  /**\n   * @param message\n   * @private\n   */\n\n\n  _createClass(DataTransport, [{\n    key: '_publish',\n    value: function _publish(message) {\n      var data = JSON.stringify(message);\n      this._dataChannel.send(data);\n    }\n\n    /**\n     * Publish a message. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} message\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(message) {\n      var dataChannel = this._dataChannel;\n      if (dataChannel.readyState === 'closing' || dataChannel.readyState === 'closed') {\n        return false;\n      }\n      if (dataChannel.readyState === 'connecting') {\n        this._messageQueue.push(message);\n        return true;\n      }\n      this._publish(message);\n      return true;\n    }\n  }]);\n\n  return DataTransport;\n}(EventEmitter);\n\n/**\n * The {@link DataTransport} received a message.\n * @event DataTransport#message\n * @param {object} message\n */\n\nmodule.exports = DataTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9kYXRhL3RyYW5zcG9ydC5qcz81YTFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLGVBQWUsbUJBQU8sQ0FBQyxpQkFBUTtBQUMvQjs7QUFFQTtBQUNBLGlCQUFpQixvQkFBb0IsYUFBYTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QyxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUI7QUFDakI7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxRQUFRLG9CQUFvQjtBQUM1QjtBQUNBLFdBQVcsT0FBTztBQUNsQjs7QUFFQSIsImZpbGUiOiIzMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZXZlbnRzJyksXG4gICAgRXZlbnRFbWl0dGVyID0gX3JlcXVpcmUuRXZlbnRFbWl0dGVyO1xuXG4vKipcbiAqIEBjbGFzc2Rlc2MgQSB7QGxpbmsgRGF0YVRyYW5zcG9ydH0gaW1wbGVtZW50cyB7QGxpbmsgTWVkaWFTaWduYWxpbmdUcmFuc3BvcnR9XG4gKiAgIGluIHRlcm1zIG9mIGFuIFJUQ0RhdGFDaGFubmVsLlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKiBAaW1wbGVtZW50cyBNZWRpYVNpZ25hbGluZ1RyYW5zcG9ydFxuICogQGVtaXRzIERhdGFUcmFuc3BvcnQjbWVzc2FnZVxuICovXG5cblxudmFyIERhdGFUcmFuc3BvcnQgPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoRGF0YVRyYW5zcG9ydCwgX0V2ZW50RW1pdHRlcik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBEYXRhVHJhbnNwb3J0fS5cbiAgICogQHBhcmFtIHtSVENEYXRhQ2hhbm5lbH0gZGF0YUNoYW5uZWxcbiAgICovXG4gIGZ1bmN0aW9uIERhdGFUcmFuc3BvcnQoZGF0YUNoYW5uZWwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0YVRyYW5zcG9ydCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGF0YVRyYW5zcG9ydC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERhdGFUcmFuc3BvcnQpKS5jYWxsKHRoaXMpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfZGF0YUNoYW5uZWw6IHtcbiAgICAgICAgdmFsdWU6IGRhdGFDaGFubmVsXG4gICAgICB9LFxuICAgICAgX21lc3NhZ2VRdWV1ZToge1xuICAgICAgICB2YWx1ZTogW11cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5fbWVzc2FnZVF1ZXVlLnNwbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fcHVibGlzaChtZXNzYWdlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGF0YUNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICBfdGhpcy5lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMucHVibGlzaCh7IHR5cGU6ICdyZWFkeScgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBtZXNzYWdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKERhdGFUcmFuc3BvcnQsIFt7XG4gICAga2V5OiAnX3B1Ymxpc2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHVibGlzaChtZXNzYWdlKSB7XG4gICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpO1xuICAgICAgdGhpcy5fZGF0YUNoYW5uZWwuc2VuZChkYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoIGEgbWVzc2FnZS4gUmV0dXJucyB0cnVlIGlmIGNhbGxpbmcgdGhlIG1ldGhvZCByZXN1bHRlZCBpblxuICAgICAqIHB1Ymxpc2hpbmcgKG9yIGV2ZW50dWFsbHkgcHVibGlzaGluZykgdGhlIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbWVzc2FnZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwdWJsaXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVibGlzaChtZXNzYWdlKSB7XG4gICAgICB2YXIgZGF0YUNoYW5uZWwgPSB0aGlzLl9kYXRhQ2hhbm5lbDtcbiAgICAgIGlmIChkYXRhQ2hhbm5lbC5yZWFkeVN0YXRlID09PSAnY2xvc2luZycgfHwgZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGFDaGFubmVsLnJlYWR5U3RhdGUgPT09ICdjb25uZWN0aW5nJykge1xuICAgICAgICB0aGlzLl9tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLl9wdWJsaXNoKG1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERhdGFUcmFuc3BvcnQ7XG59KEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogVGhlIHtAbGluayBEYXRhVHJhbnNwb3J0fSByZWNlaXZlZCBhIG1lc3NhZ2UuXG4gKiBAZXZlbnQgRGF0YVRyYW5zcG9ydCNtZXNzYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gbWVzc2FnZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVRyYW5zcG9ydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L2RhdGEvdHJhbnNwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///315\n");

/***/ }),
/* 316 */
/*!***************************************************************!*\
  !*** ./node_modules/twilio-video/es5/media/track/receiver.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrackTransceiver = __webpack_require__(/*! ./transceiver */ 238);\n\n/**\n * A {@link MediaTrackReceiver} represents a remote MediaStreamTrack.\n * @extends MediaTrackTransceiver\n */\n\nvar MediaTrackReceiver = function (_MediaTrackTransceive) {\n  _inherits(MediaTrackReceiver, _MediaTrackTransceive);\n\n  /**\n   * Construct a {@link MediaTrackReceiver}.\n   * @param {Track.ID} id - The MediaStreamTrack ID signaled through RSP/SDP\n   * @param {MediaStreamTrack} mediaStreamTrack - The remote MediaStreamTrack\n   */\n  function MediaTrackReceiver(id, mediaStreamTrack) {\n    _classCallCheck(this, MediaTrackReceiver);\n\n    return _possibleConstructorReturn(this, (MediaTrackReceiver.__proto__ || Object.getPrototypeOf(MediaTrackReceiver)).call(this, id, mediaStreamTrack));\n  }\n\n  return MediaTrackReceiver;\n}(MediaTrackTransceiver);\n\nmodule.exports = MediaTrackReceiver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9tZWRpYS90cmFjay9yZWNlaXZlci5qcz84NDgyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsNEJBQTRCLG1CQUFPLENBQUMsd0JBQWU7O0FBRW5EO0FBQ0EsTUFBTSx5QkFBeUI7QUFDL0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHlCQUF5QjtBQUMzQyxhQUFhLFNBQVM7QUFDdEIsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTWVkaWFUcmFja1RyYW5zY2VpdmVyID0gcmVxdWlyZSgnLi90cmFuc2NlaXZlcicpO1xuXG4vKipcbiAqIEEge0BsaW5rIE1lZGlhVHJhY2tSZWNlaXZlcn0gcmVwcmVzZW50cyBhIHJlbW90ZSBNZWRpYVN0cmVhbVRyYWNrLlxuICogQGV4dGVuZHMgTWVkaWFUcmFja1RyYW5zY2VpdmVyXG4gKi9cblxudmFyIE1lZGlhVHJhY2tSZWNlaXZlciA9IGZ1bmN0aW9uIChfTWVkaWFUcmFja1RyYW5zY2VpdmUpIHtcbiAgX2luaGVyaXRzKE1lZGlhVHJhY2tSZWNlaXZlciwgX01lZGlhVHJhY2tUcmFuc2NlaXZlKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIE1lZGlhVHJhY2tSZWNlaXZlcn0uXG4gICAqIEBwYXJhbSB7VHJhY2suSUR9IGlkIC0gVGhlIE1lZGlhU3RyZWFtVHJhY2sgSUQgc2lnbmFsZWQgdGhyb3VnaCBSU1AvU0RQXG4gICAqIEBwYXJhbSB7TWVkaWFTdHJlYW1UcmFja30gbWVkaWFTdHJlYW1UcmFjayAtIFRoZSByZW1vdGUgTWVkaWFTdHJlYW1UcmFja1xuICAgKi9cbiAgZnVuY3Rpb24gTWVkaWFUcmFja1JlY2VpdmVyKGlkLCBtZWRpYVN0cmVhbVRyYWNrKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lZGlhVHJhY2tSZWNlaXZlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1lZGlhVHJhY2tSZWNlaXZlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1lZGlhVHJhY2tSZWNlaXZlcikpLmNhbGwodGhpcywgaWQsIG1lZGlhU3RyZWFtVHJhY2spKTtcbiAgfVxuXG4gIHJldHVybiBNZWRpYVRyYWNrUmVjZWl2ZXI7XG59KE1lZGlhVHJhY2tUcmFuc2NlaXZlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFUcmFja1JlY2VpdmVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvbWVkaWEvdHJhY2svcmVjZWl2ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///316\n");

/***/ }),
/* 317 */
/*!*************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/sdp/trackmatcher/identity.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * An {@link IdentityTrackMatcher} matches RTCTrackEvents with their respective\n * MediaStreamTrack IDs.\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdentityTrackMatcher = function () {\n  function IdentityTrackMatcher() {\n    _classCallCheck(this, IdentityTrackMatcher);\n  }\n\n  _createClass(IdentityTrackMatcher, [{\n    key: 'match',\n\n    /**\n     * Match a given MediaStreamTrack with its ID.\n     * @param {RTCTrackEvent} event\n     * @returns {Track.ID}\n     */\n    value: function match(event) {\n      return event.track.id;\n    }\n\n    /**\n     * Update the {@link IdentityTrackMatcher} with a new SDP.\n     * @param {string} sdp\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {}\n  }]);\n\n  return IdentityTrackMatcher;\n}();\n\nmodule.exports = IdentityTrackMatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL3NkcC90cmFja21hdGNoZXIvaWRlbnRpdHkuanM/ZTljZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLE9BQU8sMkJBQTJCO0FBQ2xDO0FBQ0E7O0FBRUEsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDLGVBQWUsT0FBTztBQUN0Qjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBbiB7QGxpbmsgSWRlbnRpdHlUcmFja01hdGNoZXJ9IG1hdGNoZXMgUlRDVHJhY2tFdmVudHMgd2l0aCB0aGVpciByZXNwZWN0aXZlXG4gKiBNZWRpYVN0cmVhbVRyYWNrIElEcy5cbiAqL1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSWRlbnRpdHlUcmFja01hdGNoZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIElkZW50aXR5VHJhY2tNYXRjaGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJZGVudGl0eVRyYWNrTWF0Y2hlcik7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSWRlbnRpdHlUcmFja01hdGNoZXIsIFt7XG4gICAga2V5OiAnbWF0Y2gnLFxuXG4gICAgLyoqXG4gICAgICogTWF0Y2ggYSBnaXZlbiBNZWRpYVN0cmVhbVRyYWNrIHdpdGggaXRzIElELlxuICAgICAqIEBwYXJhbSB7UlRDVHJhY2tFdmVudH0gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7VHJhY2suSUR9XG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGNoKGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQudHJhY2suaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB7QGxpbmsgSWRlbnRpdHlUcmFja01hdGNoZXJ9IHdpdGggYSBuZXcgU0RQLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZHBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge31cbiAgfV0pO1xuXG4gIHJldHVybiBJZGVudGl0eVRyYWNrTWF0Y2hlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJZGVudGl0eVRyYWNrTWF0Y2hlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3V0aWwvc2RwL3RyYWNrbWF0Y2hlci9pZGVudGl0eS5qc1xuLy8gbW9kdWxlIGlkID0gMzE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///317\n");

/***/ }),
/* 318 */
/*!************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/sdp/trackmatcher/ordered.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar util = __webpack_require__(/*! ../../ */ 206);\nvar getMediaSections = __webpack_require__(/*! ../ */ 211).getMediaSections;\n\n// NOTE(mroberts): OrderedTrackMatcher is meant to solve the problem identified in\n//\n//   https://bugs.webkit.org/show_bug.cgi?id=174519\n//\n// Namely that, without MIDs, we cannot \"correctly\" identify MediaStreamTracks\n// in Safari's current WebRTC implementation. So, this module tries to hack\n// around this by making a possibly dangerous assumption: \"track\" events will\n// be raised for MediaStreamTracks of a particular kind in the same order that\n// those kinds' MSIDs appear in the SDP. By calling `update` with an\n// RTCPeerConnection's `remoteDescription` and then invoking `match`, we ought\n// to be able to dequeue MediaStreamTrack IDs in the correct order to be\n// assigned to \"track\" events.\n\n/**\n * @interface MatchedAndUnmatched\n * @property {Set<Track.ID>} matched\n * @property {Set<Track.ID>} unmatched\n */\n\n/**\n * Create a new instance of {@link MatchedAndUnmatched}.\n * @returns {MatchedAndUnmatched}\n */\nfunction create() {\n  return {\n    matched: new Set(),\n    unmatched: new Set()\n  };\n}\n\n/**\n * Attempt to match a MediaStreamTrack ID.\n * @param {MatchedAndUnmatched} mAndM\n * @returns {?Track.ID} id\n */\nfunction _match(mAndM) {\n  var unmatched = Array.from(mAndM.unmatched);\n  if (!unmatched.length) {\n    return null;\n  }\n  var id = unmatched[0];\n  mAndM.matched.add(id);\n  mAndM.unmatched.delete(id);\n  return id;\n}\n\n/**\n * Update a {@link MatchedAndUnmatched}'s MediaStreamTrack IDs.\n * @param {MatchedAndUnmatched} mAndM\n * @param {Set<Track.ID>} ids\n * @returns {void}\n */\nfunction _update(mAndM, ids) {\n  ids = new Set(ids);\n  var removedMatchedIds = util.difference(mAndM.matched, ids);\n  removedMatchedIds.forEach(mAndM.matched.delete, mAndM.matched);\n  mAndM.unmatched = util.difference(ids, mAndM.matched);\n}\n\n/**\n * Parse MediaStreamTrack IDs of a particular kind from an SDP.\n * @param {string} kind\n * @param {string} sdp\n * @returns {Set<Track.ID>} ids\n */\nfunction parse(kind, sdp) {\n  var mediaSections = getMediaSections(sdp, kind);\n  var pattern = 'msid: ?(.+) +(.+) ?$';\n  return new Set(util.flatMap(mediaSections, function (mediaSection) {\n    return mediaSection.match(new RegExp(pattern, 'mg')) || [];\n  }).map(function (msid) {\n    return msid.match(new RegExp(pattern))[2];\n  }));\n}\n\n/**\n * A {@link OrderedTrackMatcher} is used to match RTCTrackEvents.\n * @property {MatchedAndUnmatched} audio\n * @property {MatchedAndUnmatched} video\n */\n\nvar OrderedTrackMatcher = function () {\n  function OrderedTrackMatcher() {\n    _classCallCheck(this, OrderedTrackMatcher);\n\n    if (!(this instanceof OrderedTrackMatcher)) {\n      return new OrderedTrackMatcher();\n    }\n    Object.defineProperties(this, {\n      audio: {\n        enumerable: true,\n        value: create()\n      },\n      video: {\n        enumerable: true,\n        value: create()\n      }\n    });\n  }\n\n  /**\n   * Attempt to match a new MediaStreamTrack ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID} id\n   */\n\n\n  _createClass(OrderedTrackMatcher, [{\n    key: 'match',\n    value: function match(event) {\n      return _match(this[event.track.kind]);\n    }\n\n    /**\n     * Update the {@link OrderedTrackMatcher} with a new SDP.\n     * @param {string} sdp\n     * @returns {void}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(sdp) {\n      ['audio', 'video'].forEach(function (kind) {\n        _update(this[kind], parse(kind, sdp));\n      }, this);\n    }\n  }]);\n\n  return OrderedTrackMatcher;\n}();\n\nmodule.exports = OrderedTrackMatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL3NkcC90cmFja21hdGNoZXIvb3JkZXJlZC5qcz8zOTA4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixXQUFXLG1CQUFPLENBQUMsaUJBQVE7QUFDM0IsdUJBQXVCLG1CQUFPLENBQUMsY0FBSzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLGNBQWM7QUFDNUIsY0FBYyxjQUFjO0FBQzVCOztBQUVBO0FBQ0EsNkJBQTZCLDBCQUEwQjtBQUN2RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkMsV0FBVyxvQkFBb0I7QUFDL0IsV0FBVyxjQUFjO0FBQ3pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsTUFBTSwwQkFBMEI7QUFDaEMsY0FBYyxvQkFBb0I7QUFDbEMsY0FBYyxvQkFBb0I7QUFDbEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0IsZUFBZSxVQUFVO0FBQ3pCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLDBCQUEwQjtBQUM3QyxlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuLi8uLi8nKTtcbnZhciBnZXRNZWRpYVNlY3Rpb25zID0gcmVxdWlyZSgnLi4vJykuZ2V0TWVkaWFTZWN0aW9ucztcblxuLy8gTk9URShtcm9iZXJ0cyk6IE9yZGVyZWRUcmFja01hdGNoZXIgaXMgbWVhbnQgdG8gc29sdmUgdGhlIHByb2JsZW0gaWRlbnRpZmllZCBpblxuLy9cbi8vICAgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3NDUxOVxuLy9cbi8vIE5hbWVseSB0aGF0LCB3aXRob3V0IE1JRHMsIHdlIGNhbm5vdCBcImNvcnJlY3RseVwiIGlkZW50aWZ5IE1lZGlhU3RyZWFtVHJhY2tzXG4vLyBpbiBTYWZhcmkncyBjdXJyZW50IFdlYlJUQyBpbXBsZW1lbnRhdGlvbi4gU28sIHRoaXMgbW9kdWxlIHRyaWVzIHRvIGhhY2tcbi8vIGFyb3VuZCB0aGlzIGJ5IG1ha2luZyBhIHBvc3NpYmx5IGRhbmdlcm91cyBhc3N1bXB0aW9uOiBcInRyYWNrXCIgZXZlbnRzIHdpbGxcbi8vIGJlIHJhaXNlZCBmb3IgTWVkaWFTdHJlYW1UcmFja3Mgb2YgYSBwYXJ0aWN1bGFyIGtpbmQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdFxuLy8gdGhvc2Uga2luZHMnIE1TSURzIGFwcGVhciBpbiB0aGUgU0RQLiBCeSBjYWxsaW5nIGB1cGRhdGVgIHdpdGggYW5cbi8vIFJUQ1BlZXJDb25uZWN0aW9uJ3MgYHJlbW90ZURlc2NyaXB0aW9uYCBhbmQgdGhlbiBpbnZva2luZyBgbWF0Y2hgLCB3ZSBvdWdodFxuLy8gdG8gYmUgYWJsZSB0byBkZXF1ZXVlIE1lZGlhU3RyZWFtVHJhY2sgSURzIGluIHRoZSBjb3JyZWN0IG9yZGVyIHRvIGJlXG4vLyBhc3NpZ25lZCB0byBcInRyYWNrXCIgZXZlbnRzLlxuXG4vKipcbiAqIEBpbnRlcmZhY2UgTWF0Y2hlZEFuZFVubWF0Y2hlZFxuICogQHByb3BlcnR5IHtTZXQ8VHJhY2suSUQ+fSBtYXRjaGVkXG4gKiBAcHJvcGVydHkge1NldDxUcmFjay5JRD59IHVubWF0Y2hlZFxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHtAbGluayBNYXRjaGVkQW5kVW5tYXRjaGVkfS5cbiAqIEByZXR1cm5zIHtNYXRjaGVkQW5kVW5tYXRjaGVkfVxuICovXG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHJldHVybiB7XG4gICAgbWF0Y2hlZDogbmV3IFNldCgpLFxuICAgIHVubWF0Y2hlZDogbmV3IFNldCgpXG4gIH07XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBtYXRjaCBhIE1lZGlhU3RyZWFtVHJhY2sgSUQuXG4gKiBAcGFyYW0ge01hdGNoZWRBbmRVbm1hdGNoZWR9IG1BbmRNXG4gKiBAcmV0dXJucyB7P1RyYWNrLklEfSBpZFxuICovXG5mdW5jdGlvbiBfbWF0Y2gobUFuZE0pIHtcbiAgdmFyIHVubWF0Y2hlZCA9IEFycmF5LmZyb20obUFuZE0udW5tYXRjaGVkKTtcbiAgaWYgKCF1bm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGlkID0gdW5tYXRjaGVkWzBdO1xuICBtQW5kTS5tYXRjaGVkLmFkZChpZCk7XG4gIG1BbmRNLnVubWF0Y2hlZC5kZWxldGUoaWQpO1xuICByZXR1cm4gaWQ7XG59XG5cbi8qKlxuICogVXBkYXRlIGEge0BsaW5rIE1hdGNoZWRBbmRVbm1hdGNoZWR9J3MgTWVkaWFTdHJlYW1UcmFjayBJRHMuXG4gKiBAcGFyYW0ge01hdGNoZWRBbmRVbm1hdGNoZWR9IG1BbmRNXG4gKiBAcGFyYW0ge1NldDxUcmFjay5JRD59IGlkc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIF91cGRhdGUobUFuZE0sIGlkcykge1xuICBpZHMgPSBuZXcgU2V0KGlkcyk7XG4gIHZhciByZW1vdmVkTWF0Y2hlZElkcyA9IHV0aWwuZGlmZmVyZW5jZShtQW5kTS5tYXRjaGVkLCBpZHMpO1xuICByZW1vdmVkTWF0Y2hlZElkcy5mb3JFYWNoKG1BbmRNLm1hdGNoZWQuZGVsZXRlLCBtQW5kTS5tYXRjaGVkKTtcbiAgbUFuZE0udW5tYXRjaGVkID0gdXRpbC5kaWZmZXJlbmNlKGlkcywgbUFuZE0ubWF0Y2hlZCk7XG59XG5cbi8qKlxuICogUGFyc2UgTWVkaWFTdHJlYW1UcmFjayBJRHMgb2YgYSBwYXJ0aWN1bGFyIGtpbmQgZnJvbSBhbiBTRFAuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2luZFxuICogQHBhcmFtIHtzdHJpbmd9IHNkcFxuICogQHJldHVybnMge1NldDxUcmFjay5JRD59IGlkc1xuICovXG5mdW5jdGlvbiBwYXJzZShraW5kLCBzZHApIHtcbiAgdmFyIG1lZGlhU2VjdGlvbnMgPSBnZXRNZWRpYVNlY3Rpb25zKHNkcCwga2luZCk7XG4gIHZhciBwYXR0ZXJuID0gJ21zaWQ6ID8oLispICsoLispID8kJztcbiAgcmV0dXJuIG5ldyBTZXQodXRpbC5mbGF0TWFwKG1lZGlhU2VjdGlvbnMsIGZ1bmN0aW9uIChtZWRpYVNlY3Rpb24pIHtcbiAgICByZXR1cm4gbWVkaWFTZWN0aW9uLm1hdGNoKG5ldyBSZWdFeHAocGF0dGVybiwgJ21nJykpIHx8IFtdO1xuICB9KS5tYXAoZnVuY3Rpb24gKG1zaWQpIHtcbiAgICByZXR1cm4gbXNpZC5tYXRjaChuZXcgUmVnRXhwKHBhdHRlcm4pKVsyXTtcbiAgfSkpO1xufVxuXG4vKipcbiAqIEEge0BsaW5rIE9yZGVyZWRUcmFja01hdGNoZXJ9IGlzIHVzZWQgdG8gbWF0Y2ggUlRDVHJhY2tFdmVudHMuXG4gKiBAcHJvcGVydHkge01hdGNoZWRBbmRVbm1hdGNoZWR9IGF1ZGlvXG4gKiBAcHJvcGVydHkge01hdGNoZWRBbmRVbm1hdGNoZWR9IHZpZGVvXG4gKi9cblxudmFyIE9yZGVyZWRUcmFja01hdGNoZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9yZGVyZWRUcmFja01hdGNoZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9yZGVyZWRUcmFja01hdGNoZXIpO1xuXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE9yZGVyZWRUcmFja01hdGNoZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IE9yZGVyZWRUcmFja01hdGNoZXIoKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgYXVkaW86IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGNyZWF0ZSgpXG4gICAgICB9LFxuICAgICAgdmlkZW86IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGNyZWF0ZSgpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdCB0byBtYXRjaCBhIG5ldyBNZWRpYVN0cmVhbVRyYWNrIElELlxuICAgKiBAcGFyYW0ge1JUQ1RyYWNrRXZlbnR9IGV2ZW50XG4gICAqIEByZXR1cm5zIHs/VHJhY2suSUR9IGlkXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE9yZGVyZWRUcmFja01hdGNoZXIsIFt7XG4gICAga2V5OiAnbWF0Y2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaChldmVudCkge1xuICAgICAgcmV0dXJuIF9tYXRjaCh0aGlzW2V2ZW50LnRyYWNrLmtpbmRdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHtAbGluayBPcmRlcmVkVHJhY2tNYXRjaGVyfSB3aXRoIGEgbmV3IFNEUC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2RwXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShzZHApIHtcbiAgICAgIFsnYXVkaW8nLCAndmlkZW8nXS5mb3JFYWNoKGZ1bmN0aW9uIChraW5kKSB7XG4gICAgICAgIF91cGRhdGUodGhpc1traW5kXSwgcGFyc2Uoa2luZCwgc2RwKSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3JkZXJlZFRyYWNrTWF0Y2hlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcmRlcmVkVHJhY2tNYXRjaGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvdXRpbC9zZHAvdHJhY2ttYXRjaGVyL29yZGVyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDMxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///318\n");

/***/ }),
/* 319 */
/*!********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/sdp/trackmatcher/mid.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getMediaSections = __webpack_require__(/*! ../ */ 211).getMediaSections;\n\n/**\n * An {@link MIDTrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\n\nvar MIDTrackMatcher = function () {\n  /**\n   * Construct an {@link MIDTrackMatcher}.\n   */\n  function MIDTrackMatcher() {\n    _classCallCheck(this, MIDTrackMatcher);\n\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n\n\n  _createClass(MIDTrackMatcher, [{\n    key: 'match',\n    value: function match(event) {\n      return this._midsToTrackIds.get(event.transceiver.mid) || null;\n    }\n\n    /**\n     * Update the {@link MIDTrackMatcher} with a new SDP.\n     * @param {string} sdp\n     */\n\n  }, {\n    key: 'update',\n    value: function update(sdp) {\n      var sections = getMediaSections(sdp, '(audio|video)');\n      this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n        var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n        var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n        var mid = midMatches[1];\n        var trackId = trackIdMatches[1];\n        return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n      }, this._midsToTrackIds);\n    }\n  }]);\n\n  return MIDTrackMatcher;\n}();\n\nmodule.exports = MIDTrackMatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL3NkcC90cmFja21hdGNoZXIvbWlkLmpzPzFlYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLHVCQUF1QixtQkFBTyxDQUFDLGNBQUs7O0FBRXBDO0FBQ0EsT0FBTyxzQkFBc0I7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekMsZUFBZSxPQUFPO0FBQ3RCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBnZXRNZWRpYVNlY3Rpb25zID0gcmVxdWlyZSgnLi4vJykuZ2V0TWVkaWFTZWN0aW9ucztcblxuLyoqXG4gKiBBbiB7QGxpbmsgTUlEVHJhY2tNYXRjaGVyfSBtYXRjaGVzIGFuIFJUQ1RyYWNrRXZlbnQgd2l0aCBhIE1lZGlhU3RyZWFtVHJhY2tcbiAqIElEIGJhc2VkIG9uIHRoZSBNSUQgb2YgdGhlIHVuZGVybHlpbmcgUlRDUnRwVHJhbnNjZWl2ZXIuXG4gKi9cblxudmFyIE1JRFRyYWNrTWF0Y2hlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiB7QGxpbmsgTUlEVHJhY2tNYXRjaGVyfS5cbiAgICovXG4gIGZ1bmN0aW9uIE1JRFRyYWNrTWF0Y2hlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTUlEVHJhY2tNYXRjaGVyKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIF9taWRzVG9UcmFja0lkczoge1xuICAgICAgICB2YWx1ZTogbmV3IE1hcCgpLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoIGEgZ2l2ZW4gTWVkaWFTdHJlYW1UcmFjayB3aXRoIGl0cyBJRC5cbiAgICogQHBhcmFtIHtSVENUcmFja0V2ZW50fSBldmVudFxuICAgKiBAcmV0dXJucyB7P1RyYWNrLklEfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhNSURUcmFja01hdGNoZXIsIFt7XG4gICAga2V5OiAnbWF0Y2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaChldmVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21pZHNUb1RyYWNrSWRzLmdldChldmVudC50cmFuc2NlaXZlci5taWQpIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB7QGxpbmsgTUlEVHJhY2tNYXRjaGVyfSB3aXRoIGEgbmV3IFNEUC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2RwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShzZHApIHtcbiAgICAgIHZhciBzZWN0aW9ucyA9IGdldE1lZGlhU2VjdGlvbnMoc2RwLCAnKGF1ZGlvfHZpZGVvKScpO1xuICAgICAgdGhpcy5fbWlkc1RvVHJhY2tJZHMgPSBzZWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKG1pZHNUb1RyYWNrSWRzLCBzZWN0aW9uKSB7XG4gICAgICAgIHZhciBtaWRNYXRjaGVzID0gc2VjdGlvbi5tYXRjaCgvXmE9bWlkOiguKykkL20pIHx8IFtdO1xuICAgICAgICB2YXIgdHJhY2tJZE1hdGNoZXMgPSBzZWN0aW9uLm1hdGNoKC9eYT1tc2lkOi4rICguKykkL20pIHx8IFtdO1xuICAgICAgICB2YXIgbWlkID0gbWlkTWF0Y2hlc1sxXTtcbiAgICAgICAgdmFyIHRyYWNrSWQgPSB0cmFja0lkTWF0Y2hlc1sxXTtcbiAgICAgICAgcmV0dXJuIG1pZCAmJiB0cmFja0lkID8gbWlkc1RvVHJhY2tJZHMuc2V0KG1pZCwgdHJhY2tJZCkgOiBtaWRzVG9UcmFja0lkcztcbiAgICAgIH0sIHRoaXMuX21pZHNUb1RyYWNrSWRzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTUlEVHJhY2tNYXRjaGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1JRFRyYWNrTWF0Y2hlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3V0aWwvc2RwL3RyYWNrbWF0Y2hlci9taWQuanNcbi8vIG1vZHVsZSBpZCA9IDMxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///319\n");

/***/ }),
/* 320 */
/*!*************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/sdp/issue8329.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar RTCSessionDescription = __webpack_require__(/*! @twilio/webrtc */ 212).RTCSessionDescription;\n\nvar createPtToCodecName = __webpack_require__(/*! ./ */ 211).createPtToCodecName;\nvar getMediaSections = __webpack_require__(/*! ./ */ 211).getMediaSections;\n\n/**\n * An RTX payload type\n * @typedef {PT} RtxPT\n */\n\n/**\n * A non-RTX payload type\n * @typedef {PT} NonRtxPT\n */\n\n/**\n * A Set with at least one element\n * @typedef {Set} NonEmptySet\n */\n\n/**\n * Apply the workaround for Issue 8329 to an RTCSessionDescriptionInit.\n * @param {RTCSessionDescriptionInit} description\n * @returns {RTCSessionDescription} newDescription\n */\nfunction workaround(description) {\n  var descriptionInit = { type: description.type };\n  if (description.type !== 'rollback') {\n    descriptionInit.sdp = sdpWorkaround(description.sdp);\n  }\n  return new RTCSessionDescription(descriptionInit);\n}\n\n/**\n * @param {string} sdp\n * @returns {string} newSdp\n */\nfunction sdpWorkaround(sdp) {\n  var mediaSections = getMediaSections(sdp);\n  var session = sdp.split('\\r\\nm=')[0];\n  return [session].concat(mediaSections.map(mediaSectionWorkaround)).join('\\r\\n');\n}\n\n/**\n * @param {string} mediaSection\n * @returns {string} newMediaSection\n */\nfunction mediaSectionWorkaround(mediaSection) {\n  var ptToCodecName = createPtToCodecName(mediaSection);\n  mediaSection = deleteDuplicateRtxPts(mediaSection, ptToCodecName);\n  var codecNameToPts = createCodecNameToPts(ptToCodecName);\n  var rtxPts = codecNameToPts.get('rtx') || new Set();\n\n  var invalidRtxPts = new Set();\n  var rtxPtToAssociatedPt = createRtxPtToAssociatedPt(mediaSection, ptToCodecName, rtxPts, invalidRtxPts);\n  var associatedPtToRtxPt = createAssociatedPtToRtxPt(rtxPtToAssociatedPt, invalidRtxPts);\n\n  var unassociatedRtxPts = Array.from(invalidRtxPts);\n\n  // NOTE(mroberts): We normalize to lowercase.\n  var knownCodecNames = ['h264', 'vp8', 'vp9'];\n  var unassociatedPts = knownCodecNames.reduce(function (unassociatedPts, codecName) {\n    var pts = codecNameToPts.get(codecName) || new Set();\n    return Array.from(pts).reduce(function (unassociatedPts, pt) {\n      return associatedPtToRtxPt.has(pt) ? unassociatedPts : unassociatedPts.add(pt);\n    }, unassociatedPts);\n  }, new Set());\n\n  unassociatedPts.forEach(function (pt) {\n    if (unassociatedRtxPts.length) {\n      var rtxPt = unassociatedRtxPts.shift();\n      mediaSection = deleteFmtpAttributesForRtxPt(mediaSection, rtxPt);\n      mediaSection = addFmtpAttributeForRtxPt(mediaSection, rtxPt, pt);\n    }\n  });\n\n  unassociatedRtxPts.forEach(function (rtxPt) {\n    mediaSection = deleteFmtpAttributesForRtxPt(mediaSection, rtxPt);\n    mediaSection = deleteRtpmapAttributesForRtxPt(mediaSection, rtxPt);\n  });\n\n  return mediaSection;\n}\n\n/**\n * @param {string} mediaSection\n * @param {Map<PT, Codec>} ptToCodecName\n * @returns {string} newMediaSection\n */\nfunction deleteDuplicateRtxPts(mediaSection, ptToCodecName) {\n  // NOTE(syerrapragada): In some cases Chrome produces an offer/answer\n  // with duplicate \"rtx\" payload mapping in media section. When applied,\n  // Chrome rejects the SDP. We workaround this by deleting duplicate\n  // \"rtx\" mappings found in SDP.\n  return Array.from(ptToCodecName.keys()).reduce(function (section, pt) {\n    var rtpmapRegex = new RegExp('^a=rtpmap:' + pt + ' rtx.+$', 'gm');\n    return (section.match(rtpmapRegex) || []).slice(ptToCodecName.get(pt) === 'rtx' ? 1 : 0).reduce(function (section, rtpmap) {\n      var rtpmapRegex = new RegExp('\\r\\n' + rtpmap);\n      var fmtpmapRegex = new RegExp('\\r\\na=fmtp:' + pt + ' apt=[0-9]+');\n      return section.replace(rtpmapRegex, '').replace(fmtpmapRegex, '');\n    }, section);\n  }, mediaSection);\n}\n\n/**\n * @param {Map<PT, Codec>} ptToCodecName\n * @returns {Map<string, NonEmptySet<PT>>} codecNameToPts\n */\nfunction createCodecNameToPts(ptToCodecName) {\n  var codecNameToPts = new Map();\n  ptToCodecName.forEach(function (codecName, pt) {\n    var pts = codecNameToPts.get(codecName) || new Set();\n    return codecNameToPts.set(codecName, pts.add(pt));\n  });\n  return codecNameToPts;\n}\n\n/**\n * @param {string} mediaSection\n * @param {Map<PT, Codec>} ptToCodecName\n * @param {Set<RtxPT>} rtxPts\n * @param {Set<RtxPT>} invalidRtxPts\n * @returns {Map<RtxPT, NonRtxPT>} rtxPtToAssociatedPt\n */\nfunction createRtxPtToAssociatedPt(mediaSection, ptToCodecName, rtxPts, invalidRtxPts) {\n  return Array.from(rtxPts).reduce(function (rtxPtToAssociatedPt, rtxPt) {\n    var fmtpPattern = new RegExp('a=fmtp:' + rtxPt + ' apt=(\\\\d+)');\n    var matches = mediaSection.match(fmtpPattern);\n    if (!matches) {\n      invalidRtxPts.add(rtxPt);\n      return rtxPtToAssociatedPt;\n    }\n\n    var pt = Number.parseInt(matches[1]);\n    if (!ptToCodecName.has(pt)) {\n      // This is Issue 8329.\n      invalidRtxPts.add(rtxPt);\n      return rtxPtToAssociatedPt;\n    }\n\n    var codecName = ptToCodecName.get(pt);\n    if (codecName === 'rtx') {\n      // Strange\n      invalidRtxPts.add(rtxPt);\n      return rtxPtToAssociatedPt;\n    }\n\n    return rtxPtToAssociatedPt.set(rtxPt, pt);\n  }, new Map());\n}\n\n/**\n * @param {string} mediaSection\n * @param {Map<RtxPT, NonRtxPT>} rtxPtToAssociatedPt\n * @param {Set<RtxPT>} invalidRtxPts\n * @returns {Map<NonRtxPT, RtxPT>} associatedPtToRtxPt\n */\nfunction createAssociatedPtToRtxPt(rtxPtToAssociatedPt, invalidRtxPts) {\n  // First, we construct a Map<NonRtxPT, NonEmptySet<RtxPT>>.\n  var associatedPtToRtxPts = Array.from(rtxPtToAssociatedPt).reduce(function (associatedPtToRtxPts, pair) {\n    var rtxPt = pair[0];\n    var pt = pair[1];\n    var rtxPts = associatedPtToRtxPts.get(pt) || new Set();\n    return associatedPtToRtxPts.set(pt, rtxPts.add(rtxPt));\n  }, new Map());\n\n  // Then, we filter down to a Map<NonRtxPT, RtxPt>. Any RtxPTs that map to the\n  // same NonRtxPT are removed and added to invalidRtxPts.\n  return Array.from(associatedPtToRtxPts).reduce(function (associatedPtToRtxPt, pair) {\n    var pt = pair[0];\n    var rtxPts = Array.from(pair[1]);\n    if (rtxPts.length > 1) {\n      rtxPts.forEach(function (rtxPt) {\n        invalidRtxPts.add(rtxPt);\n      });\n      return associatedPtToRtxPt;\n    }\n    return associatedPtToRtxPt.set(pt, rtxPts[0]);\n  }, new Map());\n}\n\n/**\n * @param {string} mediaSection\n * @param {RtxPT} rtxPt\n * @returns {string} newMediaSection\n */\nfunction deleteFmtpAttributesForRtxPt(mediaSection, rtxPt) {\n  var pattern = new RegExp('a=fmtp:' + rtxPt + '.*\\r\\n', 'gm');\n  return mediaSection.replace(pattern, '');\n}\n\n/**\n * @param {string} mediaSection\n * @param {RtxPT} rtxPt\n * @returns {string} newMediaSection\n */\nfunction deleteRtpmapAttributesForRtxPt(mediaSection, rtxPt) {\n  var pattern = new RegExp('a=rtpmap:' + rtxPt + '.*\\r\\n', 'gm');\n  return mediaSection.replace(pattern, '');\n}\n\n/**\n * @param {string} mediaSection\n * @param {RtxPT} rtxPt\n * @param {NonRtxPT} pt\n * @returns {string} newMediaSection\n */\nfunction addFmtpAttributeForRtxPt(mediaSection, rtxPt, pt) {\n  return mediaSection.endsWith('\\r\\n') ? mediaSection + 'a=fmtp:' + rtxPt + ' apt=' + pt + '\\r\\n' : mediaSection + '\\r\\na=fmtp:' + rtxPt + ' apt=' + pt;\n}\n\nmodule.exports = workaround;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///320\n");

/***/ }),
/* 321 */
/*!***************************************************************!*\
  !*** ./node_modules/twilio-video/es5/queueingeventemitter.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\n/**\n * A {@link QueueingEventEmitter} can queue events until a listener has been\n * added.\n * @extends EventEmitter\n */\n\nvar QueueingEventEmitter = function (_EventEmitter) {\n  _inherits(QueueingEventEmitter, _EventEmitter);\n\n  /**\n   * Construct a {@link QueueingEventEmitter}\n   */\n  function QueueingEventEmitter() {\n    _classCallCheck(this, QueueingEventEmitter);\n\n    var _this = _possibleConstructorReturn(this, (QueueingEventEmitter.__proto__ || Object.getPrototypeOf(QueueingEventEmitter)).call(this));\n\n    Object.defineProperties(_this, {\n      _queuedEvents: {\n        value: new Map()\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Emit any queued events.\n   * @returns {boolean} true if every event had listeners, false otherwise\n  */ /**\n     * Emit any queued events matching the event name.\n     * @param {string} event\n     * @returns {boolean} true if every event had listeners, false otherwise\n     */\n\n\n  _createClass(QueueingEventEmitter, [{\n    key: 'dequeue',\n    value: function dequeue(event) {\n      var _this2 = this;\n\n      var result = true;\n      if (!event) {\n        this._queuedEvents.forEach(function (_, queuedEvent) {\n          result = this.dequeue(queuedEvent) && result;\n        }, this);\n        return result;\n      }\n      var queue = this._queuedEvents.get(event) || [];\n      this._queuedEvents.delete(event);\n      return queue.reduce(function (result, args) {\n        return _this2.emit.apply(_this2, _toConsumableArray([event].concat(args))) && result;\n      }, result);\n    }\n\n    /**\n     * If the event has listeners, emit the event; otherwise, queue the event.\n     * @param {string} event\n     * @param {...*} args\n     * @returns {boolean} true if the event had listeners, false if the event was queued\n     */\n\n  }, {\n    key: 'queue',\n    value: function queue() {\n      var args = [].slice.call(arguments);\n      if (this.emit.apply(this, _toConsumableArray(args))) {\n        return true;\n      }\n      var event = args[0];\n      if (!this._queuedEvents.has(event)) {\n        this._queuedEvents.set(event, []);\n      }\n      this._queuedEvents.get(event).push(args.slice(1));\n      return false;\n    }\n  }]);\n\n  return QueueingEventEmitter;\n}(EventEmitter);\n\nmodule.exports = QueueingEventEmitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9xdWV1ZWluZ2V2ZW50ZW1pdHRlci5qcz81ODkxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixrQ0FBa0MsMEJBQTBCLDBDQUEwQyxnQkFBZ0IsT0FBTyxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsT0FBTyx3QkFBd0IsRUFBRTs7QUFFak0saURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSxtQkFBbUIsbUJBQU8sQ0FBQyxpQkFBUTs7QUFFbkM7QUFDQSxNQUFNLDJCQUEyQjtBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLFFBQVE7QUFDekI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLGtEQUFrRDtBQUNsRCxlQUFlLE9BQU87QUFDdEIsZUFBZSxLQUFLO0FBQ3BCLGlCQUFpQixRQUFRO0FBQ3pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuLyoqXG4gKiBBIHtAbGluayBRdWV1ZWluZ0V2ZW50RW1pdHRlcn0gY2FuIHF1ZXVlIGV2ZW50cyB1bnRpbCBhIGxpc3RlbmVyIGhhcyBiZWVuXG4gKiBhZGRlZC5cbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5cbnZhciBRdWV1ZWluZ0V2ZW50RW1pdHRlciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhRdWV1ZWluZ0V2ZW50RW1pdHRlciwgX0V2ZW50RW1pdHRlcik7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBRdWV1ZWluZ0V2ZW50RW1pdHRlcn1cbiAgICovXG4gIGZ1bmN0aW9uIFF1ZXVlaW5nRXZlbnRFbWl0dGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWV1ZWluZ0V2ZW50RW1pdHRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUXVldWVpbmdFdmVudEVtaXR0ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihRdWV1ZWluZ0V2ZW50RW1pdHRlcikpLmNhbGwodGhpcykpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIF9xdWV1ZWRFdmVudHM6IHtcbiAgICAgICAgdmFsdWU6IG5ldyBNYXAoKVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0IGFueSBxdWV1ZWQgZXZlbnRzLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBldmVyeSBldmVudCBoYWQgbGlzdGVuZXJzLCBmYWxzZSBvdGhlcndpc2VcbiAgKi8gLyoqXG4gICAgICogRW1pdCBhbnkgcXVldWVkIGV2ZW50cyBtYXRjaGluZyB0aGUgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBldmVyeSBldmVudCBoYWQgbGlzdGVuZXJzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhRdWV1ZWluZ0V2ZW50RW1pdHRlciwgW3tcbiAgICBrZXk6ICdkZXF1ZXVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVxdWV1ZShldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9xdWV1ZWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoXywgcXVldWVkRXZlbnQpIHtcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLmRlcXVldWUocXVldWVkRXZlbnQpICYmIHJlc3VsdDtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgcXVldWUgPSB0aGlzLl9xdWV1ZWRFdmVudHMuZ2V0KGV2ZW50KSB8fCBbXTtcbiAgICAgIHRoaXMuX3F1ZXVlZEV2ZW50cy5kZWxldGUoZXZlbnQpO1xuICAgICAgcmV0dXJuIHF1ZXVlLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZW1pdC5hcHBseShfdGhpczIsIF90b0NvbnN1bWFibGVBcnJheShbZXZlbnRdLmNvbmNhdChhcmdzKSkpICYmIHJlc3VsdDtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIGV2ZW50IGhhcyBsaXN0ZW5lcnMsIGVtaXQgdGhlIGV2ZW50OyBvdGhlcndpc2UsIHF1ZXVlIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3NcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZmFsc2UgaWYgdGhlIGV2ZW50IHdhcyBxdWV1ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncXVldWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBxdWV1ZSgpIHtcbiAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuZW1pdC5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGV2ZW50ID0gYXJnc1swXTtcbiAgICAgIGlmICghdGhpcy5fcXVldWVkRXZlbnRzLmhhcyhldmVudCkpIHtcbiAgICAgICAgdGhpcy5fcXVldWVkRXZlbnRzLnNldChldmVudCwgW10pO1xuICAgICAgfVxuICAgICAgdGhpcy5fcXVldWVkRXZlbnRzLmdldChldmVudCkucHVzaChhcmdzLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUXVldWVpbmdFdmVudEVtaXR0ZXI7XG59KEV2ZW50RW1pdHRlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWVpbmdFdmVudEVtaXR0ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9xdWV1ZWluZ2V2ZW50ZW1pdHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///321\n");

/***/ }),
/* 322 */
/*!************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/room.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DominantSpeakerSignaling = __webpack_require__(/*! ./dominantspeakersignaling */ 323);\nvar NetworkQualityMonitor = __webpack_require__(/*! ./networkqualitymonitor */ 324);\nvar NetworkQualitySignaling = __webpack_require__(/*! ./networkqualitysignaling */ 331);\nvar RecordingV2 = __webpack_require__(/*! ./recording */ 333);\nvar RoomSignaling = __webpack_require__(/*! ../room */ 257);\nvar RemoteParticipantV2 = __webpack_require__(/*! ./remoteparticipant */ 334);\nvar StatsReport = __webpack_require__(/*! ../../stats/statsreport */ 246);\nvar util = __webpack_require__(/*! ../../util */ 206);\nvar createTwilioError = __webpack_require__(/*! ../../util/twilio-video-errors */ 209).createTwilioError;\n\nvar STATS_PUBLISH_INTERVAL_MS = 1000;\n\n/**\n * @extends RoomSignaling\n */\n\nvar RoomV2 = function (_RoomSignaling) {\n  _inherits(RoomV2, _RoomSignaling);\n\n  function RoomV2(localParticipant, initialState, transport, peerConnectionManager, options) {\n    _classCallCheck(this, RoomV2);\n\n    options = Object.assign({\n      NetworkQualityMonitor: NetworkQualityMonitor,\n      NetworkQualitySignaling: NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2: RemoteParticipantV2,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (RoomV2.__proto__ || Object.getPrototypeOf(RoomV2)).call(this, localParticipant, initialState.sid, initialState.name, options));\n\n    Object.defineProperties(_this, {\n      _dominantSpeakerSignaling: {\n        value: null,\n        writable: true\n      },\n      _dominantSpeakerSignalingPromise: {\n        value: null,\n        writable: true\n      },\n      _disconnectedParticipantSids: {\n        value: new Set()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _NetworkQualitySignaling: {\n        value: options.NetworkQualitySignaling\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityMonitorPromise: {\n        value: null,\n        writable: true\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      }\n    });\n\n    handleLocalParticipantEvents(_this, localParticipant);\n    handlePeerConnectionEvents(_this, peerConnectionManager);\n    handleTransportEvents(_this, transport);\n    periodicallyPublishStats(_this, localParticipant, transport, options.statsPublishIntervalMs);\n\n    _this._update(initialState);\n    return _this;\n  }\n\n  /**\n   * The Signaling Connection State\n   * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n   */\n\n\n  _createClass(RoomV2, [{\n    key: '_deleteTrackReceiverDeferred',\n\n\n    /**\n     * @private\n     */\n    value: function _deleteTrackReceiverDeferred(id) {\n      return this._trackReceiverDeferreds.delete(id);\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getOrCreateTrackReceiverDeferred',\n    value: function _getOrCreateTrackReceiverDeferred(id) {\n      var deferred = this._trackReceiverDeferreds.get(id) || util.defer();\n      var trackReceivers = this._peerConnectionManager.getTrackReceivers();\n\n      // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n      // for the given Track ID already exists, for example, when a Track is removed\n      // and added back. If that is the case, then we should resolve 'deferred'.\n      var trackReceiver = trackReceivers.find(function (trackReceiver) {\n        return trackReceiver.id === id && trackReceiver.readyState !== 'ended';\n      });\n\n      if (trackReceiver) {\n        deferred.resolve(trackReceiver);\n      } else {\n        // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n        // resolved. This will prevent old copies of the MediaStreamTrack from\n        // being used when the remote peer removes and re-adds a MediaStreamTrack.\n        this._trackReceiverDeferreds.set(id, deferred);\n      }\n\n      return deferred;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_addTrackReceiver',\n    value: function _addTrackReceiver(trackReceiver) {\n      var deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n      deferred.resolve(trackReceiver);\n      return this;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(error) {\n      var didDisconnect = _get(RoomV2.prototype.__proto__ || Object.getPrototypeOf(RoomV2.prototype), '_disconnect', this).call(this, error);\n      if (didDisconnect) {\n        this._teardownDominantSpeakerSignaling();\n        this._teardownNetworkQualityMonitor();\n        this._transport.disconnect();\n        this._peerConnectionManager.close();\n      }\n\n      this.localParticipant.tracks.forEach(function (track) {\n        track.publishFailed(error || new Error('LocalParticipant disconnected'));\n      });\n\n      return didDisconnect;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getTrackReceiver',\n    value: function _getTrackReceiver(id) {\n      var _this2 = this;\n\n      return this._getOrCreateTrackReceiverDeferred(id).promise.then(function (trackReceiver) {\n        _this2._deleteTrackReceiverDeferred(id);\n        return trackReceiver;\n      });\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getOrCreateRemoteParticipant',\n    value: function _getOrCreateRemoteParticipant(participantState) {\n      var RemoteParticipantV2 = this._RemoteParticipantV2;\n      var participant = this.participants.get(participantState.sid);\n      var self = this;\n      if (!participant) {\n        participant = new RemoteParticipantV2(participantState, this._getTrackReceiver.bind(this));\n        participant.on('stateChanged', function stateChanged(state) {\n          if (state === 'disconnected') {\n            participant.removeListener('stateChanged', stateChanged);\n            self.participants.delete(participant.sid);\n            self._disconnectedParticipantSids.add(participant.sid);\n          }\n        });\n        this.connectParticipant(participant);\n      }\n      return participant;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getState',\n    value: function _getState() {\n      return {\n        participant: this.localParticipant.getState()\n      };\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_publishNewLocalParticipantState',\n    value: function _publishNewLocalParticipantState() {\n      this._transport.publish(this._getState());\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_publishPeerConnectionState',\n    value: function _publishPeerConnectionState(peerConnectionState) {\n      /* eslint camelcase:0 */\n      this._transport.publish(Object.assign({\n        peer_connections: [peerConnectionState]\n      }, this._getState()));\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_update',\n    value: function _update(roomState) {\n      var _this3 = this;\n\n      var participantsToKeep = new Set();\n\n      if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n        this._subscribedRevision = roomState.subscribed.revision;\n        roomState.subscribed.tracks.forEach(function (trackState) {\n          if (trackState.id) {\n            this._subscriptionFailures.delete(trackState.sid);\n            this._subscribed.set(trackState.sid, trackState.id);\n          } else if (trackState.error && !this._subscriptionFailures.has(trackState.sid)) {\n            this._subscriptionFailures.set(trackState.sid, trackState.error);\n          }\n        }, this);\n\n        var subscribedTrackSids = new Set(roomState.subscribed.tracks.filter(function (trackState) {\n          return !!trackState.id;\n        }).map(function (trackState) {\n          return trackState.sid;\n        }));\n\n        this._subscribed.forEach(function (trackId, trackSid) {\n          if (!subscribedTrackSids.has(trackSid)) {\n            _this3._subscribed.delete(trackSid);\n          }\n        });\n      }\n\n      // TODO(mroberts): Remove me once the Server is fixed.\n      (roomState.participants || []).forEach(function (participantState) {\n        if (participantState.sid === _this3.localParticipant.sid || _this3._disconnectedParticipantSids.has(participantState.sid)) {\n          return;\n        }\n        var participant = _this3._getOrCreateRemoteParticipant(participantState);\n        participant.update(participantState);\n        participantsToKeep.add(participant);\n      });\n\n      handleSubscriptions(this);\n\n      // TODO(mroberts): Remove me once the Server is fixed.\n      /* eslint camelcase:0 */\n      if (roomState.peer_connections) {\n        this._peerConnectionManager.update(roomState.peer_connections);\n      }\n\n      if (roomState.recording) {\n        this.recording.update(roomState.recording);\n      }\n\n      if (roomState.published && roomState.published.revision > this._publishedRevision) {\n        this._publishedRevision = roomState.published.revision;\n        roomState.published.tracks.forEach(function (track) {\n          if (track.sid) {\n            this._published.set(track.id, track.sid);\n          }\n        }, this);\n        this.localParticipant.update(roomState.published);\n      }\n\n      if (roomState.participant) {\n        this.localParticipant.connect(roomState.participant.sid, roomState.participant.identity);\n      }\n\n      if (!this._dominantSpeakerSignalingPromise && roomState.media_signaling && roomState.media_signaling.active_speaker && roomState.media_signaling.active_speaker.transport && roomState.media_signaling.active_speaker.transport.type === 'data-channel') {\n        this._setupDataTransportBackedDominantSpeakerSignaling(roomState.media_signaling.active_speaker.transport.label);\n      }\n\n      if (!this._networkQualityMonitorPromise && roomState.media_signaling && roomState.media_signaling.network_quality && roomState.media_signaling.network_quality.transport && roomState.media_signaling.network_quality.transport.type === 'data-channel') {\n        this._setupDataTransportBackedNetworkQualityMonitor(roomState.media_signaling.network_quality.transport.label);\n      }\n\n      return this;\n    }\n\n    /**\n     * Create a {@link DataTransport}-backed {@link DominantSpeakerSignaling}.\n     * @private\n     * @param {ID} id - ID of the {@link DataTrackReceiver} that will ultimately\n     *   be converted into a {@link DataTrackTransport} for use with\n     *   {@link DominantSpeakerSignaling}\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setupDataTransportBackedDominantSpeakerSignaling',\n    value: function _setupDataTransportBackedDominantSpeakerSignaling(id) {\n      var _this4 = this;\n\n      this._teardownDominantSpeakerSignaling();\n      var dominantSpeakerSignalingPromise = this._getTrackReceiver(id).then(function (receiver) {\n        if (receiver.kind !== 'data') {\n          throw new Error('Expected a DataTrackReceiver');\n        }if (_this4._dominantSpeakerSignalingPromise !== dominantSpeakerSignalingPromise) {\n          // NOTE(mroberts): _teardownDominantSpeakerSignaling was called.\n          return;\n        }\n        var dominantSpeakerSignaling = new DominantSpeakerSignaling(receiver.toDataTransport());\n        _this4._setDominantSpeakerSignaling(dominantSpeakerSignaling);\n      });\n      this._dominantSpeakerSignalingPromise = dominantSpeakerSignalingPromise;\n    }\n    /**\n     * Create a {@link DataTransport}-backed {@link NetworkQualityMonitor}.\n     * @private\n     * @param {ID} id - ID of the {@link DataTrackReceiver} that will ultimately\n     *   be converted into a {@link DataTrackTransport} for use with\n     *   {@link NetworkQualitySignaling}\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setupDataTransportBackedNetworkQualityMonitor',\n    value: function _setupDataTransportBackedNetworkQualityMonitor(id) {\n      var _this5 = this;\n\n      this._teardownNetworkQualityMonitor();\n      var networkQualityMonitorPromise = this._getTrackReceiver(id).then(function (receiver) {\n        if (receiver.kind !== 'data') {\n          throw new Error('Expected a DataTrackReceiver');\n        }if (_this5._networkQualityMonitorPromise !== networkQualityMonitorPromise) {\n          // NOTE(mroberts): _teardownNetworkQualityMonitor was called.\n          return;\n        }\n        var networkQualitySignaling = new _this5._NetworkQualitySignaling(receiver.toDataTransport());\n        var networkQualityMonitor = new _this5._NetworkQualityMonitor(_this5._peerConnectionManager, networkQualitySignaling);\n        _this5._setNetworkQualityMonitor(networkQualityMonitor);\n      });\n      this._networkQualityMonitorPromise = networkQualityMonitorPromise;\n    }\n  }, {\n    key: '_setDominantSpeakerSignaling',\n    value: function _setDominantSpeakerSignaling(dominantSpeakerSignaling) {\n      var _this6 = this;\n\n      this._dominantSpeakerSignaling = dominantSpeakerSignaling;\n      dominantSpeakerSignaling.on('updated', function () {\n        return _this6.setDominantSpeaker(dominantSpeakerSignaling.loudestParticipantSid);\n      });\n    }\n  }, {\n    key: '_setNetworkQualityMonitor',\n    value: function _setNetworkQualityMonitor(networkQualityMonitor) {\n      var _this7 = this;\n\n      this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', function () {\n        if (_this7.mediaConnectionState === 'failed') {\n          return;\n        }\n        _this7.localParticipant.setNetworkQualityLevel(networkQualityMonitor.level, networkQualityMonitor.levels);\n      });\n      networkQualityMonitor.start();\n    }\n  }, {\n    key: '_teardownDominantSpeakerSignaling',\n    value: function _teardownDominantSpeakerSignaling() {\n      this._dominantSpeakerSignalingPromise = null;\n      this._dominantSpeakerSignaling = null;\n    }\n  }, {\n    key: '_teardownNetworkQualityMonitor',\n    value: function _teardownNetworkQualityMonitor() {\n      this._networkQualityMonitorPromise = null;\n      if (this._networkQualityMonitor) {\n        this._networkQualityMonitor.stop();\n        this._networkQualityMonitor = null;\n      }\n    }\n\n    /**\n     * Get the {@link RoomV2}'s media statistics.\n     * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this8 = this;\n\n      return this._peerConnectionManager.getStats().then(function (responses) {\n        return new Map(Array.from(responses).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              id = _ref2[0],\n              response = _ref2[1];\n\n          return [id, Object.assign({}, response, {\n            localAudioTrackStats: filterAndAddLocalTrackSids(_this8, response.localAudioTrackStats),\n            localVideoTrackStats: filterAndAddLocalTrackSids(_this8, response.localVideoTrackStats),\n            remoteAudioTrackStats: filterAndAddRemoteTrackSids(_this8, response.remoteAudioTrackStats),\n            remoteVideoTrackStats: filterAndAddRemoteTrackSids(_this8, response.remoteVideoTrackStats)\n          })];\n        }));\n      });\n    }\n  }, {\n    key: 'signalingConnectionState',\n    get: function get() {\n      return this._transport.state === 'syncing' ? 'reconnecting' : this._transport.state;\n    }\n\n    /**\n     * The Media Connection State\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: 'mediaConnectionState',\n    get: function get() {\n      return this._peerConnectionManager.iceConnectionState;\n    }\n  }]);\n\n  return RoomV2;\n}(RoomSignaling);\n\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\n\n\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var trackSid = idToSid.get(trackStat.trackId);\n    return trackSid ? [Object.assign({}, trackStat, { trackSid: trackSid })].concat(trackStats) : trackStats;\n  }, []);\n}\n\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  var idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        sid = _ref4[0],\n        id = _ref4[1];\n\n    return [id, sid];\n  }));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\n\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  var renegotiate = util.oncePerTick(function () {\n    var trackSenders = util.flatMap(localParticipant.tracks, function (trackV2) {\n      return trackV2.trackTransceiver;\n    });\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n\n  var localParticipantUpdated = util.oncePerTick(function () {\n    roomV2._publishNewLocalParticipantState();\n  });\n\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n}\n\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n\n  peerConnectionManager.on('iceConnectionStateChanged', function () {\n    roomV2.emit('mediaConnectionStateChanged');\n    if (roomV2.mediaConnectionState === 'failed' && roomV2.localParticipant.networkQualityLevel !== null) {\n      roomV2.localParticipant.setNetworkQualityLevel(0);\n    }\n  });\n}\n\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n      transport.removeListener('stateChanged', stateChanged);\n    }\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {LocalParticipantV2} localParticipant\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, localParticipant, transport, intervalMs) {\n  var interval = setInterval(function () {\n    roomV2.getStats().then(function (stats) {\n      stats.forEach(function (response, id) {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add nulls to properties that do not exist.\n        var report = new StatsReport(id, response);\n\n        transport.publishEvent('quality', 'stats-report', {\n          audioTrackStats: report.remoteAudioTrackStats,\n          localAudioTrackStats: report.localAudioTrackStats,\n          localVideoTrackStats: report.localVideoTrackStats,\n          participantSid: localParticipant.sid,\n          peerConnectionId: report.peerConnectionId,\n          roomSid: roomV2.sid,\n          videoTrackStats: report.remoteVideoTrackStats\n        });\n\n        // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n        // payload are assigned default values until the Insights gateway\n        // accepts null values.\n        var activeIceCandidatePair = replaceNullsWithDefaults(response.activeIceCandidatePair, report.peerConnectionId);\n\n        transport.publishEvent('quality', 'active-ice-candidate-pair', activeIceCandidatePair);\n      });\n    }, function () {\n      // Do nothing.\n    });\n  }, intervalMs);\n\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\n\nfunction handleSubscriptions(room) {\n  var trackSignalings = new Map(util.flatMap(room.participants, function (participant) {\n    return Array.from(participant.tracks.values()).map(function (track) {\n      return [track.sid, track];\n    });\n  }));\n\n  room._subscriptionFailures.forEach(function (error, trackSid) {\n    var trackSignaling = trackSignalings.get(trackSid);\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n\n  trackSignalings.forEach(function (trackSignaling) {\n    var trackId = room._subscribed.get(trackSignaling.sid);\n    if (!trackId || trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(function (trackReceiver) {\n        return trackSignaling.setTrackTransceiver(trackReceiver);\n      });\n    }\n  });\n}\n\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, util.filterObject(activeIceCandidatePair || {}, null));\n\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    relayProtocol: 'udp',\n    url: ''\n  }, util.filterObject(activeIceCandidatePair.localCandidate || {}, null));\n\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, util.filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n\n  return activeIceCandidatePair;\n}\n\nmodule.exports = RoomV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///322\n");

/***/ }),
/* 323 */
/*!********************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/dominantspeakersignaling.js ***!
  \********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! events */ 207),\n    EventEmitter = _require.EventEmitter;\n\n/**\n * @property {?Track.SID} loudestParticipantSid\n * @emits DominantSpeakerSignaling#updated\n */\n\n\nvar DominantSpeakerSignaling = function (_EventEmitter) {\n  _inherits(DominantSpeakerSignaling, _EventEmitter);\n\n  /**\n   * Construct an {@link DominantSpeakerSignaling}.\n   * @param {MediaSignalingTransport} mediaSignalingTransport\n   */\n  function DominantSpeakerSignaling(mediaSignalingTransport) {\n    _classCallCheck(this, DominantSpeakerSignaling);\n\n    var _this = _possibleConstructorReturn(this, (DominantSpeakerSignaling.__proto__ || Object.getPrototypeOf(DominantSpeakerSignaling)).call(this));\n\n    Object.defineProperties(_this, {\n      _loudestParticipantSid: {\n        value: null,\n        writable: true\n      }\n    });\n\n    mediaSignalingTransport.on('message', function (message) {\n      switch (message.type) {\n        case 'active_speaker':\n          _this._setLoudestParticipantSid(message.participant);\n          break;\n        default:\n          break;\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Get the loudest {@link Track.SID}, if known.\n   * @returns {?Track.SID}\n   */\n\n\n  _createClass(DominantSpeakerSignaling, [{\n    key: '_setLoudestParticipantSid',\n\n\n    /**\n     * @private\n     * @param {Track.SID} loudestParticipantSid\n     * @returns {void}\n     */\n    value: function _setLoudestParticipantSid(loudestParticipantSid) {\n      if (this.loudestParticipantSid === loudestParticipantSid) {\n        return;\n      }\n      this._loudestParticipantSid = loudestParticipantSid;\n      this.emit('updated');\n    }\n  }, {\n    key: 'loudestParticipantSid',\n    get: function get() {\n      return this._loudestParticipantSid;\n    }\n  }]);\n\n  return DominantSpeakerSignaling;\n}(EventEmitter);\n\n/**\n * @event DominantSpeakerSignaling#updated\n */\n\nmodule.exports = DominantSpeakerSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvZG9taW5hbnRzcGVha2Vyc2lnbmFsaW5nLmpzP2VkZTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsZUFBZSxtQkFBTyxDQUFDLGlCQUFRO0FBQy9COztBQUVBO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsK0JBQStCO0FBQ2xELGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIzMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZXZlbnRzJyksXG4gICAgRXZlbnRFbWl0dGVyID0gX3JlcXVpcmUuRXZlbnRFbWl0dGVyO1xuXG4vKipcbiAqIEBwcm9wZXJ0eSB7P1RyYWNrLlNJRH0gbG91ZGVzdFBhcnRpY2lwYW50U2lkXG4gKiBAZW1pdHMgRG9taW5hbnRTcGVha2VyU2lnbmFsaW5nI3VwZGF0ZWRcbiAqL1xuXG5cbnZhciBEb21pbmFudFNwZWFrZXJTaWduYWxpbmcgPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoRG9taW5hbnRTcGVha2VyU2lnbmFsaW5nLCBfRXZlbnRFbWl0dGVyKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGFuIHtAbGluayBEb21pbmFudFNwZWFrZXJTaWduYWxpbmd9LlxuICAgKiBAcGFyYW0ge01lZGlhU2lnbmFsaW5nVHJhbnNwb3J0fSBtZWRpYVNpZ25hbGluZ1RyYW5zcG9ydFxuICAgKi9cbiAgZnVuY3Rpb24gRG9taW5hbnRTcGVha2VyU2lnbmFsaW5nKG1lZGlhU2lnbmFsaW5nVHJhbnNwb3J0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvbWluYW50U3BlYWtlclNpZ25hbGluZyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRG9taW5hbnRTcGVha2VyU2lnbmFsaW5nLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRG9taW5hbnRTcGVha2VyU2lnbmFsaW5nKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgX2xvdWRlc3RQYXJ0aWNpcGFudFNpZDoge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG1lZGlhU2lnbmFsaW5nVHJhbnNwb3J0Lm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2FjdGl2ZV9zcGVha2VyJzpcbiAgICAgICAgICBfdGhpcy5fc2V0TG91ZGVzdFBhcnRpY2lwYW50U2lkKG1lc3NhZ2UucGFydGljaXBhbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvdWRlc3Qge0BsaW5rIFRyYWNrLlNJRH0sIGlmIGtub3duLlxuICAgKiBAcmV0dXJucyB7P1RyYWNrLlNJRH1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRG9taW5hbnRTcGVha2VyU2lnbmFsaW5nLCBbe1xuICAgIGtleTogJ19zZXRMb3VkZXN0UGFydGljaXBhbnRTaWQnLFxuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7VHJhY2suU0lEfSBsb3VkZXN0UGFydGljaXBhbnRTaWRcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldExvdWRlc3RQYXJ0aWNpcGFudFNpZChsb3VkZXN0UGFydGljaXBhbnRTaWQpIHtcbiAgICAgIGlmICh0aGlzLmxvdWRlc3RQYXJ0aWNpcGFudFNpZCA9PT0gbG91ZGVzdFBhcnRpY2lwYW50U2lkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xvdWRlc3RQYXJ0aWNpcGFudFNpZCA9IGxvdWRlc3RQYXJ0aWNpcGFudFNpZDtcbiAgICAgIHRoaXMuZW1pdCgndXBkYXRlZCcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xvdWRlc3RQYXJ0aWNpcGFudFNpZCcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG91ZGVzdFBhcnRpY2lwYW50U2lkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEb21pbmFudFNwZWFrZXJTaWduYWxpbmc7XG59KEV2ZW50RW1pdHRlcik7XG5cbi8qKlxuICogQGV2ZW50IERvbWluYW50U3BlYWtlclNpZ25hbGluZyN1cGRhdGVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBEb21pbmFudFNwZWFrZXJTaWduYWxpbmc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvZG9taW5hbnRzcGVha2Vyc2lnbmFsaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAzMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///323\n");

/***/ }),
/* 324 */
/*!*****************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/networkqualitymonitor.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint callback-return:0 */\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207);\n\nvar PeerConnectionReportFactory = __webpack_require__(/*! ../../stats/peerconnectionreportfactory */ 325);\n\n/**\n * @emits NetworkQualityMonitor#updated\n */\n\nvar NetworkQualityMonitor = function (_EventEmitter) {\n  _inherits(NetworkQualityMonitor, _EventEmitter);\n\n  /**\n   * Construct a {@link NetworkQualityMonitor}.\n   * @param {PeerConnectionManager} manager\n   * @param {NetworkQualitySignaling} signaling\n   */\n  function NetworkQualityMonitor(manager, signaling) {\n    _classCallCheck(this, NetworkQualityMonitor);\n\n    var _this = _possibleConstructorReturn(this, (NetworkQualityMonitor.__proto__ || Object.getPrototypeOf(NetworkQualityMonitor)).call(this));\n\n    Object.defineProperties(_this, {\n      _factories: {\n        value: new WeakMap()\n      },\n      _manager: {\n        value: manager\n      },\n      _signaling: {\n        value: signaling\n      }\n    });\n    signaling.on('updated', function () {\n      return _this.emit('updated');\n    });\n    return _this;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevel}, if any.\n   * @returns {?NetworkQualityLevel} level - initially null\n   */\n\n\n  _createClass(NetworkQualityMonitor, [{\n    key: 'start',\n\n\n    /**\n     * Start monitoring.\n     * @returns {void}\n     */\n    value: function start() {\n      var _this2 = this;\n\n      this.stop();\n      var timeout = setTimeout(function () {\n        if (_this2._timeout !== timeout) {\n          return;\n        }\n        next(_this2).then(function (reports) {\n          if (_this2._timeout !== timeout) {\n            return;\n          }\n          if (reports.length) {\n            var _reports = _slicedToArray(reports, 1),\n                report = _reports[0];\n\n            _this2._signaling.put(report);\n          }\n          _this2.start();\n        });\n      }, 200);\n      this._timeout = timeout;\n    }\n\n    /**\n     * Stop monitoring.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n    }\n  }, {\n    key: 'level',\n    get: function get() {\n      return this._signaling.level;\n    }\n\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @deprecated - the decomposed levels are only used for debugging and will be\n     *   removed as soon as we are confident in our implementation\n     * @returns {?NetworkQualityLevels} levels - initially null\n     */\n\n  }, {\n    key: 'levels',\n    get: function get() {\n      return this._signaling.levels;\n    }\n  }]);\n\n  return NetworkQualityMonitor;\n}(EventEmitter);\n\n/**\n * @param {NetworkQualityMonitor}\n * @returns {Promise<NetworkQualityInputs>}\n */\n\n\nfunction next(monitor) {\n  var pcv2s = monitor._manager._peerConnections ? Array.from(monitor._manager._peerConnections.values()) : [];\n\n  var pcs = pcv2s.map(function (pcv2) {\n    return pcv2._peerConnection;\n  }).filter(function (pc) {\n    return pc.signalingState !== 'closed';\n  });\n\n  var factories = pcs.map(function (pc) {\n    if (monitor._factories.has(pc)) {\n      return monitor._factories.get(pc);\n    }\n    var factory = new PeerConnectionReportFactory(pc);\n    monitor._factories.set(pc, factory);\n    return factory;\n  });\n\n  var reportsOrNullPromises = factories.map(function (factory) {\n    return factory.next().catch(function () {\n      return null;\n    });\n  });\n\n  return Promise.all(reportsOrNullPromises).then(function (reportsOrNull) {\n    return reportsOrNull.filter(function (reportOrNull) {\n      return reportOrNull;\n    }).map(function (report) {\n      return report.summarize();\n    });\n  });\n}\n\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualityMonitor#updated\n */\n\nmodule.exports = NetworkQualityMonitor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///324\n");

/***/ }),
/* 325 */
/*!****************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/peerconnectionreportfactory.js ***!
  \****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IceReportFactory = __webpack_require__(/*! ./icereportfactory */ 326);\nvar PeerConnectionReport = __webpack_require__(/*! ./peerconnectionreport */ 328);\nvar ReceiverReportFactory = __webpack_require__(/*! ./receiverreportfactory */ 329);\nvar SenderReportFactory = __webpack_require__(/*! ./senderreportfactory */ 330);\n\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\n\nvar PeerConnectionReportFactory = function () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    _classCallCheck(this, PeerConnectionReportFactory);\n\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n\n\n  _createClass(PeerConnectionReportFactory, [{\n    key: 'next',\n    value: function next() {\n      var _this = this;\n\n      var updatePromise = typeof mozRTCPeerConnection !== 'undefined' ? updateFirefox(this) : updateChrome(this);\n\n      return updatePromise.then(function () {\n        var audioSenderReportFactories = [].concat(_toConsumableArray(_this.audio.send.values()));\n        var videoSenderReportFactories = [].concat(_toConsumableArray(_this.video.send.values()));\n        var audioReceiverReportFactories = [].concat(_toConsumableArray(_this.audio.recv.values()));\n        var videoReceiverReportFactories = [].concat(_toConsumableArray(_this.video.recv.values()));\n\n        var report = new PeerConnectionReport(_this.ice.lastReport, {\n          send: audioSenderReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          }),\n          recv: audioReceiverReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          })\n        }, {\n          send: videoSenderReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          }),\n          recv: videoReceiverReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          })\n        });\n\n        _this.lastReport = report;\n\n        return report;\n      });\n    }\n  }]);\n\n  return PeerConnectionReportFactory;\n}();\n\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\n\n\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      // NOTE(mroberts): We have to rewrite Ids due to this bug:\n      //\n      //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n      //\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = report.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var stats = _step.value;\n\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + '-' + stats.id;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */ /**\n    * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n    * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n    * @param {RTCStatsReport} report\n    * @param {RTCStats} stats\n    * @param {TrackId} [trackId]\n    * @returns {?ReceiverReportFactory}\n    */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.send, video: factory.video.send };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.recv, video: factory.video.recv };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = report.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var stats = _step2.value;\n\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (typeof mozRTCPeerConnection === 'undefined' && !stats.trackId) {\n          continue;\n        }\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = report.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var stats = _step3.value;\n\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n}\n\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop = function _loop(mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop(mediaType);\n  }\n}\n\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  var selectedCandidatePair = void 0;\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = report.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var stats = _step4.value;\n\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = report.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var _stats = _step5.value;\n\n      if (_stats.type === 'candidate-pair' && _stats.nominated && ('selected' in _stats ? _stats.selected : true)) {\n        ice.next(_stats);\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {PeerConnectionReport}\n */\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        senderReports = _ref2[0],\n        receiverReports = _ref2[1],\n        pcReport = _ref2[2];\n\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {PeerConnectionReport}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///325\n");

/***/ }),
/* 326 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/icereportfactory.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IceReport = __webpack_require__(/*! ./icereport */ 327);\n\n/**\n * @property {IceReport} lastReport\n * @property {?RTCStats} lastStats\n */\n\nvar IceReportFactory = function () {\n  /**\n   * Construct an {@link IceReportFactory}.\n   */\n  function IceReportFactory() {\n    _classCallCheck(this, IceReportFactory);\n\n    Object.defineProperties(this, {\n      lastReport: {\n        enumerable: true,\n        value: new IceReport(0, 0),\n        writable: true\n      },\n      lastStats: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Create an {@link IceReport}.\n   * @param {RTCStats} newerStats;\n   * @returns {IceReport}\n   */\n\n\n  _createClass(IceReportFactory, [{\n    key: 'next',\n    value: function next(newerStats) {\n      var olderStats = this.lastStats;\n      this.lastStats = newerStats;\n      if (olderStats) {\n        var report = olderStats.id === newerStats.id ? IceReport.of(olderStats, newerStats) : new IceReport(0, 0);\n        this.lastReport = report;\n      }\n      return this.lastReport;\n    }\n  }]);\n\n  return IceReportFactory;\n}();\n\nmodule.exports = IceReportFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9pY2VyZXBvcnRmYWN0b3J5LmpzP2NhNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGdCQUFnQixtQkFBTyxDQUFDLHNCQUFhOztBQUVyQztBQUNBLGNBQWMsVUFBVTtBQUN4QixjQUFjLFVBQVU7QUFDeEI7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEMsYUFBYSxTQUFTO0FBQ3RCLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEljZVJlcG9ydCA9IHJlcXVpcmUoJy4vaWNlcmVwb3J0Jyk7XG5cbi8qKlxuICogQHByb3BlcnR5IHtJY2VSZXBvcnR9IGxhc3RSZXBvcnRcbiAqIEBwcm9wZXJ0eSB7P1JUQ1N0YXRzfSBsYXN0U3RhdHNcbiAqL1xuXG52YXIgSWNlUmVwb3J0RmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiB7QGxpbmsgSWNlUmVwb3J0RmFjdG9yeX0uXG4gICAqL1xuICBmdW5jdGlvbiBJY2VSZXBvcnRGYWN0b3J5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJY2VSZXBvcnRGYWN0b3J5KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIGxhc3RSZXBvcnQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG5ldyBJY2VSZXBvcnQoMCwgMCksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbGFzdFN0YXRzOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiB7QGxpbmsgSWNlUmVwb3J0fS5cbiAgICogQHBhcmFtIHtSVENTdGF0c30gbmV3ZXJTdGF0cztcbiAgICogQHJldHVybnMge0ljZVJlcG9ydH1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoSWNlUmVwb3J0RmFjdG9yeSwgW3tcbiAgICBrZXk6ICduZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dChuZXdlclN0YXRzKSB7XG4gICAgICB2YXIgb2xkZXJTdGF0cyA9IHRoaXMubGFzdFN0YXRzO1xuICAgICAgdGhpcy5sYXN0U3RhdHMgPSBuZXdlclN0YXRzO1xuICAgICAgaWYgKG9sZGVyU3RhdHMpIHtcbiAgICAgICAgdmFyIHJlcG9ydCA9IG9sZGVyU3RhdHMuaWQgPT09IG5ld2VyU3RhdHMuaWQgPyBJY2VSZXBvcnQub2Yob2xkZXJTdGF0cywgbmV3ZXJTdGF0cykgOiBuZXcgSWNlUmVwb3J0KDAsIDApO1xuICAgICAgICB0aGlzLmxhc3RSZXBvcnQgPSByZXBvcnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5sYXN0UmVwb3J0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJY2VSZXBvcnRGYWN0b3J5O1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEljZVJlcG9ydEZhY3Rvcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9pY2VyZXBvcnRmYWN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///326\n");

/***/ }),
/* 327 */
/*!**********************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/icereport.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @property {number} [availableSend] - bps (undefined in Firefox)\n * @property {number} recv - bps\n * @property {number} [rtt] - s (undefined in Firefox)\n * @property {number} send - bps\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IceReport = function () {\n  /**\n   * Construct an {@link IceReport}.\n   * @param {number} send - bps\n   * @param {number} recv - bps\n   * @param {number} [rtt] - s\n   * @param {number} [availableSend] - bps\n   */\n  function IceReport(send, recv, availableSend, rtt) {\n    _classCallCheck(this, IceReport);\n\n    Object.defineProperties(this, {\n      availableSend: {\n        enumerable: true,\n        value: availableSend\n      },\n      recv: {\n        enumerable: true,\n        value: recv\n      },\n      rtt: {\n        enumerable: true,\n        value: rtt\n      },\n      send: {\n        enumerable: true,\n        value: send\n      }\n    });\n  }\n\n  /**\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @returns {IceReport}\n   */\n\n\n  _createClass(IceReport, null, [{\n    key: 'of',\n    value: function of(olderStats, newerStats) {\n      var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n      var deltaBytesSent = newerStats.bytesSent - olderStats.bytesSent;\n      var deltaBytesReceived = newerStats.bytesReceived - olderStats.bytesReceived;\n      var send = secondsElapsed > 0 ? deltaBytesSent / secondsElapsed * 8 : 0;\n      var recv = secondsElapsed > 0 ? deltaBytesReceived / secondsElapsed * 8 : 0;\n      var availableSend = newerStats.availableOutgoingBitrate,\n          rtt = newerStats.currentRoundTripTime;\n\n      return new IceReport(send, recv, availableSend, rtt);\n    }\n  }]);\n\n  return IceReport;\n}();\n\nmodule.exports = IceReport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9pY2VyZXBvcnQuanM/OTM4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjs7QUFFQSxnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdko7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkMsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFthdmFpbGFibGVTZW5kXSAtIGJwcyAodW5kZWZpbmVkIGluIEZpcmVmb3gpXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmVjdiAtIGJwc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFtydHRdIC0gcyAodW5kZWZpbmVkIGluIEZpcmVmb3gpXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2VuZCAtIGJwc1xuICovXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBJY2VSZXBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYW4ge0BsaW5rIEljZVJlcG9ydH0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzZW5kIC0gYnBzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZWN2IC0gYnBzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcnR0XSAtIHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFthdmFpbGFibGVTZW5kXSAtIGJwc1xuICAgKi9cbiAgZnVuY3Rpb24gSWNlUmVwb3J0KHNlbmQsIHJlY3YsIGF2YWlsYWJsZVNlbmQsIHJ0dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJY2VSZXBvcnQpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgYXZhaWxhYmxlU2VuZDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogYXZhaWxhYmxlU2VuZFxuICAgICAgfSxcbiAgICAgIHJlY3Y6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHJlY3ZcbiAgICAgIH0sXG4gICAgICBydHQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHJ0dFxuICAgICAgfSxcbiAgICAgIHNlbmQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHNlbmRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JUQ1N0YXRzfSBvbGRlclN0YXRzXG4gICAqIEBwYXJhbSB7UlRDU3RhdHN9IG5ld2VyU3RhdHNcbiAgICogQHJldHVybnMge0ljZVJlcG9ydH1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoSWNlUmVwb3J0LCBudWxsLCBbe1xuICAgIGtleTogJ29mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2Yob2xkZXJTdGF0cywgbmV3ZXJTdGF0cykge1xuICAgICAgdmFyIHNlY29uZHNFbGFwc2VkID0gKG5ld2VyU3RhdHMudGltZXN0YW1wIC0gb2xkZXJTdGF0cy50aW1lc3RhbXApIC8gMTAwMDtcbiAgICAgIHZhciBkZWx0YUJ5dGVzU2VudCA9IG5ld2VyU3RhdHMuYnl0ZXNTZW50IC0gb2xkZXJTdGF0cy5ieXRlc1NlbnQ7XG4gICAgICB2YXIgZGVsdGFCeXRlc1JlY2VpdmVkID0gbmV3ZXJTdGF0cy5ieXRlc1JlY2VpdmVkIC0gb2xkZXJTdGF0cy5ieXRlc1JlY2VpdmVkO1xuICAgICAgdmFyIHNlbmQgPSBzZWNvbmRzRWxhcHNlZCA+IDAgPyBkZWx0YUJ5dGVzU2VudCAvIHNlY29uZHNFbGFwc2VkICogOCA6IDA7XG4gICAgICB2YXIgcmVjdiA9IHNlY29uZHNFbGFwc2VkID4gMCA/IGRlbHRhQnl0ZXNSZWNlaXZlZCAvIHNlY29uZHNFbGFwc2VkICogOCA6IDA7XG4gICAgICB2YXIgYXZhaWxhYmxlU2VuZCA9IG5ld2VyU3RhdHMuYXZhaWxhYmxlT3V0Z29pbmdCaXRyYXRlLFxuICAgICAgICAgIHJ0dCA9IG5ld2VyU3RhdHMuY3VycmVudFJvdW5kVHJpcFRpbWU7XG5cbiAgICAgIHJldHVybiBuZXcgSWNlUmVwb3J0KHNlbmQsIHJlY3YsIGF2YWlsYWJsZVNlbmQsIHJ0dCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEljZVJlcG9ydDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJY2VSZXBvcnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9pY2VyZXBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDMyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///327\n");

/***/ }),
/* 328 */
/*!*********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/peerconnectionreport.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReceiverReport = __webpack_require__(/*! ./receiverreport */ 250);\nvar SenderReport = __webpack_require__(/*! ./senderreport */ 254);\n\n/**\n * @interface SenderAndReceiverReports\n * @property {Array<SenderReport>} send\n * @property {Array<ReceiverReport>} recv\n */\n\n/**\n * @interface SenderAndReceiverSummary\n * @property {SenderSummary} send\n * @property {ReceiverSummary} recv\n */\n\n/**\n * @interface PeerConnectionSummary\n * @property {IceReport} ice\n * @property {SenderSummary} send\n * @property {ReceiverSummary} recv\n * @property {SenderAndReceiverSummary} audio\n * @property {SenderAndReceiverSummary} video\n */\n\n/**\n * @property {IceReport} ice\n * @roperty {SenderAndReceiverReports} audio\n * @roperty {SenderAndReceiverReports} video\n */\n\nvar PeerConnectionReport = function () {\n  /**\n   * Construct a {@link PeerConnectionReport}.\n   * @param {IceReport} ice\n   * @param {SenderAndReceiverReports} audio\n   * @param {SenderAndReceiverReports} video\n   */\n  function PeerConnectionReport(ice, audio, video) {\n    _classCallCheck(this, PeerConnectionReport);\n\n    Object.defineProperties(this, {\n      ice: {\n        enumerable: true,\n        value: ice\n      },\n      audio: {\n        enumerable: true,\n        value: audio\n      },\n      video: {\n        enumerable: true,\n        value: video\n      }\n    });\n  }\n\n  /**\n   * Summarize the {@link PeerConnectionReport} by summarizing its\n   * {@link SenderReport}s and {@link ReceiverReport}s.\n   * @returns {PeerConnectionSummary}\n   */\n\n\n  _createClass(PeerConnectionReport, [{\n    key: 'summarize',\n    value: function summarize() {\n      var senderReports = this.audio.send.concat(this.video.send);\n      var send = SenderReport.summarize(senderReports);\n\n      var receiverReports = this.audio.recv.concat(this.video.recv);\n      var recv = ReceiverReport.summarize(receiverReports);\n\n      return {\n        ice: this.ice,\n        send: send,\n        recv: recv,\n        audio: {\n          send: SenderReport.summarize(this.audio.send),\n          recv: ReceiverReport.summarize(this.audio.recv)\n        },\n        video: {\n          send: SenderReport.summarize(this.video.send),\n          recv: ReceiverReport.summarize(this.video.recv)\n        }\n      };\n    }\n  }]);\n\n  return PeerConnectionReport;\n}();\n\nmodule.exports = PeerConnectionReport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9wZWVyY29ubmVjdGlvbnJlcG9ydC5qcz9mMDAyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixxQkFBcUIsbUJBQU8sQ0FBQywyQkFBa0I7QUFDL0MsbUJBQW1CLG1CQUFPLENBQUMseUJBQWdCOztBQUUzQztBQUNBO0FBQ0EsY0FBYyxvQkFBb0I7QUFDbEMsY0FBYyxzQkFBc0I7QUFDcEM7O0FBRUE7QUFDQTtBQUNBLGNBQWMsY0FBYztBQUM1QixjQUFjLGdCQUFnQjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxVQUFVO0FBQ3hCLGNBQWMsY0FBYztBQUM1QixjQUFjLGdCQUFnQjtBQUM5QixjQUFjLHlCQUF5QjtBQUN2QyxjQUFjLHlCQUF5QjtBQUN2Qzs7QUFFQTtBQUNBLGNBQWMsVUFBVTtBQUN4QixhQUFhLHlCQUF5QjtBQUN0QyxhQUFhLHlCQUF5QjtBQUN0Qzs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLDJCQUEyQjtBQUM3QyxhQUFhLFVBQVU7QUFDdkIsYUFBYSx5QkFBeUI7QUFDdEMsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0MsTUFBTSxtQkFBbUIsT0FBTyxxQkFBcUI7QUFDckQsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMzI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUmVjZWl2ZXJSZXBvcnQgPSByZXF1aXJlKCcuL3JlY2VpdmVycmVwb3J0Jyk7XG52YXIgU2VuZGVyUmVwb3J0ID0gcmVxdWlyZSgnLi9zZW5kZXJyZXBvcnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFNlbmRlckFuZFJlY2VpdmVyUmVwb3J0c1xuICogQHByb3BlcnR5IHtBcnJheTxTZW5kZXJSZXBvcnQ+fSBzZW5kXG4gKiBAcHJvcGVydHkge0FycmF5PFJlY2VpdmVyUmVwb3J0Pn0gcmVjdlxuICovXG5cbi8qKlxuICogQGludGVyZmFjZSBTZW5kZXJBbmRSZWNlaXZlclN1bW1hcnlcbiAqIEBwcm9wZXJ0eSB7U2VuZGVyU3VtbWFyeX0gc2VuZFxuICogQHByb3BlcnR5IHtSZWNlaXZlclN1bW1hcnl9IHJlY3ZcbiAqL1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgUGVlckNvbm5lY3Rpb25TdW1tYXJ5XG4gKiBAcHJvcGVydHkge0ljZVJlcG9ydH0gaWNlXG4gKiBAcHJvcGVydHkge1NlbmRlclN1bW1hcnl9IHNlbmRcbiAqIEBwcm9wZXJ0eSB7UmVjZWl2ZXJTdW1tYXJ5fSByZWN2XG4gKiBAcHJvcGVydHkge1NlbmRlckFuZFJlY2VpdmVyU3VtbWFyeX0gYXVkaW9cbiAqIEBwcm9wZXJ0eSB7U2VuZGVyQW5kUmVjZWl2ZXJTdW1tYXJ5fSB2aWRlb1xuICovXG5cbi8qKlxuICogQHByb3BlcnR5IHtJY2VSZXBvcnR9IGljZVxuICogQHJvcGVydHkge1NlbmRlckFuZFJlY2VpdmVyUmVwb3J0c30gYXVkaW9cbiAqIEByb3BlcnR5IHtTZW5kZXJBbmRSZWNlaXZlclJlcG9ydHN9IHZpZGVvXG4gKi9cblxudmFyIFBlZXJDb25uZWN0aW9uUmVwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIFBlZXJDb25uZWN0aW9uUmVwb3J0fS5cbiAgICogQHBhcmFtIHtJY2VSZXBvcnR9IGljZVxuICAgKiBAcGFyYW0ge1NlbmRlckFuZFJlY2VpdmVyUmVwb3J0c30gYXVkaW9cbiAgICogQHBhcmFtIHtTZW5kZXJBbmRSZWNlaXZlclJlcG9ydHN9IHZpZGVvXG4gICAqL1xuICBmdW5jdGlvbiBQZWVyQ29ubmVjdGlvblJlcG9ydChpY2UsIGF1ZGlvLCB2aWRlbykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQZWVyQ29ubmVjdGlvblJlcG9ydCk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBpY2U6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGljZVxuICAgICAgfSxcbiAgICAgIGF1ZGlvOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBhdWRpb1xuICAgICAgfSxcbiAgICAgIHZpZGVvOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2aWRlb1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1bW1hcml6ZSB0aGUge0BsaW5rIFBlZXJDb25uZWN0aW9uUmVwb3J0fSBieSBzdW1tYXJpemluZyBpdHNcbiAgICoge0BsaW5rIFNlbmRlclJlcG9ydH1zIGFuZCB7QGxpbmsgUmVjZWl2ZXJSZXBvcnR9cy5cbiAgICogQHJldHVybnMge1BlZXJDb25uZWN0aW9uU3VtbWFyeX1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUGVlckNvbm5lY3Rpb25SZXBvcnQsIFt7XG4gICAga2V5OiAnc3VtbWFyaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VtbWFyaXplKCkge1xuICAgICAgdmFyIHNlbmRlclJlcG9ydHMgPSB0aGlzLmF1ZGlvLnNlbmQuY29uY2F0KHRoaXMudmlkZW8uc2VuZCk7XG4gICAgICB2YXIgc2VuZCA9IFNlbmRlclJlcG9ydC5zdW1tYXJpemUoc2VuZGVyUmVwb3J0cyk7XG5cbiAgICAgIHZhciByZWNlaXZlclJlcG9ydHMgPSB0aGlzLmF1ZGlvLnJlY3YuY29uY2F0KHRoaXMudmlkZW8ucmVjdik7XG4gICAgICB2YXIgcmVjdiA9IFJlY2VpdmVyUmVwb3J0LnN1bW1hcml6ZShyZWNlaXZlclJlcG9ydHMpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpY2U6IHRoaXMuaWNlLFxuICAgICAgICBzZW5kOiBzZW5kLFxuICAgICAgICByZWN2OiByZWN2LFxuICAgICAgICBhdWRpbzoge1xuICAgICAgICAgIHNlbmQ6IFNlbmRlclJlcG9ydC5zdW1tYXJpemUodGhpcy5hdWRpby5zZW5kKSxcbiAgICAgICAgICByZWN2OiBSZWNlaXZlclJlcG9ydC5zdW1tYXJpemUodGhpcy5hdWRpby5yZWN2KVxuICAgICAgICB9LFxuICAgICAgICB2aWRlbzoge1xuICAgICAgICAgIHNlbmQ6IFNlbmRlclJlcG9ydC5zdW1tYXJpemUodGhpcy52aWRlby5zZW5kKSxcbiAgICAgICAgICByZWN2OiBSZWNlaXZlclJlcG9ydC5zdW1tYXJpemUodGhpcy52aWRlby5yZWN2KVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQZWVyQ29ubmVjdGlvblJlcG9ydDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQZWVyQ29ubmVjdGlvblJlcG9ydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3N0YXRzL3BlZXJjb25uZWN0aW9ucmVwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///328\n");

/***/ }),
/* 329 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/receiverreportfactory.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ReceiverReport = __webpack_require__(/*! ./receiverreport */ 250);\nvar SenderOrReceiverReportFactory = __webpack_require__(/*! ./senderorreceiverreportfactory */ 255);\n\n/**\n * @extends SenderOrReceiverReportFactory\n * @param {?ReceiverReport} lastReport\n */\n\nvar ReceiverReportFactory = function (_SenderOrReceiverRepo) {\n  _inherits(ReceiverReportFactory, _SenderOrReceiverRepo);\n\n  /**\n   * Construct a {@link ReceiverReportFactory}.\n   * @param {TrackId} trackId\n   * @param {RTCStats} initialStats\n   */\n  function ReceiverReportFactory(trackId, initialStats) {\n    _classCallCheck(this, ReceiverReportFactory);\n\n    var _this = _possibleConstructorReturn(this, (ReceiverReportFactory.__proto__ || Object.getPrototypeOf(ReceiverReportFactory)).call(this, initialStats.id, trackId, initialStats));\n\n    Object.defineProperties(_this, {\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Create a {@link ReceiverReport}.\n   * @param {TrackId} trackId\n   * @param {RTCStats} newerStats\n   * @returns {ReceiverReport}\n   */\n\n\n  _createClass(ReceiverReportFactory, [{\n    key: 'next',\n    value: function next(trackId, newerStats) {\n      var olderStats = this.lastStats;\n      this.lastStats = newerStats;\n      this.trackId = trackId;\n      var report = ReceiverReport.of(trackId, olderStats, newerStats);\n      this.lastReport = report;\n      return report;\n    }\n  }]);\n\n  return ReceiverReportFactory;\n}(SenderOrReceiverReportFactory);\n\nmodule.exports = ReceiverReportFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9yZWNlaXZlcnJlcG9ydGZhY3RvcnkuanM/OTA5ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSxxQkFBcUIsbUJBQU8sQ0FBQywyQkFBa0I7QUFDL0Msb0NBQW9DLG1CQUFPLENBQUMsMENBQWlDOztBQUU3RTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQiw0QkFBNEI7QUFDOUMsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLHFCQUFxQjtBQUNwQyxhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlY2VpdmVyUmVwb3J0ID0gcmVxdWlyZSgnLi9yZWNlaXZlcnJlcG9ydCcpO1xudmFyIFNlbmRlck9yUmVjZWl2ZXJSZXBvcnRGYWN0b3J5ID0gcmVxdWlyZSgnLi9zZW5kZXJvcnJlY2VpdmVycmVwb3J0ZmFjdG9yeScpO1xuXG4vKipcbiAqIEBleHRlbmRzIFNlbmRlck9yUmVjZWl2ZXJSZXBvcnRGYWN0b3J5XG4gKiBAcGFyYW0gez9SZWNlaXZlclJlcG9ydH0gbGFzdFJlcG9ydFxuICovXG5cbnZhciBSZWNlaXZlclJlcG9ydEZhY3RvcnkgPSBmdW5jdGlvbiAoX1NlbmRlck9yUmVjZWl2ZXJSZXBvKSB7XG4gIF9pbmhlcml0cyhSZWNlaXZlclJlcG9ydEZhY3RvcnksIF9TZW5kZXJPclJlY2VpdmVyUmVwbyk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBSZWNlaXZlclJlcG9ydEZhY3Rvcnl9LlxuICAgKiBAcGFyYW0ge1RyYWNrSWR9IHRyYWNrSWRcbiAgICogQHBhcmFtIHtSVENTdGF0c30gaW5pdGlhbFN0YXRzXG4gICAqL1xuICBmdW5jdGlvbiBSZWNlaXZlclJlcG9ydEZhY3RvcnkodHJhY2tJZCwgaW5pdGlhbFN0YXRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlY2VpdmVyUmVwb3J0RmFjdG9yeSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVjZWl2ZXJSZXBvcnRGYWN0b3J5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVjZWl2ZXJSZXBvcnRGYWN0b3J5KSkuY2FsbCh0aGlzLCBpbml0aWFsU3RhdHMuaWQsIHRyYWNrSWQsIGluaXRpYWxTdGF0cykpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIGxhc3RSZXBvcnQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHtAbGluayBSZWNlaXZlclJlcG9ydH0uXG4gICAqIEBwYXJhbSB7VHJhY2tJZH0gdHJhY2tJZFxuICAgKiBAcGFyYW0ge1JUQ1N0YXRzfSBuZXdlclN0YXRzXG4gICAqIEByZXR1cm5zIHtSZWNlaXZlclJlcG9ydH1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUmVjZWl2ZXJSZXBvcnRGYWN0b3J5LCBbe1xuICAgIGtleTogJ25leHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0KHRyYWNrSWQsIG5ld2VyU3RhdHMpIHtcbiAgICAgIHZhciBvbGRlclN0YXRzID0gdGhpcy5sYXN0U3RhdHM7XG4gICAgICB0aGlzLmxhc3RTdGF0cyA9IG5ld2VyU3RhdHM7XG4gICAgICB0aGlzLnRyYWNrSWQgPSB0cmFja0lkO1xuICAgICAgdmFyIHJlcG9ydCA9IFJlY2VpdmVyUmVwb3J0Lm9mKHRyYWNrSWQsIG9sZGVyU3RhdHMsIG5ld2VyU3RhdHMpO1xuICAgICAgdGhpcy5sYXN0UmVwb3J0ID0gcmVwb3J0O1xuICAgICAgcmV0dXJuIHJlcG9ydDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVjZWl2ZXJSZXBvcnRGYWN0b3J5O1xufShTZW5kZXJPclJlY2VpdmVyUmVwb3J0RmFjdG9yeSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVjZWl2ZXJSZXBvcnRGYWN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc3RhdHMvcmVjZWl2ZXJyZXBvcnRmYWN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///329\n");

/***/ }),
/* 330 */
/*!********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/stats/senderreportfactory.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar SenderOrReceiverReportFactory = __webpack_require__(/*! ./senderorreceiverreportfactory */ 255);\nvar SenderReport = __webpack_require__(/*! ./senderreport */ 254);\n\n/**\n * @extends {SenderOrReceiverReportFactory}\n * @property {?SenderReport} lastReport\n */\n\nvar SenderReportFactory = function (_SenderOrReceiverRepo) {\n  _inherits(SenderReportFactory, _SenderOrReceiverRepo);\n\n  /**\n   * Construct a {@link SenderReportFactory}.\n   * @param {TrackId} trackId\n   * @param {RTCStats} initialStats\n   */\n  function SenderReportFactory(trackId, initialStats) {\n    _classCallCheck(this, SenderReportFactory);\n\n    var _this = _possibleConstructorReturn(this, (SenderReportFactory.__proto__ || Object.getPrototypeOf(SenderReportFactory)).call(this, initialStats.id, trackId, initialStats));\n\n    Object.defineProperties(_this, {\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * @param {TrackId} trackId\n   * @param {RTCStats} newerStats\n   * @param {RTCRemoteInboundRtpStreamStats} [newerRemoteStats]\n   * @returns {SenderReport}\n   */\n\n\n  _createClass(SenderReportFactory, [{\n    key: 'next',\n    value: function next(trackId, newerStats, newerRemoteStats) {\n      var olderStats = this.lastStats;\n      this.lastStats = newerStats;\n      this.trackId = trackId;\n      var report = SenderReport.of(trackId, olderStats, newerStats, newerRemoteStats);\n      this.lastReport = report;\n      return report;\n    }\n  }]);\n\n  return SenderReportFactory;\n}(SenderOrReceiverReportFactory);\n\nmodule.exports = SenderReportFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zZW5kZXJyZXBvcnRmYWN0b3J5LmpzPzUyMzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsb0NBQW9DLG1CQUFPLENBQUMsMENBQWlDO0FBQzdFLG1CQUFtQixtQkFBTyxDQUFDLHlCQUFnQjs7QUFFM0M7QUFDQSxhQUFhO0FBQ2IsY0FBYyxjQUFjO0FBQzVCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QixhQUFhLCtCQUErQjtBQUM1QyxlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMzMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTZW5kZXJPclJlY2VpdmVyUmVwb3J0RmFjdG9yeSA9IHJlcXVpcmUoJy4vc2VuZGVyb3JyZWNlaXZlcnJlcG9ydGZhY3RvcnknKTtcbnZhciBTZW5kZXJSZXBvcnQgPSByZXF1aXJlKCcuL3NlbmRlcnJlcG9ydCcpO1xuXG4vKipcbiAqIEBleHRlbmRzIHtTZW5kZXJPclJlY2VpdmVyUmVwb3J0RmFjdG9yeX1cbiAqIEBwcm9wZXJ0eSB7P1NlbmRlclJlcG9ydH0gbGFzdFJlcG9ydFxuICovXG5cbnZhciBTZW5kZXJSZXBvcnRGYWN0b3J5ID0gZnVuY3Rpb24gKF9TZW5kZXJPclJlY2VpdmVyUmVwbykge1xuICBfaW5oZXJpdHMoU2VuZGVyUmVwb3J0RmFjdG9yeSwgX1NlbmRlck9yUmVjZWl2ZXJSZXBvKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIFNlbmRlclJlcG9ydEZhY3Rvcnl9LlxuICAgKiBAcGFyYW0ge1RyYWNrSWR9IHRyYWNrSWRcbiAgICogQHBhcmFtIHtSVENTdGF0c30gaW5pdGlhbFN0YXRzXG4gICAqL1xuICBmdW5jdGlvbiBTZW5kZXJSZXBvcnRGYWN0b3J5KHRyYWNrSWQsIGluaXRpYWxTdGF0cykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZW5kZXJSZXBvcnRGYWN0b3J5KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZW5kZXJSZXBvcnRGYWN0b3J5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2VuZGVyUmVwb3J0RmFjdG9yeSkpLmNhbGwodGhpcywgaW5pdGlhbFN0YXRzLmlkLCB0cmFja0lkLCBpbml0aWFsU3RhdHMpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBsYXN0UmVwb3J0OiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYWNrSWR9IHRyYWNrSWRcbiAgICogQHBhcmFtIHtSVENTdGF0c30gbmV3ZXJTdGF0c1xuICAgKiBAcGFyYW0ge1JUQ1JlbW90ZUluYm91bmRSdHBTdHJlYW1TdGF0c30gW25ld2VyUmVtb3RlU3RhdHNdXG4gICAqIEByZXR1cm5zIHtTZW5kZXJSZXBvcnR9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFNlbmRlclJlcG9ydEZhY3RvcnksIFt7XG4gICAga2V5OiAnbmV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5leHQodHJhY2tJZCwgbmV3ZXJTdGF0cywgbmV3ZXJSZW1vdGVTdGF0cykge1xuICAgICAgdmFyIG9sZGVyU3RhdHMgPSB0aGlzLmxhc3RTdGF0cztcbiAgICAgIHRoaXMubGFzdFN0YXRzID0gbmV3ZXJTdGF0cztcbiAgICAgIHRoaXMudHJhY2tJZCA9IHRyYWNrSWQ7XG4gICAgICB2YXIgcmVwb3J0ID0gU2VuZGVyUmVwb3J0Lm9mKHRyYWNrSWQsIG9sZGVyU3RhdHMsIG5ld2VyU3RhdHMsIG5ld2VyUmVtb3RlU3RhdHMpO1xuICAgICAgdGhpcy5sYXN0UmVwb3J0ID0gcmVwb3J0O1xuICAgICAgcmV0dXJuIHJlcG9ydDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VuZGVyUmVwb3J0RmFjdG9yeTtcbn0oU2VuZGVyT3JSZWNlaXZlclJlcG9ydEZhY3RvcnkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbmRlclJlcG9ydEZhY3Rvcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zdGF0cy9zZW5kZXJyZXBvcnRmYWN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///330\n");

/***/ }),
/* 331 */
/*!*******************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/networkqualitysignaling.js ***!
  \*******************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = __webpack_require__(/*! events */ 207),\n    EventEmitter = _require.EventEmitter;\n\nvar AsyncVar = __webpack_require__(/*! ../../util/asyncvar */ 332);\n\n/**\n * @interface MediaSignalingTransport\n * @property {function(object): boolean} send\n * @emits MediaSignalingTransport#message\n */\n\n/**\n * The {@link MediaSignalingTransport} received a message.\n * @event MediaSignalingTransport#message\n * @param {object} message\n */\n\n/**\n * @interface SendAndReceiveLevels\n * @deprecated - the decomposed levels are only used for debugging and will be\n *   removed as soon as we are confident in our implementation\n * @property {number} send\n * @property {number} recv\n */\n\n/**\n * @interface NetworkQualityLevels\n * @deprecated - the decomposed levels are only used for debugging and will be\n *   removed as soon as we are confident in our implementation\n * @property {SendAndReceiveLevels} audio\n * @property {SendAndReceiveLevels} video\n */\n\n/**\n * @typedef {PeerConnectionSummary} NetworkQualityInputs\n */\n\n/**\n * @classdesc The {@link NetworkQualitySignaling} class allows submitting\n *   {@link NetworkQualityInputs} for computing {@link NetworkQualityLevel}. It\n *   does so by sending and receivin messages over a\n *   {@link MediaSignalingTransport}. The exact transport used depends on the\n *   topology of the {@link Room} that {@link NetworkQualitySignaling} is being\n *   used within: for P2P Rooms, we re-use the {@link TransportV2}; and for\n *   Group Rooms, we use a {@link DataTransport}.\n * @emits NetworkQualitySignaling#updated\n */\n\nvar NetworkQualitySignaling = function (_EventEmitter) {\n  _inherits(NetworkQualitySignaling, _EventEmitter);\n\n  /**\n   * Construct a {@link NetworkQualitySignaling}.\n   * @param {MediaSignalingTransport} mediaSignalingTransport\n   */\n  function NetworkQualitySignaling(mediaSignalingTransport) {\n    _classCallCheck(this, NetworkQualitySignaling);\n\n    var _this = _possibleConstructorReturn(this, (NetworkQualitySignaling.__proto__ || Object.getPrototypeOf(NetworkQualitySignaling)).call(this));\n\n    Object.defineProperties(_this, {\n      _level: {\n        value: null,\n        writable: true\n      },\n      _levels: {\n        value: null,\n        writable: true\n      },\n      _mediaSignalingTransport: {\n        value: mediaSignalingTransport\n      },\n      _networkQualityInputs: {\n        value: new AsyncVar()\n      }\n    });\n\n    mediaSignalingTransport.on('message', function (message) {\n      switch (message.type) {\n        case 'network_quality':\n          _this._handleNetworkQualityMessage(message);\n          break;\n        default:\n          break;\n      }\n    });\n\n    _this._sendNetworkQualityInputs();\n    return _this;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevel}, if any.\n   * @returns {?NetworkQualityLevel} level - initially null\n   */\n\n\n  _createClass(NetworkQualitySignaling, [{\n    key: '_handleNetworkQualityMessage',\n\n\n    /**\n     * Check to see if the {@link NetworkQualityLevel} is new, and raise an\n     * event if necessary.\n     * @private\n     * @param {object} message\n     * @returns {void}\n     */\n    value: function _handleNetworkQualityMessage(message) {\n      var _this2 = this;\n\n      var level = null;\n      var local = message ? message.local : null;\n      if (typeof local === 'number') {\n        // NOTE(mroberts): In prod, we plan to only send the level.\n        level = local;\n        this._levels = null;\n      } else if ((typeof local === 'undefined' ? 'undefined' : _typeof(local)) === 'object' && local) {\n        // NOTE(mroberts): In dev, we plan to send the decomposed levels. An early\n        // VMS version does not compute `level` for us, so we fallback to taking\n        // the minimum ourselves.\n        this._levels = local;\n        level = typeof local.level === 'number' ? local.level : Math.min(local.audio.send, local.audio.recv, local.video.send, local.video.recv);\n      }\n      if (level !== null && this.level !== level) {\n        this._level = level;\n        this.emit('updated');\n      }\n      setTimeout(function () {\n        return _this2._sendNetworkQualityInputs();\n      }, 1000);\n    }\n\n    /**\n     * Start sending {@link NetworkQualityInputs}.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_sendNetworkQualityInputs',\n    value: function _sendNetworkQualityInputs() {\n      var _this3 = this;\n\n      return this._networkQualityInputs.take().then(function (networkQualityInputs) {\n        _this3._mediaSignalingTransport.publish(createNetworkQualityInputsMessage(networkQualityInputs));\n      });\n    }\n\n    /**\n     * Put {@link NetworkQualityInputs} to be used for computing\n     * {@link NetworkQualityLevel}.\n     * @param {NetworkQualityInputs} networkQualityInputs\n     * @returns {void}\n     */\n\n  }, {\n    key: 'put',\n    value: function put(networkQualityInputs) {\n      this._networkQualityInputs.put(networkQualityInputs);\n    }\n  }, {\n    key: 'level',\n    get: function get() {\n      return this._level;\n    }\n\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @deprecated - the decomposed levels are only used for debugging and will be\n     *  removed as soon as we are confident in our implementation\n     * @returns {?NetworkQualityLevels} levels - initially null\n     */\n\n  }, {\n    key: 'levels',\n    get: function get() {\n      return this._levels;\n    }\n  }]);\n\n  return NetworkQualitySignaling;\n}(EventEmitter);\n\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualitySignaling#updated\n */\n\n/**\n * @param {NetworkQualityInputs} networkQualityInputs\n * @returns {object} message\n */\n\n\nfunction createNetworkQualityInputsMessage(networkQualityInputs) {\n  return Object.assign({\n    type: 'network_quality'\n  }, networkQualityInputs);\n}\n\nmodule.exports = NetworkQualitySignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///331\n");

/***/ }),
/* 332 */
/*!********************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/asyncvar.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! ./ */ 206),\n    defer = _require.defer;\n\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\n\n\nvar AsyncVar = function () {\n  /**\n   * Construct an {@link AsyncVar}.\n   */\n  function AsyncVar() {\n    _classCallCheck(this, AsyncVar);\n\n    Object.defineProperties(this, {\n      _deferreds: {\n        value: []\n      },\n      _hasValue: {\n        value: false,\n        writable: true\n      },\n      _value: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Put a value into the {@link AsyncVar}.\n   * @param {T} value\n   * @returns {this}\n   */\n\n\n  _createClass(AsyncVar, [{\n    key: 'put',\n    value: function put(value) {\n      this._hasValue = true;\n      this._value = value;\n      var deferred = this._deferreds.shift();\n      if (deferred) {\n        deferred.resolve(value);\n      }\n      return this;\n    }\n\n    /**\n     * Take the value out of the {@link AsyncVar}.\n     * @returns {Promise<T>}\n     */\n\n  }, {\n    key: 'take',\n    value: function take() {\n      var _this = this;\n\n      if (this._hasValue && !this._deferreds.length) {\n        this._hasValue = false;\n        return Promise.resolve(this._value);\n      }\n      var deferred = defer();\n      this._deferreds.push(deferred);\n      return deferred.promise.then(function (value) {\n        _this._hasValue = false;\n        return value;\n      });\n    }\n  }]);\n\n  return AsyncVar;\n}();\n\nmodule.exports = AsyncVar;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL2FzeW5jdmFyLmpzPzQyODkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGVBQWUsbUJBQU8sQ0FBQyxhQUFJO0FBQzNCOztBQUVBO0FBQ0EsT0FBTyxlQUFlO0FBQ3RCLGlFQUFpRTtBQUNqRSxTQUFTLG1CQUFtQjtBQUM1QixJQUFJLGVBQWUsc0JBQXNCLG9CQUFvQjtBQUM3RCxJQUFJLG9CQUFvQixxQkFBcUIsbUJBQW1CO0FBQ2hFO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLDJCQUEyQixlQUFlO0FBQzFDLGFBQWEsRUFBRTtBQUNmLGVBQWU7QUFDZjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxlQUFlO0FBQ2pELGlCQUFpQjtBQUNqQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi8nKSxcbiAgICBkZWZlciA9IF9yZXF1aXJlLmRlZmVyO1xuXG4vKipcbiAqIEFuIHtAbGluayBBc3luY1Zhcn0gaXMgYW4gXCJhc3luY2hyb25vdXMgdmFyaWFibGVcIiB3aGljaCBtYXkgb3IgbWF5IG5vdFxuICogY29udGFpbiBhIHZhbHVlIG9mIHNvbWUgdHlwZSBULiBZb3UgY2FuIHB1dCBhIHZhbHVlIGludG8gdGhlIHtAbGluayBBc3luY1Zhcn1cbiAqIHdpdGgge0BsaW5rIEFzeW5jVmFyI3B1dH0uIENhbGxlcnMgY2FuIHRha2UgYSB2YWx1ZSBvdXQgb2YgdGhlXG4gKiB7QGxpbmsgQXN5bmNWYXJ9IGJ5IHF1ZXVlaW5nIHVwIHdpdGgge0BsaW5rIEFzeW5jVmFyI3Rha2V9LiBOIGNhbGxzIHRvXG4gKiB7QGxpbmsgQXN5bmNWYXIjdGFrZX0gcmVxdWlyZSBOIGNhbGxzIHRvIHtAbGluayBBc3luY1ZhciNwdXR9IHRvIHJlc29sdmUsIGFuZFxuICogdGhleSByZXNvbHZlIGluIG9yZGVyLlxuICovXG5cblxudmFyIEFzeW5jVmFyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0IGFuIHtAbGluayBBc3luY1Zhcn0uXG4gICAqL1xuICBmdW5jdGlvbiBBc3luY1ZhcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXN5bmNWYXIpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgX2RlZmVycmVkczoge1xuICAgICAgICB2YWx1ZTogW11cbiAgICAgIH0sXG4gICAgICBfaGFzVmFsdWU6IHtcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIF92YWx1ZToge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXQgYSB2YWx1ZSBpbnRvIHRoZSB7QGxpbmsgQXN5bmNWYXJ9LlxuICAgKiBAcGFyYW0ge1R9IHZhbHVlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhBc3luY1ZhciwgW3tcbiAgICBrZXk6ICdwdXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwdXQodmFsdWUpIHtcbiAgICAgIHRoaXMuX2hhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICB2YXIgZGVmZXJyZWQgPSB0aGlzLl9kZWZlcnJlZHMuc2hpZnQoKTtcbiAgICAgIGlmIChkZWZlcnJlZCkge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2UgdGhlIHZhbHVlIG91dCBvZiB0aGUge0BsaW5rIEFzeW5jVmFyfS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndGFrZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faGFzVmFsdWUgJiYgIXRoaXMuX2RlZmVycmVkcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5faGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl92YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgdGhpcy5fZGVmZXJyZWRzLnB1c2goZGVmZXJyZWQpO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3RoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBc3luY1Zhcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY1ZhcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3V0aWwvYXN5bmN2YXIuanNcbi8vIG1vZHVsZSBpZCA9IDMzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///332\n");

/***/ }),
/* 333 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/recording.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RecordingSignaling = __webpack_require__(/*! ../recording */ 256);\n\n/**\n * @extends RecordingSignaling\n */\n\nvar RecordingV2 = function (_RecordingSignaling) {\n  _inherits(RecordingV2, _RecordingSignaling);\n\n  /**\n   * Construct a {@link RecordingV2}.\n   */\n  function RecordingV2() {\n    _classCallCheck(this, RecordingV2);\n\n    var _this = _possibleConstructorReturn(this, (RecordingV2.__proto__ || Object.getPrototypeOf(RecordingV2)).call(this));\n\n    Object.defineProperties(_this, {\n      _revision: {\n        value: 1,\n        writable: true\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Compare the {@link RecordingV2} to a {@link RecordingV2#Representation}\n   * of itself and perform any updates necessary.\n   * @param {RecordingV2#Representation} recording\n   * @returns {this}\n   * @fires RecordingSignaling#updated\n   */\n\n\n  _createClass(RecordingV2, [{\n    key: 'update',\n    value: function update(recording) {\n      if (recording.revision < this._revision) {\n        return this;\n      }\n      this._revision = recording.revision;\n      return this.enable(recording.enabled);\n    }\n  }]);\n\n  return RecordingV2;\n}(RecordingSignaling);\n\n/**\n * The Room Signaling Protocol (RSP) representation of a {@link RecordingV2}\n * @typedef {object} RecordingV2#Representation\n * @property {boolean} enabled\n * @property {number} revision\n */\n\nmodule.exports = RecordingV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvcmVjb3JkaW5nLmpzPzZhZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUseUJBQXlCLG1CQUFPLENBQUMsdUJBQWM7O0FBRS9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGtCQUFrQixPQUFPO0FBQzNDO0FBQ0EsYUFBYSwyQkFBMkI7QUFDeEMsZUFBZTtBQUNmO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0EsMERBQTBEO0FBQzFELGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCOztBQUVBIiwiZmlsZSI6IjMzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVjb3JkaW5nU2lnbmFsaW5nID0gcmVxdWlyZSgnLi4vcmVjb3JkaW5nJyk7XG5cbi8qKlxuICogQGV4dGVuZHMgUmVjb3JkaW5nU2lnbmFsaW5nXG4gKi9cblxudmFyIFJlY29yZGluZ1YyID0gZnVuY3Rpb24gKF9SZWNvcmRpbmdTaWduYWxpbmcpIHtcbiAgX2luaGVyaXRzKFJlY29yZGluZ1YyLCBfUmVjb3JkaW5nU2lnbmFsaW5nKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIFJlY29yZGluZ1YyfS5cbiAgICovXG4gIGZ1bmN0aW9uIFJlY29yZGluZ1YyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWNvcmRpbmdWMik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVjb3JkaW5nVjIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZWNvcmRpbmdWMikpLmNhbGwodGhpcykpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXMsIHtcbiAgICAgIF9yZXZpc2lvbjoge1xuICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyZSB0aGUge0BsaW5rIFJlY29yZGluZ1YyfSB0byBhIHtAbGluayBSZWNvcmRpbmdWMiNSZXByZXNlbnRhdGlvbn1cbiAgICogb2YgaXRzZWxmIGFuZCBwZXJmb3JtIGFueSB1cGRhdGVzIG5lY2Vzc2FyeS5cbiAgICogQHBhcmFtIHtSZWNvcmRpbmdWMiNSZXByZXNlbnRhdGlvbn0gcmVjb3JkaW5nXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKiBAZmlyZXMgUmVjb3JkaW5nU2lnbmFsaW5nI3VwZGF0ZWRcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUmVjb3JkaW5nVjIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKHJlY29yZGluZykge1xuICAgICAgaWYgKHJlY29yZGluZy5yZXZpc2lvbiA8IHRoaXMuX3JldmlzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmV2aXNpb24gPSByZWNvcmRpbmcucmV2aXNpb247XG4gICAgICByZXR1cm4gdGhpcy5lbmFibGUocmVjb3JkaW5nLmVuYWJsZWQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWNvcmRpbmdWMjtcbn0oUmVjb3JkaW5nU2lnbmFsaW5nKTtcblxuLyoqXG4gKiBUaGUgUm9vbSBTaWduYWxpbmcgUHJvdG9jb2wgKFJTUCkgcmVwcmVzZW50YXRpb24gb2YgYSB7QGxpbmsgUmVjb3JkaW5nVjJ9XG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBSZWNvcmRpbmdWMiNSZXByZXNlbnRhdGlvblxuICogQHByb3BlcnR5IHtib29sZWFufSBlbmFibGVkXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmV2aXNpb25cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY29yZGluZ1YyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvc2lnbmFsaW5nL3YyL3JlY29yZGluZy5qc1xuLy8gbW9kdWxlIGlkID0gMzMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///333\n");

/***/ }),
/* 334 */
/*!*************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/remoteparticipant.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteParticipantSignaling = __webpack_require__(/*! ../remoteparticipant */ 335);\nvar RemoteTrackPublicationV2 = __webpack_require__(/*! ./remotetrackpublication */ 336);\n\n/**\n * @extends RemoteParticipantSignaling\n * @property {?number} revision\n */\n\nvar RemoteParticipantV2 = function (_RemoteParticipantSig) {\n  _inherits(RemoteParticipantV2, _RemoteParticipantSig);\n\n  /**\n   * Construct a {@link RemoteParticipantV2}.\n   * @param {object} participantState\n   * @param {function(string): Promise<DataTrackReceiver|MediaTrackReceiver>} getTrackReceiver\n   * @param {object} [options]\n   */\n  function RemoteParticipantV2(participantState, getTrackReceiver, options) {\n    var _ret;\n\n    _classCallCheck(this, RemoteParticipantV2);\n\n    var _this = _possibleConstructorReturn(this, (RemoteParticipantV2.__proto__ || Object.getPrototypeOf(RemoteParticipantV2)).call(this, participantState.sid, participantState.identity));\n\n    options = Object.assign({\n      RemoteTrackPublicationV2: RemoteTrackPublicationV2\n    }, options);\n\n    Object.defineProperties(_this, {\n      _revision: {\n        writable: true,\n        value: null\n      },\n      _RemoteTrackPublicationV2: {\n        value: options.RemoteTrackPublicationV2\n      },\n      _getTrackReceiver: {\n        value: getTrackReceiver\n      },\n      revision: {\n        enumerable: true,\n        get: function get() {\n          return this._revision;\n        }\n      }\n    });\n\n    return _ret = _this.update(participantState), _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(RemoteParticipantV2, [{\n    key: '_getOrCreateTrack',\n    value: function _getOrCreateTrack(trackState) {\n      var RemoteTrackPublicationV2 = this._RemoteTrackPublicationV2;\n      var track = this.tracks.get(trackState.sid);\n      if (!track) {\n        track = new RemoteTrackPublicationV2(trackState);\n        this.addTrack(track);\n      }\n      return track;\n    }\n\n    /**\n     * Update the {@link RemoteParticipantV2} with the new state.\n     * @param {object} participantState\n     * @returns {this}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(participantState) {\n      var _this2 = this;\n\n      if (this.revision !== null && participantState.revision <= this.revision) {\n        return this;\n      }\n      this._revision = participantState.revision;\n\n      var tracksToKeep = new Set();\n\n      participantState.tracks.forEach(function (trackState) {\n        var track = _this2._getOrCreateTrack(trackState);\n        track.update(trackState);\n        tracksToKeep.add(track);\n      });\n\n      this.tracks.forEach(function (track) {\n        if (!tracksToKeep.has(track)) {\n          _this2.removeTrack(track);\n        }\n      });\n\n      if (participantState.state === 'disconnected' && this.state === 'connected') {\n        this.preempt('disconnected');\n      }\n\n      return this;\n    }\n  }]);\n\n  return RemoteParticipantV2;\n}(RemoteParticipantSignaling);\n\nmodule.exports = RemoteParticipantV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvcmVtb3RlcGFydGljaXBhbnQuanM/Y2Q2MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosaURBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywwQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZSxpQ0FBaUMsbUJBQU8sQ0FBQywrQkFBc0I7QUFDL0QsK0JBQStCLG1CQUFPLENBQUMsbUNBQTBCOztBQUVqRTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDLGFBQWEsT0FBTztBQUNwQixhQUFhLGdFQUFnRTtBQUM3RSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLDBCQUEwQjtBQUM3QyxlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVtb3RlUGFydGljaXBhbnRTaWduYWxpbmcgPSByZXF1aXJlKCcuLi9yZW1vdGVwYXJ0aWNpcGFudCcpO1xudmFyIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMiA9IHJlcXVpcmUoJy4vcmVtb3RldHJhY2twdWJsaWNhdGlvbicpO1xuXG4vKipcbiAqIEBleHRlbmRzIFJlbW90ZVBhcnRpY2lwYW50U2lnbmFsaW5nXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHJldmlzaW9uXG4gKi9cblxudmFyIFJlbW90ZVBhcnRpY2lwYW50VjIgPSBmdW5jdGlvbiAoX1JlbW90ZVBhcnRpY2lwYW50U2lnKSB7XG4gIF9pbmhlcml0cyhSZW1vdGVQYXJ0aWNpcGFudFYyLCBfUmVtb3RlUGFydGljaXBhbnRTaWcpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlUGFydGljaXBhbnRWMn0uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWNpcGFudFN0YXRlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKTogUHJvbWlzZTxEYXRhVHJhY2tSZWNlaXZlcnxNZWRpYVRyYWNrUmVjZWl2ZXI+fSBnZXRUcmFja1JlY2VpdmVyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICovXG4gIGZ1bmN0aW9uIFJlbW90ZVBhcnRpY2lwYW50VjIocGFydGljaXBhbnRTdGF0ZSwgZ2V0VHJhY2tSZWNlaXZlciwgb3B0aW9ucykge1xuICAgIHZhciBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZVBhcnRpY2lwYW50VjIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZVBhcnRpY2lwYW50VjIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVQYXJ0aWNpcGFudFYyKSkuY2FsbCh0aGlzLCBwYXJ0aWNpcGFudFN0YXRlLnNpZCwgcGFydGljaXBhbnRTdGF0ZS5pZGVudGl0eSkpO1xuXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgUmVtb3RlVHJhY2tQdWJsaWNhdGlvblYyOiBSZW1vdGVUcmFja1B1YmxpY2F0aW9uVjJcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfcmV2aXNpb246IHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LFxuICAgICAgX1JlbW90ZVRyYWNrUHVibGljYXRpb25WMjoge1xuICAgICAgICB2YWx1ZTogb3B0aW9ucy5SZW1vdGVUcmFja1B1YmxpY2F0aW9uVjJcbiAgICAgIH0sXG4gICAgICBfZ2V0VHJhY2tSZWNlaXZlcjoge1xuICAgICAgICB2YWx1ZTogZ2V0VHJhY2tSZWNlaXZlclxuICAgICAgfSxcbiAgICAgIHJldmlzaW9uOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9yZXZpc2lvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9yZXQgPSBfdGhpcy51cGRhdGUocGFydGljaXBhbnRTdGF0ZSksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSZW1vdGVQYXJ0aWNpcGFudFYyLCBbe1xuICAgIGtleTogJ19nZXRPckNyZWF0ZVRyYWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE9yQ3JlYXRlVHJhY2sodHJhY2tTdGF0ZSkge1xuICAgICAgdmFyIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMiA9IHRoaXMuX1JlbW90ZVRyYWNrUHVibGljYXRpb25WMjtcbiAgICAgIHZhciB0cmFjayA9IHRoaXMudHJhY2tzLmdldCh0cmFja1N0YXRlLnNpZCk7XG4gICAgICBpZiAoIXRyYWNrKSB7XG4gICAgICAgIHRyYWNrID0gbmV3IFJlbW90ZVRyYWNrUHVibGljYXRpb25WMih0cmFja1N0YXRlKTtcbiAgICAgICAgdGhpcy5hZGRUcmFjayh0cmFjayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB7QGxpbmsgUmVtb3RlUGFydGljaXBhbnRWMn0gd2l0aCB0aGUgbmV3IHN0YXRlLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWNpcGFudFN0YXRlXG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShwYXJ0aWNpcGFudFN0YXRlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMucmV2aXNpb24gIT09IG51bGwgJiYgcGFydGljaXBhbnRTdGF0ZS5yZXZpc2lvbiA8PSB0aGlzLnJldmlzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmV2aXNpb24gPSBwYXJ0aWNpcGFudFN0YXRlLnJldmlzaW9uO1xuXG4gICAgICB2YXIgdHJhY2tzVG9LZWVwID0gbmV3IFNldCgpO1xuXG4gICAgICBwYXJ0aWNpcGFudFN0YXRlLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFja1N0YXRlKSB7XG4gICAgICAgIHZhciB0cmFjayA9IF90aGlzMi5fZ2V0T3JDcmVhdGVUcmFjayh0cmFja1N0YXRlKTtcbiAgICAgICAgdHJhY2sudXBkYXRlKHRyYWNrU3RhdGUpO1xuICAgICAgICB0cmFja3NUb0tlZXAuYWRkKHRyYWNrKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICBpZiAoIXRyYWNrc1RvS2VlcC5oYXModHJhY2spKSB7XG4gICAgICAgICAgX3RoaXMyLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYXJ0aWNpcGFudFN0YXRlLnN0YXRlID09PSAnZGlzY29ubmVjdGVkJyAmJiB0aGlzLnN0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICB0aGlzLnByZWVtcHQoJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVtb3RlUGFydGljaXBhbnRWMjtcbn0oUmVtb3RlUGFydGljaXBhbnRTaWduYWxpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW90ZVBhcnRpY2lwYW50VjI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvcmVtb3RlcGFydGljaXBhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDMzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///334\n");

/***/ }),
/* 335 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/remoteparticipant.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ParticipantSignaling = __webpack_require__(/*! ./participant */ 228);\n\n/**\n * A {@link Participant} implementation\n * @extends ParticipantSignaling\n * @property {string} identity\n * @property {Participant.SID} sid\n */\n\nvar RemoteParticipantSignaling = function (_ParticipantSignaling) {\n  _inherits(RemoteParticipantSignaling, _ParticipantSignaling);\n\n  /**\n   * Construct a {@link RemoteParticipantSignaling}.\n   * @param {Participant.SID} sid\n   * @param {string} identity\n   */\n  function RemoteParticipantSignaling(sid, identity) {\n    _classCallCheck(this, RemoteParticipantSignaling);\n\n    var _this = _possibleConstructorReturn(this, (RemoteParticipantSignaling.__proto__ || Object.getPrototypeOf(RemoteParticipantSignaling)).call(this));\n\n    _this.connect(sid, identity);\n    return _this;\n  }\n\n  return RemoteParticipantSignaling;\n}(ParticipantSignaling);\n\nmodule.exports = RemoteParticipantSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvcmVtb3RlcGFydGljaXBhbnQuanM/ZTlkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLDJCQUEyQixtQkFBTyxDQUFDLHdCQUFlOztBQUVsRDtBQUNBLE1BQU0sa0JBQWtCO0FBQ3hCO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsZ0JBQWdCO0FBQzlCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25ELGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFBhcnRpY2lwYW50U2lnbmFsaW5nID0gcmVxdWlyZSgnLi9wYXJ0aWNpcGFudCcpO1xuXG4vKipcbiAqIEEge0BsaW5rIFBhcnRpY2lwYW50fSBpbXBsZW1lbnRhdGlvblxuICogQGV4dGVuZHMgUGFydGljaXBhbnRTaWduYWxpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eVxuICogQHByb3BlcnR5IHtQYXJ0aWNpcGFudC5TSUR9IHNpZFxuICovXG5cbnZhciBSZW1vdGVQYXJ0aWNpcGFudFNpZ25hbGluZyA9IGZ1bmN0aW9uIChfUGFydGljaXBhbnRTaWduYWxpbmcpIHtcbiAgX2luaGVyaXRzKFJlbW90ZVBhcnRpY2lwYW50U2lnbmFsaW5nLCBfUGFydGljaXBhbnRTaWduYWxpbmcpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlUGFydGljaXBhbnRTaWduYWxpbmd9LlxuICAgKiBAcGFyYW0ge1BhcnRpY2lwYW50LlNJRH0gc2lkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGl0eVxuICAgKi9cbiAgZnVuY3Rpb24gUmVtb3RlUGFydGljaXBhbnRTaWduYWxpbmcoc2lkLCBpZGVudGl0eSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZW1vdGVQYXJ0aWNpcGFudFNpZ25hbGluZyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVtb3RlUGFydGljaXBhbnRTaWduYWxpbmcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVQYXJ0aWNpcGFudFNpZ25hbGluZykpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuY29ubmVjdChzaWQsIGlkZW50aXR5KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gUmVtb3RlUGFydGljaXBhbnRTaWduYWxpbmc7XG59KFBhcnRpY2lwYW50U2lnbmFsaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdGVQYXJ0aWNpcGFudFNpZ25hbGluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90d2lsaW8tdmlkZW8vZXM1L3NpZ25hbGluZy9yZW1vdGVwYXJ0aWNpcGFudC5qc1xuLy8gbW9kdWxlIGlkID0gMzM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///335\n");

/***/ }),
/* 336 */
/*!******************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/remotetrackpublication.js ***!
  \******************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RemoteTrackPublicationSignaling = __webpack_require__(/*! ../remotetrackpublication */ 337);\n\n/**\n * @extends RemoteTrackPublicationSignaling\n */\n\nvar RemoteTrackPublicationV2 = function (_RemoteTrackPublicati) {\n  _inherits(RemoteTrackPublicationV2, _RemoteTrackPublicati);\n\n  /**\n   * Construct a {@link RemoteTrackPublicationV2}.\n   * @param {RemoteTrackPublicationV2#Representation} track\n   */\n  function RemoteTrackPublicationV2(track) {\n    _classCallCheck(this, RemoteTrackPublicationV2);\n\n    return _possibleConstructorReturn(this, (RemoteTrackPublicationV2.__proto__ || Object.getPrototypeOf(RemoteTrackPublicationV2)).call(this, track.sid, track.name, track.kind, track.enabled));\n  }\n\n  /**\n   * Compare the {@link RemoteTrackPublicationV2} to a\n   * {@link RemoteTrackPublicationV2#Representation} of itself and perform any\n   * updates necessary.\n   * @param {RemoteTrackPublicationV2#Representation} track\n   * @returns {this}\n   * @fires TrackSignaling#updated\n   */\n\n\n  _createClass(RemoteTrackPublicationV2, [{\n    key: 'update',\n    value: function update(track) {\n      this.enable(track.enabled);\n      return this;\n    }\n  }]);\n\n  return RemoteTrackPublicationV2;\n}(RemoteTrackPublicationSignaling);\n\n/**\n * The Room Signaling Protocol (RSP) representation of a {@link RemoteTrackPublicationV2}.\n * @typedef {LocalTrackPublicationV2#Representation} RemoteTrackPublicationV2#Representation\n * @property (boolean} subscribed\n */\n\nmodule.exports = RemoteTrackPublicationV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvcmVtb3RldHJhY2twdWJsaWNhdGlvbi5qcz85MjU2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLHNDQUFzQyxtQkFBTyxDQUFDLG9DQUEyQjs7QUFFekU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsK0JBQStCO0FBQ2pELGFBQWEsd0NBQXdDO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLCtCQUErQjtBQUNqRCxNQUFNLDhDQUE4QztBQUNwRDtBQUNBLGFBQWEsd0NBQXdDO0FBQ3JELGVBQWU7QUFDZjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLDBEQUEwRCwrQkFBK0I7QUFDekYsYUFBYSx1Q0FBdUM7QUFDcEQsc0JBQXNCO0FBQ3RCOztBQUVBIiwiZmlsZSI6IjMzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVtb3RlVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZyA9IHJlcXVpcmUoJy4uL3JlbW90ZXRyYWNrcHVibGljYXRpb24nKTtcblxuLyoqXG4gKiBAZXh0ZW5kcyBSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nXG4gKi9cblxudmFyIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMiA9IGZ1bmN0aW9uIChfUmVtb3RlVHJhY2tQdWJsaWNhdGkpIHtcbiAgX2luaGVyaXRzKFJlbW90ZVRyYWNrUHVibGljYXRpb25WMiwgX1JlbW90ZVRyYWNrUHVibGljYXRpKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMn0uXG4gICAqIEBwYXJhbSB7UmVtb3RlVHJhY2tQdWJsaWNhdGlvblYyI1JlcHJlc2VudGF0aW9ufSB0cmFja1xuICAgKi9cbiAgZnVuY3Rpb24gUmVtb3RlVHJhY2tQdWJsaWNhdGlvblYyKHRyYWNrKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZVRyYWNrUHVibGljYXRpb25WMi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlbW90ZVRyYWNrUHVibGljYXRpb25WMikpLmNhbGwodGhpcywgdHJhY2suc2lkLCB0cmFjay5uYW1lLCB0cmFjay5raW5kLCB0cmFjay5lbmFibGVkKSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyZSB0aGUge0BsaW5rIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMn0gdG8gYVxuICAgKiB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvblYyI1JlcHJlc2VudGF0aW9ufSBvZiBpdHNlbGYgYW5kIHBlcmZvcm0gYW55XG4gICAqIHVwZGF0ZXMgbmVjZXNzYXJ5LlxuICAgKiBAcGFyYW0ge1JlbW90ZVRyYWNrUHVibGljYXRpb25WMiNSZXByZXNlbnRhdGlvbn0gdHJhY2tcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqIEBmaXJlcyBUcmFja1NpZ25hbGluZyN1cGRhdGVkXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFJlbW90ZVRyYWNrUHVibGljYXRpb25WMiwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUodHJhY2spIHtcbiAgICAgIHRoaXMuZW5hYmxlKHRyYWNrLmVuYWJsZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMjtcbn0oUmVtb3RlVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZyk7XG5cbi8qKlxuICogVGhlIFJvb20gU2lnbmFsaW5nIFByb3RvY29sIChSU1ApIHJlcHJlc2VudGF0aW9uIG9mIGEge0BsaW5rIFJlbW90ZVRyYWNrUHVibGljYXRpb25WMn0uXG4gKiBAdHlwZWRlZiB7TG9jYWxUcmFja1B1YmxpY2F0aW9uVjIjUmVwcmVzZW50YXRpb259IFJlbW90ZVRyYWNrUHVibGljYXRpb25WMiNSZXByZXNlbnRhdGlvblxuICogQHByb3BlcnR5IChib29sZWFufSBzdWJzY3JpYmVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZW1vdGVUcmFja1B1YmxpY2F0aW9uVjI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvcmVtb3RldHJhY2twdWJsaWNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///336\n");

/***/ }),
/* 337 */
/*!***************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/remotetrackpublication.js ***!
  \***************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackSignaling = __webpack_require__(/*! ./track */ 258);\n\n/**\n * A {@link RemoteTrackPublication} implementation\n * @extends TrackSignaling\n */\n\nvar RemoteTrackPublicationSignaling = function (_TrackSignaling) {\n  _inherits(RemoteTrackPublicationSignaling, _TrackSignaling);\n\n  /**\n   * Construct a {@link RemoteTrackPublicationSignaling}.\n   * @param {Track.SID} sid\n   * @param {string} name\n   * @param {Track.Kind} kind\n   * @param {boolean} isEnabled\n   */\n  function RemoteTrackPublicationSignaling(sid, name, kind, isEnabled) {\n    _classCallCheck(this, RemoteTrackPublicationSignaling);\n\n    var _this = _possibleConstructorReturn(this, (RemoteTrackPublicationSignaling.__proto__ || Object.getPrototypeOf(RemoteTrackPublicationSignaling)).call(this, name, kind, isEnabled));\n\n    Object.defineProperties(_this, {\n      _error: {\n        value: null,\n        writable: true\n      }\n    });\n    _this.setSid(sid);\n    return _this;\n  }\n\n  /**\n   * Non-null if subscription failed.\n   * @property {?Error}\n   */\n\n\n  _createClass(RemoteTrackPublicationSignaling, [{\n    key: 'subscribeFailed',\n\n\n    /**\n     * @param {Error} error\n     * @returns {this}\n     */\n    value: function subscribeFailed(error) {\n      if (!this.error) {\n        this._error = error;\n        this.emit('updated');\n      }\n      return this;\n    }\n  }, {\n    key: 'error',\n    get: function get() {\n      return this._error;\n    }\n\n    /**\n     * Whether the {@link RemoteTrackPublicationSignaling} is subscribed to.\n     * @property {boolean}\n     */\n\n  }, {\n    key: 'isSubscribed',\n    get: function get() {\n      return !!this.trackTransceiver;\n    }\n  }]);\n\n  return RemoteTrackPublicationSignaling;\n}(TrackSignaling);\n\nmodule.exports = RemoteTrackPublicationSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvcmVtb3RldHJhY2twdWJsaWNhdGlvbi5qcz83ZTI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLHFCQUFxQixtQkFBTyxDQUFDLGtCQUFTOztBQUV0QztBQUNBLE1BQU0sNkJBQTZCO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixzQ0FBc0M7QUFDeEQsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsT0FBTztBQUNwQixhQUFhLFdBQVc7QUFDeEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCOzs7QUFHQTtBQUNBOzs7QUFHQTtBQUNBLGVBQWUsTUFBTTtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixzQ0FBc0M7QUFDMUQsa0JBQWtCO0FBQ2xCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjMzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVHJhY2tTaWduYWxpbmcgPSByZXF1aXJlKCcuL3RyYWNrJyk7XG5cbi8qKlxuICogQSB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvbn0gaW1wbGVtZW50YXRpb25cbiAqIEBleHRlbmRzIFRyYWNrU2lnbmFsaW5nXG4gKi9cblxudmFyIFJlbW90ZVRyYWNrUHVibGljYXRpb25TaWduYWxpbmcgPSBmdW5jdGlvbiAoX1RyYWNrU2lnbmFsaW5nKSB7XG4gIF9pbmhlcml0cyhSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nLCBfVHJhY2tTaWduYWxpbmcpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgUmVtb3RlVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZ30uXG4gICAqIEBwYXJhbSB7VHJhY2suU0lEfSBzaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtUcmFjay5LaW5kfSBraW5kXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFbmFibGVkXG4gICAqL1xuICBmdW5jdGlvbiBSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nKHNpZCwgbmFtZSwga2luZCwgaXNFbmFibGVkKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbW90ZVRyYWNrUHVibGljYXRpb25TaWduYWxpbmcpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlbW90ZVRyYWNrUHVibGljYXRpb25TaWduYWxpbmcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nKSkuY2FsbCh0aGlzLCBuYW1lLCBraW5kLCBpc0VuYWJsZWQpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfZXJyb3I6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMuc2V0U2lkKHNpZCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vbi1udWxsIGlmIHN1YnNjcmlwdGlvbiBmYWlsZWQuXG4gICAqIEBwcm9wZXJ0eSB7P0Vycm9yfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nLCBbe1xuICAgIGtleTogJ3N1YnNjcmliZUZhaWxlZCcsXG5cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAgICogQHJldHVybnMge3RoaXN9XG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZUZhaWxlZChlcnJvcikge1xuICAgICAgaWYgKCF0aGlzLmVycm9yKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZXJyb3InLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHtAbGluayBSZW1vdGVUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nfSBpcyBzdWJzY3JpYmVkIHRvLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaXNTdWJzY3JpYmVkJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMudHJhY2tUcmFuc2NlaXZlcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVtb3RlVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZztcbn0oVHJhY2tTaWduYWxpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW90ZVRyYWNrUHVibGljYXRpb25TaWduYWxpbmc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvcmVtb3RldHJhY2twdWJsaWNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///337\n");

/***/ }),
/* 338 */
/*!*****************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/transport.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar constants = __webpack_require__(/*! ../../util/constants */ 208);\nvar packageInfo = __webpack_require__(/*! ../../../package.json */ 219);\nvar InsightsPublisher = __webpack_require__(/*! ../../util/insightspublisher */ 339);\nvar NullInsightsPublisher = __webpack_require__(/*! ../../util/insightspublisher/null */ 340);\nvar SIP = __webpack_require__(/*! ../../sip */ 229);\nvar DefaultSIPJSMediaHandler = __webpack_require__(/*! ./sipjsmediahandler */ 260);\nvar StateMachine = __webpack_require__(/*! ../../statemachine */ 215);\nvar util = __webpack_require__(/*! ../../util */ 206);\n\nvar _require = __webpack_require__(/*! ../../util/twilio-video-errors */ 209),\n    RoomCompletedError = _require.RoomCompletedError;\n\nvar _require2 = __webpack_require__(/*! ../../util/twilio-video-errors */ 209),\n    SignalingConnectionDisconnectedError = _require2.SignalingConnectionDisconnectedError,\n    SignalingConnectionError = _require2.SignalingConnectionError,\n    SignalingConnectionTimeoutError = _require2.SignalingConnectionTimeoutError,\n    SignalingIncomingMessageInvalidError = _require2.SignalingIncomingMessageInvalidError,\n    createTwilioError = _require2.createTwilioError;\n\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + '.js';\nvar SDK_VERSION = packageInfo.version;\n\n/*\nTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n\n/**\n * A {@link Transport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @implements MediaSignalingTransport\n * @emits Transport#connected\n * @emits Transport#message\n */\n\nvar Transport = function (_StateMachine) {\n  _inherits(Transport, _StateMachine);\n\n  /**\n   * Construct a {@link Transport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {object} ua\n   * @param {object} [options]\n   */\n  function Transport(name, accessToken, localParticipant, peerConnectionManager, ua, options) {\n    _classCallCheck(this, Transport);\n\n    options = Object.assign({\n      InsightsPublisher: InsightsPublisher,\n      NullInsightsPublisher: NullInsightsPublisher,\n      sdpSemantics: null,\n      SIPJSMediaHandler: DefaultSIPJSMediaHandler,\n      userAgent: util.getUserAgent()\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (Transport.__proto__ || Object.getPrototypeOf(Transport)).call(this, 'connecting', states));\n\n    var eventPublisherOptions = {};\n    if (options.wsServerInsights) {\n      eventPublisherOptions.gateway = options.wsServerInsights;\n    }\n\n    var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n    Object.defineProperties(_this, {\n      _eventPublisher: {\n        value: new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions)\n      },\n      _sdpSemantics: {\n        value: options.sdpSemantics\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      }\n    });\n\n    Object.defineProperties(_this, {\n      _session: {\n        value: createSession(_this, name, accessToken, localParticipant, peerConnectionManager, ua, options.SIPJSMediaHandler, options.iceServerSourceStatus, options.dominantSpeaker, options.networkQuality)\n      }\n    });\n    setupEventListeners(_this, _this._session, ua);\n    return _this;\n  }\n\n  /**\n   * Disconnect the {@link Transport}. Returns true if calling the method resulted\n   * in disconnection.\n   * @param {TwilioError} [error]\n   * @returns {boolean}\n   */\n\n\n  _createClass(Transport, [{\n    key: 'disconnect',\n    value: function disconnect(error) {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected', null, [error]);\n        this._session.terminate({\n          body: JSON.stringify({\n            type: 'disconnect',\n            version: RSP_VERSION\n          }),\n          extraHeaders: ['Content-Type: application/room-signaling+json']\n        });\n        this._eventPublisher.disconnect();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Publish an RSP Update. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} update\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(update) {\n      update = Object.assign({\n        type: 'update',\n        version: RSP_VERSION\n      }, update);\n      switch (this.state) {\n        case 'connected':\n          publishWithRetries(this, this._session, update);\n          return true;\n        case 'connecting':\n        case 'syncing':\n          this._updatesToSend.push(update);\n          return true;\n        case 'disconnected':\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Publish (or queue) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnected from the Insights gateway\n     */\n\n  }, {\n    key: 'publishEvent',\n    value: function publishEvent(groupName, eventName, payload) {\n      return this._eventPublisher.publish(groupName, eventName, payload);\n    }\n\n    /**\n     * Sync the {@link Transport}. Returns true if calling the method resulted in\n     * syncing.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'sync',\n    value: function sync() {\n      if (this.state === 'connected') {\n        this.preempt('syncing');\n        this._session.sendReinvite();\n        return true;\n      }\n      return false;\n    }\n  }]);\n\n  return Transport;\n}(StateMachine);\n\n/**\n * @event Transport#connected\n * @param {object} initialState\n */\n\n/**\n * @event Transport#message\n * @param {object} state\n */\n\nfunction createSession(transport, name, accessToken, localParticipant, peerConnectionManager, ua, SIPJSMediaHandler, iceServerSourceStatus, dominantSpeaker, networkQuality) {\n  var target = 'sip:' + util.makeServerSIPURI();\n  return ua.invite(target, {\n    extraHeaders: [constants.headers.X_TWILIO_ACCESSTOKEN + ': ' + accessToken, 'Session-Expires: 120'],\n    media: { stream: {} },\n    mediaHandlerFactory: function mediaHandlerFactory() {\n      return new SIPJSMediaHandler(peerConnectionManager, function createMessage() {\n        if (transport.state === 'disconnected') {\n          return {\n            type: 'disconnect',\n            version: RSP_VERSION\n          };\n        }\n        var type = {\n          connecting: 'connect',\n          syncing: 'sync'\n        }[transport.state] || 'update';\n\n        var message = {\n          name: name,\n          participant: localParticipant.getState(),\n          type: type,\n          version: RSP_VERSION\n        };\n\n        if (message.type === 'connect') {\n          message.ice_servers = iceServerSourceStatus;\n          message.publisher = {\n            name: SDK_NAME,\n            sdk_version: SDK_VERSION,\n            user_agent: transport._userAgent\n          };\n          message.media_signaling = {};\n          if (networkQuality) {\n            message.media_signaling.network_quality = {\n              transports: [{ type: 'data-channel' }]\n            };\n          }\n          if (dominantSpeaker) {\n            message.media_signaling.active_speaker = {\n              transports: [{ type: 'data-channel' }]\n            };\n          }\n        }\n\n        var sdpFormat = util.getSdpFormat(transport._sdpSemantics);\n        if (type === 'connect' && sdpFormat) {\n          message.format = sdpFormat;\n        }\n\n        return message;\n      });\n    },\n    onInfo: function onInfo(request) {\n      this.emit('info', request);\n      request.reply(200);\n    }\n  });\n}\n\n/**\n * Add random jitter to a given value in the range [-jitter, jitter].\n * @private\n * @param {number} value\n * @param {number} jitter\n * @returns {number} value + random(-jitter, +jitter)\n */\nfunction withJitter(value, jitter) {\n  var rand = Math.random();\n  return value - jitter + Math.floor(2 * jitter * rand + 0.5);\n}\n\nfunction publishWithRetries(transport, session, payload, attempts) {\n  attempts = attempts || 0;\n  return new Promise(function (resolve, reject) {\n    function receiveResponse(response) {\n      switch (Math.floor(response.status_code / 100)) {\n        case 2:\n          resolve();\n          break;\n        case 5:\n          if (attempts < constants.PUBLISH_MAX_ATTEMPTS) {\n            resolve(publishWithRetries(transport, session, payload, ++attempts));\n          } else {\n            reject(new Error('Transport failed to send a message even after ' + constants.PUBLISH_MAX_ATTEMPTS + ' attempts'));\n          }\n          break;\n        default:\n          reject(response);\n      }\n    }\n    function sendRequest() {\n      if (transport.state === 'disconnected') {\n        return;\n      }\n      session.sendRequest('INFO', {\n        body: JSON.stringify(payload),\n        extraHeaders: ['Content-Type: application/room-signaling+json', 'Event: room-signaling', 'Info-Package: room-signaling'],\n        receiveResponse: receiveResponse\n      });\n    }\n    if (attempts === 0) {\n      sendRequest();\n      return;\n    }\n\n    var backOffMs = (1 << attempts - 1) * constants.PUBLISH_BACKOFF_MS;\n    setTimeout(sendRequest, withJitter(backOffMs, constants.PUBLISH_BACKOFF_JITTER));\n  });\n}\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update;\n\n    // First, reduce the top-level `description` property.\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    }\n\n    // Then, reduce the top-level `ice` property.\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    }\n\n    // Finally, update the map.\n    peerConnectionsById.set(reduced.id, reduced);\n\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    }\n\n    // Then, reduce the top-level `peer_connections` property.\n    /* eslint camelcase:0 */\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n\n    return reduced;\n  }, {\n    type: 'update',\n    version: RSP_VERSION\n  });\n}\n\n/**\n * Parse the body of a SIP incoming request or response.\n * @param {object} requestOrResponse\n * @returns {?object}\n * @throws {SignalingIncomingMessageInvalidError}\n */\nfunction parseRequestOrResponseBody(requestOrResponse) {\n  if (requestOrResponse.body) {\n    try {\n      return JSON.parse(requestOrResponse.body);\n    } catch (e) {\n      throw new SignalingIncomingMessageInvalidError();\n    }\n  }\n  return null;\n}\n\n/**\n * Get a {@link TwilioError} for a SIP incoming request or response from its body.\n * @param {object} requestOrResponse\n * @returns {?TwilioError}\n */\nfunction getTwilioErrorFromRequestOrResponseBody(requestOrResponse) {\n  try {\n    var message = parseRequestOrResponseBody(requestOrResponse);\n    if (message) {\n      switch (message.type) {\n        case 'disconnected':\n          if (message.status === 'completed') {\n            return new RoomCompletedError();\n          }\n          break;\n        case 'error':\n          return createTwilioError(message.code, message.message);\n        default:\n          break;\n      }\n    }\n    return null;\n  } catch (error) {\n    return error;\n  }\n}\n\n/**\n * Get a {@link TwilioError} for a SIP incoming request or response from its headers.\n * @param {object} requestOrResponse\n * @returns {?TwilioError}\n */\nfunction getTwilioErrorFromRequestOrResponseHeaders(requestOrResponse) {\n  var headers = requestOrResponse.headers;\n  if (headers && headers['X-Twilio-Error']) {\n    var twilioErrorHeader = headers['X-Twilio-Error'][0].raw.split(' ');\n    var code = parseInt(twilioErrorHeader[0], 10);\n    var message = twilioErrorHeader.slice(1).join(' ');\n    return createTwilioError(code, message);\n  }\n  return null;\n}\n\n/**\n * Create a {@link TwilioError} from a SIP request or response.\n * @param {object} requestOrResponse - SIP request or response\n * @returns {?TwilioError}\n */\nfunction getTwilioErrorFromRequestOrResponse(requestOrResponse) {\n  return getTwilioErrorFromRequestOrResponseHeaders(requestOrResponse) || getTwilioErrorFromRequestOrResponseBody(requestOrResponse);\n}\n\nfunction setupEventListeners(transport, session, ua) {\n  function disconnect(requestOrResponse, cause) {\n    var twilioError = void 0;\n\n    if (requestOrResponse && !(requestOrResponse instanceof SIP.OutgoingRequest)) {\n      twilioError = getTwilioErrorFromRequestOrResponse(requestOrResponse);\n    }\n\n    if (!twilioError) {\n      switch (cause) {\n        case SIP.C.causes.REQUEST_TIMEOUT:\n          twilioError = new SignalingConnectionTimeoutError();\n          break;\n        case SIP.C.causes.CONNECTION_ERROR:\n          twilioError = new SignalingConnectionError();\n          break;\n        default:\n          twilioError = new SignalingConnectionDisconnectedError();\n      }\n    }\n\n    transport.disconnect(twilioError);\n  }\n\n  function handleRequestOrResponse(requestOrResponse) {\n    // We don't need to handle requests we sent ourselves.\n    if (requestOrResponse instanceof SIP.OutgoingRequest) {\n      return;\n    }\n\n    // Handle any errors first.\n    var error = void 0;\n    try {\n      error = getTwilioErrorFromRequestOrResponse(requestOrResponse);\n    } catch (e) {\n      if (e instanceof SignalingIncomingMessageInvalidError) {\n        return;\n      }\n      error = e;\n    }\n\n    // If we get an error other than a SignalingIncomingMessageInvalidError,\n    // then disconnect.\n    if (error) {\n      transport.disconnect(error);\n      return;\n    }\n\n    // Otherwise, try to parse the RSP message.\n    var message = void 0;\n    try {\n      message = parseRequestOrResponseBody(requestOrResponse);\n    } catch (e) {}\n    // Do nothing.\n\n\n    // If there's no RSP message to handle, just return.\n    if (!message) {\n      return;\n    }\n\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n            transport.emit('message', message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'connecting':\n        switch (message.type) {\n          case 'connected':\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'disconnected':\n        // Do nothing.\n        return;\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'synced':\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  session.on('info', handleRequestOrResponse);\n  session.once('bye', disconnect);\n\n  session.once('accepted', handleRequestOrResponse);\n  session.once('failed', disconnect);\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          session.removeListener('accepted', handleRequestOrResponse);\n          session.removeListener('failed', disconnect);\n\n          var updates = transport._updatesToSend.splice(0);\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n\n          transport._updatesReceived.splice(0).forEach(transport.emit.bind(transport, 'message'));\n\n          return;\n        }\n      case 'disconnected':\n        session.removeListener('accepted', handleRequestOrResponse);\n        session.removeListener('failed', disconnect);\n        session.removeListener('info', handleRequestOrResponse);\n        session.removeListener('bye', disconnect);\n        transport.removeListener('stateChanged', stateChanged);\n        ua.stop();\n        return;\n      case 'syncing':\n        // Do nothing.\n        return;\n      default:\n        // Impossible\n        return;\n    }\n  });\n\n  ua.once('disconnected', disconnect);\n  ua.once('keepAliveTimeout', function () {\n    return transport.disconnect(new SignalingConnectionTimeoutError());\n  });\n}\n\nmodule.exports = Transport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvdHJhbnNwb3J0LmpzPzE4ZTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUsZ0JBQWdCLG1CQUFPLENBQUMsK0JBQXNCO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLGdDQUF1QjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQyx1Q0FBOEI7QUFDOUQsNEJBQTRCLG1CQUFPLENBQUMsNENBQW1DO0FBQ3ZFLFVBQVUsbUJBQU8sQ0FBQyxvQkFBVztBQUM3QiwrQkFBK0IsbUJBQU8sQ0FBQyw4QkFBcUI7QUFDNUQsbUJBQW1CLG1CQUFPLENBQUMsNkJBQW9CO0FBQy9DLFdBQVcsbUJBQU8sQ0FBQyxxQkFBWTs7QUFFL0IsZUFBZSxtQkFBTyxDQUFDLHlDQUFnQztBQUN2RDs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyx5Q0FBZ0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSxnQkFBZ0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDLGFBQWEsUUFBUTtBQUNyQixhQUFhLE9BQU87QUFDcEIsYUFBYSxxQkFBcUI7QUFDbEMsYUFBYSxzQkFBc0I7QUFDbkMsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQSxhQUFhLFlBQVk7QUFDekIsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsUUFBUTtBQUN6Qjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVcsRUFBRTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMzM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL2NvbnN0YW50cycpO1xudmFyIHBhY2thZ2VJbmZvID0gcmVxdWlyZSgnLi4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG52YXIgSW5zaWdodHNQdWJsaXNoZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsL2luc2lnaHRzcHVibGlzaGVyJyk7XG52YXIgTnVsbEluc2lnaHRzUHVibGlzaGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9pbnNpZ2h0c3B1Ymxpc2hlci9udWxsJyk7XG52YXIgU0lQID0gcmVxdWlyZSgnLi4vLi4vc2lwJyk7XG52YXIgRGVmYXVsdFNJUEpTTWVkaWFIYW5kbGVyID0gcmVxdWlyZSgnLi9zaXBqc21lZGlhaGFuZGxlcicpO1xudmFyIFN0YXRlTWFjaGluZSA9IHJlcXVpcmUoJy4uLy4uL3N0YXRlbWFjaGluZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvdHdpbGlvLXZpZGVvLWVycm9ycycpLFxuICAgIFJvb21Db21wbGV0ZWRFcnJvciA9IF9yZXF1aXJlLlJvb21Db21wbGV0ZWRFcnJvcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvdHdpbGlvLXZpZGVvLWVycm9ycycpLFxuICAgIFNpZ25hbGluZ0Nvbm5lY3Rpb25EaXNjb25uZWN0ZWRFcnJvciA9IF9yZXF1aXJlMi5TaWduYWxpbmdDb25uZWN0aW9uRGlzY29ubmVjdGVkRXJyb3IsXG4gICAgU2lnbmFsaW5nQ29ubmVjdGlvbkVycm9yID0gX3JlcXVpcmUyLlNpZ25hbGluZ0Nvbm5lY3Rpb25FcnJvcixcbiAgICBTaWduYWxpbmdDb25uZWN0aW9uVGltZW91dEVycm9yID0gX3JlcXVpcmUyLlNpZ25hbGluZ0Nvbm5lY3Rpb25UaW1lb3V0RXJyb3IsXG4gICAgU2lnbmFsaW5nSW5jb21pbmdNZXNzYWdlSW52YWxpZEVycm9yID0gX3JlcXVpcmUyLlNpZ25hbGluZ0luY29taW5nTWVzc2FnZUludmFsaWRFcnJvcixcbiAgICBjcmVhdGVUd2lsaW9FcnJvciA9IF9yZXF1aXJlMi5jcmVhdGVUd2lsaW9FcnJvcjtcblxudmFyIFJTUF9WRVJTSU9OID0gMjtcbnZhciBTREtfTkFNRSA9IHBhY2thZ2VJbmZvLm5hbWUgKyAnLmpzJztcbnZhciBTREtfVkVSU0lPTiA9IHBhY2thZ2VJbmZvLnZlcnNpb247XG5cbi8qXG5UcmFuc3BvcnQgU3RhdGVzXG4tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgfFxuICAgICAgICAgICAgICAgICAgICAgIHwgIHN5bmNpbmcgIHwtLS0tLS0tLS0rXG4gICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgfCAgICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rICAgICAgICAgfFxuICAgICAgICAgICAgICAgICAgICAgICAgIF4gICAgIHwgICAgICAgICAgICB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCAgICAgICAgICAgIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB2ICAgICAgICAgICAgdlxuICAgICstLS0tLS0tLS0tLS0rICAgICstLS0tLS0tLS0tLSsgICAgKy0tLS0tLS0tLS0tLS0tK1xuICAgIHwgICAgICAgICAgICB8ICAgIHwgICAgICAgICAgIHwgICAgfCAgICAgICAgICAgICAgfFxuICAgIHwgY29ubmVjdGluZyB8LS0tPnwgY29ubmVjdGVkIHwtLS0+fCBkaXNjb25uZWN0ZWQgfFxuICAgIHwgICAgICAgICAgICB8ICAgIHwgICAgICAgICAgIHwgICAgfCAgICAgICAgICAgICAgfFxuICAgICstLS0tLS0tLS0tLS0rICAgICstLS0tLS0tLS0tLSsgICAgKy0tLS0tLS0tLS0tLS0tK1xuICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXG4gICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG5cbiovXG5cbnZhciBzdGF0ZXMgPSB7XG4gIGNvbm5lY3Rpbmc6IFsnY29ubmVjdGVkJywgJ2Rpc2Nvbm5lY3RlZCddLFxuICBjb25uZWN0ZWQ6IFsnZGlzY29ubmVjdGVkJywgJ3N5bmNpbmcnXSxcbiAgc3luY2luZzogWydjb25uZWN0ZWQnLCAnZGlzY29ubmVjdGVkJ10sXG4gIGRpc2Nvbm5lY3RlZDogW11cbn07XG5cbi8qKlxuICogQSB7QGxpbmsgVHJhbnNwb3J0fSBzdXBwb3J0cyBzZW5kaW5nIGFuZCByZWNlaXZpbmcgUm9vbSBTaWduYWxpbmcgUHJvdG9jb2xcbiAqIChSU1ApIG1lc3NhZ2VzLiBJdCBhbHNvIHN1cHBvcnRzIFJTUCByZXF1ZXN0cywgc3VjaCBhcyBTeW5jIGFuZCBEaXNjb25uZWN0LlxuICogQGV4dGVuZHMgU3RhdGVNYWNoaW5lXG4gKiBAaW1wbGVtZW50cyBNZWRpYVNpZ25hbGluZ1RyYW5zcG9ydFxuICogQGVtaXRzIFRyYW5zcG9ydCNjb25uZWN0ZWRcbiAqIEBlbWl0cyBUcmFuc3BvcnQjbWVzc2FnZVxuICovXG5cbnZhciBUcmFuc3BvcnQgPSBmdW5jdGlvbiAoX1N0YXRlTWFjaGluZSkge1xuICBfaW5oZXJpdHMoVHJhbnNwb3J0LCBfU3RhdGVNYWNoaW5lKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEge0BsaW5rIFRyYW5zcG9ydH0uXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWNjZXNzVG9rZW5cbiAgICogQHBhcmFtIHtQYXJ0aWNpcGFudFNpZ25hbGluZ30gbG9jYWxQYXJ0aWNpcGFudFxuICAgKiBAcGFyYW0ge1BlZXJDb25uZWN0aW9uTWFuYWdlcn0gcGVlckNvbm5lY3Rpb25NYW5hZ2VyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB1YVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqL1xuICBmdW5jdGlvbiBUcmFuc3BvcnQobmFtZSwgYWNjZXNzVG9rZW4sIGxvY2FsUGFydGljaXBhbnQsIHBlZXJDb25uZWN0aW9uTWFuYWdlciwgdWEsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNwb3J0KTtcblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIEluc2lnaHRzUHVibGlzaGVyOiBJbnNpZ2h0c1B1Ymxpc2hlcixcbiAgICAgIE51bGxJbnNpZ2h0c1B1Ymxpc2hlcjogTnVsbEluc2lnaHRzUHVibGlzaGVyLFxuICAgICAgc2RwU2VtYW50aWNzOiBudWxsLFxuICAgICAgU0lQSlNNZWRpYUhhbmRsZXI6IERlZmF1bHRTSVBKU01lZGlhSGFuZGxlcixcbiAgICAgIHVzZXJBZ2VudDogdXRpbC5nZXRVc2VyQWdlbnQoKVxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRyYW5zcG9ydC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRyYW5zcG9ydCkpLmNhbGwodGhpcywgJ2Nvbm5lY3RpbmcnLCBzdGF0ZXMpKTtcblxuICAgIHZhciBldmVudFB1Ymxpc2hlck9wdGlvbnMgPSB7fTtcbiAgICBpZiAob3B0aW9ucy53c1NlcnZlckluc2lnaHRzKSB7XG4gICAgICBldmVudFB1Ymxpc2hlck9wdGlvbnMuZ2F0ZXdheSA9IG9wdGlvbnMud3NTZXJ2ZXJJbnNpZ2h0cztcbiAgICB9XG5cbiAgICB2YXIgRXZlbnRQdWJsaXNoZXIgPSBvcHRpb25zLmluc2lnaHRzID8gb3B0aW9ucy5JbnNpZ2h0c1B1Ymxpc2hlciA6IG9wdGlvbnMuTnVsbEluc2lnaHRzUHVibGlzaGVyO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfZXZlbnRQdWJsaXNoZXI6IHtcbiAgICAgICAgdmFsdWU6IG5ldyBFdmVudFB1Ymxpc2hlcihhY2Nlc3NUb2tlbiwgU0RLX05BTUUsIFNES19WRVJTSU9OLCBvcHRpb25zLmVudmlyb25tZW50LCBvcHRpb25zLnJlYWxtLCBldmVudFB1Ymxpc2hlck9wdGlvbnMpXG4gICAgICB9LFxuICAgICAgX3NkcFNlbWFudGljczoge1xuICAgICAgICB2YWx1ZTogb3B0aW9ucy5zZHBTZW1hbnRpY3NcbiAgICAgIH0sXG4gICAgICBfdXBkYXRlc1JlY2VpdmVkOiB7XG4gICAgICAgIHZhbHVlOiBbXVxuICAgICAgfSxcbiAgICAgIF91cGRhdGVzVG9TZW5kOiB7XG4gICAgICAgIHZhbHVlOiBbXVxuICAgICAgfSxcbiAgICAgIF91c2VyQWdlbnQ6IHtcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMudXNlckFnZW50XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpcywge1xuICAgICAgX3Nlc3Npb246IHtcbiAgICAgICAgdmFsdWU6IGNyZWF0ZVNlc3Npb24oX3RoaXMsIG5hbWUsIGFjY2Vzc1Rva2VuLCBsb2NhbFBhcnRpY2lwYW50LCBwZWVyQ29ubmVjdGlvbk1hbmFnZXIsIHVhLCBvcHRpb25zLlNJUEpTTWVkaWFIYW5kbGVyLCBvcHRpb25zLmljZVNlcnZlclNvdXJjZVN0YXR1cywgb3B0aW9ucy5kb21pbmFudFNwZWFrZXIsIG9wdGlvbnMubmV0d29ya1F1YWxpdHkpXG4gICAgICB9XG4gICAgfSk7XG4gICAgc2V0dXBFdmVudExpc3RlbmVycyhfdGhpcywgX3RoaXMuX3Nlc3Npb24sIHVhKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdCB0aGUge0BsaW5rIFRyYW5zcG9ydH0uIFJldHVybnMgdHJ1ZSBpZiBjYWxsaW5nIHRoZSBtZXRob2QgcmVzdWx0ZWRcbiAgICogaW4gZGlzY29ubmVjdGlvbi5cbiAgICogQHBhcmFtIHtUd2lsaW9FcnJvcn0gW2Vycm9yXVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoVHJhbnNwb3J0LCBbe1xuICAgIGtleTogJ2Rpc2Nvbm5lY3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KGVycm9yKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgdGhpcy5wcmVlbXB0KCdkaXNjb25uZWN0ZWQnLCBudWxsLCBbZXJyb3JdKTtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbi50ZXJtaW5hdGUoe1xuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHR5cGU6ICdkaXNjb25uZWN0JyxcbiAgICAgICAgICAgIHZlcnNpb246IFJTUF9WRVJTSU9OXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZXh0cmFIZWFkZXJzOiBbJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcm9vbS1zaWduYWxpbmcranNvbiddXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9ldmVudFB1Ymxpc2hlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggYW4gUlNQIFVwZGF0ZS4gUmV0dXJucyB0cnVlIGlmIGNhbGxpbmcgdGhlIG1ldGhvZCByZXN1bHRlZCBpblxuICAgICAqIHB1Ymxpc2hpbmcgKG9yIGV2ZW50dWFsbHkgcHVibGlzaGluZykgdGhlIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdXBkYXRlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3B1Ymxpc2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwdWJsaXNoKHVwZGF0ZSkge1xuICAgICAgdXBkYXRlID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgICB2ZXJzaW9uOiBSU1BfVkVSU0lPTlxuICAgICAgfSwgdXBkYXRlKTtcbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgIHB1Ymxpc2hXaXRoUmV0cmllcyh0aGlzLCB0aGlzLl9zZXNzaW9uLCB1cGRhdGUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdjb25uZWN0aW5nJzpcbiAgICAgICAgY2FzZSAnc3luY2luZyc6XG4gICAgICAgICAgdGhpcy5fdXBkYXRlc1RvU2VuZC5wdXNoKHVwZGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggKG9yIHF1ZXVlKSBhbiBldmVudCB0byB0aGUgSW5zaWdodHMgZ2F0ZXdheS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBOYW1lIC0gRXZlbnQgZ3JvdXAgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBFdmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBheWxvYWQgLSBFdmVudCBwYXlsb2FkXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgcXVldWVkIG9yIHB1Ymxpc2hlZCwgZmFsc2UgaWYgZGlzY29ubmVjdGVkIGZyb20gdGhlIEluc2lnaHRzIGdhdGV3YXlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncHVibGlzaEV2ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVibGlzaEV2ZW50KGdyb3VwTmFtZSwgZXZlbnROYW1lLCBwYXlsb2FkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZXZlbnRQdWJsaXNoZXIucHVibGlzaChncm91cE5hbWUsIGV2ZW50TmFtZSwgcGF5bG9hZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3luYyB0aGUge0BsaW5rIFRyYW5zcG9ydH0uIFJldHVybnMgdHJ1ZSBpZiBjYWxsaW5nIHRoZSBtZXRob2QgcmVzdWx0ZWQgaW5cbiAgICAgKiBzeW5jaW5nLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzeW5jJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luYygpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICB0aGlzLnByZWVtcHQoJ3N5bmNpbmcnKTtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbi5zZW5kUmVpbnZpdGUoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYW5zcG9ydDtcbn0oU3RhdGVNYWNoaW5lKTtcblxuLyoqXG4gKiBAZXZlbnQgVHJhbnNwb3J0I2Nvbm5lY3RlZFxuICogQHBhcmFtIHtvYmplY3R9IGluaXRpYWxTdGF0ZVxuICovXG5cbi8qKlxuICogQGV2ZW50IFRyYW5zcG9ydCNtZXNzYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTZXNzaW9uKHRyYW5zcG9ydCwgbmFtZSwgYWNjZXNzVG9rZW4sIGxvY2FsUGFydGljaXBhbnQsIHBlZXJDb25uZWN0aW9uTWFuYWdlciwgdWEsIFNJUEpTTWVkaWFIYW5kbGVyLCBpY2VTZXJ2ZXJTb3VyY2VTdGF0dXMsIGRvbWluYW50U3BlYWtlciwgbmV0d29ya1F1YWxpdHkpIHtcbiAgdmFyIHRhcmdldCA9ICdzaXA6JyArIHV0aWwubWFrZVNlcnZlclNJUFVSSSgpO1xuICByZXR1cm4gdWEuaW52aXRlKHRhcmdldCwge1xuICAgIGV4dHJhSGVhZGVyczogW2NvbnN0YW50cy5oZWFkZXJzLlhfVFdJTElPX0FDQ0VTU1RPS0VOICsgJzogJyArIGFjY2Vzc1Rva2VuLCAnU2Vzc2lvbi1FeHBpcmVzOiAxMjAnXSxcbiAgICBtZWRpYTogeyBzdHJlYW06IHt9IH0sXG4gICAgbWVkaWFIYW5kbGVyRmFjdG9yeTogZnVuY3Rpb24gbWVkaWFIYW5kbGVyRmFjdG9yeSgpIHtcbiAgICAgIHJldHVybiBuZXcgU0lQSlNNZWRpYUhhbmRsZXIocGVlckNvbm5lY3Rpb25NYW5hZ2VyLCBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlKCkge1xuICAgICAgICBpZiAodHJhbnNwb3J0LnN0YXRlID09PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZGlzY29ubmVjdCcsXG4gICAgICAgICAgICB2ZXJzaW9uOiBSU1BfVkVSU0lPTlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSB7XG4gICAgICAgICAgY29ubmVjdGluZzogJ2Nvbm5lY3QnLFxuICAgICAgICAgIHN5bmNpbmc6ICdzeW5jJ1xuICAgICAgICB9W3RyYW5zcG9ydC5zdGF0ZV0gfHwgJ3VwZGF0ZSc7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICBwYXJ0aWNpcGFudDogbG9jYWxQYXJ0aWNpcGFudC5nZXRTdGF0ZSgpLFxuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgdmVyc2lvbjogUlNQX1ZFUlNJT05cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAnY29ubmVjdCcpIHtcbiAgICAgICAgICBtZXNzYWdlLmljZV9zZXJ2ZXJzID0gaWNlU2VydmVyU291cmNlU3RhdHVzO1xuICAgICAgICAgIG1lc3NhZ2UucHVibGlzaGVyID0ge1xuICAgICAgICAgICAgbmFtZTogU0RLX05BTUUsXG4gICAgICAgICAgICBzZGtfdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgICAgICAgICB1c2VyX2FnZW50OiB0cmFuc3BvcnQuX3VzZXJBZ2VudFxuICAgICAgICAgIH07XG4gICAgICAgICAgbWVzc2FnZS5tZWRpYV9zaWduYWxpbmcgPSB7fTtcbiAgICAgICAgICBpZiAobmV0d29ya1F1YWxpdHkpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UubWVkaWFfc2lnbmFsaW5nLm5ldHdvcmtfcXVhbGl0eSA9IHtcbiAgICAgICAgICAgICAgdHJhbnNwb3J0czogW3sgdHlwZTogJ2RhdGEtY2hhbm5lbCcgfV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkb21pbmFudFNwZWFrZXIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UubWVkaWFfc2lnbmFsaW5nLmFjdGl2ZV9zcGVha2VyID0ge1xuICAgICAgICAgICAgICB0cmFuc3BvcnRzOiBbeyB0eXBlOiAnZGF0YS1jaGFubmVsJyB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2RwRm9ybWF0ID0gdXRpbC5nZXRTZHBGb3JtYXQodHJhbnNwb3J0Ll9zZHBTZW1hbnRpY3MpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2Nvbm5lY3QnICYmIHNkcEZvcm1hdCkge1xuICAgICAgICAgIG1lc3NhZ2UuZm9ybWF0ID0gc2RwRm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uSW5mbzogZnVuY3Rpb24gb25JbmZvKHJlcXVlc3QpIHtcbiAgICAgIHRoaXMuZW1pdCgnaW5mbycsIHJlcXVlc3QpO1xuICAgICAgcmVxdWVzdC5yZXBseSgyMDApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQWRkIHJhbmRvbSBqaXR0ZXIgdG8gYSBnaXZlbiB2YWx1ZSBpbiB0aGUgcmFuZ2UgWy1qaXR0ZXIsIGppdHRlcl0uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaml0dGVyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB2YWx1ZSArIHJhbmRvbSgtaml0dGVyLCAraml0dGVyKVxuICovXG5mdW5jdGlvbiB3aXRoSml0dGVyKHZhbHVlLCBqaXR0ZXIpIHtcbiAgdmFyIHJhbmQgPSBNYXRoLnJhbmRvbSgpO1xuICByZXR1cm4gdmFsdWUgLSBqaXR0ZXIgKyBNYXRoLmZsb29yKDIgKiBqaXR0ZXIgKiByYW5kICsgMC41KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaFdpdGhSZXRyaWVzKHRyYW5zcG9ydCwgc2Vzc2lvbiwgcGF5bG9hZCwgYXR0ZW1wdHMpIHtcbiAgYXR0ZW1wdHMgPSBhdHRlbXB0cyB8fCAwO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIHJlY2VpdmVSZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgc3dpdGNoIChNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1c19jb2RlIC8gMTAwKSkge1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgaWYgKGF0dGVtcHRzIDwgY29uc3RhbnRzLlBVQkxJU0hfTUFYX0FUVEVNUFRTKSB7XG4gICAgICAgICAgICByZXNvbHZlKHB1Ymxpc2hXaXRoUmV0cmllcyh0cmFuc3BvcnQsIHNlc3Npb24sIHBheWxvYWQsICsrYXR0ZW1wdHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVHJhbnNwb3J0IGZhaWxlZCB0byBzZW5kIGEgbWVzc2FnZSBldmVuIGFmdGVyICcgKyBjb25zdGFudHMuUFVCTElTSF9NQVhfQVRURU1QVFMgKyAnIGF0dGVtcHRzJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWplY3QocmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzZW5kUmVxdWVzdCgpIHtcbiAgICAgIGlmICh0cmFuc3BvcnQuc3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlc3Npb24uc2VuZFJlcXVlc3QoJ0lORk8nLCB7XG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICAgICAgICBleHRyYUhlYWRlcnM6IFsnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9yb29tLXNpZ25hbGluZytqc29uJywgJ0V2ZW50OiByb29tLXNpZ25hbGluZycsICdJbmZvLVBhY2thZ2U6IHJvb20tc2lnbmFsaW5nJ10sXG4gICAgICAgIHJlY2VpdmVSZXNwb25zZTogcmVjZWl2ZVJlc3BvbnNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGF0dGVtcHRzID09PSAwKSB7XG4gICAgICBzZW5kUmVxdWVzdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBiYWNrT2ZmTXMgPSAoMSA8PCBhdHRlbXB0cyAtIDEpICogY29uc3RhbnRzLlBVQkxJU0hfQkFDS09GRl9NUztcbiAgICBzZXRUaW1lb3V0KHNlbmRSZXF1ZXN0LCB3aXRoSml0dGVyKGJhY2tPZmZNcywgY29uc3RhbnRzLlBVQkxJU0hfQkFDS09GRl9KSVRURVIpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVBlZXJDb25uZWN0aW9ucyhwZWVyQ29ubmVjdGlvbnMpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20ocGVlckNvbm5lY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAocGVlckNvbm5lY3Rpb25zQnlJZCwgdXBkYXRlKSB7XG4gICAgdmFyIHJlZHVjZWQgPSBwZWVyQ29ubmVjdGlvbnNCeUlkLmdldCh1cGRhdGUuaWQpIHx8IHVwZGF0ZTtcblxuICAgIC8vIEZpcnN0LCByZWR1Y2UgdGhlIHRvcC1sZXZlbCBgZGVzY3JpcHRpb25gIHByb3BlcnR5LlxuICAgIGlmICghcmVkdWNlZC5kZXNjcmlwdGlvbiAmJiB1cGRhdGUuZGVzY3JpcHRpb24pIHtcbiAgICAgIHJlZHVjZWQuZGVzY3JpcHRpb24gPSB1cGRhdGUuZGVzY3JpcHRpb247XG4gICAgfSBlbHNlIGlmIChyZWR1Y2VkLmRlc2NyaXB0aW9uICYmIHVwZGF0ZS5kZXNjcmlwdGlvbikge1xuICAgICAgaWYgKHVwZGF0ZS5kZXNjcmlwdGlvbi5yZXZpc2lvbiA+IHJlZHVjZWQuZGVzY3JpcHRpb24ucmV2aXNpb24pIHtcbiAgICAgICAgcmVkdWNlZC5kZXNjcmlwdGlvbiA9IHVwZGF0ZS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVuLCByZWR1Y2UgdGhlIHRvcC1sZXZlbCBgaWNlYCBwcm9wZXJ0eS5cbiAgICBpZiAoIXJlZHVjZWQuaWNlICYmIHVwZGF0ZS5pY2UpIHtcbiAgICAgIHJlZHVjZWQuaWNlID0gdXBkYXRlLmljZTtcbiAgICB9IGVsc2UgaWYgKHJlZHVjZWQuaWNlICYmIHVwZGF0ZS5pY2UpIHtcbiAgICAgIGlmICh1cGRhdGUuaWNlLnJldmlzaW9uID4gcmVkdWNlZC5pY2UucmV2aXNpb24pIHtcbiAgICAgICAgcmVkdWNlZC5pY2UgPSB1cGRhdGUuaWNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIHVwZGF0ZSB0aGUgbWFwLlxuICAgIHBlZXJDb25uZWN0aW9uc0J5SWQuc2V0KHJlZHVjZWQuaWQsIHJlZHVjZWQpO1xuXG4gICAgcmV0dXJuIHBlZXJDb25uZWN0aW9uc0J5SWQ7XG4gIH0sIG5ldyBNYXAoKSkudmFsdWVzKCkpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVcGRhdGVzKHVwZGF0ZXMpIHtcbiAgcmV0dXJuIHVwZGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChyZWR1Y2VkLCB1cGRhdGUpIHtcbiAgICAvLyBGaXJzdCwgcmVkdWNlIHRoZSB0b3AtbGV2ZWwgYHBhcnRpY2lwYW50YCBwcm9wZXJ0eS5cbiAgICBpZiAoIXJlZHVjZWQucGFydGljaXBhbnQgJiYgdXBkYXRlLnBhcnRpY2lwYW50KSB7XG4gICAgICByZWR1Y2VkLnBhcnRpY2lwYW50ID0gdXBkYXRlLnBhcnRpY2lwYW50O1xuICAgIH0gZWxzZSBpZiAocmVkdWNlZC5wYXJ0aWNpcGFudCAmJiB1cGRhdGUucGFydGljaXBhbnQpIHtcbiAgICAgIGlmICh1cGRhdGUucGFydGljaXBhbnQucmV2aXNpb24gPiByZWR1Y2VkLnBhcnRpY2lwYW50LnJldmlzaW9uKSB7XG4gICAgICAgIHJlZHVjZWQucGFydGljaXBhbnQgPSB1cGRhdGUucGFydGljaXBhbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlbiwgcmVkdWNlIHRoZSB0b3AtbGV2ZWwgYHBlZXJfY29ubmVjdGlvbnNgIHByb3BlcnR5LlxuICAgIC8qIGVzbGludCBjYW1lbGNhc2U6MCAqL1xuICAgIGlmICghcmVkdWNlZC5wZWVyX2Nvbm5lY3Rpb25zICYmIHVwZGF0ZS5wZWVyX2Nvbm5lY3Rpb25zKSB7XG4gICAgICByZWR1Y2VkLnBlZXJfY29ubmVjdGlvbnMgPSByZWR1Y2VQZWVyQ29ubmVjdGlvbnModXBkYXRlLnBlZXJfY29ubmVjdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAocmVkdWNlZC5wZWVyX2Nvbm5lY3Rpb25zICYmIHVwZGF0ZS5wZWVyX2Nvbm5lY3Rpb25zKSB7XG4gICAgICByZWR1Y2VkLnBlZXJfY29ubmVjdGlvbnMgPSByZWR1Y2VQZWVyQ29ubmVjdGlvbnMocmVkdWNlZC5wZWVyX2Nvbm5lY3Rpb25zLmNvbmNhdCh1cGRhdGUucGVlcl9jb25uZWN0aW9ucykpO1xuICAgIH1cblxuICAgIHJldHVybiByZWR1Y2VkO1xuICB9LCB7XG4gICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgdmVyc2lvbjogUlNQX1ZFUlNJT05cbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGJvZHkgb2YgYSBTSVAgaW5jb21pbmcgcmVxdWVzdCBvciByZXNwb25zZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXF1ZXN0T3JSZXNwb25zZVxuICogQHJldHVybnMgez9vYmplY3R9XG4gKiBAdGhyb3dzIHtTaWduYWxpbmdJbmNvbWluZ01lc3NhZ2VJbnZhbGlkRXJyb3J9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlUmVxdWVzdE9yUmVzcG9uc2VCb2R5KHJlcXVlc3RPclJlc3BvbnNlKSB7XG4gIGlmIChyZXF1ZXN0T3JSZXNwb25zZS5ib2R5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3RPclJlc3BvbnNlLmJvZHkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBTaWduYWxpbmdJbmNvbWluZ01lc3NhZ2VJbnZhbGlkRXJyb3IoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogR2V0IGEge0BsaW5rIFR3aWxpb0Vycm9yfSBmb3IgYSBTSVAgaW5jb21pbmcgcmVxdWVzdCBvciByZXNwb25zZSBmcm9tIGl0cyBib2R5LlxuICogQHBhcmFtIHtvYmplY3R9IHJlcXVlc3RPclJlc3BvbnNlXG4gKiBAcmV0dXJucyB7P1R3aWxpb0Vycm9yfVxuICovXG5mdW5jdGlvbiBnZXRUd2lsaW9FcnJvckZyb21SZXF1ZXN0T3JSZXNwb25zZUJvZHkocmVxdWVzdE9yUmVzcG9uc2UpIHtcbiAgdHJ5IHtcbiAgICB2YXIgbWVzc2FnZSA9IHBhcnNlUmVxdWVzdE9yUmVzcG9uc2VCb2R5KHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICBpZiAobWVzc2FnZSkge1xuICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICBpZiAobWVzc2FnZS5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJvb21Db21wbGV0ZWRFcnJvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgIHJldHVybiBjcmVhdGVUd2lsaW9FcnJvcihtZXNzYWdlLmNvZGUsIG1lc3NhZ2UubWVzc2FnZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBhIHtAbGluayBUd2lsaW9FcnJvcn0gZm9yIGEgU0lQIGluY29taW5nIHJlcXVlc3Qgb3IgcmVzcG9uc2UgZnJvbSBpdHMgaGVhZGVycy5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXF1ZXN0T3JSZXNwb25zZVxuICogQHJldHVybnMgez9Ud2lsaW9FcnJvcn1cbiAqL1xuZnVuY3Rpb24gZ2V0VHdpbGlvRXJyb3JGcm9tUmVxdWVzdE9yUmVzcG9uc2VIZWFkZXJzKHJlcXVlc3RPclJlc3BvbnNlKSB7XG4gIHZhciBoZWFkZXJzID0gcmVxdWVzdE9yUmVzcG9uc2UuaGVhZGVycztcbiAgaWYgKGhlYWRlcnMgJiYgaGVhZGVyc1snWC1Ud2lsaW8tRXJyb3InXSkge1xuICAgIHZhciB0d2lsaW9FcnJvckhlYWRlciA9IGhlYWRlcnNbJ1gtVHdpbGlvLUVycm9yJ11bMF0ucmF3LnNwbGl0KCcgJyk7XG4gICAgdmFyIGNvZGUgPSBwYXJzZUludCh0d2lsaW9FcnJvckhlYWRlclswXSwgMTApO1xuICAgIHZhciBtZXNzYWdlID0gdHdpbGlvRXJyb3JIZWFkZXIuc2xpY2UoMSkuam9pbignICcpO1xuICAgIHJldHVybiBjcmVhdGVUd2lsaW9FcnJvcihjb2RlLCBtZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSB7QGxpbmsgVHdpbGlvRXJyb3J9IGZyb20gYSBTSVAgcmVxdWVzdCBvciByZXNwb25zZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXF1ZXN0T3JSZXNwb25zZSAtIFNJUCByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcmV0dXJucyB7P1R3aWxpb0Vycm9yfVxuICovXG5mdW5jdGlvbiBnZXRUd2lsaW9FcnJvckZyb21SZXF1ZXN0T3JSZXNwb25zZShyZXF1ZXN0T3JSZXNwb25zZSkge1xuICByZXR1cm4gZ2V0VHdpbGlvRXJyb3JGcm9tUmVxdWVzdE9yUmVzcG9uc2VIZWFkZXJzKHJlcXVlc3RPclJlc3BvbnNlKSB8fCBnZXRUd2lsaW9FcnJvckZyb21SZXF1ZXN0T3JSZXNwb25zZUJvZHkocmVxdWVzdE9yUmVzcG9uc2UpO1xufVxuXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHRyYW5zcG9ydCwgc2Vzc2lvbiwgdWEpIHtcbiAgZnVuY3Rpb24gZGlzY29ubmVjdChyZXF1ZXN0T3JSZXNwb25zZSwgY2F1c2UpIHtcbiAgICB2YXIgdHdpbGlvRXJyb3IgPSB2b2lkIDA7XG5cbiAgICBpZiAocmVxdWVzdE9yUmVzcG9uc2UgJiYgIShyZXF1ZXN0T3JSZXNwb25zZSBpbnN0YW5jZW9mIFNJUC5PdXRnb2luZ1JlcXVlc3QpKSB7XG4gICAgICB0d2lsaW9FcnJvciA9IGdldFR3aWxpb0Vycm9yRnJvbVJlcXVlc3RPclJlc3BvbnNlKHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBpZiAoIXR3aWxpb0Vycm9yKSB7XG4gICAgICBzd2l0Y2ggKGNhdXNlKSB7XG4gICAgICAgIGNhc2UgU0lQLkMuY2F1c2VzLlJFUVVFU1RfVElNRU9VVDpcbiAgICAgICAgICB0d2lsaW9FcnJvciA9IG5ldyBTaWduYWxpbmdDb25uZWN0aW9uVGltZW91dEVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU0lQLkMuY2F1c2VzLkNPTk5FQ1RJT05fRVJST1I6XG4gICAgICAgICAgdHdpbGlvRXJyb3IgPSBuZXcgU2lnbmFsaW5nQ29ubmVjdGlvbkVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdHdpbGlvRXJyb3IgPSBuZXcgU2lnbmFsaW5nQ29ubmVjdGlvbkRpc2Nvbm5lY3RlZEVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QodHdpbGlvRXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdE9yUmVzcG9uc2UocmVxdWVzdE9yUmVzcG9uc2UpIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGhhbmRsZSByZXF1ZXN0cyB3ZSBzZW50IG91cnNlbHZlcy5cbiAgICBpZiAocmVxdWVzdE9yUmVzcG9uc2UgaW5zdGFuY2VvZiBTSVAuT3V0Z29pbmdSZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGFueSBlcnJvcnMgZmlyc3QuXG4gICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICBlcnJvciA9IGdldFR3aWxpb0Vycm9yRnJvbVJlcXVlc3RPclJlc3BvbnNlKHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFNpZ25hbGluZ0luY29taW5nTWVzc2FnZUludmFsaWRFcnJvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlcnJvciA9IGU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGFuIGVycm9yIG90aGVyIHRoYW4gYSBTaWduYWxpbmdJbmNvbWluZ01lc3NhZ2VJbnZhbGlkRXJyb3IsXG4gICAgLy8gdGhlbiBkaXNjb25uZWN0LlxuICAgIGlmIChlcnJvcikge1xuICAgICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QoZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgdHJ5IHRvIHBhcnNlIHRoZSBSU1AgbWVzc2FnZS5cbiAgICB2YXIgbWVzc2FnZSA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgbWVzc2FnZSA9IHBhcnNlUmVxdWVzdE9yUmVzcG9uc2VCb2R5KHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIC8vIERvIG5vdGhpbmcuXG5cblxuICAgIC8vIElmIHRoZXJlJ3Mgbm8gUlNQIG1lc3NhZ2UgdG8gaGFuZGxlLCBqdXN0IHJldHVybi5cbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRyYW5zcG9ydC5zdGF0ZSkge1xuICAgICAgY2FzZSAnY29ubmVjdGVkJzpcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgIGNhc2UgJ3N5bmNlZCc6XG4gICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgIHRyYW5zcG9ydC5lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICAgIHRyYW5zcG9ydC5kaXNjb25uZWN0KG1lc3NhZ2Uuc3RhdHVzID09PSAnY29tcGxldGVkJyA/IG5ldyBSb29tQ29tcGxldGVkRXJyb3IoKSA6IG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBjYXNlICdjb25uZWN0aW5nJzpcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgICAgdHJhbnNwb3J0LmVtaXQoJ2Nvbm5lY3RlZCcsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnByZWVtcHQoJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNhc2UgJ3N5bmNlZCc6XG4gICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgIHRyYW5zcG9ydC5fdXBkYXRlc1JlY2VpdmVkLnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICAgIHRyYW5zcG9ydC5kaXNjb25uZWN0KG1lc3NhZ2Uuc3RhdHVzID09PSAnY29tcGxldGVkJyA/IG5ldyBSb29tQ29tcGxldGVkRXJyb3IoKSA6IG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBjYXNlICdkaXNjb25uZWN0ZWQnOlxuICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlICdzeW5jaW5nJzpcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICB0cmFuc3BvcnQuX3VwZGF0ZXNSZWNlaXZlZC5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNhc2UgJ3N5bmNlZCc6XG4gICAgICAgICAgICB0cmFuc3BvcnQuZW1pdCgnbWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnByZWVtcHQoJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICB0cmFuc3BvcnQuZGlzY29ubmVjdChtZXNzYWdlLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgPyBuZXcgUm9vbUNvbXBsZXRlZEVycm9yKCkgOiBudWxsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gRG8gbm90aGluZy5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gSW1wb3NzaWJsZVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgc2Vzc2lvbi5vbignaW5mbycsIGhhbmRsZVJlcXVlc3RPclJlc3BvbnNlKTtcbiAgc2Vzc2lvbi5vbmNlKCdieWUnLCBkaXNjb25uZWN0KTtcblxuICBzZXNzaW9uLm9uY2UoJ2FjY2VwdGVkJywgaGFuZGxlUmVxdWVzdE9yUmVzcG9uc2UpO1xuICBzZXNzaW9uLm9uY2UoJ2ZhaWxlZCcsIGRpc2Nvbm5lY3QpO1xuXG4gIHRyYW5zcG9ydC5vbignc3RhdGVDaGFuZ2VkJywgZnVuY3Rpb24gc3RhdGVDaGFuZ2VkKHN0YXRlKSB7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSAnY29ubmVjdGVkJzpcbiAgICAgICAge1xuICAgICAgICAgIHNlc3Npb24ucmVtb3ZlTGlzdGVuZXIoJ2FjY2VwdGVkJywgaGFuZGxlUmVxdWVzdE9yUmVzcG9uc2UpO1xuICAgICAgICAgIHNlc3Npb24ucmVtb3ZlTGlzdGVuZXIoJ2ZhaWxlZCcsIGRpc2Nvbm5lY3QpO1xuXG4gICAgICAgICAgdmFyIHVwZGF0ZXMgPSB0cmFuc3BvcnQuX3VwZGF0ZXNUb1NlbmQuc3BsaWNlKDApO1xuICAgICAgICAgIGlmICh1cGRhdGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdHJhbnNwb3J0LnB1Ymxpc2gocmVkdWNlVXBkYXRlcyh1cGRhdGVzKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJhbnNwb3J0Ll91cGRhdGVzUmVjZWl2ZWQuc3BsaWNlKDApLmZvckVhY2godHJhbnNwb3J0LmVtaXQuYmluZCh0cmFuc3BvcnQsICdtZXNzYWdlJykpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBjYXNlICdkaXNjb25uZWN0ZWQnOlxuICAgICAgICBzZXNzaW9uLnJlbW92ZUxpc3RlbmVyKCdhY2NlcHRlZCcsIGhhbmRsZVJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICAgICAgc2Vzc2lvbi5yZW1vdmVMaXN0ZW5lcignZmFpbGVkJywgZGlzY29ubmVjdCk7XG4gICAgICAgIHNlc3Npb24ucmVtb3ZlTGlzdGVuZXIoJ2luZm8nLCBoYW5kbGVSZXF1ZXN0T3JSZXNwb25zZSk7XG4gICAgICAgIHNlc3Npb24ucmVtb3ZlTGlzdGVuZXIoJ2J5ZScsIGRpc2Nvbm5lY3QpO1xuICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ3N0YXRlQ2hhbmdlZCcsIHN0YXRlQ2hhbmdlZCk7XG4gICAgICAgIHVhLnN0b3AoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAnc3luY2luZyc6XG4gICAgICAgIC8vIERvIG5vdGhpbmcuXG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIEltcG9zc2libGVcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSk7XG5cbiAgdWEub25jZSgnZGlzY29ubmVjdGVkJywgZGlzY29ubmVjdCk7XG4gIHVhLm9uY2UoJ2tlZXBBbGl2ZVRpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRyYW5zcG9ydC5kaXNjb25uZWN0KG5ldyBTaWduYWxpbmdDb25uZWN0aW9uVGltZW91dEVycm9yKCkpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvdHJhbnNwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///338\n");

/***/ }),
/* 339 */
/*!***********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/insightspublisher/index.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\nvar _require = __webpack_require__(/*! .. */ 206),\n    getUserAgent = _require.getUserAgent;\n\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\n\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : __webpack_require__(/*! ws */ 259);\n\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\n\nvar InsightsPublisher = function (_EventEmitter) {\n  _inherits(InsightsPublisher, _EventEmitter);\n\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n  function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n    _classCallCheck(this, InsightsPublisher);\n\n    var _this = _possibleConstructorReturn(this, (InsightsPublisher.__proto__ || Object.getPrototypeOf(InsightsPublisher)).call(this));\n\n    options = Object.assign({\n      gateway: createGateway(environment, realm) + '/v1/VideoEvents',\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket: WebSocket\n    }, options);\n\n    Object.defineProperties(_this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    var self = _this;\n\n    _this.on('disconnected', function maybeReconnect(error) {\n      self._session = null;\n      if (error && self._reconnectAttemptsLeft > 0) {\n        self.emit('reconnecting');\n        reconnect(self, token, sdkName, sdkVersion, options);\n        return;\n      }\n      self.removeListener('disconnected', maybeReconnect);\n    });\n\n    connect(_this, token, sdkName, sdkVersion, options);\n    return _this;\n  }\n\n  /**\n   * Publish an event to the Insights gateway.\n   * @private\n   * @param {*} event\n   */\n\n\n  _createClass(InsightsPublisher, [{\n    key: '_publish',\n    value: function _publish(event) {\n      event.session = this._session;\n      this._ws.send(JSON.stringify(event));\n    }\n\n    /**\n     * Disconnect from the Insights gateway.\n     * @returns {boolean} true if called when connecting/open, false if not\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      if (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n        return false;\n      }\n\n      try {\n        this._ws.close();\n      } catch (error) {\n        // Do nothing.\n      }\n      this.emit('disconnected');\n\n      return true;\n    }\n\n    /**\n     * Publish (or queue, if not connected) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnect() called\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(groupName, eventName, payload) {\n      if (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n        return false;\n      }\n\n      var publishOrEnqueue = typeof this._session === 'string' ? this._publish.bind(this) : this._eventQueue.push.bind(this._eventQueue);\n\n      publishOrEnqueue({\n        group: groupName,\n        name: eventName,\n        payload: payload,\n        timestamp: Date.now(),\n        type: 'event',\n        version: 1\n      });\n\n      return true;\n    }\n  }]);\n\n  return InsightsPublisher;\n}(EventEmitter);\n\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction connect(publisher, token, sdkName, sdkVersion, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  var ws = publisher._ws;\n\n  ws.addEventListener('close', function (event) {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n    publisher.emit('disconnected', new Error('WebSocket Error ' + event.code + ': ' + event.reason));\n  });\n\n  ws.addEventListener('message', function (message) {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n\n  ws.addEventListener('open', function () {\n    var connectRequest = {\n      type: 'connect',\n      token: token,\n      version: 1\n    };\n\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion: sdkVersion,\n      userAgent: options.userAgent\n    };\n\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? 'wss://sdkgw.' + realm + '.twilio.com' : 'wss://sdkgw.' + environment + '-' + realm + '.twilio.com';\n}\n\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n      publisher.emit('connected');\n      break;\n    case 'error':\n      publisher._ws.close();\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {InsightsPublisherOptions} options\n */\nfunction reconnect(publisher, token, sdkName, sdkVersion, options) {\n  var connectInterval = Date.now() - publisher._connectTimestamp;\n  var timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(function () {\n      connect(publisher, token, sdkName, sdkVersion, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, options);\n}\n\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\nmodule.exports = InsightsPublisher;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ 141)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///339\n");

/***/ }),
/* 340 */
/*!**********************************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/insightspublisher/null.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// TODO(mroberts): This should be described as implementing some\n// InsightsPublisher interface.\n\n\n/**\n * Null Insights publisher.\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar InsightsPublisher = function () {\n  function InsightsPublisher() {\n    _classCallCheck(this, InsightsPublisher);\n\n    Object.defineProperties(this, {\n      _connected: {\n        writable: true,\n        value: true\n      }\n    });\n  }\n\n  /**\n   * Disconnect.\n   * @returns {boolean}\n   */\n\n\n  _createClass(InsightsPublisher, [{\n    key: 'disconnect',\n    value: function disconnect() {\n      if (this._connected) {\n        this._connected = false;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Publish.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish() {\n      return this._connected;\n    }\n  }]);\n\n  return InsightsPublisher;\n}();\n\nmodule.exports = InsightsPublisher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL2luc2lnaHRzcHVibGlzaGVyL251bGwuanM/ZmMzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ2E7O0FBRWI7QUFDQTtBQUNBOztBQUVBLGdDQUFnQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUU7O0FBRWpqQixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIzNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPKG1yb2JlcnRzKTogVGhpcyBzaG91bGQgYmUgZGVzY3JpYmVkIGFzIGltcGxlbWVudGluZyBzb21lXG4vLyBJbnNpZ2h0c1B1Ymxpc2hlciBpbnRlcmZhY2UuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTnVsbCBJbnNpZ2h0cyBwdWJsaXNoZXIuXG4gKi9cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEluc2lnaHRzUHVibGlzaGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbnNpZ2h0c1B1Ymxpc2hlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5zaWdodHNQdWJsaXNoZXIpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgX2Nvbm5lY3RlZDoge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoSW5zaWdodHNQdWJsaXNoZXIsIFt7XG4gICAga2V5OiAnZGlzY29ubmVjdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwdWJsaXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVibGlzaCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEluc2lnaHRzUHVibGlzaGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluc2lnaHRzUHVibGlzaGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3R3aWxpby12aWRlby9lczUvdXRpbC9pbnNpZ2h0c3B1Ymxpc2hlci9udWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///340\n");

/***/ }),
/* 341 */
/*!******************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Transport.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview Transport\n */\n\n/**\n * @augments SIP\n * @class Transport\n * @param {SIP.UA} ua\n * @param {Object} server ws_server Object\n */\nmodule.exports = function (SIP, WebSocket) {\nvar Transport,\n  C = {\n    // Transport status codes\n    STATUS_READY:        0,\n    STATUS_DISCONNECTED: 1,\n    STATUS_ERROR:        2\n  };\n\n/**\n * Compute an amount of time in seconds to wait before sending another\n * keep-alive.\n * @returns {Number}\n */\nfunction computeKeepAliveTimeout(upperBound) {\n  var lowerBound = upperBound * 0.8;\n  return 1000 * (Math.random() * (upperBound - lowerBound) + lowerBound);\n}\n\nTransport = function(ua, server) {\n\n  this.logger = ua.getLogger('sip.transport');\n  this.ua = ua;\n  this.ws = null;\n  this.server = server;\n  this.reconnection_attempts = 0;\n  this.closed = false;\n  this.connected = false;\n  this.reconnectTimer = null;\n  this.lastTransportError = {};\n\n  this.keepAliveInterval = ua.configuration.keepAliveInterval;\n  this.keepAliveTimeout = null;\n  this.keepAliveTimer = null;\n\n  this.ua.transport = this;\n\n  // Connect\n  this.connect();\n};\n\nTransport.prototype = {\n  /**\n   * Send a message.\n   * @param {SIP.OutgoingRequest|String} msg\n   * @returns {Boolean}\n   */\n  send: function(msg) {\n    var message = msg.toString();\n\n    if(this.ws && this.ws.readyState === WebSocket.OPEN) {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('sending WebSocket message:\\n\\n' + message + '\\n');\n      }\n      this.ws.send(message);\n      return true;\n    } else {\n      this.logger.warn('unable to send message, WebSocket is not open');\n      return false;\n    }\n  },\n\n  /**\n   * Send a keep-alive (a double-CRLF sequence).\n   * @private\n   * @returns {Boolean}\n   */\n  sendKeepAlive: function() {\n    if(this.keepAliveTimeout) { return; }\n\n    this.keepAliveTimeout = SIP.Timers.setTimeout(function() {\n      this.ua.emit('keepAliveTimeout');\n    }.bind(this), 10000);\n\n    return this.send('\\r\\n\\r\\n');\n  },\n\n  /**\n   * Start sending keep-alives.\n   * @private\n   */\n  startSendingKeepAlives: function() {\n    if (this.keepAliveInterval && !this.keepAliveTimer) {\n      this.keepAliveTimer = SIP.Timers.setTimeout(function() {\n        this.sendKeepAlive();\n        this.keepAliveTimer = null;\n        this.startSendingKeepAlives();\n      }.bind(this), computeKeepAliveTimeout(this.keepAliveInterval));\n    }\n  },\n\n  /**\n   * Stop sending keep-alives.\n   * @private\n   */\n  stopSendingKeepAlives: function() {\n    SIP.Timers.clearTimeout(this.keepAliveTimer);\n    SIP.Timers.clearTimeout(this.keepAliveTimeout);\n    this.keepAliveTimer = null;\n    this.keepAliveTimeout = null;\n  },\n\n  /**\n  * Disconnect socket.\n  */\n  disconnect: function() {\n    if(this.ws) {\n      // Clear reconnectTimer\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n\n      this.stopSendingKeepAlives();\n\n      this.closed = true;\n      this.logger.log('closing WebSocket ' + this.server.ws_uri);\n      this.ws.close();\n    }\n\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n      this.ua.emit('disconnected', {\n        transport: this,\n        code: this.lastTransportError.code,\n        reason: this.lastTransportError.reason\n      });\n    }\n  },\n\n  /**\n  * Connect socket.\n  */\n  connect: function() {\n    var transport = this;\n\n    if(this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      this.logger.log('WebSocket ' + this.server.ws_uri + ' is already connected');\n      return false;\n    }\n\n    if(this.ws) {\n      this.ws.close();\n    }\n\n    this.logger.log('connecting to WebSocket ' + this.server.ws_uri);\n    this.ua.onTransportConnecting(this,\n      (this.reconnection_attempts === 0)?1:this.reconnection_attempts);\n\n    try {\n      this.ws = new WebSocket(this.server.ws_uri, 'sip');\n    } catch(e) {\n      this.logger.warn('error connecting to WebSocket ' + this.server.ws_uri + ': ' + e);\n    }\n\n    this.ws.binaryType = 'arraybuffer';\n\n    this.ws.onopen = function() {\n      transport.onOpen();\n    };\n\n    this.ws.onclose = function(e) {\n      transport.onClose(e);\n    };\n\n    this.ws.onmessage = function(e) {\n      transport.onMessage(e);\n    };\n\n    this.ws.onerror = function(e) {\n      transport.onError(e);\n    };\n  },\n\n  // Transport Event Handlers\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onOpen: function() {\n    this.connected = true;\n\n    this.logger.log('WebSocket ' + this.server.ws_uri + ' connected');\n    // Clear reconnectTimer since we are not disconnected\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    // Reset reconnection_attempts\n    this.reconnection_attempts = 0;\n    // Disable closed\n    this.closed = false;\n    // Trigger onTransportConnected callback\n    this.ua.onTransportConnected(this);\n    // Start sending keep-alives\n    this.startSendingKeepAlives();\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onClose: function(e) {\n    var connected_before = this.connected;\n\n    this.lastTransportError.code = e.code;\n    this.lastTransportError.reason = e.reason;\n\n    this.stopSendingKeepAlives();\n\n    if (this.reconnection_attempts > 0) {\n      this.logger.log('Reconnection attempt ' + this.reconnection_attempts + ' failed (code: ' + e.code + (e.reason? '| reason: ' + e.reason : '') +')');\n      this.reconnect();\n    } else {\n      this.connected = false;\n      this.logger.log('WebSocket disconnected (code: ' + e.code + (e.reason? '| reason: ' + e.reason : '') +')');\n\n      if(e.wasClean === false) {\n        this.logger.warn('WebSocket abrupt disconnection');\n      }\n      // Transport was connected\n      if(connected_before === true) {\n        this.ua.onTransportClosed(this);\n        // Check whether the user requested to close.\n        if(!this.closed) {\n          this.reconnect();\n        } else {\n          this.ua.emit('disconnected', {\n            transport: this,\n            code: this.lastTransportError.code,\n            reason: this.lastTransportError.reason\n          });\n\n        }\n      } else {\n        // This is the first connection attempt\n        //Network error\n        this.ua.onTransportError(this);\n      }\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onMessage: function(e) {\n    var message, transaction,\n      data = e.data;\n\n    // CRLF Keep Alive response from server. Ignore it.\n    if(data === '\\r\\n') {\n      SIP.Timers.clearTimeout(this.keepAliveTimeout);\n      this.keepAliveTimeout = null;\n\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket message with CRLF Keep Alive response');\n      }\n\n      return;\n    }\n\n    // WebSocket binary message.\n    else if (typeof data !== 'string') {\n      try {\n        data = String.fromCharCode.apply(null, new Uint8Array(data));\n      } catch(evt) {\n        this.logger.warn('received WebSocket binary message failed to be converted into string, message discarded');\n        return;\n      }\n\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket binary message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    // WebSocket text message.\n    else {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket text message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    message = SIP.Parser.parseMessage(data, this.ua);\n\n    if (!message) {\n      return;\n    }\n\n    if(this.ua.status === SIP.UA.C.STATUS_USER_CLOSED && message instanceof SIP.IncomingRequest) {\n      return;\n    }\n\n    // Do some sanity check\n    if(SIP.sanityCheck(message, this.ua, this)) {\n      if(message instanceof SIP.IncomingRequest) {\n        message.transport = this;\n        this.ua.receiveRequest(message);\n      } else if(message instanceof SIP.IncomingResponse) {\n        /* Unike stated in 18.1.2, if a response does not match\n        * any transaction, it is discarded here and no passed to the core\n        * in order to be discarded there.\n        */\n        switch(message.method) {\n          case SIP.C.INVITE:\n            transaction = this.ua.transactions.ict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n          case SIP.C.ACK:\n            // Just in case ;-)\n            break;\n          default:\n            transaction = this.ua.transactions.nict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n        }\n      }\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onError: function(e) {\n    this.logger.warn('WebSocket connection error: ' + JSON.stringify(e));\n  },\n\n  /**\n  * Reconnection attempt logic.\n  * @private\n  */\n  reconnect: function() {\n    var transport = this;\n\n    this.reconnection_attempts += 1;\n\n    if(this.reconnection_attempts > this.ua.configuration.wsServerMaxReconnection) {\n      this.logger.warn('maximum reconnection attempts for WebSocket ' + this.server.ws_uri);\n      this.ua.onTransportError(this);\n    } else if (this.reconnection_attempts === 1) {\n      this.logger.log('Connection to WebSocket ' + this.server.ws_uri + ' severed, attempting first reconnect');\n      transport.connect();\n    } else {\n      this.logger.log('trying to reconnect to WebSocket ' + this.server.ws_uri + ' (reconnection attempt ' + this.reconnection_attempts + ')');\n\n      this.reconnectTimer = SIP.Timers.setTimeout(function() {\n        transport.connect();\n        transport.reconnectTimer = null;\n      }, this.ua.configuration.wsServerReconnectionTimeout * 1000);\n    }\n  }\n};\n\nTransport.C = C;\nreturn Transport;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1RyYW5zcG9ydC5qcz84ZWFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTs7QUFFdkM7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjM0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRyYW5zcG9ydFxuICovXG5cbi8qKlxuICogQGF1Z21lbnRzIFNJUFxuICogQGNsYXNzIFRyYW5zcG9ydFxuICogQHBhcmFtIHtTSVAuVUF9IHVhXG4gKiBAcGFyYW0ge09iamVjdH0gc2VydmVyIHdzX3NlcnZlciBPYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoU0lQLCBXZWJTb2NrZXQpIHtcbnZhciBUcmFuc3BvcnQsXG4gIEMgPSB7XG4gICAgLy8gVHJhbnNwb3J0IHN0YXR1cyBjb2Rlc1xuICAgIFNUQVRVU19SRUFEWTogICAgICAgIDAsXG4gICAgU1RBVFVTX0RJU0NPTk5FQ1RFRDogMSxcbiAgICBTVEFUVVNfRVJST1I6ICAgICAgICAyXG4gIH07XG5cbi8qKlxuICogQ29tcHV0ZSBhbiBhbW91bnQgb2YgdGltZSBpbiBzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNlbmRpbmcgYW5vdGhlclxuICoga2VlcC1hbGl2ZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVLZWVwQWxpdmVUaW1lb3V0KHVwcGVyQm91bmQpIHtcbiAgdmFyIGxvd2VyQm91bmQgPSB1cHBlckJvdW5kICogMC44O1xuICByZXR1cm4gMTAwMCAqIChNYXRoLnJhbmRvbSgpICogKHVwcGVyQm91bmQgLSBsb3dlckJvdW5kKSArIGxvd2VyQm91bmQpO1xufVxuXG5UcmFuc3BvcnQgPSBmdW5jdGlvbih1YSwgc2VydmVyKSB7XG5cbiAgdGhpcy5sb2dnZXIgPSB1YS5nZXRMb2dnZXIoJ3NpcC50cmFuc3BvcnQnKTtcbiAgdGhpcy51YSA9IHVhO1xuICB0aGlzLndzID0gbnVsbDtcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMucmVjb25uZWN0aW9uX2F0dGVtcHRzID0gMDtcbiAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IG51bGw7XG4gIHRoaXMubGFzdFRyYW5zcG9ydEVycm9yID0ge307XG5cbiAgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbCA9IHVhLmNvbmZpZ3VyYXRpb24ua2VlcEFsaXZlSW50ZXJ2YWw7XG4gIHRoaXMua2VlcEFsaXZlVGltZW91dCA9IG51bGw7XG4gIHRoaXMua2VlcEFsaXZlVGltZXIgPSBudWxsO1xuXG4gIHRoaXMudWEudHJhbnNwb3J0ID0gdGhpcztcblxuICAvLyBDb25uZWN0XG4gIHRoaXMuY29ubmVjdCgpO1xufTtcblxuVHJhbnNwb3J0LnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFNlbmQgYSBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge1NJUC5PdXRnb2luZ1JlcXVlc3R8U3RyaW5nfSBtc2dcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBzZW5kOiBmdW5jdGlvbihtc2cpIHtcbiAgICB2YXIgbWVzc2FnZSA9IG1zZy50b1N0cmluZygpO1xuXG4gICAgaWYodGhpcy53cyAmJiB0aGlzLndzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICBpZiAodGhpcy51YS5jb25maWd1cmF0aW9uLnRyYWNlU2lwID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygnc2VuZGluZyBXZWJTb2NrZXQgbWVzc2FnZTpcXG5cXG4nICsgbWVzc2FnZSArICdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMud3Muc2VuZChtZXNzYWdlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCd1bmFibGUgdG8gc2VuZCBtZXNzYWdlLCBXZWJTb2NrZXQgaXMgbm90IG9wZW4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNlbmQgYSBrZWVwLWFsaXZlIChhIGRvdWJsZS1DUkxGIHNlcXVlbmNlKS5cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBzZW5kS2VlcEFsaXZlOiBmdW5jdGlvbigpIHtcbiAgICBpZih0aGlzLmtlZXBBbGl2ZVRpbWVvdXQpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLmtlZXBBbGl2ZVRpbWVvdXQgPSBTSVAuVGltZXJzLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnVhLmVtaXQoJ2tlZXBBbGl2ZVRpbWVvdXQnKTtcbiAgICB9LmJpbmQodGhpcyksIDEwMDAwKTtcblxuICAgIHJldHVybiB0aGlzLnNlbmQoJ1xcclxcblxcclxcbicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTdGFydCBzZW5kaW5nIGtlZXAtYWxpdmVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhcnRTZW5kaW5nS2VlcEFsaXZlczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMua2VlcEFsaXZlSW50ZXJ2YWwgJiYgIXRoaXMua2VlcEFsaXZlVGltZXIpIHtcbiAgICAgIHRoaXMua2VlcEFsaXZlVGltZXIgPSBTSVAuVGltZXJzLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2VuZEtlZXBBbGl2ZSgpO1xuICAgICAgICB0aGlzLmtlZXBBbGl2ZVRpbWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFydFNlbmRpbmdLZWVwQWxpdmVzKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGNvbXB1dGVLZWVwQWxpdmVUaW1lb3V0KHRoaXMua2VlcEFsaXZlSW50ZXJ2YWwpKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFN0b3Agc2VuZGluZyBrZWVwLWFsaXZlcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0b3BTZW5kaW5nS2VlcEFsaXZlczogZnVuY3Rpb24oKSB7XG4gICAgU0lQLlRpbWVycy5jbGVhclRpbWVvdXQodGhpcy5rZWVwQWxpdmVUaW1lcik7XG4gICAgU0lQLlRpbWVycy5jbGVhclRpbWVvdXQodGhpcy5rZWVwQWxpdmVUaW1lb3V0KTtcbiAgICB0aGlzLmtlZXBBbGl2ZVRpbWVyID0gbnVsbDtcbiAgICB0aGlzLmtlZXBBbGl2ZVRpbWVvdXQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAqIERpc2Nvbm5lY3Qgc29ja2V0LlxuICAqL1xuICBkaXNjb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICBpZih0aGlzLndzKSB7XG4gICAgICAvLyBDbGVhciByZWNvbm5lY3RUaW1lclxuICAgICAgU0lQLlRpbWVycy5jbGVhclRpbWVvdXQodGhpcy5yZWNvbm5lY3RUaW1lcik7XG5cbiAgICAgIHRoaXMuc3RvcFNlbmRpbmdLZWVwQWxpdmVzKCk7XG5cbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnY2xvc2luZyBXZWJTb2NrZXQgJyArIHRoaXMuc2VydmVyLndzX3VyaSk7XG4gICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVjb25uZWN0VGltZXIgIT09IG51bGwpIHtcbiAgICAgIFNJUC5UaW1lcnMuY2xlYXJUaW1lb3V0KHRoaXMucmVjb25uZWN0VGltZXIpO1xuICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IG51bGw7XG4gICAgICB0aGlzLnVhLmVtaXQoJ2Rpc2Nvbm5lY3RlZCcsIHtcbiAgICAgICAgdHJhbnNwb3J0OiB0aGlzLFxuICAgICAgICBjb2RlOiB0aGlzLmxhc3RUcmFuc3BvcnRFcnJvci5jb2RlLFxuICAgICAgICByZWFzb246IHRoaXMubGFzdFRyYW5zcG9ydEVycm9yLnJlYXNvblxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAqIENvbm5lY3Qgc29ja2V0LlxuICAqL1xuICBjb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJhbnNwb3J0ID0gdGhpcztcblxuICAgIGlmKHRoaXMud3MgJiYgKHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4gfHwgdGhpcy53cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnV2ViU29ja2V0ICcgKyB0aGlzLnNlcnZlci53c191cmkgKyAnIGlzIGFscmVhZHkgY29ubmVjdGVkJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYodGhpcy53cykge1xuICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLmxvZygnY29ubmVjdGluZyB0byBXZWJTb2NrZXQgJyArIHRoaXMuc2VydmVyLndzX3VyaSk7XG4gICAgdGhpcy51YS5vblRyYW5zcG9ydENvbm5lY3RpbmcodGhpcyxcbiAgICAgICh0aGlzLnJlY29ubmVjdGlvbl9hdHRlbXB0cyA9PT0gMCk/MTp0aGlzLnJlY29ubmVjdGlvbl9hdHRlbXB0cyk7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQodGhpcy5zZXJ2ZXIud3NfdXJpLCAnc2lwJyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdlcnJvciBjb25uZWN0aW5nIHRvIFdlYlNvY2tldCAnICsgdGhpcy5zZXJ2ZXIud3NfdXJpICsgJzogJyArIGUpO1xuICAgIH1cblxuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG5cbiAgICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdHJhbnNwb3J0Lm9uT3BlbigpO1xuICAgIH07XG5cbiAgICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICB0cmFuc3BvcnQub25DbG9zZShlKTtcbiAgICB9O1xuXG4gICAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICB0cmFuc3BvcnQub25NZXNzYWdlKGUpO1xuICAgIH07XG5cbiAgICB0aGlzLndzLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICB0cmFuc3BvcnQub25FcnJvcihlKTtcbiAgICB9O1xuICB9LFxuXG4gIC8vIFRyYW5zcG9ydCBFdmVudCBIYW5kbGVyc1xuXG4gIC8qKlxuICAqIEBldmVudFxuICAqIEBwYXJhbSB7ZXZlbnR9IGVcbiAgKi9cbiAgb25PcGVuOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICB0aGlzLmxvZ2dlci5sb2coJ1dlYlNvY2tldCAnICsgdGhpcy5zZXJ2ZXIud3NfdXJpICsgJyBjb25uZWN0ZWQnKTtcbiAgICAvLyBDbGVhciByZWNvbm5lY3RUaW1lciBzaW5jZSB3ZSBhcmUgbm90IGRpc2Nvbm5lY3RlZFxuICAgIGlmICh0aGlzLnJlY29ubmVjdFRpbWVyICE9PSBudWxsKSB7XG4gICAgICBTSVAuVGltZXJzLmNsZWFyVGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVyKTtcbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBudWxsO1xuICAgIH1cbiAgICAvLyBSZXNldCByZWNvbm5lY3Rpb25fYXR0ZW1wdHNcbiAgICB0aGlzLnJlY29ubmVjdGlvbl9hdHRlbXB0cyA9IDA7XG4gICAgLy8gRGlzYWJsZSBjbG9zZWRcbiAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgIC8vIFRyaWdnZXIgb25UcmFuc3BvcnRDb25uZWN0ZWQgY2FsbGJhY2tcbiAgICB0aGlzLnVhLm9uVHJhbnNwb3J0Q29ubmVjdGVkKHRoaXMpO1xuICAgIC8vIFN0YXJ0IHNlbmRpbmcga2VlcC1hbGl2ZXNcbiAgICB0aGlzLnN0YXJ0U2VuZGluZ0tlZXBBbGl2ZXMoKTtcbiAgfSxcblxuICAvKipcbiAgKiBAZXZlbnRcbiAgKiBAcGFyYW0ge2V2ZW50fSBlXG4gICovXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgY29ubmVjdGVkX2JlZm9yZSA9IHRoaXMuY29ubmVjdGVkO1xuXG4gICAgdGhpcy5sYXN0VHJhbnNwb3J0RXJyb3IuY29kZSA9IGUuY29kZTtcbiAgICB0aGlzLmxhc3RUcmFuc3BvcnRFcnJvci5yZWFzb24gPSBlLnJlYXNvbjtcblxuICAgIHRoaXMuc3RvcFNlbmRpbmdLZWVwQWxpdmVzKCk7XG5cbiAgICBpZiAodGhpcy5yZWNvbm5lY3Rpb25fYXR0ZW1wdHMgPiAwKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coJ1JlY29ubmVjdGlvbiBhdHRlbXB0ICcgKyB0aGlzLnJlY29ubmVjdGlvbl9hdHRlbXB0cyArICcgZmFpbGVkIChjb2RlOiAnICsgZS5jb2RlICsgKGUucmVhc29uPyAnfCByZWFzb246ICcgKyBlLnJlYXNvbiA6ICcnKSArJyknKTtcbiAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coJ1dlYlNvY2tldCBkaXNjb25uZWN0ZWQgKGNvZGU6ICcgKyBlLmNvZGUgKyAoZS5yZWFzb24/ICd8IHJlYXNvbjogJyArIGUucmVhc29uIDogJycpICsnKScpO1xuXG4gICAgICBpZihlLndhc0NsZWFuID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdXZWJTb2NrZXQgYWJydXB0IGRpc2Nvbm5lY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIC8vIFRyYW5zcG9ydCB3YXMgY29ubmVjdGVkXG4gICAgICBpZihjb25uZWN0ZWRfYmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMudWEub25UcmFuc3BvcnRDbG9zZWQodGhpcyk7XG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIHVzZXIgcmVxdWVzdGVkIHRvIGNsb3NlLlxuICAgICAgICBpZighdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudWEuZW1pdCgnZGlzY29ubmVjdGVkJywge1xuICAgICAgICAgICAgdHJhbnNwb3J0OiB0aGlzLFxuICAgICAgICAgICAgY29kZTogdGhpcy5sYXN0VHJhbnNwb3J0RXJyb3IuY29kZSxcbiAgICAgICAgICAgIHJlYXNvbjogdGhpcy5sYXN0VHJhbnNwb3J0RXJyb3IucmVhc29uXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgY29ubmVjdGlvbiBhdHRlbXB0XG4gICAgICAgIC8vTmV0d29yayBlcnJvclxuICAgICAgICB0aGlzLnVhLm9uVHJhbnNwb3J0RXJyb3IodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAqIEBldmVudFxuICAqIEBwYXJhbSB7ZXZlbnR9IGVcbiAgKi9cbiAgb25NZXNzYWdlOiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG1lc3NhZ2UsIHRyYW5zYWN0aW9uLFxuICAgICAgZGF0YSA9IGUuZGF0YTtcblxuICAgIC8vIENSTEYgS2VlcCBBbGl2ZSByZXNwb25zZSBmcm9tIHNlcnZlci4gSWdub3JlIGl0LlxuICAgIGlmKGRhdGEgPT09ICdcXHJcXG4nKSB7XG4gICAgICBTSVAuVGltZXJzLmNsZWFyVGltZW91dCh0aGlzLmtlZXBBbGl2ZVRpbWVvdXQpO1xuICAgICAgdGhpcy5rZWVwQWxpdmVUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMudWEuY29uZmlndXJhdGlvbi50cmFjZVNpcCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ3JlY2VpdmVkIFdlYlNvY2tldCBtZXNzYWdlIHdpdGggQ1JMRiBLZWVwIEFsaXZlIHJlc3BvbnNlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZWJTb2NrZXQgYmluYXJ5IG1lc3NhZ2UuXG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICB9IGNhdGNoKGV2dCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdyZWNlaXZlZCBXZWJTb2NrZXQgYmluYXJ5IG1lc3NhZ2UgZmFpbGVkIHRvIGJlIGNvbnZlcnRlZCBpbnRvIHN0cmluZywgbWVzc2FnZSBkaXNjYXJkZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy51YS5jb25maWd1cmF0aW9uLnRyYWNlU2lwID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygncmVjZWl2ZWQgV2ViU29ja2V0IGJpbmFyeSBtZXNzYWdlOlxcblxcbicgKyBkYXRhICsgJ1xcbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdlYlNvY2tldCB0ZXh0IG1lc3NhZ2UuXG4gICAgZWxzZSB7XG4gICAgICBpZiAodGhpcy51YS5jb25maWd1cmF0aW9uLnRyYWNlU2lwID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygncmVjZWl2ZWQgV2ViU29ja2V0IHRleHQgbWVzc2FnZTpcXG5cXG4nICsgZGF0YSArICdcXG4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZXNzYWdlID0gU0lQLlBhcnNlci5wYXJzZU1lc3NhZ2UoZGF0YSwgdGhpcy51YSk7XG5cbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZih0aGlzLnVhLnN0YXR1cyA9PT0gU0lQLlVBLkMuU1RBVFVTX1VTRVJfQ0xPU0VEICYmIG1lc3NhZ2UgaW5zdGFuY2VvZiBTSVAuSW5jb21pbmdSZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG8gc29tZSBzYW5pdHkgY2hlY2tcbiAgICBpZihTSVAuc2FuaXR5Q2hlY2sobWVzc2FnZSwgdGhpcy51YSwgdGhpcykpIHtcbiAgICAgIGlmKG1lc3NhZ2UgaW5zdGFuY2VvZiBTSVAuSW5jb21pbmdSZXF1ZXN0KSB7XG4gICAgICAgIG1lc3NhZ2UudHJhbnNwb3J0ID0gdGhpcztcbiAgICAgICAgdGhpcy51YS5yZWNlaXZlUmVxdWVzdChtZXNzYWdlKTtcbiAgICAgIH0gZWxzZSBpZihtZXNzYWdlIGluc3RhbmNlb2YgU0lQLkluY29taW5nUmVzcG9uc2UpIHtcbiAgICAgICAgLyogVW5pa2Ugc3RhdGVkIGluIDE4LjEuMiwgaWYgYSByZXNwb25zZSBkb2VzIG5vdCBtYXRjaFxuICAgICAgICAqIGFueSB0cmFuc2FjdGlvbiwgaXQgaXMgZGlzY2FyZGVkIGhlcmUgYW5kIG5vIHBhc3NlZCB0byB0aGUgY29yZVxuICAgICAgICAqIGluIG9yZGVyIHRvIGJlIGRpc2NhcmRlZCB0aGVyZS5cbiAgICAgICAgKi9cbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UubWV0aG9kKSB7XG4gICAgICAgICAgY2FzZSBTSVAuQy5JTlZJVEU6XG4gICAgICAgICAgICB0cmFuc2FjdGlvbiA9IHRoaXMudWEudHJhbnNhY3Rpb25zLmljdFttZXNzYWdlLnZpYV9icmFuY2hdO1xuICAgICAgICAgICAgaWYodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ucmVjZWl2ZVJlc3BvbnNlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBTSVAuQy5BQ0s6XG4gICAgICAgICAgICAvLyBKdXN0IGluIGNhc2UgOy0pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdHJhbnNhY3Rpb24gPSB0aGlzLnVhLnRyYW5zYWN0aW9ucy5uaWN0W21lc3NhZ2UudmlhX2JyYW5jaF07XG4gICAgICAgICAgICBpZih0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5yZWNlaXZlUmVzcG9uc2UobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgKiBAZXZlbnRcbiAgKiBAcGFyYW0ge2V2ZW50fSBlXG4gICovXG4gIG9uRXJyb3I6IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLmxvZ2dlci53YXJuKCdXZWJTb2NrZXQgY29ubmVjdGlvbiBlcnJvcjogJyArIEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgfSxcblxuICAvKipcbiAgKiBSZWNvbm5lY3Rpb24gYXR0ZW1wdCBsb2dpYy5cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICByZWNvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmFuc3BvcnQgPSB0aGlzO1xuXG4gICAgdGhpcy5yZWNvbm5lY3Rpb25fYXR0ZW1wdHMgKz0gMTtcblxuICAgIGlmKHRoaXMucmVjb25uZWN0aW9uX2F0dGVtcHRzID4gdGhpcy51YS5jb25maWd1cmF0aW9uLndzU2VydmVyTWF4UmVjb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdtYXhpbXVtIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBmb3IgV2ViU29ja2V0ICcgKyB0aGlzLnNlcnZlci53c191cmkpO1xuICAgICAgdGhpcy51YS5vblRyYW5zcG9ydEVycm9yKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5yZWNvbm5lY3Rpb25fYXR0ZW1wdHMgPT09IDEpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnQ29ubmVjdGlvbiB0byBXZWJTb2NrZXQgJyArIHRoaXMuc2VydmVyLndzX3VyaSArICcgc2V2ZXJlZCwgYXR0ZW1wdGluZyBmaXJzdCByZWNvbm5lY3QnKTtcbiAgICAgIHRyYW5zcG9ydC5jb25uZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygndHJ5aW5nIHRvIHJlY29ubmVjdCB0byBXZWJTb2NrZXQgJyArIHRoaXMuc2VydmVyLndzX3VyaSArICcgKHJlY29ubmVjdGlvbiBhdHRlbXB0ICcgKyB0aGlzLnJlY29ubmVjdGlvbl9hdHRlbXB0cyArICcpJyk7XG5cbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBTSVAuVGltZXJzLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyYW5zcG9ydC5jb25uZWN0KCk7XG4gICAgICAgIHRyYW5zcG9ydC5yZWNvbm5lY3RUaW1lciA9IG51bGw7XG4gICAgICB9LCB0aGlzLnVhLmNvbmZpZ3VyYXRpb24ud3NTZXJ2ZXJSZWNvbm5lY3Rpb25UaW1lb3V0ICogMTAwMCk7XG4gICAgfVxuICB9XG59O1xuXG5UcmFuc3BvcnQuQyA9IEM7XG5yZXR1cm4gVHJhbnNwb3J0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9UcmFuc3BvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDM0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///341\n");

/***/ }),
/* 342 */
/*!************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/SIP.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * @name SIP\n * @namespace\n */\n\n\nmodule.exports = function (environment) {\n\nvar pkg = __webpack_require__(/*! ../package.json */ 343);\n\nvar SIP = Object.defineProperties({}, {\n  version: {\n    get: function(){ return pkg.version; }\n  },\n  name: {\n    get: function(){ return pkg.title; }\n  }\n});\n\n__webpack_require__(/*! ./Utils */ 344)(SIP, environment);\nSIP.LoggerFactory = __webpack_require__(/*! ./LoggerFactory */ 345)(environment.console);\nSIP.EventEmitter = __webpack_require__(/*! ./EventEmitter */ 346)(environment.console);\nSIP.C = __webpack_require__(/*! ./Constants */ 347)(SIP.name, SIP.version);\nSIP.Exceptions = __webpack_require__(/*! ./Exceptions */ 348);\nSIP.Timers = __webpack_require__(/*! ./Timers */ 349)(environment.timers);\nSIP.Transport = environment.Transport(SIP, environment.WebSocket);\n__webpack_require__(/*! ./Parser */ 350)(SIP);\n__webpack_require__(/*! ./SIPMessage */ 351)(SIP);\n__webpack_require__(/*! ./URI */ 352)(SIP);\n__webpack_require__(/*! ./NameAddrHeader */ 353)(SIP);\n__webpack_require__(/*! ./Transactions */ 354)(SIP);\n__webpack_require__(/*! ./Dialogs */ 355)(SIP);\n__webpack_require__(/*! ./RequestSender */ 357)(SIP);\n__webpack_require__(/*! ./RegisterContext */ 358)(SIP);\nSIP.MediaHandler = __webpack_require__(/*! ./MediaHandler */ 359)(SIP.EventEmitter);\n__webpack_require__(/*! ./ClientContext */ 360)(SIP);\n__webpack_require__(/*! ./ServerContext */ 361)(SIP);\n__webpack_require__(/*! ./Session */ 362)(SIP, environment);\n__webpack_require__(/*! ./Subscription */ 365)(SIP);\nSIP.WebRTC = __webpack_require__(/*! ./WebRTC */ 366)(SIP, environment);\n__webpack_require__(/*! ./UA */ 369)(SIP, environment);\nSIP.Hacks = __webpack_require__(/*! ./Hacks */ 370)(SIP);\n__webpack_require__(/*! ./SanityCheck */ 371)(SIP);\nSIP.DigestAuthentication = __webpack_require__(/*! ./DigestAuthentication */ 372)(SIP.Utils);\nSIP.Grammar = __webpack_require__(/*! ./Grammar */ 373)(SIP);\n\nreturn SIP;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1NJUC5qcz8wZGQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWI7O0FBRUEsVUFBVSxtQkFBTyxDQUFDLDBCQUFpQjs7QUFFbkMsb0NBQW9DO0FBQ3BDO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QyxHQUFHO0FBQ0g7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0EsQ0FBQzs7QUFFRCxtQkFBTyxDQUFDLGtCQUFTO0FBQ2pCLG9CQUFvQixtQkFBTyxDQUFDLDBCQUFpQjtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQyx5QkFBZ0I7QUFDM0MsUUFBUSxtQkFBTyxDQUFDLHNCQUFhO0FBQzdCLGlCQUFpQixtQkFBTyxDQUFDLHVCQUFjO0FBQ3ZDLGFBQWEsbUJBQU8sQ0FBQyxtQkFBVTtBQUMvQjtBQUNBLG1CQUFPLENBQUMsbUJBQVU7QUFDbEIsbUJBQU8sQ0FBQyx1QkFBYztBQUN0QixtQkFBTyxDQUFDLGdCQUFPO0FBQ2YsbUJBQU8sQ0FBQywyQkFBa0I7QUFDMUIsbUJBQU8sQ0FBQyx5QkFBZ0I7QUFDeEIsbUJBQU8sQ0FBQyxvQkFBVztBQUNuQixtQkFBTyxDQUFDLDBCQUFpQjtBQUN6QixtQkFBTyxDQUFDLDRCQUFtQjtBQUMzQixtQkFBbUIsbUJBQU8sQ0FBQyx5QkFBZ0I7QUFDM0MsbUJBQU8sQ0FBQywwQkFBaUI7QUFDekIsbUJBQU8sQ0FBQywwQkFBaUI7QUFDekIsbUJBQU8sQ0FBQyxvQkFBVztBQUNuQixtQkFBTyxDQUFDLHlCQUFnQjtBQUN4QixhQUFhLG1CQUFPLENBQUMsbUJBQVU7QUFDL0IsbUJBQU8sQ0FBQyxlQUFNO0FBQ2QsWUFBWSxtQkFBTyxDQUFDLGtCQUFTO0FBQzdCLG1CQUFPLENBQUMsd0JBQWU7QUFDdkIsMkJBQTJCLG1CQUFPLENBQUMsaUNBQXdCO0FBQzNELGNBQWMsbUJBQU8sQ0FBQyxvQkFBVzs7QUFFakM7QUFDQSIsImZpbGUiOiIzNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuYW1lIFNJUFxuICogQG5hbWVzcGFjZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW52aXJvbm1lbnQpIHtcblxudmFyIHBrZyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuXG52YXIgU0lQID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe30sIHtcbiAgdmVyc2lvbjoge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHBrZy52ZXJzaW9uOyB9XG4gIH0sXG4gIG5hbWU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBwa2cudGl0bGU7IH1cbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vVXRpbHMnKShTSVAsIGVudmlyb25tZW50KTtcblNJUC5Mb2dnZXJGYWN0b3J5ID0gcmVxdWlyZSgnLi9Mb2dnZXJGYWN0b3J5JykoZW52aXJvbm1lbnQuY29uc29sZSk7XG5TSVAuRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9FdmVudEVtaXR0ZXInKShlbnZpcm9ubWVudC5jb25zb2xlKTtcblNJUC5DID0gcmVxdWlyZSgnLi9Db25zdGFudHMnKShTSVAubmFtZSwgU0lQLnZlcnNpb24pO1xuU0lQLkV4Y2VwdGlvbnMgPSByZXF1aXJlKCcuL0V4Y2VwdGlvbnMnKTtcblNJUC5UaW1lcnMgPSByZXF1aXJlKCcuL1RpbWVycycpKGVudmlyb25tZW50LnRpbWVycyk7XG5TSVAuVHJhbnNwb3J0ID0gZW52aXJvbm1lbnQuVHJhbnNwb3J0KFNJUCwgZW52aXJvbm1lbnQuV2ViU29ja2V0KTtcbnJlcXVpcmUoJy4vUGFyc2VyJykoU0lQKTtcbnJlcXVpcmUoJy4vU0lQTWVzc2FnZScpKFNJUCk7XG5yZXF1aXJlKCcuL1VSSScpKFNJUCk7XG5yZXF1aXJlKCcuL05hbWVBZGRySGVhZGVyJykoU0lQKTtcbnJlcXVpcmUoJy4vVHJhbnNhY3Rpb25zJykoU0lQKTtcbnJlcXVpcmUoJy4vRGlhbG9ncycpKFNJUCk7XG5yZXF1aXJlKCcuL1JlcXVlc3RTZW5kZXInKShTSVApO1xucmVxdWlyZSgnLi9SZWdpc3RlckNvbnRleHQnKShTSVApO1xuU0lQLk1lZGlhSGFuZGxlciA9IHJlcXVpcmUoJy4vTWVkaWFIYW5kbGVyJykoU0lQLkV2ZW50RW1pdHRlcik7XG5yZXF1aXJlKCcuL0NsaWVudENvbnRleHQnKShTSVApO1xucmVxdWlyZSgnLi9TZXJ2ZXJDb250ZXh0JykoU0lQKTtcbnJlcXVpcmUoJy4vU2Vzc2lvbicpKFNJUCwgZW52aXJvbm1lbnQpO1xucmVxdWlyZSgnLi9TdWJzY3JpcHRpb24nKShTSVApO1xuU0lQLldlYlJUQyA9IHJlcXVpcmUoJy4vV2ViUlRDJykoU0lQLCBlbnZpcm9ubWVudCk7XG5yZXF1aXJlKCcuL1VBJykoU0lQLCBlbnZpcm9ubWVudCk7XG5TSVAuSGFja3MgPSByZXF1aXJlKCcuL0hhY2tzJykoU0lQKTtcbnJlcXVpcmUoJy4vU2FuaXR5Q2hlY2snKShTSVApO1xuU0lQLkRpZ2VzdEF1dGhlbnRpY2F0aW9uID0gcmVxdWlyZSgnLi9EaWdlc3RBdXRoZW50aWNhdGlvbicpKFNJUC5VdGlscyk7XG5TSVAuR3JhbW1hciA9IHJlcXVpcmUoJy4vR3JhbW1hcicpKFNJUCk7XG5cbnJldHVybiBTSVA7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1NJUC5qc1xuLy8gbW9kdWxlIGlkID0gMzQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///342\n");

/***/ }),
/* 343 */
/*!**************************************************!*\
  !*** ./node_modules/@twilio/sip.js/package.json ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"@twilio/sip.js\",\"title\":\"SIP.js\",\"description\":\"A simple, intuitive, and powerful JavaScript signaling library\",\"version\":\"0.7.7\",\"main\":\"src/index.js\",\"browser\":{\"./src/environment.js\":\"./src/environment_browser.js\"},\"homepage\":\"http://sipjs.com\",\"author\":\"OnSIP <developer@onsip.com> (http://sipjs.com/authors/)\",\"contributors\":[{\"url\":\"https://github.com/onsip/SIP.js/blob/master/THANKS.md\"}],\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/onsip/SIP.js.git\"},\"keywords\":[\"sip\",\"websocket\",\"webrtc\",\"library\",\"javascript\"],\"devDependencies\":{\"beefy\":\"^2.1.5\",\"browserify\":\"^4.1.8\",\"grunt\":\"~0.4.0\",\"grunt-browserify\":\"^4.0.1\",\"grunt-cli\":\"~0.1.6\",\"grunt-contrib-copy\":\"^0.5.0\",\"grunt-contrib-jasmine\":\"^1.0.3\",\"grunt-contrib-jshint\":\">0.5.0\",\"grunt-contrib-uglify\":\"~0.2.0\",\"grunt-peg\":\"~1.3.1\",\"grunt-trimtrailingspaces\":\"^0.4.0\",\"pegjs\":\"^0.8.0\",\"release-tool\":\"^0.2.2\"},\"engines\":{\"node\":\">=0.12\"},\"license\":\"MIT\",\"scripts\":{\"repl\":\"beefy test/repl.js --open\",\"build\":\"grunt build\",\"test\":\"grunt travis --verbose\"}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvcGFja2FnZS5qc29uPzc4OTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLDJLQUEySyxzREFBc0QsbUhBQW1ILDhEQUE4RCxnQkFBZ0IseURBQXlELG1GQUFtRiwwVUFBMFUsWUFBWSxnQkFBZ0IsNEJBQTRCIiwiZmlsZSI6IjM0My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1wibmFtZVwiOlwiQHR3aWxpby9zaXAuanNcIixcInRpdGxlXCI6XCJTSVAuanNcIixcImRlc2NyaXB0aW9uXCI6XCJBIHNpbXBsZSwgaW50dWl0aXZlLCBhbmQgcG93ZXJmdWwgSmF2YVNjcmlwdCBzaWduYWxpbmcgbGlicmFyeVwiLFwidmVyc2lvblwiOlwiMC43LjdcIixcIm1haW5cIjpcInNyYy9pbmRleC5qc1wiLFwiYnJvd3NlclwiOntcIi4vc3JjL2Vudmlyb25tZW50LmpzXCI6XCIuL3NyYy9lbnZpcm9ubWVudF9icm93c2VyLmpzXCJ9LFwiaG9tZXBhZ2VcIjpcImh0dHA6Ly9zaXBqcy5jb21cIixcImF1dGhvclwiOlwiT25TSVAgPGRldmVsb3BlckBvbnNpcC5jb20+IChodHRwOi8vc2lwanMuY29tL2F1dGhvcnMvKVwiLFwiY29udHJpYnV0b3JzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL29uc2lwL1NJUC5qcy9ibG9iL21hc3Rlci9USEFOS1MubWRcIn1dLFwicmVwb3NpdG9yeVwiOntcInR5cGVcIjpcImdpdFwiLFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vb25zaXAvU0lQLmpzLmdpdFwifSxcImtleXdvcmRzXCI6W1wic2lwXCIsXCJ3ZWJzb2NrZXRcIixcIndlYnJ0Y1wiLFwibGlicmFyeVwiLFwiamF2YXNjcmlwdFwiXSxcImRldkRlcGVuZGVuY2llc1wiOntcImJlZWZ5XCI6XCJeMi4xLjVcIixcImJyb3dzZXJpZnlcIjpcIl40LjEuOFwiLFwiZ3J1bnRcIjpcIn4wLjQuMFwiLFwiZ3J1bnQtYnJvd3NlcmlmeVwiOlwiXjQuMC4xXCIsXCJncnVudC1jbGlcIjpcIn4wLjEuNlwiLFwiZ3J1bnQtY29udHJpYi1jb3B5XCI6XCJeMC41LjBcIixcImdydW50LWNvbnRyaWItamFzbWluZVwiOlwiXjEuMC4zXCIsXCJncnVudC1jb250cmliLWpzaGludFwiOlwiPjAuNS4wXCIsXCJncnVudC1jb250cmliLXVnbGlmeVwiOlwifjAuMi4wXCIsXCJncnVudC1wZWdcIjpcIn4xLjMuMVwiLFwiZ3J1bnQtdHJpbXRyYWlsaW5nc3BhY2VzXCI6XCJeMC40LjBcIixcInBlZ2pzXCI6XCJeMC44LjBcIixcInJlbGVhc2UtdG9vbFwiOlwiXjAuMi4yXCJ9LFwiZW5naW5lc1wiOntcIm5vZGVcIjpcIj49MC4xMlwifSxcImxpY2Vuc2VcIjpcIk1JVFwiLFwic2NyaXB0c1wiOntcInJlcGxcIjpcImJlZWZ5IHRlc3QvcmVwbC5qcyAtLW9wZW5cIixcImJ1aWxkXCI6XCJncnVudCBidWlsZFwiLFwidGVzdFwiOlwiZ3J1bnQgdHJhdmlzIC0tdmVyYm9zZVwifX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9wYWNrYWdlLmpzb25cbi8vIG1vZHVsZSBpZCA9IDM0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///343\n");

/***/ }),
/* 344 */
/*!**************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Utils.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview Utils\n */\n\nmodule.exports = function (SIP, environment) {\nvar Utils;\n\nUtils= {\n\n  Promise: environment.Promise,\n\n  defer: function defer () {\n    var deferred = {};\n    deferred.promise = new Utils.Promise(function (resolve, reject) {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  promisify: function promisify (object, methodName, callbacksFirst) {\n    var oldMethod = object[methodName];\n    return function promisifiedMethod (arg, onSuccess, onFailure) {\n      return new Utils.Promise(function (resolve, reject) {\n        var oldArgs = [arg, resolve, reject];\n        if (callbacksFirst) {\n          oldArgs = [resolve, reject, arg];\n        }\n        oldMethod.apply(object, oldArgs);\n      }).then(onSuccess, onFailure);\n    };\n  },\n\n  augment: function (object, constructor, args, override) {\n    var idx, proto;\n\n    // Add public properties from constructor's prototype onto object\n    proto = constructor.prototype;\n    for (idx in proto) {\n      if (override || object[idx] === undefined) {\n        object[idx] = proto[idx];\n      }\n    }\n\n    // Construct the object as though it were just created by constructor\n    constructor.apply(object, args);\n  },\n\n  optionsOverride: function (options, winner, loser, isDeprecated, logger, defaultValue) {\n    if (isDeprecated && options[loser]) {\n      logger.warn(loser + ' is deprecated, please use ' + winner + ' instead');\n    }\n\n    if (options[winner] && options[loser]) {\n      logger.warn(winner + ' overriding ' + loser);\n    }\n\n    options[winner] = options[winner] || options[loser] || defaultValue;\n  },\n\n  str_utf8_length: function(string) {\n    return encodeURIComponent(string).replace(/%[A-F\\d]{2}/g, 'U').length;\n  },\n\n  generateFakeSDP: function(body) {\n    if (!body) {\n      return;\n    }\n\n    var start = body.indexOf('o=');\n    var end = body.indexOf('\\r\\n', start);\n\n    return 'v=0\\r\\n' + body.slice(start, end) + '\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0';\n  },\n\n  isFunction: function(fn) {\n    if (fn !== undefined) {\n      return Object.prototype.toString.call(fn) === '[object Function]';\n    } else {\n      return false;\n    }\n  },\n\n  isDecimal: function (num) {\n    return !isNaN(num) && (parseFloat(num) === parseInt(num,10));\n  },\n\n  createRandomToken: function(size, base) {\n    var i, r,\n      token = '';\n\n    base = base || 32;\n\n    for( i=0; i < size; i++ ) {\n      r = Math.random() * base|0;\n      token += r.toString(base);\n    }\n\n    return token;\n  },\n\n  newTag: function() {\n    return SIP.Utils.createRandomToken(SIP.UA.C.TAG_LENGTH);\n  },\n\n  // http://stackoverflow.com/users/109538/broofa\n  newUUID: function() {\n    var UUID =  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n\n    return UUID;\n  },\n\n  hostType: function(host) {\n    if (!host) {\n      return;\n    } else {\n      host = SIP.Grammar.parse(host,'host');\n      if (host !== -1) {\n        return host.host_type;\n      }\n    }\n  },\n\n  /**\n  * Normalize SIP URI.\n  * NOTE: It does not allow a SIP URI without username.\n  * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n  * Detects the domain part (if given) and properly hex-escapes the user portion.\n  * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n  * @private\n  * @param {String} target\n  * @param {String} [domain]\n  */\n  normalizeTarget: function(target, domain) {\n    var uri, target_array, target_user, target_domain;\n\n    // If no target is given then raise an error.\n    if (!target) {\n      return;\n    // If a SIP.URI instance is given then return it.\n    } else if (target instanceof SIP.URI) {\n      return target;\n\n    // If a string is given split it by '@':\n    // - Last fragment is the desired domain.\n    // - Otherwise append the given domain argument.\n    } else if (typeof target === 'string') {\n      target_array = target.split('@');\n\n      switch(target_array.length) {\n        case 1:\n          if (!domain) {\n            return;\n          }\n          target_user = target;\n          target_domain = domain;\n          break;\n        case 2:\n          target_user = target_array[0];\n          target_domain = target_array[1];\n          break;\n        default:\n          target_user = target_array.slice(0, target_array.length-1).join('@');\n          target_domain = target_array[target_array.length-1];\n      }\n\n      // Remove the URI scheme (if present).\n      target_user = target_user.replace(/^(sips?|tel):/i, '');\n\n      // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n      if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(target_user)) {\n        target_user = target_user.replace(/[\\-\\.\\(\\)]/g, '');\n      }\n\n      // Build the complete SIP URI.\n      target = SIP.C.SIP + ':' + SIP.Utils.escapeUser(target_user) + '@' + target_domain;\n\n      // Finally parse the resulting URI.\n      if (uri = SIP.URI.parse(target)) {\n        return uri;\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n  * Hex-escape a SIP URI user.\n  * @private\n  * @param {String} user\n  */\n  escapeUser: function(user) {\n    // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n    return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');\n  },\n\n  headerize: function(string) {\n    var exceptions = {\n      'Call-Id': 'Call-ID',\n      'Cseq': 'CSeq',\n      'Min-Se': 'Min-SE',\n      'Rack': 'RAck',\n      'Rseq': 'RSeq',\n      'Www-Authenticate': 'WWW-Authenticate'\n      },\n      name = string.toLowerCase().replace(/_/g,'-').split('-'),\n      hname = '',\n      parts = name.length, part;\n\n    for (part = 0; part < parts; part++) {\n      if (part !== 0) {\n        hname +='-';\n      }\n      hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);\n    }\n    if (exceptions[hname]) {\n      hname = exceptions[hname];\n    }\n    return hname;\n  },\n\n  sipErrorCause: function(status_code) {\n    var cause;\n\n    for (cause in SIP.C.SIP_ERROR_CAUSES) {\n      if (SIP.C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {\n        return SIP.C.causes[cause];\n      }\n    }\n\n    return SIP.C.causes.SIP_FAILURE_CODE;\n  },\n\n  getReasonPhrase: function getReasonPhrase (code, specific) {\n    return specific || SIP.C.REASON_PHRASE[code] || '';\n  },\n\n  getReasonHeaderValue: function getReasonHeaderValue (code, reason) {\n    reason = SIP.Utils.getReasonPhrase(code, reason);\n    return 'SIP ;cause=' + code + ' ;text=\"' + reason + '\"';\n  },\n\n  getCancelReason: function getCancelReason (code, reason) {\n    if (code && code < 200 || code > 699) {\n      throw new TypeError('Invalid status_code: ' + code);\n    } else if (code) {\n      return SIP.Utils.getReasonHeaderValue(code, reason);\n    }\n  },\n\n  buildStatusLine: function buildStatusLine (code, reason) {\n    code = code || null;\n    reason = reason || null;\n\n    // Validate code and reason values\n    if (!code || (code < 100 || code > 699)) {\n      throw new TypeError('Invalid status_code: '+ code);\n    } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n      throw new TypeError('Invalid reason_phrase: '+ reason);\n    }\n\n    reason = Utils.getReasonPhrase(code, reason);\n\n    return 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n  },\n\n  /**\n  * Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n  * @private\n  */\n  getRandomTestNetIP: function() {\n    function getOctet(from,to) {\n      return Math.floor(Math.random()*(to-from+1)+from);\n    }\n    return '192.0.2.' + getOctet(1, 254);\n  },\n\n  // MD5 (Message-Digest Algorithm) http://www.webtoolkit.info\n  calculateMD5: function(string) {\n    function RotateLeft(lValue, iShiftBits) {\n      return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n    }\n\n    function AddUnsigned(lX,lY) {\n      var lX4,lY4,lX8,lY8,lResult;\n      lX8 = (lX & 0x80000000);\n      lY8 = (lY & 0x80000000);\n      lX4 = (lX & 0x40000000);\n      lY4 = (lY & 0x40000000);\n      lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n      if (lX4 & lY4) {\n        return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n      }\n      if (lX4 | lY4) {\n        if (lResult & 0x40000000) {\n          return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n        } else {\n          return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n        }\n      } else {\n        return (lResult ^ lX8 ^ lY8);\n      }\n    }\n\n    function F(x,y,z) {\n      return (x & y) | ((~x) & z);\n    }\n\n    function G(x,y,z) {\n      return (x & z) | (y & (~z));\n    }\n\n    function H(x,y,z) {\n      return (x ^ y ^ z);\n    }\n\n    function I(x,y,z) {\n      return (y ^ (x | (~z)));\n    }\n\n    function FF(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function GG(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function HH(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function II(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function ConvertToWordArray(string) {\n      var lWordCount;\n      var lMessageLength = string.length;\n      var lNumberOfWords_temp1=lMessageLength + 8;\n      var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n      var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n      var lWordArray=Array(lNumberOfWords-1);\n      var lBytePosition = 0;\n      var lByteCount = 0;\n      while ( lByteCount < lMessageLength ) {\n        lWordCount = (lByteCount-(lByteCount % 4))/4;\n        lBytePosition = (lByteCount % 4)*8;\n        lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n        lByteCount++;\n      }\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n      lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n      lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n      return lWordArray;\n    }\n\n    function WordToHex(lValue) {\n      var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n      for (lCount = 0;lCount<=3;lCount++) {\n        lByte = (lValue>>>(lCount*8)) & 255;\n        WordToHexValue_temp = \"0\" + lByte.toString(16);\n        WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n      }\n      return WordToHexValue;\n    }\n\n    function Utf8Encode(string) {\n      string = string.replace(/\\r\\n/g,\"\\n\");\n      var utftext = \"\";\n\n      for (var n = 0; n < string.length; n++) {\n        var c = string.charCodeAt(n);\n\n        if (c < 128) {\n          utftext += String.fromCharCode(c);\n        }\n        else if((c > 127) && (c < 2048)) {\n          utftext += String.fromCharCode((c >> 6) | 192);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n        else {\n          utftext += String.fromCharCode((c >> 12) | 224);\n          utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n      }\n      return utftext;\n    }\n\n    var x=[];\n    var k,AA,BB,CC,DD,a,b,c,d;\n    var S11=7, S12=12, S13=17, S14=22;\n    var S21=5, S22=9 , S23=14, S24=20;\n    var S31=4, S32=11, S33=16, S34=23;\n    var S41=6, S42=10, S43=15, S44=21;\n\n    string = Utf8Encode(string);\n\n    x = ConvertToWordArray(string);\n\n    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n    for (k=0;k<x.length;k+=16) {\n      AA=a; BB=b; CC=c; DD=d;\n      a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n      d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n      c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n      b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n      a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n      d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n      c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n      b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n      a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n      d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n      c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n      b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n      a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n      d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n      c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n      b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n      a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n      d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n      c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n      b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n      a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n      d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n      c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n      b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n      a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n      d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n      c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n      b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n      a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n      d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n      c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n      b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n      a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n      d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n      c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n      b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n      a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n      d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n      c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n      b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n      a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n      d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n      c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n      b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n      a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n      d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n      c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n      b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n      a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n      d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n      c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n      b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n      a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n      d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n      c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n      b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n      a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n      d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n      c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n      b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n      a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n      d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n      c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n      b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n      a=AddUnsigned(a,AA);\n      b=AddUnsigned(b,BB);\n      c=AddUnsigned(c,CC);\n      d=AddUnsigned(d,DD);\n    }\n\n    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n\n    return temp.toLowerCase();\n  }\n};\n\nSIP.Utils = Utils;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///344\n");

/***/ }),
/* 345 */
/*!**********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/LoggerFactory.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar levels = {\n  'error': 0,\n  'warn': 1,\n  'log': 2,\n  'debug': 3\n};\n\nmodule.exports = function (console) {\n\nvar LoggerFactory = function () {\n  var logger,\n    level = 2,\n    builtinEnabled = true,\n    connector = null;\n\n    this.loggers = {};\n\n    logger = this.getLogger('sip.loggerfactory');\n\n\n  Object.defineProperties(this, {\n    builtinEnabled: {\n      get: function(){ return builtinEnabled; },\n      set: function(value){\n        if (typeof value === 'boolean') {\n          builtinEnabled = value;\n        } else {\n          logger.error('invalid \"builtinEnabled\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    level: {\n      get: function() {return level; },\n      set: function(value) {\n        if (value >= 0 && value <=3) {\n          level = value;\n        } else if (value > 3) {\n          level = 3;\n        } else if (levels.hasOwnProperty(value)) {\n          level = levels[value];\n        } else {\n          logger.error('invalid \"level\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    connector: {\n      get: function() {return connector; },\n      set: function(value){\n        if(value === null || value === \"\" || value === undefined) {\n          connector = null;\n        } else if (typeof value === 'function') {\n          connector = value;\n        } else {\n          logger.error('invalid \"connector\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    }\n  });\n};\n\nLoggerFactory.prototype.print = function(target, category, label, content) {\n  if (typeof content === 'string') {\n    var prefix = [new Date(), category];\n    if (label) {\n      prefix.push(label);\n    }\n    content = prefix.concat(content).join(' | ');\n  }\n  target.call(console, content);\n};\n\nfunction Logger (logger, category, label) {\n  this.logger = logger;\n  this.category = category;\n  this.label = label;\n}\n\nObject.keys(levels).forEach(function (targetName) {\n  Logger.prototype[targetName] = function (content) {\n    this.logger[targetName](this.category, this.label, content);\n  };\n\n  LoggerFactory.prototype[targetName] = function (category, label, content) {\n    if (this.level >= levels[targetName]) {\n      if (this.builtinEnabled) {\n        this.print(console[targetName], category, label, content);\n      }\n\n      if (this.connector) {\n        this.connector(targetName, category, label, content);\n      }\n    }\n  };\n});\n\nLoggerFactory.prototype.getLogger = function(category, label) {\n  var logger;\n\n  if (label && this.level === 3) {\n    return new Logger(this, category, label);\n  } else if (this.loggers[category]) {\n    return this.loggers[category];\n  } else {\n    logger = new Logger(this, category);\n    this.loggers[category] = logger;\n    return logger;\n  }\n};\n\nreturn LoggerFactory;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0xvZ2dlckZhY3RvcnkuanM/ZmYyMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0Esc0JBQXNCLHVCQUF1QixFQUFFO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsdUJBQXVCLGFBQWEsRUFBRTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLHVCQUF1QixpQkFBaUIsRUFBRTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMzQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbGV2ZWxzID0ge1xuICAnZXJyb3InOiAwLFxuICAnd2Fybic6IDEsXG4gICdsb2cnOiAyLFxuICAnZGVidWcnOiAzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25zb2xlKSB7XG5cbnZhciBMb2dnZXJGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbG9nZ2VyLFxuICAgIGxldmVsID0gMixcbiAgICBidWlsdGluRW5hYmxlZCA9IHRydWUsXG4gICAgY29ubmVjdG9yID0gbnVsbDtcblxuICAgIHRoaXMubG9nZ2VycyA9IHt9O1xuXG4gICAgbG9nZ2VyID0gdGhpcy5nZXRMb2dnZXIoJ3NpcC5sb2dnZXJmYWN0b3J5Jyk7XG5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgYnVpbHRpbkVuYWJsZWQ6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGJ1aWx0aW5FbmFibGVkOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIGJ1aWx0aW5FbmFibGVkID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdpbnZhbGlkIFwiYnVpbHRpbkVuYWJsZWRcIiBwYXJhbWV0ZXIgdmFsdWU6ICcrIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGV2ZWw6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7cmV0dXJuIGxldmVsOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8PTMpIHtcbiAgICAgICAgICBsZXZlbCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID4gMykge1xuICAgICAgICAgIGxldmVsID0gMztcbiAgICAgICAgfSBlbHNlIGlmIChsZXZlbHMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgICAgICAgbGV2ZWwgPSBsZXZlbHNbdmFsdWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignaW52YWxpZCBcImxldmVsXCIgcGFyYW1ldGVyIHZhbHVlOiAnKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNvbm5lY3Rvcjoge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtyZXR1cm4gY29ubmVjdG9yOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIGlmKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25uZWN0b3IgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNvbm5lY3RvciA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignaW52YWxpZCBcImNvbm5lY3RvclwiIHBhcmFtZXRlciB2YWx1ZTogJysgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5Mb2dnZXJGYWN0b3J5LnByb3RvdHlwZS5wcmludCA9IGZ1bmN0aW9uKHRhcmdldCwgY2F0ZWdvcnksIGxhYmVsLCBjb250ZW50KSB7XG4gIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgcHJlZml4ID0gW25ldyBEYXRlKCksIGNhdGVnb3J5XTtcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIHByZWZpeC5wdXNoKGxhYmVsKTtcbiAgICB9XG4gICAgY29udGVudCA9IHByZWZpeC5jb25jYXQoY29udGVudCkuam9pbignIHwgJyk7XG4gIH1cbiAgdGFyZ2V0LmNhbGwoY29uc29sZSwgY29udGVudCk7XG59O1xuXG5mdW5jdGlvbiBMb2dnZXIgKGxvZ2dlciwgY2F0ZWdvcnksIGxhYmVsKSB7XG4gIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gIHRoaXMubGFiZWwgPSBsYWJlbDtcbn1cblxuT2JqZWN0LmtleXMobGV2ZWxzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXROYW1lKSB7XG4gIExvZ2dlci5wcm90b3R5cGVbdGFyZ2V0TmFtZV0gPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgIHRoaXMubG9nZ2VyW3RhcmdldE5hbWVdKHRoaXMuY2F0ZWdvcnksIHRoaXMubGFiZWwsIGNvbnRlbnQpO1xuICB9O1xuXG4gIExvZ2dlckZhY3RvcnkucHJvdG90eXBlW3RhcmdldE5hbWVdID0gZnVuY3Rpb24gKGNhdGVnb3J5LCBsYWJlbCwgY29udGVudCkge1xuICAgIGlmICh0aGlzLmxldmVsID49IGxldmVsc1t0YXJnZXROYW1lXSkge1xuICAgICAgaWYgKHRoaXMuYnVpbHRpbkVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5wcmludChjb25zb2xlW3RhcmdldE5hbWVdLCBjYXRlZ29yeSwgbGFiZWwsIGNvbnRlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb25uZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0b3IodGFyZ2V0TmFtZSwgY2F0ZWdvcnksIGxhYmVsLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcblxuTG9nZ2VyRmFjdG9yeS5wcm90b3R5cGUuZ2V0TG9nZ2VyID0gZnVuY3Rpb24oY2F0ZWdvcnksIGxhYmVsKSB7XG4gIHZhciBsb2dnZXI7XG5cbiAgaWYgKGxhYmVsICYmIHRoaXMubGV2ZWwgPT09IDMpIHtcbiAgICByZXR1cm4gbmV3IExvZ2dlcih0aGlzLCBjYXRlZ29yeSwgbGFiZWwpO1xuICB9IGVsc2UgaWYgKHRoaXMubG9nZ2Vyc1tjYXRlZ29yeV0pIHtcbiAgICByZXR1cm4gdGhpcy5sb2dnZXJzW2NhdGVnb3J5XTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIgPSBuZXcgTG9nZ2VyKHRoaXMsIGNhdGVnb3J5KTtcbiAgICB0aGlzLmxvZ2dlcnNbY2F0ZWdvcnldID0gbG9nZ2VyO1xuICAgIHJldHVybiBsb2dnZXI7XG4gIH1cbn07XG5cbnJldHVybiBMb2dnZXJGYWN0b3J5O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9Mb2dnZXJGYWN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAzNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///345\n");

/***/ }),
/* 346 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/EventEmitter.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar NodeEventEmitter = __webpack_require__(/*! events */ 207).EventEmitter;\n\nmodule.exports = function (console) {\n\n// Don't use `new SIP.EventEmitter()` for inheriting.\n// Use Object.create(SIP.EventEmitter.prototoype);\nfunction EventEmitter () {\n  NodeEventEmitter.call(this);\n}\n\nEventEmitter.prototype = Object.create(NodeEventEmitter.prototype, {\n  constructor: {\n    value: EventEmitter,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\n\nEventEmitter.prototype.off = function off (eventName, listener) {\n  var warning = '';\n  warning += 'SIP.EventEmitter#off is deprecated and may be removed in future SIP.js versions.\\n';\n  warning += 'Please use removeListener or removeAllListeners instead.\\n';\n  warning += 'See here for more details:\\n';\n  warning += 'http://nodejs.org/api/events.html#events_emitter_removelistener_event_listener';\n  console.warn(warning);\n\n  if (arguments.length < 2) {\n    return this.removeAllListeners.apply(this, arguments);\n  } else {\n    return this.removeListener(eventName, listener);\n  }\n};\n\nreturn EventEmitter;\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0V2ZW50RW1pdHRlci5qcz8yNWFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsdUJBQXVCLG1CQUFPLENBQUMsaUJBQVE7O0FBRXZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjM0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIE5vZGVFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnNvbGUpIHtcblxuLy8gRG9uJ3QgdXNlIGBuZXcgU0lQLkV2ZW50RW1pdHRlcigpYCBmb3IgaW5oZXJpdGluZy5cbi8vIFVzZSBPYmplY3QuY3JlYXRlKFNJUC5FdmVudEVtaXR0ZXIucHJvdG90b3lwZSk7XG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIgKCkge1xuICBOb2RlRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGVFdmVudEVtaXR0ZXIucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7XG4gICAgdmFsdWU6IEV2ZW50RW1pdHRlcixcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmIChldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciB3YXJuaW5nID0gJyc7XG4gIHdhcm5pbmcgKz0gJ1NJUC5FdmVudEVtaXR0ZXIjb2ZmIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIGZ1dHVyZSBTSVAuanMgdmVyc2lvbnMuXFxuJztcbiAgd2FybmluZyArPSAnUGxlYXNlIHVzZSByZW1vdmVMaXN0ZW5lciBvciByZW1vdmVBbGxMaXN0ZW5lcnMgaW5zdGVhZC5cXG4nO1xuICB3YXJuaW5nICs9ICdTZWUgaGVyZSBmb3IgbW9yZSBkZXRhaWxzOlxcbic7XG4gIHdhcm5pbmcgKz0gJ2h0dHA6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNldmVudHNfZW1pdHRlcl9yZW1vdmVsaXN0ZW5lcl9ldmVudF9saXN0ZW5lcic7XG4gIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgfVxufTtcblxucmV0dXJuIEV2ZW50RW1pdHRlcjtcblxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9FdmVudEVtaXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDM0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///346\n");

/***/ }),
/* 347 */
/*!******************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Constants.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP Constants\n */\n\n/**\n * SIP Constants.\n * @augments SIP\n */\n\nmodule.exports = function (name, version) {\nreturn {\n  USER_AGENT: name +'/'+ version,\n\n  // SIP scheme\n  SIP:  'sip',\n  SIPS: 'sips',\n\n  // End and Failure causes\n  causes: {\n    // Generic error causes\n    CONNECTION_ERROR:         'Connection Error',\n    REQUEST_TIMEOUT:          'Request Timeout',\n    SIP_FAILURE_CODE:         'SIP Failure Code',\n    INTERNAL_ERROR:           'Internal Error',\n\n    // SIP error causes\n    BUSY:                     'Busy',\n    REJECTED:                 'Rejected',\n    REDIRECTED:               'Redirected',\n    UNAVAILABLE:              'Unavailable',\n    NOT_FOUND:                'Not Found',\n    ADDRESS_INCOMPLETE:       'Address Incomplete',\n    INCOMPATIBLE_SDP:         'Incompatible SDP',\n    AUTHENTICATION_ERROR:     'Authentication Error',\n    DIALOG_ERROR:             'Dialog Error',\n\n    // Session error causes\n    WEBRTC_NOT_SUPPORTED:     'WebRTC Not Supported',\n    WEBRTC_ERROR:             'WebRTC Error',\n    CANCELED:                 'Canceled',\n    NO_ANSWER:                'No Answer',\n    EXPIRES:                  'Expires',\n    NO_ACK:                   'No ACK',\n    NO_PRACK:                 'No PRACK',\n    USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',\n    BAD_MEDIA_DESCRIPTION:    'Bad Media Description',\n    RTP_TIMEOUT:              'RTP Timeout'\n  },\n\n  supported: {\n    UNSUPPORTED:        'none',\n    SUPPORTED:          'supported',\n    REQUIRED:           'required'\n  },\n\n  SIP_ERROR_CAUSES: {\n    REDIRECTED: [300,301,302,305,380],\n    BUSY: [486,600],\n    REJECTED: [403,603],\n    NOT_FOUND: [404,604],\n    UNAVAILABLE: [480,410,408,430],\n    ADDRESS_INCOMPLETE: [484],\n    INCOMPATIBLE_SDP: [488,606],\n    AUTHENTICATION_ERROR:[401,407]\n  },\n\n  // SIP Methods\n  ACK:        'ACK',\n  BYE:        'BYE',\n  CANCEL:     'CANCEL',\n  INFO:       'INFO',\n  INVITE:     'INVITE',\n  MESSAGE:    'MESSAGE',\n  NOTIFY:     'NOTIFY',\n  OPTIONS:    'OPTIONS',\n  REGISTER:   'REGISTER',\n  UPDATE:     'UPDATE',\n  SUBSCRIBE:  'SUBSCRIBE',\n  REFER:      'REFER',\n  PRACK:      'PRACK',\n\n  /* SIP Response Reasons\n   * DOC: http://www.iana.org/assignments/sip-parameters\n   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n   */\n  REASON_PHRASE: {\n    100: 'Trying',\n    180: 'Ringing',\n    181: 'Call Is Being Forwarded',\n    182: 'Queued',\n    183: 'Session Progress',\n    199: 'Early Dialog Terminated',  // draft-ietf-sipcore-199\n    200: 'OK',\n    202: 'Accepted',  // RFC 3265\n    204: 'No Notification',  //RFC 5839\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    305: 'Use Proxy',\n    380: 'Alternative Service',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    410: 'Gone',\n    412: 'Conditional Request Failed',  // RFC 3903\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Unsupported URI Scheme',\n    417: 'Unknown Resource-Priority',  // RFC 4412\n    420: 'Bad Extension',\n    421: 'Extension Required',\n    422: 'Session Interval Too Small',  // RFC 4028\n    423: 'Interval Too Brief',\n    428: 'Use Identity Header',  // RFC 4474\n    429: 'Provide Referrer Identity',  // RFC 3892\n    430: 'Flow Failed',  // RFC 5626\n    433: 'Anonymity Disallowed',  // RFC 5079\n    436: 'Bad Identity-Info',  // RFC 4474\n    437: 'Unsupported Certificate',  // RFC 4744\n    438: 'Invalid Identity Header',  // RFC 4744\n    439: 'First Hop Lacks Outbound Support',  // RFC 5626\n    440: 'Max-Breadth Exceeded',  // RFC 5393\n    469: 'Bad Info Package',  // draft-ietf-sipcore-info-events\n    470: 'Consent Needed',  // RFC 5360\n    478: 'Unresolvable Destination',  // Custom code copied from Kamailio.\n    480: 'Temporarily Unavailable',\n    481: 'Call/Transaction Does Not Exist',\n    482: 'Loop Detected',\n    483: 'Too Many Hops',\n    484: 'Address Incomplete',\n    485: 'Ambiguous',\n    486: 'Busy Here',\n    487: 'Request Terminated',\n    488: 'Not Acceptable Here',\n    489: 'Bad Event',  // RFC 3265\n    491: 'Request Pending',\n    493: 'Undecipherable',\n    494: 'Security Agreement Required',  // RFC 3329\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Server Time-out',\n    505: 'Version Not Supported',\n    513: 'Message Too Large',\n    580: 'Precondition Failure',  // RFC 3312\n    600: 'Busy Everywhere',\n    603: 'Decline',\n    604: 'Does Not Exist Anywhere',\n    606: 'Not Acceptable'\n  },\n\n  /* SIP Option Tags\n   * DOC: http://www.iana.org/assignments/sip-parameters/sip-parameters.xhtml#sip-parameters-4\n   */\n  OPTION_TAGS: {\n    '100rel':                   true,  // RFC 3262\n    199:                        true,  // RFC 6228\n    answermode:                 true,  // RFC 5373\n    'early-session':            true,  // RFC 3959\n    eventlist:                  true,  // RFC 4662\n    explicitsub:                true,  // RFC-ietf-sipcore-refer-explicit-subscription-03\n    'from-change':              true,  // RFC 4916\n    'geolocation-http':         true,  // RFC 6442\n    'geolocation-sip':          true,  // RFC 6442\n    gin:                        true,  // RFC 6140\n    gruu:                       true,  // RFC 5627\n    histinfo:                   true,  // RFC 7044\n    ice:                        true,  // RFC 5768\n    join:                       true,  // RFC 3911\n    'multiple-refer':           true,  // RFC 5368\n    norefersub:                 true,  // RFC 4488\n    nosub:                      true,  // RFC-ietf-sipcore-refer-explicit-subscription-03\n    outbound:                   true,  // RFC 5626\n    path:                       true,  // RFC 3327\n    policy:                     true,  // RFC 6794\n    precondition:               true,  // RFC 3312\n    pref:                       true,  // RFC 3840\n    privacy:                    true,  // RFC 3323\n    'recipient-list-invite':    true,  // RFC 5366\n    'recipient-list-message':   true,  // RFC 5365\n    'recipient-list-subscribe': true,  // RFC 5367\n    replaces:                   true,  // RFC 3891\n    'resource-priority':        true,  // RFC 4412\n    'sdp-anat':                 true,  // RFC 4092\n    'sec-agree':                true,  // RFC 3329\n    tdialog:                    true,  // RFC 4538\n    timer:                      true,  // RFC 4028\n    uui:                        true   // RFC 7433\n  }\n};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///347\n");

/***/ }),
/* 348 */
/*!*******************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Exceptions.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview Exceptions\n */\n\n/**\n * SIP Exceptions.\n * @augments SIP\n */\nmodule.exports = {\n  ConfigurationError: (function(){\n    var exception = function(parameter, value) {\n      this.code = 1;\n      this.name = 'CONFIGURATION_ERROR';\n      this.parameter = parameter;\n      this.value = value;\n      this.message = (!this.value)? 'Missing parameter: '+ this.parameter : 'Invalid value '+ JSON.stringify(this.value) +' for parameter \"'+ this.parameter +'\"';\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  InvalidStateError: (function(){\n    var exception = function(status) {\n      this.code = 2;\n      this.name = 'INVALID_STATE_ERROR';\n      this.status = status;\n      this.message = 'Invalid status: ' + status;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotSupportedError: (function(){\n    var exception = function(message) {\n      this.code = 3;\n      this.name = 'NOT_SUPPORTED_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  GetDescriptionError: (function(){\n    var exception = function(message) {\n      this.code = 4;\n      this.name = 'GET_DESCRIPTION_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }())\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0V4Y2VwdGlvbnMuanM/NGRiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIzNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGZpbGVvdmVydmlldyBFeGNlcHRpb25zXG4gKi9cblxuLyoqXG4gKiBTSVAgRXhjZXB0aW9ucy5cbiAqIEBhdWdtZW50cyBTSVBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbmZpZ3VyYXRpb25FcnJvcjogKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGV4Y2VwdGlvbiA9IGZ1bmN0aW9uKHBhcmFtZXRlciwgdmFsdWUpIHtcbiAgICAgIHRoaXMuY29kZSA9IDE7XG4gICAgICB0aGlzLm5hbWUgPSAnQ09ORklHVVJBVElPTl9FUlJPUic7XG4gICAgICB0aGlzLnBhcmFtZXRlciA9IHBhcmFtZXRlcjtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMubWVzc2FnZSA9ICghdGhpcy52YWx1ZSk/ICdNaXNzaW5nIHBhcmFtZXRlcjogJysgdGhpcy5wYXJhbWV0ZXIgOiAnSW52YWxpZCB2YWx1ZSAnKyBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlKSArJyBmb3IgcGFyYW1ldGVyIFwiJysgdGhpcy5wYXJhbWV0ZXIgKydcIic7XG4gICAgfTtcbiAgICBleGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gICAgcmV0dXJuIGV4Y2VwdGlvbjtcbiAgfSgpKSxcblxuICBJbnZhbGlkU3RhdGVFcnJvcjogKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGV4Y2VwdGlvbiA9IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgdGhpcy5jb2RlID0gMjtcbiAgICAgIHRoaXMubmFtZSA9ICdJTlZBTElEX1NUQVRFX0VSUk9SJztcbiAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgdGhpcy5tZXNzYWdlID0gJ0ludmFsaWQgc3RhdHVzOiAnICsgc3RhdHVzO1xuICAgIH07XG4gICAgZXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICAgIHJldHVybiBleGNlcHRpb247XG4gIH0oKSksXG5cbiAgTm90U3VwcG9ydGVkRXJyb3I6IChmdW5jdGlvbigpe1xuICAgIHZhciBleGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICB0aGlzLmNvZGUgPSAzO1xuICAgICAgdGhpcy5uYW1lID0gJ05PVF9TVVBQT1JURURfRVJST1InO1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9O1xuICAgIGV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcbiAgICByZXR1cm4gZXhjZXB0aW9uO1xuICB9KCkpLFxuXG4gIEdldERlc2NyaXB0aW9uRXJyb3I6IChmdW5jdGlvbigpe1xuICAgIHZhciBleGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICB0aGlzLmNvZGUgPSA0O1xuICAgICAgdGhpcy5uYW1lID0gJ0dFVF9ERVNDUklQVElPTl9FUlJPUic7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH07XG4gICAgZXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICAgIHJldHVybiBleGNlcHRpb247XG4gIH0oKSlcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9zcmMvRXhjZXB0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMzQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///348\n");

/***/ }),
/* 349 */
/*!***************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Timers.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP TIMERS\n */\n\n/**\n * @augments SIP\n */\nvar\n  T1 = 500,\n  T2 = 4000,\n  T4 = 5000;\nmodule.exports = function (timers) {\n  var Timers = {\n    T1: T1,\n    T2: T2,\n    T4: T4,\n    TIMER_B: 64 * T1,\n    TIMER_D: 0  * T1,\n    TIMER_F: 64 * T1,\n    TIMER_H: 64 * T1,\n    TIMER_I: 0  * T1,\n    TIMER_J: 0  * T1,\n    TIMER_K: 0  * T4,\n    TIMER_L: 64 * T1,\n    TIMER_M: 64 * T1,\n    TIMER_N: 64 * T1,\n    PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1\n  };\n\n  ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval']\n  .forEach(function (name) {\n    // can't just use timers[name].bind(timers) since it bypasses jasmine's\n    // clock-mocking\n    Timers[name] = function () {\n      return timers[name].apply(timers, arguments);\n    };\n  });\n\n  return Timers;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1RpbWVycy5qcz8yZGMyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIzNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTSVAgVElNRVJTXG4gKi9cblxuLyoqXG4gKiBAYXVnbWVudHMgU0lQXG4gKi9cbnZhclxuICBUMSA9IDUwMCxcbiAgVDIgPSA0MDAwLFxuICBUNCA9IDUwMDA7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aW1lcnMpIHtcbiAgdmFyIFRpbWVycyA9IHtcbiAgICBUMTogVDEsXG4gICAgVDI6IFQyLFxuICAgIFQ0OiBUNCxcbiAgICBUSU1FUl9COiA2NCAqIFQxLFxuICAgIFRJTUVSX0Q6IDAgICogVDEsXG4gICAgVElNRVJfRjogNjQgKiBUMSxcbiAgICBUSU1FUl9IOiA2NCAqIFQxLFxuICAgIFRJTUVSX0k6IDAgICogVDEsXG4gICAgVElNRVJfSjogMCAgKiBUMSxcbiAgICBUSU1FUl9LOiAwICAqIFQ0LFxuICAgIFRJTUVSX0w6IDY0ICogVDEsXG4gICAgVElNRVJfTTogNjQgKiBUMSxcbiAgICBUSU1FUl9OOiA2NCAqIFQxLFxuICAgIFBST1ZJU0lPTkFMX1JFU1BPTlNFX0lOVEVSVkFMOiA2MDAwMCAgLy8gU2VlIFJGQyAzMjYxIFNlY3Rpb24gMTMuMy4xLjFcbiAgfTtcblxuICBbJ3NldFRpbWVvdXQnLCAnY2xlYXJUaW1lb3V0JywgJ3NldEludGVydmFsJywgJ2NsZWFySW50ZXJ2YWwnXVxuICAuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIC8vIGNhbid0IGp1c3QgdXNlIHRpbWVyc1tuYW1lXS5iaW5kKHRpbWVycykgc2luY2UgaXQgYnlwYXNzZXMgamFzbWluZSdzXG4gICAgLy8gY2xvY2stbW9ja2luZ1xuICAgIFRpbWVyc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aW1lcnNbbmFtZV0uYXBwbHkodGltZXJzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBUaW1lcnM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1RpbWVycy5qc1xuLy8gbW9kdWxlIGlkID0gMzQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///349\n");

/***/ }),
/* 350 */
/*!***************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Parser.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP Message Parser\n */\n\n/**\n * Extract and parse every header of a SIP message.\n * @augments SIP\n * @namespace\n */\nmodule.exports = function (SIP) {\nvar Parser;\n\nfunction getHeader(data, headerStart) {\n  var\n    // 'start' position of the header.\n    start = headerStart,\n    // 'end' position of the header.\n    end = 0,\n    // 'partial end' position of the header.\n    partialEnd = 0;\n\n  //End of message.\n  if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n    return -2;\n  }\n\n  while(end === 0) {\n    // Partial End of Header.\n    partialEnd = data.indexOf('\\r\\n', start);\n\n    // 'indexOf' returns -1 if the value to be found never occurs.\n    if (partialEnd === -1) {\n      return partialEnd;\n    }\n\n    if(!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) && data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n      // Not the end of the message. Continue from the next position.\n      start = partialEnd + 2;\n    } else {\n      end = partialEnd;\n    }\n  }\n\n  return end;\n}\n\nfunction parseHeader(message, data, headerStart, headerEnd) {\n  var header, idx, length, parsed,\n    hcolonIndex = data.indexOf(':', headerStart),\n    headerName = data.substring(headerStart, hcolonIndex).trim(),\n    headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n\n  // If header-field is well-known, parse it.\n  switch(headerName.toLowerCase()) {\n    case 'via':\n    case 'v':\n      message.addHeader('via', headerValue);\n      if(message.getHeaders('via').length === 1) {\n        parsed = message.parseHeader('Via');\n        if(parsed) {\n          message.via = parsed;\n          message.via_branch = parsed.branch;\n        }\n      } else {\n        parsed = 0;\n      }\n      break;\n    case 'from':\n    case 'f':\n      message.setHeader('from', headerValue);\n      parsed = message.parseHeader('from');\n      if(parsed) {\n        message.from = parsed;\n        message.from_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'to':\n    case 't':\n      message.setHeader('to', headerValue);\n      parsed = message.parseHeader('to');\n      if(parsed) {\n        message.to = parsed;\n        message.to_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'record-route':\n      parsed = SIP.Grammar.parse(headerValue, 'Record_Route');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('record-route', headerValue.substring(header.position, header.offset));\n        message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'call-id':\n    case 'i':\n      message.setHeader('call-id', headerValue);\n      parsed = message.parseHeader('call-id');\n      if(parsed) {\n        message.call_id = headerValue;\n      }\n      break;\n    case 'contact':\n    case 'm':\n      parsed = SIP.Grammar.parse(headerValue, 'Contact');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('contact', headerValue.substring(header.position, header.offset));\n        message.headers['Contact'][message.getHeaders('contact').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'content-length':\n    case 'l':\n      message.setHeader('content-length', headerValue);\n      parsed = message.parseHeader('content-length');\n      break;\n    case 'content-type':\n    case 'c':\n      message.setHeader('content-type', headerValue);\n      parsed = message.parseHeader('content-type');\n      break;\n    case 'cseq':\n      message.setHeader('cseq', headerValue);\n      parsed = message.parseHeader('cseq');\n      if(parsed) {\n        message.cseq = parsed.value;\n      }\n      if(message instanceof SIP.IncomingResponse) {\n        message.method = parsed.method;\n      }\n      break;\n    case 'max-forwards':\n      message.setHeader('max-forwards', headerValue);\n      parsed = message.parseHeader('max-forwards');\n      break;\n    case 'www-authenticate':\n      message.setHeader('www-authenticate', headerValue);\n      parsed = message.parseHeader('www-authenticate');\n      break;\n    case 'proxy-authenticate':\n      message.setHeader('proxy-authenticate', headerValue);\n      parsed = message.parseHeader('proxy-authenticate');\n      break;\n    case 'refer-to':\n    case 'r':\n      message.setHeader('refer-to', headerValue);\n      parsed = message.parseHeader('refer-to');\n      if (parsed) {\n        message.refer_to = parsed;\n      }\n      break;\n    default:\n      // Do not parse this header.\n      message.setHeader(headerName, headerValue);\n      parsed = 0;\n  }\n\n  if (parsed === undefined) {\n    return {\n      error: 'error parsing header \"'+ headerName +'\"'\n    };\n  } else {\n    return true;\n  }\n}\n\n/** Parse SIP Message\n * @function\n * @param {String} message SIP message.\n * @param {Object} logger object.\n * @returns {SIP.IncomingRequest|SIP.IncomingResponse|undefined}\n */\nParser = {};\nParser.parseMessage = function(data, ua) {\n  var message, firstLine, contentLength, bodyStart, parsed,\n    headerStart = 0,\n    headerEnd = data.indexOf('\\r\\n'),\n    logger = ua.getLogger('sip.parser');\n\n  if(headerEnd === -1) {\n    logger.warn('no CRLF found, not a SIP message, discarded');\n    return;\n  }\n\n  // Parse first line. Check if it is a Request or a Reply.\n  firstLine = data.substring(0, headerEnd);\n  parsed = SIP.Grammar.parse(firstLine, 'Request_Response');\n\n  if(parsed === -1) {\n    logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\n    return;\n  } else if(!parsed.status_code) {\n    message = new SIP.IncomingRequest(ua);\n    message.method = parsed.method;\n    message.ruri = parsed.uri;\n  } else {\n    message = new SIP.IncomingResponse(ua);\n    message.status_code = parsed.status_code;\n    message.reason_phrase = parsed.reason_phrase;\n  }\n\n  message.data = data;\n  headerStart = headerEnd + 2;\n\n  /* Loop over every line in data. Detect the end of each header and parse\n  * it or simply add to the headers collection.\n  */\n  while(true) {\n    headerEnd = getHeader(data, headerStart);\n\n    // The SIP message has normally finished.\n    if(headerEnd === -2) {\n      bodyStart = headerStart + 2;\n      break;\n    }\n    // data.indexOf returned -1 due to a malformed message.\n    else if(headerEnd === -1) {\n      logger.error('malformed message');\n      return;\n    }\n\n    parsed = parseHeader(message, data, headerStart, headerEnd);\n\n    if(parsed !== true) {\n      logger.error(parsed.error);\n      return;\n    }\n\n    headerStart = headerEnd + 2;\n  }\n\n  /* RFC3261 18.3.\n   * If there are additional bytes in the transport packet\n   * beyond the end of the body, they MUST be discarded.\n   */\n  if(message.hasHeader('content-length')) {\n    contentLength = message.getHeader('content-length');\n    message.body = data.substr(bodyStart, contentLength);\n  } else {\n    message.body = data.substring(bodyStart);\n  }\n\n  return message;\n};\n\nSIP.Parser = Parser;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///350\n");

/***/ }),
/* 351 */
/*!*******************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/SIPMessage.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP Message\n */\n\nmodule.exports = function (SIP) {\nvar\n  OutgoingRequest,\n  IncomingMessage,\n  IncomingRequest,\n  IncomingResponse;\n\nfunction getSupportedHeader (request) {\n  var allowUnregistered = request.ua.configuration.hackAllowUnregisteredOptionTags;\n  var optionTags = [];\n  var optionTagSet = {};\n\n  if (request.method === SIP.C.REGISTER) {\n    optionTags.push('path', 'gruu');\n  } else if (request.method === SIP.C.INVITE &&\n             (request.ua.contact.pub_gruu || request.ua.contact.temp_gruu)) {\n    optionTags.push('gruu');\n  }\n\n  if (request.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n    optionTags.push('100rel');\n  }\n  if (request.ua.configuration.replaces === SIP.C.supported.SUPPORTED) {\n    optionTags.push('replaces');\n  }\n\n  optionTags.push('outbound');\n\n  optionTags = optionTags.concat(request.ua.configuration.extraSupported);\n\n  optionTags = optionTags.filter(function(optionTag) {\n    var registered = SIP.C.OPTION_TAGS[optionTag];\n    var unique = !optionTagSet[optionTag];\n    optionTagSet[optionTag] = true;\n    return (registered || allowUnregistered) && unique;\n  });\n\n  return 'Supported: ' + optionTags.join(', ') + '\\r\\n';\n}\n\n/**\n * @augments SIP\n * @class Class for outgoing SIP request.\n * @param {String} method request method\n * @param {String} ruri request uri\n * @param {SIP.UA} ua\n * @param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_displayName, to_uri, to_tag, route_set\n * @param {Object} [headers] extra headers\n * @param {String} [body]\n */\nOutgoingRequest = function(method, ruri, ua, params, extraHeaders, body) {\n  var\n    to,\n    from,\n    call_id,\n    cseq,\n    to_uri,\n    from_uri;\n\n  params = params || {};\n\n  // Mandatory parameters check\n  if(!method || !ruri || !ua) {\n    return null;\n  }\n\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.method = method;\n  this.ruri = ruri;\n  this.body = body;\n  this.extraHeaders = (extraHeaders || []).slice();\n  this.statusCode = params.status_code;\n  this.reasonPhrase = params.reason_phrase;\n\n  // Fill the Common SIP Request Headers\n\n  // Route\n  if (params.route_set) {\n    this.setHeader('route', params.route_set);\n  } else if (ua.configuration.usePreloadedRoute){\n    this.setHeader('route', ua.transport.server.sip_uri);\n  }\n\n  // Via\n  // Empty Via header. Will be filled by the client transaction.\n  this.setHeader('via', '');\n\n  // Max-Forwards\n  this.setHeader('max-forwards', SIP.UA.C.MAX_FORWARDS);\n\n  // To\n  to_uri = params.to_uri || ruri;\n  to = (params.to_displayName || params.to_displayName === 0) ? '\"' + params.to_displayName + '\" ' : '';\n  to += '<' + (to_uri && to_uri.toRaw ? to_uri.toRaw() : to_uri) + '>';\n  to += params.to_tag ? ';tag=' + params.to_tag : '';\n  this.to = new SIP.NameAddrHeader.parse(to);\n  this.setHeader('to', to);\n\n  // From\n  from_uri = params.from_uri || ua.configuration.uri;\n  if (params.from_displayName || params.from_displayName === 0) {\n    from = '\"' + params.from_displayName + '\" ';\n  } else if (ua.configuration.displayName) {\n    from = '\"' + ua.configuration.displayName + '\" ';\n  } else {\n    from = '';\n  }\n  from += '<' + (from_uri && from_uri.toRaw ? from_uri.toRaw() : from_uri) + '>;tag=';\n  from += params.from_tag || SIP.Utils.newTag();\n  this.from = new SIP.NameAddrHeader.parse(from);\n  this.setHeader('from', from);\n\n  // Call-ID\n  call_id = params.call_id || (ua.configuration.sipjsId + SIP.Utils.createRandomToken(15));\n  this.call_id = call_id;\n  this.setHeader('call-id', call_id);\n\n  // CSeq\n  cseq = params.cseq || Math.floor(Math.random() * 10000);\n  this.cseq = cseq;\n  this.setHeader('cseq', cseq + ' ' + method);\n};\n\nOutgoingRequest.prototype = {\n  /**\n   * Replace the the given header by the given value.\n   * @param {String} name header name\n   * @param {String | Array} value header value\n   */\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, undefined if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length,\n      header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0];\n      }\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          return header.substring(header.indexOf(':')+1).trim();\n        }\n      }\n    }\n\n    return;\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length, regexp,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(header) {\n      length = header.length;\n      for (idx = 0; idx < length; idx++) {\n        result.push(header[idx]);\n      }\n      return result;\n    } else {\n      length = this.extraHeaders.length;\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          result.push(header.substring(header.indexOf(':')+1).trim());\n        }\n      }\n      return result;\n    }\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length;\n\n    if (this.headers[SIP.Utils.headerize(name)]) {\n      return true;\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  toString: function() {\n    var msg = '', header, length, idx;\n\n    msg += this.method + ' ' + (this.ruri.toRaw ? this.ruri.toRaw() : this.ruri) + ' SIP/2.0\\r\\n';\n\n    for (header in this.headers) {\n      length = this.headers[header].length;\n      for (idx = 0; idx < length; idx++) {\n        msg += header + ': ' + this.headers[header][idx] + '\\r\\n';\n      }\n    }\n\n    length = this.extraHeaders.length;\n    for (idx = 0; idx < length; idx++) {\n      msg += this.extraHeaders[idx].trim() +'\\r\\n';\n    }\n\n    msg += getSupportedHeader(this);\n    msg += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n\n    if (this.body) {\n      if (typeof this.body === 'string') {\n        length = SIP.Utils.str_utf8_length(this.body);\n        msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n        msg += this.body;\n      } else {\n        if (this.body.body && this.body.contentType) {\n          length = SIP.Utils.str_utf8_length(this.body.body);\n          msg += 'Content-Type: ' + this.body.contentType + '\\r\\n';\n          msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n          msg += this.body.body;\n        } else {\n          msg += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n        }\n      }\n    } else {\n      msg += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n    }\n\n    return msg;\n  }\n};\n\n/**\n * @augments SIP\n * @class Class for incoming SIP message.\n */\nIncomingMessage = function(){\n  this.data = null;\n  this.headers = null;\n  this.method =  null;\n  this.via = null;\n  this.via_branch = null;\n  this.call_id = null;\n  this.cseq = null;\n  this.from = null;\n  this.from_tag = null;\n  this.to = null;\n  this.to_tag = null;\n  this.body = null;\n};\n\nIncomingMessage.prototype = {\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  addHeader: function(name, value) {\n    var header = { raw: value };\n\n    name = SIP.Utils.headerize(name);\n\n    if(this.headers[name]) {\n      this.headers[name].push(header);\n    } else {\n      this.headers[name] = [header];\n    }\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, null if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0].raw;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(!header) {\n      return [];\n    }\n\n    length = header.length;\n    for (idx = 0; idx < length; idx++) {\n      result.push(header[idx].raw);\n    }\n\n    return result;\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    return(this.headers[SIP.Utils.headerize(name)]) ? true : false;\n  },\n\n  /**\n  * Parse the given header on the given index.\n  * @param {String} name header name\n  * @param {Number} [idx=0] header index\n  * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n  */\n  parseHeader: function(name, idx) {\n    var header, value, parsed;\n\n    name = SIP.Utils.headerize(name);\n\n    idx = idx || 0;\n\n    if(!this.headers[name]) {\n      this.logger.log('header \"' + name + '\" not present');\n      return;\n    } else if(idx >= this.headers[name].length) {\n      this.logger.log('not so many \"' + name + '\" headers present');\n      return;\n    }\n\n    header = this.headers[name][idx];\n    value = header.raw;\n\n    if(header.parsed) {\n      return header.parsed;\n    }\n\n    //substitute '-' by '_' for grammar rule matching.\n    parsed = SIP.Grammar.parse(value, name.replace(/-/g, '_'));\n\n    if(parsed === -1) {\n      this.headers[name].splice(idx, 1); //delete from headers\n      this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n      return;\n    } else {\n      header.parsed = parsed;\n      return parsed;\n    }\n  },\n\n  /**\n   * Message Header attribute selector. Alias of parseHeader.\n   * @param {String} name header name\n   * @param {Number} [idx=0] header index\n   * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n   *\n   * @example\n   * message.s('via',3).port\n   */\n  s: function(name, idx) {\n    return this.parseHeader(name, idx);\n  },\n\n  /**\n  * Replace the value of the given header by the value.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  setHeader: function(name, value) {\n    var header = { raw: value };\n    this.headers[SIP.Utils.headerize(name)] = [header];\n  },\n\n  toString: function() {\n    return this.data;\n  }\n};\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP request.\n */\nIncomingRequest = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.ruri = null;\n  this.transport = null;\n  this.server_transaction = null;\n};\nIncomingRequest.prototype = new IncomingMessage();\n\n/**\n* Stateful reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n* @param {Object} headers extra headers\n* @param {String} body body\n* @param {Function} [onSuccess] onSuccess callback\n* @param {Function} [onFailure] onFailure callback\n*/\nIncomingRequest.prototype.reply = function(code, reason, extraHeaders, body, onSuccess, onFailure) {\n  var rr, vias, length, idx, response,\n    to = this.getHeader('To'),\n    r = 0,\n    v = 0;\n\n  response = SIP.Utils.buildStatusLine(code, reason);\n  extraHeaders = (extraHeaders || []).slice();\n\n  if(this.method === SIP.C.INVITE && code > 100 && code <= 200) {\n    rr = this.getHeaders('record-route');\n    length = rr.length;\n\n    for(r; r < length; r++) {\n      response += 'Record-Route: ' + rr[r] + '\\r\\n';\n    }\n  }\n\n  vias = this.getHeaders('via');\n  length = vias.length;\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n\n  length = extraHeaders.length;\n  for (idx = 0; idx < length; idx++) {\n    response += extraHeaders[idx].trim() +'\\r\\n';\n  }\n\n  response += getSupportedHeader(this);\n  response += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n\n  if (body) {\n    if (typeof body === 'string') {\n      length = SIP.Utils.str_utf8_length(body);\n      response += 'Content-Type: application/sdp\\r\\n';\n      response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n      response += body;\n    } else {\n      if (body.body && body.contentType) {\n        length = SIP.Utils.str_utf8_length(body.body);\n        response += 'Content-Type: ' + body.contentType + '\\r\\n';\n        response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n        response += body.body;\n      } else {\n        response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n      }\n    }\n  } else {\n    response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n  }\n\n  this.server_transaction.receiveResponse(code, response).then(onSuccess, onFailure);\n\n  return response;\n};\n\n/**\n* Stateless reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n*/\nIncomingRequest.prototype.reply_sl = function(code, reason) {\n  var to, response,\n    v = 0,\n    vias = this.getHeaders('via'),\n    length = vias.length;\n\n  response = SIP.Utils.buildStatusLine(code, reason);\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  to = this.getHeader('To');\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n  response += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n  response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n\n  this.transport.send(response);\n};\n\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP response.\n */\nIncomingResponse = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.headers = {};\n  this.status_code = null;\n  this.reason_phrase = null;\n};\nIncomingResponse.prototype = new IncomingMessage();\n\nSIP.OutgoingRequest = OutgoingRequest;\nSIP.IncomingRequest = IncomingRequest;\nSIP.IncomingResponse = IncomingResponse;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///351\n");

/***/ }),
/* 352 */
/*!************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/URI.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP URI\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP URI.\n *\n * @param {String} [scheme]\n * @param {String} [user]\n * @param {String} host\n * @param {String} [port]\n * @param {Object} [parameters]\n * @param {Object} [headers]\n *\n */\nmodule.exports = function (SIP) {\nvar URI;\n\nURI = function(scheme, user, host, port, parameters, headers) {\n  var param, header, raw, normal;\n\n  // Checks\n  if(!host) {\n    throw new TypeError('missing or invalid \"host\" parameter');\n  }\n\n  // Initialize parameters\n  scheme = scheme || SIP.C.SIP;\n  this.parameters = {};\n  this.headers = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  for (header in headers) {\n    this.setHeader(header, headers[header]);\n  }\n\n  // Raw URI\n  raw = {\n    scheme: scheme,\n    user: user,\n    host: host,\n    port: port\n  };\n\n  // Normalized URI\n  normal = {\n    scheme: scheme.toLowerCase(),\n    user: user,\n    host: host.toLowerCase(),\n    port: port\n  };\n\n  Object.defineProperties(this, {\n    _normal: {\n      get: function() { return normal; }\n    },\n\n    _raw: {\n      get: function() { return raw; }\n    },\n\n    scheme: {\n      get: function() { return normal.scheme; },\n      set: function(value) {\n        raw.scheme = value;\n        normal.scheme = value.toLowerCase();\n      }\n    },\n\n    user: {\n      get: function() { return normal.user; },\n      set: function(value) {\n        normal.user = raw.user = value;\n      }\n    },\n\n    host: {\n      get: function() { return normal.host; },\n      set: function(value) {\n        raw.host = value;\n        normal.host = value.toLowerCase();\n      }\n    },\n\n    aor: {\n      get: function() { return normal.user + '@' + normal.host; }\n    },\n\n    port: {\n      get: function() { return normal.port; },\n      set: function(value) {\n        normal.port = raw.port = value === 0 ? value : (parseInt(value,10) || null);\n      }\n    }\n  });\n};\n\nURI.prototype = {\n  setParam: function(key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString().toLowerCase();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  getHeader: function(name) {\n    if(name) {\n      return this.headers[SIP.Utils.headerize(name)];\n    }\n  },\n\n  hasHeader: function(name) {\n    if(name) {\n      return (this.headers.hasOwnProperty(SIP.Utils.headerize(name)) && true) || false;\n    }\n  },\n\n  deleteHeader: function(header) {\n    var value;\n    header = SIP.Utils.headerize(header);\n    if(this.headers.hasOwnProperty(header)) {\n      value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  },\n\n  clearHeaders: function() {\n    this.headers = {};\n  },\n\n  clone: function() {\n    return new URI(\n      this._raw.scheme,\n      this._raw.user,\n      this._raw.host,\n      this._raw.port,\n      JSON.parse(JSON.stringify(this.parameters)),\n      JSON.parse(JSON.stringify(this.headers)));\n  },\n\n  toRaw: function() {\n    return this._toString(this._raw);\n  },\n\n  toString: function() {\n    return this._toString(this._normal);\n  },\n\n  _toString: function(uri) {\n    var header, parameter, idx, uriString, headers = [];\n\n    uriString  = uri.scheme + ':';\n    // add slashes if it's not a sip(s) URI\n    if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\n      uriString += \"//\";\n    }\n    if (uri.user) {\n      uriString += SIP.Utils.escapeUser(uri.user) + '@';\n    }\n    uriString += uri.host;\n    if (uri.port || uri.port === 0) {\n      uriString += ':' + uri.port;\n    }\n\n    for (parameter in this.parameters) {\n      uriString += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        uriString += '='+ this.parameters[parameter];\n      }\n    }\n\n    for(header in this.headers) {\n      for(idx in this.headers[header]) {\n        headers.push(header + '=' + this.headers[header][idx]);\n      }\n    }\n\n    if (headers.length > 0) {\n      uriString += '?' + headers.join('&');\n    }\n\n    return uriString;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.URI instance or undefined if\n  * it is an invalid URI.\n  * @public\n  * @param {String} uri\n  */\nURI.parse = function(uri) {\n  uri = SIP.Grammar.parse(uri,'SIP_URI');\n\n  if (uri !== -1) {\n    return uri;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.URI = URI;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///352\n");

/***/ }),
/* 353 */
/*!***********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/NameAddrHeader.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP NameAddrHeader\n */\n\n/**\n * @augments SIP\n * @class Class creating a Name Address SIP header.\n *\n * @param {SIP.URI} uri\n * @param {String} [displayName]\n * @param {Object} [parameters]\n *\n */\nmodule.exports = function (SIP) {\nvar NameAddrHeader;\n\nNameAddrHeader = function(uri, displayName, parameters) {\n  var param;\n\n  // Checks\n  if(!uri || !(uri instanceof SIP.URI)) {\n    throw new TypeError('missing or invalid \"uri\" parameter');\n  }\n\n  // Initialize parameters\n  this.uri = uri;\n  this.parameters = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  Object.defineProperties(this, {\n    friendlyName: {\n      get: function() { return this.displayName || uri.aor; }\n    },\n\n    displayName: {\n      get: function() { return displayName; },\n      set: function(value) {\n        displayName = (value === 0) ? '0' : value;\n      }\n    }\n  });\n};\nNameAddrHeader.prototype = {\n  setParam: function (key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n  getParam: SIP.URI.prototype.getParam,\n  hasParam: SIP.URI.prototype.hasParam,\n  deleteParam: SIP.URI.prototype.deleteParam,\n  clearParams: SIP.URI.prototype.clearParams,\n\n  clone: function() {\n    return new NameAddrHeader(\n      this.uri.clone(),\n      this.displayName,\n      JSON.parse(JSON.stringify(this.parameters)));\n  },\n\n  toString: function() {\n    var body, parameter;\n\n    body  = (this.displayName || this.displayName === 0) ? '\"' + this.displayName + '\" ' : '';\n    body += '<' + this.uri.toString() + '>';\n\n    for (parameter in this.parameters) {\n      body += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        body += '='+ this.parameters[parameter];\n      }\n    }\n\n    return body;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n  * it is an invalid NameAddrHeader.\n  * @public\n  * @param {String} name_addr_header\n  */\nNameAddrHeader.parse = function(name_addr_header) {\n  name_addr_header = SIP.Grammar.parse(name_addr_header,'Name_Addr_Header');\n\n  if (name_addr_header !== -1) {\n    return name_addr_header;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.NameAddrHeader = NameAddrHeader;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL05hbWVBZGRySGVhZGVyLmpzP2NlZGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QixvQ0FBb0M7QUFDM0QsS0FBSzs7QUFFTDtBQUNBLHVCQUF1QixvQkFBb0IsRUFBRTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjM1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNJUCBOYW1lQWRkckhlYWRlclxuICovXG5cbi8qKlxuICogQGF1Z21lbnRzIFNJUFxuICogQGNsYXNzIENsYXNzIGNyZWF0aW5nIGEgTmFtZSBBZGRyZXNzIFNJUCBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtTSVAuVVJJfSB1cmlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZGlzcGxheU5hbWVdXG4gKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTSVApIHtcbnZhciBOYW1lQWRkckhlYWRlcjtcblxuTmFtZUFkZHJIZWFkZXIgPSBmdW5jdGlvbih1cmksIGRpc3BsYXlOYW1lLCBwYXJhbWV0ZXJzKSB7XG4gIHZhciBwYXJhbTtcblxuICAvLyBDaGVja3NcbiAgaWYoIXVyaSB8fCAhKHVyaSBpbnN0YW5jZW9mIFNJUC5VUkkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBvciBpbnZhbGlkIFwidXJpXCIgcGFyYW1ldGVyJyk7XG4gIH1cblxuICAvLyBJbml0aWFsaXplIHBhcmFtZXRlcnNcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuXG4gIGZvciAocGFyYW0gaW4gcGFyYW1ldGVycykge1xuICAgIHRoaXMuc2V0UGFyYW0ocGFyYW0sIHBhcmFtZXRlcnNbcGFyYW1dKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBmcmllbmRseU5hbWU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRpc3BsYXlOYW1lIHx8IHVyaS5hb3I7IH1cbiAgICB9LFxuXG4gICAgZGlzcGxheU5hbWU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBkaXNwbGF5TmFtZTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgZGlzcGxheU5hbWUgPSAodmFsdWUgPT09IDApID8gJzAnIDogdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5OYW1lQWRkckhlYWRlci5wcm90b3R5cGUgPSB7XG4gIHNldFBhcmFtOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmKGtleSkge1xuICAgICAgdGhpcy5wYXJhbWV0ZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9ICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsKSA/IG51bGwgOiB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgfSxcbiAgZ2V0UGFyYW06IFNJUC5VUkkucHJvdG90eXBlLmdldFBhcmFtLFxuICBoYXNQYXJhbTogU0lQLlVSSS5wcm90b3R5cGUuaGFzUGFyYW0sXG4gIGRlbGV0ZVBhcmFtOiBTSVAuVVJJLnByb3RvdHlwZS5kZWxldGVQYXJhbSxcbiAgY2xlYXJQYXJhbXM6IFNJUC5VUkkucHJvdG90eXBlLmNsZWFyUGFyYW1zLFxuXG4gIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE5hbWVBZGRySGVhZGVyKFxuICAgICAgdGhpcy51cmkuY2xvbmUoKSxcbiAgICAgIHRoaXMuZGlzcGxheU5hbWUsXG4gICAgICBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucGFyYW1ldGVycykpKTtcbiAgfSxcblxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvZHksIHBhcmFtZXRlcjtcblxuICAgIGJvZHkgID0gKHRoaXMuZGlzcGxheU5hbWUgfHwgdGhpcy5kaXNwbGF5TmFtZSA9PT0gMCkgPyAnXCInICsgdGhpcy5kaXNwbGF5TmFtZSArICdcIiAnIDogJyc7XG4gICAgYm9keSArPSAnPCcgKyB0aGlzLnVyaS50b1N0cmluZygpICsgJz4nO1xuXG4gICAgZm9yIChwYXJhbWV0ZXIgaW4gdGhpcy5wYXJhbWV0ZXJzKSB7XG4gICAgICBib2R5ICs9ICc7JyArIHBhcmFtZXRlcjtcblxuICAgICAgaWYgKHRoaXMucGFyYW1ldGVyc1twYXJhbWV0ZXJdICE9PSBudWxsKSB7XG4gICAgICAgIGJvZHkgKz0gJz0nKyB0aGlzLnBhcmFtZXRlcnNbcGFyYW1ldGVyXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYm9keTtcbiAgfVxufTtcblxuXG4vKipcbiAgKiBQYXJzZSB0aGUgZ2l2ZW4gc3RyaW5nIGFuZCByZXR1cm5zIGEgU0lQLk5hbWVBZGRySGVhZGVyIGluc3RhbmNlIG9yIHVuZGVmaW5lZCBpZlxuICAqIGl0IGlzIGFuIGludmFsaWQgTmFtZUFkZHJIZWFkZXIuXG4gICogQHB1YmxpY1xuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lX2FkZHJfaGVhZGVyXG4gICovXG5OYW1lQWRkckhlYWRlci5wYXJzZSA9IGZ1bmN0aW9uKG5hbWVfYWRkcl9oZWFkZXIpIHtcbiAgbmFtZV9hZGRyX2hlYWRlciA9IFNJUC5HcmFtbWFyLnBhcnNlKG5hbWVfYWRkcl9oZWFkZXIsJ05hbWVfQWRkcl9IZWFkZXInKTtcblxuICBpZiAobmFtZV9hZGRyX2hlYWRlciAhPT0gLTEpIHtcbiAgICByZXR1cm4gbmFtZV9hZGRyX2hlYWRlcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5TSVAuTmFtZUFkZHJIZWFkZXIgPSBOYW1lQWRkckhlYWRlcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9zcmMvTmFtZUFkZHJIZWFkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDM1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///353\n");

/***/ }),
/* 354 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Transactions.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP Transactions\n */\n\n/**\n * SIP Transactions module.\n * @augments SIP\n */\nmodule.exports = function (SIP) {\nvar\n  C = {\n    // Transaction states\n    STATUS_TRYING:     1,\n    STATUS_PROCEEDING: 2,\n    STATUS_CALLING:    3,\n    STATUS_ACCEPTED:   4,\n    STATUS_COMPLETED:  5,\n    STATUS_TERMINATED: 6,\n    STATUS_CONFIRMED:  7,\n\n    // Transaction types\n    NON_INVITE_CLIENT: 'nict',\n    NON_INVITE_SERVER: 'nist',\n    INVITE_CLIENT: 'ict',\n    INVITE_SERVER: 'ist'\n  };\n\nfunction buildViaHeader (request_sender, transport, id) {\n  var via;\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + id;\n  if (request_sender.ua.configuration.forceRport) {\n    via += ';rport';\n  }\n  return via;\n}\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar NonInviteClientTransaction = function(request_sender, request, transport) {\n  var via;\n\n  this.type = C.NON_INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = buildViaHeader(request_sender, transport, this.id);\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n};\nNonInviteClientTransaction.prototype = Object.create(SIP.EventEmitter.prototype);\n\nNonInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n\n  this.stateChanged(C.STATUS_TRYING);\n  this.F = SIP.Timers.setTimeout(tr.timer_F.bind(tr), SIP.Timers.TIMER_F);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nNonInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting non-INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.F);\n  SIP.Timers.clearTimeout(this.K);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onTransportError();\n};\n\nNonInviteClientTransaction.prototype.timer_F = function() {\n  this.logger.log('Timer F expired for non-INVITE client transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onRequestTimeout();\n};\n\nNonInviteClientTransaction.prototype.timer_K = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nNonInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n    tr = this,\n    status_code = response.status_code;\n\n  if(status_code < 200) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        SIP.Timers.clearTimeout(this.F);\n\n        if(status_code === 408) {\n          this.request_sender.onRequestTimeout();\n        } else {\n          this.request_sender.receiveResponse(response);\n        }\n\n        this.K = SIP.Timers.setTimeout(tr.timer_K.bind(tr), SIP.Timers.TIMER_K);\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\n\n/**\n* @augments SIP.Transactions\n* @class Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar InviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    tr = this;\n\n  this.type = C.INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.ict', this.id);\n\n  via = buildViaHeader(request_sender, transport, this.id);\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  // Add the cancel property to the request.\n  //Will be called from the request instance, not the transaction itself.\n  this.request.cancel = function(reason, extraHeaders) {\n    extraHeaders = (extraHeaders || []).slice();\n    var length = extraHeaders.length;\n    var extraHeadersString = null;\n    for (var idx = 0; idx < length; idx++) {\n      extraHeadersString = (extraHeadersString || '') + extraHeaders[idx].trim() + '\\r\\n';\n    }\n\n    tr.cancel_request(tr, reason, extraHeadersString);\n  };\n};\nInviteClientTransaction.prototype = Object.create(SIP.EventEmitter.prototype);\n\nInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n  this.stateChanged(C.STATUS_CALLING);\n  this.B = SIP.Timers.setTimeout(tr.timer_B.bind(tr), SIP.Timers.TIMER_B);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  SIP.Timers.clearTimeout(this.D);\n  SIP.Timers.clearTimeout(this.M);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n\n  if (this.state !== C.STATUS_ACCEPTED) {\n    this.request_sender.onTransportError();\n  }\n};\n\n// RFC 6026 7.2\nInviteClientTransaction.prototype.timer_M = function() {\n  this.logger.log('Timer M expired for INVITE client transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    SIP.Timers.clearTimeout(this.B);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n  }\n};\n\n// RFC 3261 17.1.1\nInviteClientTransaction.prototype.timer_B = function() {\n  this.logger.log('Timer B expired for INVITE client transaction ' + this.id);\n  if(this.state === C.STATUS_CALLING) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n    this.request_sender.onRequestTimeout();\n  }\n};\n\nInviteClientTransaction.prototype.timer_D = function() {\n  this.logger.log('Timer D expired for INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nInviteClientTransaction.prototype.sendACK = function(response) {\n  var tr = this;\n\n  this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\\r\\n';\n  this.ack += 'Via: ' + this.request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.ack += 'Route: ' + this.request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.ack += 'To: ' + response.getHeader('to') + '\\r\\n';\n  this.ack += 'From: ' + this.request.headers['From'].toString() + '\\r\\n';\n  this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\\r\\n';\n  this.ack += 'Content-Length: 0\\r\\n';\n  this.ack += 'CSeq: ' + this.request.headers['CSeq'].toString().split(' ')[0];\n  this.ack += ' ACK\\r\\n\\r\\n';\n\n  this.D = SIP.Timers.setTimeout(tr.timer_D.bind(tr), SIP.Timers.TIMER_D);\n\n  this.transport.send(this.ack);\n};\n\nInviteClientTransaction.prototype.cancel_request = function(tr, reason, extraHeaders) {\n  var request = tr.request;\n\n  this.cancel = SIP.C.CANCEL + ' ' + request.ruri + ' SIP/2.0\\r\\n';\n  this.cancel += 'Via: ' + request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.cancel += 'Route: ' + request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.cancel += 'To: ' + request.headers['To'].toString() + '\\r\\n';\n  this.cancel += 'From: ' + request.headers['From'].toString() + '\\r\\n';\n  this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\\r\\n';\n  this.cancel += 'CSeq: ' + request.headers['CSeq'].toString().split(' ')[0] +\n  ' CANCEL\\r\\n';\n\n  if(reason) {\n    this.cancel += 'Reason: ' + reason + '\\r\\n';\n  }\n\n  if (extraHeaders) {\n    this.cancel += extraHeaders;\n  }\n\n  this.cancel += 'Content-Length: 0\\r\\n\\r\\n';\n\n  // Send only if a provisional response (>100) has been received.\n  if(this.state === C.STATUS_PROCEEDING) {\n    this.transport.send(this.cancel);\n  }\n};\n\nInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n  tr = this,\n  status_code = response.status_code;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        if(this.cancel) {\n          this.transport.send(this.cancel);\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.M = SIP.Timers.setTimeout(tr.timer_M.bind(tr), SIP.Timers.TIMER_M);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_ACCEPTED:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.sendACK(response);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_COMPLETED:\n        this.sendACK(response);\n        break;\n    }\n  }\n};\n\n\n/**\n * @augments SIP.Transactions\n * @class ACK Client Transaction\n * @param {SIP.RequestSender} request_sender\n * @param {SIP.OutgoingRequest} request\n * @param {SIP.Transport} transport\n */\nvar AckClientTransaction = function(request_sender, request, transport) {\n  var via;\n\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = buildViaHeader(request_sender, transport, this.id);\n  this.request.setHeader('via', via);\n};\nAckClientTransaction.prototype = Object.create(SIP.EventEmitter.prototype);\n\nAckClientTransaction.prototype.send = function() {\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nAckClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, for an ACK client transaction ' + this.id);\n  this.request_sender.onTransportError();\n};\n\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar NonInviteServerTransaction = function(request, ua) {\n  this.type = C.NON_INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.nist', this.id);\n\n  this.state = C.STATUS_TRYING;\n\n  ua.newTransaction(this);\n};\nNonInviteServerTransaction.prototype = Object.create(SIP.EventEmitter.prototype);\n\nNonInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteServerTransaction.prototype.timer_J = function() {\n  this.logger.log('Timer J expired for non-INVITE server transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nNonInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting non-INVITE server transaction ' + this.id);\n\n    SIP.Timers.clearTimeout(this.J);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nNonInviteServerTransaction.prototype.receiveResponse = function(status_code, response) {\n  var tr = this;\n  var deferred = SIP.Utils.defer();\n\n  if(status_code === 100) {\n    /* RFC 4320 4.1\n     * 'A SIP element MUST NOT\n     * send any provisional response with a\n     * Status-Code other than 100 to a non-INVITE request.'\n     */\n    switch(this.state) {\n      case C.STATUS_TRYING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        if(!this.transport.send(response))  {\n          this.onTransportError();\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.last_response = response;\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          deferred.reject();\n        } else {\n          deferred.resolve();\n        }\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.last_response = response;\n        this.J = SIP.Timers.setTimeout(tr.timer_J.bind(tr), SIP.Timers.TIMER_J);\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          deferred.reject();\n        } else {\n          deferred.resolve();\n        }\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n\n  return deferred.promise;\n};\n\n/**\n* @augments SIP.Transactions\n* @class Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar InviteServerTransaction = function(request, ua) {\n  this.type = C.INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.ist', this.id);\n\n  this.state = C.STATUS_PROCEEDING;\n\n  ua.newTransaction(this);\n\n  this.resendProvisionalTimer = null;\n\n  request.reply(100);\n};\nInviteServerTransaction.prototype = Object.create(SIP.EventEmitter.prototype);\n\nInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteServerTransaction.prototype.timer_H = function() {\n  this.logger.log('Timer H expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_COMPLETED) {\n    this.logger.warn('transactions', 'ACK for INVITE server transaction was never received, call will be terminated');\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nInviteServerTransaction.prototype.timer_I = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\n// RFC 6026 7.1\nInviteServerTransaction.prototype.timer_L = function() {\n  this.logger.log('Timer L expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting INVITE server transaction ' + this.id);\n\n    if (this.resendProvisionalTimer !== null) {\n      SIP.Timers.clearInterval(this.resendProvisionalTimer);\n      this.resendProvisionalTimer = null;\n    }\n\n    SIP.Timers.clearTimeout(this.L);\n    SIP.Timers.clearTimeout(this.H);\n    SIP.Timers.clearTimeout(this.I);\n\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.resend_provisional = function() {\n  if(!this.transport.send(this.last_response)) {\n    this.onTransportError();\n  }\n};\n\n// INVITE Server Transaction RFC 3261 17.2.1\nInviteServerTransaction.prototype.receiveResponse = function(status_code, response) {\n  var tr = this;\n  var deferred = SIP.Utils.defer();\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n        }\n        this.last_response = response;\n        break;\n    }\n  }\n\n  if(status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {\n    // Trigger the resendProvisionalTimer only for the first non 100 provisional response.\n    if(this.resendProvisionalTimer === null) {\n      this.resendProvisionalTimer = SIP.Timers.setInterval(tr.resend_provisional.bind(tr),\n        SIP.Timers.PROVISIONAL_RESPONSE_INTERVAL);\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.last_response = response;\n        this.L = SIP.Timers.setTimeout(tr.timer_L.bind(tr), SIP.Timers.TIMER_L);\n\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n        /* falls through */\n        case C.STATUS_ACCEPTED:\n          // Note that this point will be reached for proceeding tr.state also.\n          if(!this.transport.send(response)) {\n            this.onTransportError();\n            deferred.reject();\n          } else {\n            deferred.resolve();\n          }\n          break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          deferred.reject();\n        } else {\n          this.stateChanged(C.STATUS_COMPLETED);\n          this.H = SIP.Timers.setTimeout(tr.timer_H.bind(tr), SIP.Timers.TIMER_H);\n          deferred.resolve();\n        }\n        break;\n    }\n  }\n\n  return deferred.promise;\n};\n\n/**\n * @function\n * @param {SIP.UA} ua\n * @param {SIP.IncomingRequest} request\n *\n * @return {boolean}\n * INVITE:\n *  _true_ if retransmission\n *  _false_ new request\n *\n * ACK:\n *  _true_  ACK to non2xx response\n *  _false_ ACK must be passed to TU (accepted state)\n *          ACK to 2xx response\n *\n * CANCEL:\n *  _true_  no matching invite transaction\n *  _false_ matching invite transaction and no final response sent\n *\n * OTHER:\n *  _true_  retransmission\n *  _false_ new request\n */\nvar checkTransaction = function(ua, request) {\n  var tr;\n\n  switch(request.method) {\n    case SIP.C.INVITE:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_PROCEEDING:\n            tr.transport.send(tr.last_response);\n            break;\n\n            // RFC 6026 7.1 Invite retransmission\n            //received while in C.STATUS_ACCEPTED state. Absorb it.\n          case C.STATUS_ACCEPTED:\n            break;\n        }\n        return true;\n      }\n      break;\n    case SIP.C.ACK:\n      tr = ua.transactions.ist[request.via_branch];\n\n      // RFC 6026 7.1\n      if(tr) {\n        if(tr.state === C.STATUS_ACCEPTED) {\n          return false;\n        } else if(tr.state === C.STATUS_COMPLETED) {\n          tr.stateChanged(C.STATUS_CONFIRMED);\n          tr.I = SIP.Timers.setTimeout(tr.timer_I.bind(tr), SIP.Timers.TIMER_I);\n          return true;\n        }\n      }\n\n      // ACK to 2XX Response.\n      else {\n        return false;\n      }\n      break;\n    case SIP.C.CANCEL:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        request.reply_sl(200);\n        if(tr.state === C.STATUS_PROCEEDING) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        request.reply_sl(481);\n        return true;\n      }\n      break;\n    default:\n\n      // Non-INVITE Server Transaction RFC 3261 17.2.2\n      tr = ua.transactions.nist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_TRYING:\n            break;\n          case C.STATUS_PROCEEDING:\n          case C.STATUS_COMPLETED:\n            tr.transport.send(tr.last_response);\n            break;\n        }\n        return true;\n      }\n      break;\n  }\n};\n\nSIP.Transactions = {\n  C: C,\n  checkTransaction: checkTransaction,\n  NonInviteClientTransaction: NonInviteClientTransaction,\n  InviteClientTransaction: InviteClientTransaction,\n  AckClientTransaction: AckClientTransaction,\n  NonInviteServerTransaction: NonInviteServerTransaction,\n  InviteServerTransaction: InviteServerTransaction\n};\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///354\n");

/***/ }),
/* 355 */
/*!****************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Dialogs.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview SIP Dialog\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP dialog.\n * @param {SIP.RTCSession} owner\n * @param {SIP.IncomingRequest|SIP.IncomingResponse} message\n * @param {Enum} type UAC / UAS\n * @param {Enum} state SIP.Dialog.C.STATUS_EARLY / SIP.Dialog.C.STATUS_CONFIRMED\n */\nmodule.exports = function (SIP) {\n\nvar RequestSender = __webpack_require__(/*! ./Dialog/RequestSender */ 356)(SIP);\n\nvar Dialog,\n  C = {\n    // Dialog states\n    STATUS_EARLY:       1,\n    STATUS_CONFIRMED:   2\n  };\n\n// RFC 3261 12.1\nDialog = function(owner, message, type, state) {\n  var contact;\n\n  this.uac_pending_reply = false;\n  this.uas_pending_reply = false;\n\n  if(!message.hasHeader('contact')) {\n    return {\n      error: 'unable to create a Dialog without Contact header field'\n    };\n  }\n\n  if(message instanceof SIP.IncomingResponse) {\n    state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n  } else {\n    // Create confirmed dialog if state is not defined\n    state = state || C.STATUS_CONFIRMED;\n  }\n\n  contact = message.parseHeader('contact');\n\n  // RFC 3261 12.1.1\n  if(type === 'UAS') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.to_tag,\n      remote_tag: message.from_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.remote_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('to').uri;\n    this.remote_uri = message.parseHeader('from').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route');\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n  }\n  // RFC 3261 12.1.2\n  else if(type === 'UAC') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.from_tag,\n      remote_tag: message.to_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('from').uri;\n    this.pracked = [];\n    this.remote_uri = message.parseHeader('to').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route').reverse();\n\n    //RENDERBODY\n    if (this.state === C.STATUS_EARLY && (!owner.hasOffer)) {\n      this.mediaHandler = owner.mediaHandlerFactory(owner);\n    }\n  }\n\n  this.logger = owner.ua.getLogger('sip.dialog', this.id.toString());\n  this.owner = owner;\n  owner.ua.dialogs[this.id.toString()] = this;\n  this.logger.log('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'));\n  owner.emit('dialog', this);\n};\n\nDialog.prototype = {\n  /**\n   * @param {SIP.IncomingMessage} message\n   * @param {Enum} UAC/UAS\n   */\n  update: function(message, type) {\n    this.state = C.STATUS_CONFIRMED;\n\n    this.logger.log('dialog '+ this.id.toString() +'  changed to CONFIRMED state');\n\n    if(type === 'UAC') {\n      // RFC 3261 13.2.2.4\n      this.route_set = message.getHeaders('record-route').reverse();\n    }\n  },\n\n  terminate: function() {\n    this.logger.log('dialog ' + this.id.toString() + ' deleted');\n    if (this.mediaHandler && this.state !== C.STATUS_CONFIRMED) {\n      this.mediaHandler.peerConnection.close();\n    }\n    delete this.owner.ua.dialogs[this.id.toString()];\n  },\n\n  /**\n  * @param {String} method request method\n  * @param {Object} extraHeaders extra headers\n  * @returns {SIP.OutgoingRequest}\n  */\n\n  // RFC 3261 12.2.1.1\n  createRequest: function(method, extraHeaders, body) {\n    var cseq, request;\n    extraHeaders = (extraHeaders || []).slice();\n\n    if(!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }\n\n    cseq = (method === SIP.C.CANCEL || method === SIP.C.ACK) ? this.invite_seqnum : this.local_seqnum += 1;\n\n    request = new SIP.OutgoingRequest(\n      method,\n      this.remote_target,\n      this.owner.ua, {\n        'cseq': cseq,\n        'call_id': this.id.call_id,\n        'from_uri': this.local_uri,\n        'from_tag': this.id.local_tag,\n        'to_uri': this.remote_uri,\n        'to_tag': this.id.remote_tag,\n        'route_set': this.route_set\n      }, extraHeaders, body);\n\n    request.dialog = this;\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  * @returns {Boolean}\n  */\n\n  // RFC 3261 12.2.2\n  checkInDialogRequest: function(request) {\n    var self = this;\n\n    if(!this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    } else if(request.cseq < this.remote_seqnum) {\n        //Do not try to reply to an ACK request.\n        if (request.method !== SIP.C.ACK) {\n          request.reply(500);\n        }\n        if (request.cseq === this.invite_seqnum) {\n          return true;\n        }\n        return false;\n    } else if(request.cseq > this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    }\n\n    switch(request.method) {\n      // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-\n      case SIP.C.INVITE:\n        if (this.uac_pending_reply === true) {\n          request.reply(491);\n        } else if (this.uas_pending_reply === true) {\n          var retryAfter = (Math.random() * 10 | 0) + 1;\n          request.reply(500, null, ['Retry-After:' + retryAfter]);\n          return false;\n        } else {\n          this.uas_pending_reply = true;\n          request.server_transaction.on('stateChanged', function stateChanged(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n                this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n                this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n              this.removeListener('stateChanged', stateChanged);\n              self.uas_pending_reply = false;\n\n              if (self.uac_pending_reply === false) {\n                self.owner.onReadyToReinvite();\n              }\n            }\n          });\n        }\n\n        // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n      case SIP.C.NOTIFY:\n        // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_COMPLETED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n    }\n\n    return true;\n  },\n\n  sendRequest: function(applicant, method, options) {\n    options = options || {};\n\n    var extraHeaders = (options.extraHeaders || []).slice();\n\n    var body = null;\n    if (options.body) {\n      if (options.body.body) {\n        body = options.body;\n      } else {\n        body = {};\n        body.body = options.body;\n        if (options.contentType) {\n          body.contentType = options.contentType;\n        }\n      }\n    }\n\n    var request = this.createRequest(method, extraHeaders, body),\n      request_sender = new RequestSender(this, applicant, request);\n\n    request_sender.send();\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  */\n  receiveRequest: function(request) {\n    //Check in-dialog request\n    if(!this.checkInDialogRequest(request)) {\n      return;\n    }\n\n    this.owner.receiveRequest(request);\n  }\n};\n\nDialog.C = C;\nSIP.Dialog = Dialog;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///355\n");

/***/ }),
/* 356 */
/*!*****************************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Dialog/RequestSender.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @fileoverview In-Dialog Request Sender\n */\n\n/**\n * @augments SIP.Dialog\n * @class Class creating an In-dialog request sender.\n * @param {SIP.Dialog} dialog\n * @param {Object} applicant\n * @param {SIP.OutgoingRequest} request\n */\n/**\n * @fileoverview in-Dialog Request Sender\n */\n\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(dialog, applicant, request) {\n\n  this.dialog = dialog;\n  this.applicant = applicant;\n  this.request = request;\n\n  // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n  this.reattempt = false;\n  this.reattemptTimer = null;\n};\n\nRequestSender.prototype = {\n  send: function() {\n    var self = this,\n      request_sender = new SIP.RequestSender(this, this.dialog.owner.ua);\n\n      request_sender.send();\n\n    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-\n    if (this.request.method === SIP.C.INVITE && request_sender.clientTransaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      this.dialog.uac_pending_reply = true;\n      request_sender.clientTransaction.on('stateChanged', function stateChanged(){\n        if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n            this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n            this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n          this.removeListener('stateChanged', stateChanged);\n          self.dialog.uac_pending_reply = false;\n\n          if (self.dialog.uas_pending_reply === false) {\n            self.dialog.owner.onReadyToReinvite();\n          }\n        }\n      });\n    }\n  },\n\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  receiveResponse: function(response) {\n    var self = this;\n\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this.applicant.onDialogError(response);\n    } else if (response.method === SIP.C.INVITE && response.status_code === 491) {\n      if (this.reattempt) {\n        this.applicant.receiveResponse(response);\n      } else {\n        this.request.cseq.value = this.dialog.local_seqnum += 1;\n        this.reattemptTimer = SIP.Timers.setTimeout(\n          function() {\n            if (self.applicant.owner.status !== SIP.Session.C.STATUS_TERMINATED) {\n              self.reattempt = true;\n              self.request_sender.send();\n            }\n          },\n          this.getReattemptTimeout()\n        );\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nreturn RequestSender;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0RpYWxvZy9SZXF1ZXN0U2VuZGVyLmpzPzI5MzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLE9BQU87QUFDbEIsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIzNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEluLURpYWxvZyBSZXF1ZXN0IFNlbmRlclxuICovXG5cbi8qKlxuICogQGF1Z21lbnRzIFNJUC5EaWFsb2dcbiAqIEBjbGFzcyBDbGFzcyBjcmVhdGluZyBhbiBJbi1kaWFsb2cgcmVxdWVzdCBzZW5kZXIuXG4gKiBAcGFyYW0ge1NJUC5EaWFsb2d9IGRpYWxvZ1xuICogQHBhcmFtIHtPYmplY3R9IGFwcGxpY2FudFxuICogQHBhcmFtIHtTSVAuT3V0Z29pbmdSZXF1ZXN0fSByZXF1ZXN0XG4gKi9cbi8qKlxuICogQGZpbGVvdmVydmlldyBpbi1EaWFsb2cgUmVxdWVzdCBTZW5kZXJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTSVApIHtcbnZhciBSZXF1ZXN0U2VuZGVyO1xuXG5SZXF1ZXN0U2VuZGVyID0gZnVuY3Rpb24oZGlhbG9nLCBhcHBsaWNhbnQsIHJlcXVlc3QpIHtcblxuICB0aGlzLmRpYWxvZyA9IGRpYWxvZztcbiAgdGhpcy5hcHBsaWNhbnQgPSBhcHBsaWNhbnQ7XG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG5cbiAgLy8gUkZDMzI2MSAxNC4xIE1vZGlmeWluZyBhbiBFeGlzdGluZyBTZXNzaW9uLiBVQUMgQmVoYXZpb3IuXG4gIHRoaXMucmVhdHRlbXB0ID0gZmFsc2U7XG4gIHRoaXMucmVhdHRlbXB0VGltZXIgPSBudWxsO1xufTtcblxuUmVxdWVzdFNlbmRlci5wcm90b3R5cGUgPSB7XG4gIHNlbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHJlcXVlc3Rfc2VuZGVyID0gbmV3IFNJUC5SZXF1ZXN0U2VuZGVyKHRoaXMsIHRoaXMuZGlhbG9nLm93bmVyLnVhKTtcblxuICAgICAgcmVxdWVzdF9zZW5kZXIuc2VuZCgpO1xuXG4gICAgLy8gUkZDMzI2MSAxNC4yIE1vZGlmeWluZyBhbiBFeGlzdGluZyBTZXNzaW9uIC1VQUMgQkVIQVZJT1ItXG4gICAgaWYgKHRoaXMucmVxdWVzdC5tZXRob2QgPT09IFNJUC5DLklOVklURSAmJiByZXF1ZXN0X3NlbmRlci5jbGllbnRUcmFuc2FjdGlvbi5zdGF0ZSAhPT0gU0lQLlRyYW5zYWN0aW9ucy5DLlNUQVRVU19URVJNSU5BVEVEKSB7XG4gICAgICB0aGlzLmRpYWxvZy51YWNfcGVuZGluZ19yZXBseSA9IHRydWU7XG4gICAgICByZXF1ZXN0X3NlbmRlci5jbGllbnRUcmFuc2FjdGlvbi5vbignc3RhdGVDaGFuZ2VkJywgZnVuY3Rpb24gc3RhdGVDaGFuZ2VkKCl7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTSVAuVHJhbnNhY3Rpb25zLkMuU1RBVFVTX0FDQ0VQVEVEIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTSVAuVHJhbnNhY3Rpb25zLkMuU1RBVFVTX0NPTVBMRVRFRCB8fFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gU0lQLlRyYW5zYWN0aW9ucy5DLlNUQVRVU19URVJNSU5BVEVEKSB7XG5cbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdzdGF0ZUNoYW5nZWQnLCBzdGF0ZUNoYW5nZWQpO1xuICAgICAgICAgIHNlbGYuZGlhbG9nLnVhY19wZW5kaW5nX3JlcGx5ID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoc2VsZi5kaWFsb2cudWFzX3BlbmRpbmdfcmVwbHkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzZWxmLmRpYWxvZy5vd25lci5vblJlYWR5VG9SZWludml0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIG9uUmVxdWVzdFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYXBwbGljYW50Lm9uUmVxdWVzdFRpbWVvdXQoKTtcbiAgfSxcblxuICBvblRyYW5zcG9ydEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmFwcGxpY2FudC5vblRyYW5zcG9ydEVycm9yKCk7XG4gIH0sXG5cbiAgcmVjZWl2ZVJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFJGQzMyNjEgMTIuMi4xLjIgNDA4IG9yIDQ4MSBpcyByZWNlaXZlZCBmb3IgYSByZXF1ZXN0IHdpdGhpbiBhIGRpYWxvZy5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT09IDQwOCB8fCByZXNwb25zZS5zdGF0dXNfY29kZSA9PT0gNDgxKSB7XG4gICAgICB0aGlzLmFwcGxpY2FudC5vbkRpYWxvZ0Vycm9yKHJlc3BvbnNlKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLm1ldGhvZCA9PT0gU0lQLkMuSU5WSVRFICYmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09PSA0OTEpIHtcbiAgICAgIGlmICh0aGlzLnJlYXR0ZW1wdCkge1xuICAgICAgICB0aGlzLmFwcGxpY2FudC5yZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0LmNzZXEudmFsdWUgPSB0aGlzLmRpYWxvZy5sb2NhbF9zZXFudW0gKz0gMTtcbiAgICAgICAgdGhpcy5yZWF0dGVtcHRUaW1lciA9IFNJUC5UaW1lcnMuc2V0VGltZW91dChcbiAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmFwcGxpY2FudC5vd25lci5zdGF0dXMgIT09IFNJUC5TZXNzaW9uLkMuU1RBVFVTX1RFUk1JTkFURUQpIHtcbiAgICAgICAgICAgICAgc2VsZi5yZWF0dGVtcHQgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxmLnJlcXVlc3Rfc2VuZGVyLnNlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMuZ2V0UmVhdHRlbXB0VGltZW91dCgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXBwbGljYW50LnJlY2VpdmVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfVxuICB9XG59O1xuXG5yZXR1cm4gUmVxdWVzdFNlbmRlcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9zcmMvRGlhbG9nL1JlcXVlc3RTZW5kZXIuanNcbi8vIG1vZHVsZSBpZCA9IDM1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///356\n");

/***/ }),
/* 357 */
/*!**********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/RequestSender.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @fileoverview Request Sender\n */\n\n/**\n * @augments SIP\n * @class Class creating a request sender.\n * @param {Object} applicant\n * @param {SIP.UA} ua\n */\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(applicant, ua) {\n  this.logger = ua.getLogger('sip.requestsender');\n  this.ua = ua;\n  this.applicant = applicant;\n  this.method = applicant.request.method;\n  this.request = applicant.request;\n  this.credentials = null;\n  this.challenged = false;\n  this.staled = false;\n\n  // If ua is in closing process or even closed just allow sending Bye and ACK\n  if (ua.status === SIP.UA.C.STATUS_USER_CLOSED && (this.method !== SIP.C.BYE || this.method !== SIP.C.ACK)) {\n    this.onTransportError();\n  }\n};\n\n/**\n* Create the client transaction and send the message.\n*/\nRequestSender.prototype = {\n  send: function() {\n    switch(this.method) {\n      case \"INVITE\":\n        this.clientTransaction = new SIP.Transactions.InviteClientTransaction(this, this.request, this.ua.transport);\n        break;\n      case \"ACK\":\n        this.clientTransaction = new SIP.Transactions.AckClientTransaction(this, this.request, this.ua.transport);\n        break;\n      default:\n        this.clientTransaction = new SIP.Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);\n    }\n    this.clientTransaction.send();\n\n    return this.clientTransaction;\n  },\n\n  /**\n  * Callback fired when receiving a request timeout error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  /**\n  * Callback fired when receiving a transport error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  /**\n  * Called from client transaction when receiving a correct response to the request.\n  * Authenticate request if needed or pass the response back to the applicant.\n  * @param {SIP.IncomingResponse} response\n  */\n  receiveResponse: function(response) {\n    var cseq, challenge, authorization_header_name,\n      status_code = response.status_code;\n\n    /*\n    * Authentication\n    * Authenticate once. _challenged_ flag used to avoid infinite authentications.\n    */\n    if (status_code === 401 || status_code === 407) {\n\n      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n      if (response.status_code === 401) {\n        challenge = response.parseHeader('www-authenticate');\n        authorization_header_name = 'authorization';\n      } else {\n        challenge = response.parseHeader('proxy-authenticate');\n        authorization_header_name = 'proxy-authorization';\n      }\n\n      // Verify it seems a valid challenge.\n      if (! challenge) {\n        this.logger.warn(response.status_code + ' with wrong or missing challenge, cannot authenticate');\n        this.applicant.receiveResponse(response);\n        return;\n      }\n\n      if (!this.challenged || (!this.staled && challenge.stale === true)) {\n        if (!this.credentials) {\n          this.credentials = this.ua.configuration.authenticationFactory(this.ua);\n        }\n\n        // Verify that the challenge is really valid.\n        if (!this.credentials.authenticate(this.request, challenge)) {\n          this.applicant.receiveResponse(response);\n          return;\n        }\n        this.challenged = true;\n\n        if (challenge.stale) {\n          this.staled = true;\n        }\n\n        if (response.method === SIP.C.REGISTER) {\n          cseq = this.applicant.cseq += 1;\n        } else if (this.request.dialog){\n          cseq = this.request.dialog.local_seqnum += 1;\n        } else {\n          cseq = this.request.cseq + 1;\n          this.request.cseq = cseq;\n        }\n        this.request.setHeader('cseq', cseq +' '+ this.method);\n\n        this.request.setHeader(authorization_header_name, this.credentials.toString());\n        this.send();\n      } else {\n        this.applicant.receiveResponse(response);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nSIP.RequestSender = RequestSender;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1JlcXVlc3RTZW5kZXIuanM/Mjg3NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIzNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFJlcXVlc3QgU2VuZGVyXG4gKi9cblxuLyoqXG4gKiBAYXVnbWVudHMgU0lQXG4gKiBAY2xhc3MgQ2xhc3MgY3JlYXRpbmcgYSByZXF1ZXN0IHNlbmRlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcHBsaWNhbnRcbiAqIEBwYXJhbSB7U0lQLlVBfSB1YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTSVApIHtcbnZhciBSZXF1ZXN0U2VuZGVyO1xuXG5SZXF1ZXN0U2VuZGVyID0gZnVuY3Rpb24oYXBwbGljYW50LCB1YSkge1xuICB0aGlzLmxvZ2dlciA9IHVhLmdldExvZ2dlcignc2lwLnJlcXVlc3RzZW5kZXInKTtcbiAgdGhpcy51YSA9IHVhO1xuICB0aGlzLmFwcGxpY2FudCA9IGFwcGxpY2FudDtcbiAgdGhpcy5tZXRob2QgPSBhcHBsaWNhbnQucmVxdWVzdC5tZXRob2Q7XG4gIHRoaXMucmVxdWVzdCA9IGFwcGxpY2FudC5yZXF1ZXN0O1xuICB0aGlzLmNyZWRlbnRpYWxzID0gbnVsbDtcbiAgdGhpcy5jaGFsbGVuZ2VkID0gZmFsc2U7XG4gIHRoaXMuc3RhbGVkID0gZmFsc2U7XG5cbiAgLy8gSWYgdWEgaXMgaW4gY2xvc2luZyBwcm9jZXNzIG9yIGV2ZW4gY2xvc2VkIGp1c3QgYWxsb3cgc2VuZGluZyBCeWUgYW5kIEFDS1xuICBpZiAodWEuc3RhdHVzID09PSBTSVAuVUEuQy5TVEFUVVNfVVNFUl9DTE9TRUQgJiYgKHRoaXMubWV0aG9kICE9PSBTSVAuQy5CWUUgfHwgdGhpcy5tZXRob2QgIT09IFNJUC5DLkFDSykpIHtcbiAgICB0aGlzLm9uVHJhbnNwb3J0RXJyb3IoKTtcbiAgfVxufTtcblxuLyoqXG4qIENyZWF0ZSB0aGUgY2xpZW50IHRyYW5zYWN0aW9uIGFuZCBzZW5kIHRoZSBtZXNzYWdlLlxuKi9cblJlcXVlc3RTZW5kZXIucHJvdG90eXBlID0ge1xuICBzZW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2godGhpcy5tZXRob2QpIHtcbiAgICAgIGNhc2UgXCJJTlZJVEVcIjpcbiAgICAgICAgdGhpcy5jbGllbnRUcmFuc2FjdGlvbiA9IG5ldyBTSVAuVHJhbnNhY3Rpb25zLkludml0ZUNsaWVudFRyYW5zYWN0aW9uKHRoaXMsIHRoaXMucmVxdWVzdCwgdGhpcy51YS50cmFuc3BvcnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBQ0tcIjpcbiAgICAgICAgdGhpcy5jbGllbnRUcmFuc2FjdGlvbiA9IG5ldyBTSVAuVHJhbnNhY3Rpb25zLkFja0NsaWVudFRyYW5zYWN0aW9uKHRoaXMsIHRoaXMucmVxdWVzdCwgdGhpcy51YS50cmFuc3BvcnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuY2xpZW50VHJhbnNhY3Rpb24gPSBuZXcgU0lQLlRyYW5zYWN0aW9ucy5Ob25JbnZpdGVDbGllbnRUcmFuc2FjdGlvbih0aGlzLCB0aGlzLnJlcXVlc3QsIHRoaXMudWEudHJhbnNwb3J0KTtcbiAgICB9XG4gICAgdGhpcy5jbGllbnRUcmFuc2FjdGlvbi5zZW5kKCk7XG5cbiAgICByZXR1cm4gdGhpcy5jbGllbnRUcmFuc2FjdGlvbjtcbiAgfSxcblxuICAvKipcbiAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHJlY2VpdmluZyBhIHJlcXVlc3QgdGltZW91dCBlcnJvciBmcm9tIHRoZSBjbGllbnQgdHJhbnNhY3Rpb24uXG4gICogVG8gYmUgcmUtZGVmaW5lZCBieSB0aGUgYXBwbGljYW50LlxuICAqIEBldmVudFxuICAqL1xuICBvblJlcXVlc3RUaW1lb3V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmFwcGxpY2FudC5vblJlcXVlc3RUaW1lb3V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICogQ2FsbGJhY2sgZmlyZWQgd2hlbiByZWNlaXZpbmcgYSB0cmFuc3BvcnQgZXJyb3IgZnJvbSB0aGUgY2xpZW50IHRyYW5zYWN0aW9uLlxuICAqIFRvIGJlIHJlLWRlZmluZWQgYnkgdGhlIGFwcGxpY2FudC5cbiAgKiBAZXZlbnRcbiAgKi9cbiAgb25UcmFuc3BvcnRFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5hcHBsaWNhbnQub25UcmFuc3BvcnRFcnJvcigpO1xuICB9LFxuXG4gIC8qKlxuICAqIENhbGxlZCBmcm9tIGNsaWVudCB0cmFuc2FjdGlvbiB3aGVuIHJlY2VpdmluZyBhIGNvcnJlY3QgcmVzcG9uc2UgdG8gdGhlIHJlcXVlc3QuXG4gICogQXV0aGVudGljYXRlIHJlcXVlc3QgaWYgbmVlZGVkIG9yIHBhc3MgdGhlIHJlc3BvbnNlIGJhY2sgdG8gdGhlIGFwcGxpY2FudC5cbiAgKiBAcGFyYW0ge1NJUC5JbmNvbWluZ1Jlc3BvbnNlfSByZXNwb25zZVxuICAqL1xuICByZWNlaXZlUmVzcG9uc2U6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgdmFyIGNzZXEsIGNoYWxsZW5nZSwgYXV0aG9yaXphdGlvbl9oZWFkZXJfbmFtZSxcbiAgICAgIHN0YXR1c19jb2RlID0gcmVzcG9uc2Uuc3RhdHVzX2NvZGU7XG5cbiAgICAvKlxuICAgICogQXV0aGVudGljYXRpb25cbiAgICAqIEF1dGhlbnRpY2F0ZSBvbmNlLiBfY2hhbGxlbmdlZF8gZmxhZyB1c2VkIHRvIGF2b2lkIGluZmluaXRlIGF1dGhlbnRpY2F0aW9ucy5cbiAgICAqL1xuICAgIGlmIChzdGF0dXNfY29kZSA9PT0gNDAxIHx8IHN0YXR1c19jb2RlID09PSA0MDcpIHtcblxuICAgICAgLy8gR2V0IGFuZCBwYXJzZSB0aGUgYXBwcm9wcmlhdGUgV1dXLUF1dGhlbnRpY2F0ZSBvciBQcm94eS1BdXRoZW50aWNhdGUgaGVhZGVyLlxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c19jb2RlID09PSA0MDEpIHtcbiAgICAgICAgY2hhbGxlbmdlID0gcmVzcG9uc2UucGFyc2VIZWFkZXIoJ3d3dy1hdXRoZW50aWNhdGUnKTtcbiAgICAgICAgYXV0aG9yaXphdGlvbl9oZWFkZXJfbmFtZSA9ICdhdXRob3JpemF0aW9uJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYWxsZW5nZSA9IHJlc3BvbnNlLnBhcnNlSGVhZGVyKCdwcm94eS1hdXRoZW50aWNhdGUnKTtcbiAgICAgICAgYXV0aG9yaXphdGlvbl9oZWFkZXJfbmFtZSA9ICdwcm94eS1hdXRob3JpemF0aW9uJztcbiAgICAgIH1cblxuICAgICAgLy8gVmVyaWZ5IGl0IHNlZW1zIGEgdmFsaWQgY2hhbGxlbmdlLlxuICAgICAgaWYgKCEgY2hhbGxlbmdlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4ocmVzcG9uc2Uuc3RhdHVzX2NvZGUgKyAnIHdpdGggd3Jvbmcgb3IgbWlzc2luZyBjaGFsbGVuZ2UsIGNhbm5vdCBhdXRoZW50aWNhdGUnKTtcbiAgICAgICAgdGhpcy5hcHBsaWNhbnQucmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY2hhbGxlbmdlZCB8fCAoIXRoaXMuc3RhbGVkICYmIGNoYWxsZW5nZS5zdGFsZSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IHRoaXMudWEuY29uZmlndXJhdGlvbi5hdXRoZW50aWNhdGlvbkZhY3RvcnkodGhpcy51YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY2hhbGxlbmdlIGlzIHJlYWxseSB2YWxpZC5cbiAgICAgICAgaWYgKCF0aGlzLmNyZWRlbnRpYWxzLmF1dGhlbnRpY2F0ZSh0aGlzLnJlcXVlc3QsIGNoYWxsZW5nZSkpIHtcbiAgICAgICAgICB0aGlzLmFwcGxpY2FudC5yZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYWxsZW5nZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChjaGFsbGVuZ2Uuc3RhbGUpIHtcbiAgICAgICAgICB0aGlzLnN0YWxlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzcG9uc2UubWV0aG9kID09PSBTSVAuQy5SRUdJU1RFUikge1xuICAgICAgICAgIGNzZXEgPSB0aGlzLmFwcGxpY2FudC5jc2VxICs9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZXF1ZXN0LmRpYWxvZyl7XG4gICAgICAgICAgY3NlcSA9IHRoaXMucmVxdWVzdC5kaWFsb2cubG9jYWxfc2VxbnVtICs9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3NlcSA9IHRoaXMucmVxdWVzdC5jc2VxICsgMTtcbiAgICAgICAgICB0aGlzLnJlcXVlc3QuY3NlcSA9IGNzZXE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0LnNldEhlYWRlcignY3NlcScsIGNzZXEgKycgJysgdGhpcy5tZXRob2QpO1xuXG4gICAgICAgIHRoaXMucmVxdWVzdC5zZXRIZWFkZXIoYXV0aG9yaXphdGlvbl9oZWFkZXJfbmFtZSwgdGhpcy5jcmVkZW50aWFscy50b1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5zZW5kKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGxpY2FudC5yZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcGxpY2FudC5yZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIH1cbiAgfVxufTtcblxuU0lQLlJlcXVlc3RTZW5kZXIgPSBSZXF1ZXN0U2VuZGVyO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9SZXF1ZXN0U2VuZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///357\n");

/***/ }),
/* 358 */
/*!************************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/RegisterContext.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (SIP) {\n\nvar RegisterContext;\n\nRegisterContext = function (ua) {\n  var params = {},\n      regId = 1;\n\n  this.registrar = ua.configuration.registrarServer;\n  this.expires = ua.configuration.registerExpires;\n\n\n  // Contact header\n  this.contact = ua.contact.toString();\n\n  if(regId) {\n    this.contact += ';reg-id='+ regId;\n    this.contact += ';+sip.instance=\"<urn:uuid:'+ ua.configuration.instanceId+'>\"';\n  }\n\n  // Call-ID and CSeq values RFC3261 10.2\n  this.call_id = SIP.Utils.createRandomToken(22);\n  this.cseq = 80;\n\n  this.to_uri = ua.configuration.uri;\n\n  params.to_uri = this.to_uri;\n  params.to_displayName = ua.configuration.displayName;\n  params.call_id = this.call_id;\n  params.cseq = this.cseq;\n\n  // Extends ClientContext\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, 'REGISTER', this.registrar, {params: params}]);\n\n  this.registrationTimer = null;\n  this.registrationExpiredTimer = null;\n\n  // Set status\n  this.registered = false;\n\n  this.logger = ua.getLogger('sip.registercontext');\n};\n\nRegisterContext.prototype = {\n  register: function (options) {\n    var self = this, extraHeaders;\n\n    // Handle Options\n    this.options = options || {};\n    extraHeaders = (this.options.extraHeaders || []).slice();\n    extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires);\n    extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());\n\n    // Save original extraHeaders to be used in .close\n    this.closeHeaders = this.options.closeWithHeaders ?\n      (this.options.extraHeaders || []).slice() : [];\n\n    this.receiveResponse = function(response) {\n      var contact, expires,\n        contacts = response.getHeaders('contact').length,\n        cause;\n\n      // Discard responses to older REGISTER/un-REGISTER requests.\n      if(response.cseq !== this.cseq) {\n        return;\n      }\n\n      // Clear registration timer\n      if (this.registrationTimer !== null) {\n        SIP.Timers.clearTimeout(this.registrationTimer);\n        this.registrationTimer = null;\n      }\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n\n          if(response.hasHeader('expires')) {\n            expires = response.getHeader('expires');\n          }\n\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n\n          // Search the Contact pointing to us and update the expires value accordingly.\n          if (!contacts) {\n            this.logger.warn('no Contact header in response to REGISTER, response ignored');\n            break;\n          }\n\n          while(contacts--) {\n            contact = response.parseHeader('contact', contacts);\n            if(contact.uri.user === this.ua.contact.uri.user) {\n              expires = contact.getParam('expires');\n              break;\n            } else {\n              contact = null;\n            }\n          }\n\n          if (!contact) {\n            this.logger.warn('no Contact header pointing to us, response ignored');\n            break;\n          }\n\n          if(!expires) {\n            expires = this.expires;\n          }\n\n          // Re-Register before the expiration interval has elapsed.\n          // For that, decrease the expires value. ie: 3 seconds\n          this.registrationTimer = SIP.Timers.setTimeout(function() {\n            self.registrationTimer = null;\n            self.register(self.options);\n          }, (expires * 1000) - 3000);\n          this.registrationExpiredTimer = SIP.Timers.setTimeout(function () {\n            self.logger.warn('registration expired');\n            if (self.registered) {\n              self.unregistered(null, SIP.C.causes.EXPIRES);\n            }\n          }, expires * 1000);\n\n          //Save gruu values\n          if (contact.hasParam('temp-gruu')) {\n            this.ua.contact.temp_gruu = SIP.URI.parse(contact.getParam('temp-gruu').replace(/\"/g,''));\n          }\n          if (contact.hasParam('pub-gruu')) {\n            this.ua.contact.pub_gruu = SIP.URI.parse(contact.getParam('pub-gruu').replace(/\"/g,''));\n          }\n\n          this.registered = true;\n          this.emit('registered', response || null);\n          break;\n        // Interval too brief RFC3261 10.2.8\n        case /^423$/.test(response.status_code):\n          if(response.hasHeader('min-expires')) {\n            // Increase our registration interval to the suggested minimum\n            this.expires = response.getHeader('min-expires');\n            // Attempt the registration again immediately\n            this.register(this.options);\n          } else { //This response MUST contain a Min-Expires header field\n            this.logger.warn('423 response received for REGISTER without Min-Expires');\n            this.registrationFailure(response, SIP.C.causes.SIP_FAILURE_CODE);\n          }\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.registrationFailure(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.registrationFailure(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.registrationFailure(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n    this.send();\n  },\n\n  registrationFailure: function (response, cause) {\n    this.emit('failed', response || null, cause || null);\n  },\n\n  onTransportClosed: function() {\n    this.registered_before = this.registered;\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if (this.registrationExpiredTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n      this.registrationExpiredTimer = null;\n    }\n\n    if(this.registered) {\n      this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onTransportConnected: function() {\n    this.register(this.options);\n  },\n\n  close: function() {\n    var options = {\n      all: false,\n      extraHeaders: this.closeHeaders\n    };\n\n    this.registered_before = this.registered;\n    this.unregister(options);\n  },\n\n  unregister: function(options) {\n    var extraHeaders;\n\n    options = options || {};\n\n    if(!this.registered && !options.all) {\n      this.logger.warn('already unregistered');\n      return;\n    }\n\n    extraHeaders = (options.extraHeaders || []).slice();\n\n    this.registered = false;\n\n    // Clear the registration timer.\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if(options.all) {\n      extraHeaders.push('Contact: *');\n      extraHeaders.push('Expires: 0');\n    } else {\n      extraHeaders.push('Contact: '+ this.contact + ';expires=0');\n    }\n\n\n    this.receiveResponse = function(response) {\n      var cause;\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n          this.unregistered(response);\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.unregistered(response,cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n\n    this.send();\n  },\n\n  unregistered: function(response, cause) {\n    this.registered = false;\n    this.emit('unregistered', response || null, cause || null);\n  }\n\n};\n\n\nSIP.RegisterContext = RegisterContext;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///358\n");

/***/ }),
/* 359 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/MediaHandler.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nmodule.exports = function (EventEmitter) {\nvar MediaHandler = function(session, options) {\n  // keep jshint happy\n  session = session;\n  options = options;\n};\n\nMediaHandler.prototype = Object.create(EventEmitter.prototype, {\n  isReady: {value: function isReady () {}},\n\n  close: {value: function close () {}},\n\n  /**\n   * @param {Object} [mediaHint] A custom object describing the media to be used during this session.\n   */\n  getDescription: {value: function getDescription (mediaHint) {\n    // keep jshint happy\n    mediaHint = mediaHint;\n  }},\n\n  /**\n   * Check if a SIP message contains a session description.\n   * @param {SIP.SIPMessage} message\n   * @returns {boolean}\n   */\n  hasDescription: {value: function hasDescription (message) {\n    // keep jshint happy\n    message = message;\n  }},\n\n  /**\n   * Set the session description contained in a SIP message.\n   * @param {SIP.SIPMessage} message\n   * @returns {Promise}\n   */\n  setDescription: {value: function setDescription (message) {\n    // keep jshint happy\n    message = message;\n  }}\n});\n\nreturn MediaHandler;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL01lZGlhSGFuZGxlci5qcz9hZGRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSw4QkFBOEI7O0FBRTFDLFVBQVUsNEJBQTRCOztBQUV0QztBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGVBQWU7QUFDZjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGVBQWU7QUFDZjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EiLCJmaWxlIjoiMzU5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgTWVkaWFIYW5kbGVyXG4gKi9cblxuLyogTWVkaWFIYW5kbGVyXG4gKiBAY2xhc3MgUGVlckNvbm5lY3Rpb24gaGVscGVyIENsYXNzLlxuICogQHBhcmFtIHtTSVAuU2Vzc2lvbn0gc2Vzc2lvblxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChFdmVudEVtaXR0ZXIpIHtcbnZhciBNZWRpYUhhbmRsZXIgPSBmdW5jdGlvbihzZXNzaW9uLCBvcHRpb25zKSB7XG4gIC8vIGtlZXAganNoaW50IGhhcHB5XG4gIHNlc3Npb24gPSBzZXNzaW9uO1xuICBvcHRpb25zID0gb3B0aW9ucztcbn07XG5cbk1lZGlhSGFuZGxlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEV2ZW50RW1pdHRlci5wcm90b3R5cGUsIHtcbiAgaXNSZWFkeToge3ZhbHVlOiBmdW5jdGlvbiBpc1JlYWR5ICgpIHt9fSxcblxuICBjbG9zZToge3ZhbHVlOiBmdW5jdGlvbiBjbG9zZSAoKSB7fX0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbbWVkaWFIaW50XSBBIGN1c3RvbSBvYmplY3QgZGVzY3JpYmluZyB0aGUgbWVkaWEgdG8gYmUgdXNlZCBkdXJpbmcgdGhpcyBzZXNzaW9uLlxuICAgKi9cbiAgZ2V0RGVzY3JpcHRpb246IHt2YWx1ZTogZnVuY3Rpb24gZ2V0RGVzY3JpcHRpb24gKG1lZGlhSGludCkge1xuICAgIC8vIGtlZXAganNoaW50IGhhcHB5XG4gICAgbWVkaWFIaW50ID0gbWVkaWFIaW50O1xuICB9fSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBTSVAgbWVzc2FnZSBjb250YWlucyBhIHNlc3Npb24gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7U0lQLlNJUE1lc3NhZ2V9IG1lc3NhZ2VcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoYXNEZXNjcmlwdGlvbjoge3ZhbHVlOiBmdW5jdGlvbiBoYXNEZXNjcmlwdGlvbiAobWVzc2FnZSkge1xuICAgIC8vIGtlZXAganNoaW50IGhhcHB5XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH19LFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHNlc3Npb24gZGVzY3JpcHRpb24gY29udGFpbmVkIGluIGEgU0lQIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7U0lQLlNJUE1lc3NhZ2V9IG1lc3NhZ2VcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBzZXREZXNjcmlwdGlvbjoge3ZhbHVlOiBmdW5jdGlvbiBzZXREZXNjcmlwdGlvbiAobWVzc2FnZSkge1xuICAgIC8vIGtlZXAganNoaW50IGhhcHB5XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH19XG59KTtcblxucmV0dXJuIE1lZGlhSGFuZGxlcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9zcmMvTWVkaWFIYW5kbGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///359\n");

/***/ }),
/* 360 */
/*!**********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/ClientContext.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (SIP) {\nvar ClientContext;\n\nClientContext = function (ua, method, target, options) {\n  var originalTarget = target;\n\n  // Validate arguments\n  if (target === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.clientcontext');\n  this.method = method;\n  target = ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: ' + originalTarget);\n  }\n\n  /* Options\n   * - extraHeaders\n   * - params\n   * - contentType\n   * - body\n   */\n  options = Object.create(options || Object.prototype);\n  options.extraHeaders = (options.extraHeaders || []).slice();\n\n  // Build the request\n  this.request = new SIP.OutgoingRequest(this.method,\n                                         target,\n                                         this.ua,\n                                         options.params,\n                                         options.extraHeaders);\n  if (options.body) {\n    this.body = {};\n    this.body.body = options.body;\n    if (options.contentType) {\n      this.body.contentType = options.contentType;\n    }\n    this.request.body = this.body;\n  }\n\n  /* Set other properties from the request */\n  this.localIdentity = this.request.from;\n  this.remoteIdentity = this.request.to;\n\n  this.data = {};\n};\nClientContext.prototype = Object.create(SIP.EventEmitter.prototype);\n\nClientContext.prototype.send = function () {\n  (new SIP.RequestSender(this, this.ua)).send();\n  return this;\n};\n\nClientContext.prototype.cancel = function (options) {\n  options = options || {};\n\n  options.extraHeaders = (options.extraHeaders || []).slice();\n\n  var cancel_reason = SIP.Utils.getCancelReason(options.status_code, options.reason_phrase);\n  this.request.cancel(cancel_reason, options.extraHeaders);\n\n  this.emit('cancel');\n};\n\nClientContext.prototype.receiveResponse = function (response) {\n  var cause = SIP.Utils.getReasonPhrase(response.status_code);\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      this.emit('progress', response, cause);\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('accepted', response, cause);\n      break;\n\n    default:\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('rejected', response, cause);\n      this.emit('failed', response, cause);\n      break;\n  }\n\n};\n\nClientContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nClientContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ClientContext = ClientContext;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0NsaWVudENvbnRleHQuanM/M2M4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLEVBQUU7QUFDcEI7QUFDQTs7QUFFQSxrQkFBa0IsRUFBRTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjM2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoU0lQKSB7XG52YXIgQ2xpZW50Q29udGV4dDtcblxuQ2xpZW50Q29udGV4dCA9IGZ1bmN0aW9uICh1YSwgbWV0aG9kLCB0YXJnZXQsIG9wdGlvbnMpIHtcbiAgdmFyIG9yaWdpbmFsVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gIC8vIFZhbGlkYXRlIGFyZ3VtZW50c1xuICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICB9XG5cbiAgdGhpcy51YSA9IHVhO1xuICB0aGlzLmxvZ2dlciA9IHVhLmdldExvZ2dlcignc2lwLmNsaWVudGNvbnRleHQnKTtcbiAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gIHRhcmdldCA9IHVhLm5vcm1hbGl6ZVRhcmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGFyZ2V0OiAnICsgb3JpZ2luYWxUYXJnZXQpO1xuICB9XG5cbiAgLyogT3B0aW9uc1xuICAgKiAtIGV4dHJhSGVhZGVyc1xuICAgKiAtIHBhcmFtc1xuICAgKiAtIGNvbnRlbnRUeXBlXG4gICAqIC0gYm9keVxuICAgKi9cbiAgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUob3B0aW9ucyB8fCBPYmplY3QucHJvdG90eXBlKTtcbiAgb3B0aW9ucy5leHRyYUhlYWRlcnMgPSAob3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgW10pLnNsaWNlKCk7XG5cbiAgLy8gQnVpbGQgdGhlIHJlcXVlc3RcbiAgdGhpcy5yZXF1ZXN0ID0gbmV3IFNJUC5PdXRnb2luZ1JlcXVlc3QodGhpcy5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZXh0cmFIZWFkZXJzKTtcbiAgaWYgKG9wdGlvbnMuYm9keSkge1xuICAgIHRoaXMuYm9keSA9IHt9O1xuICAgIHRoaXMuYm9keS5ib2R5ID0gb3B0aW9ucy5ib2R5O1xuICAgIGlmIChvcHRpb25zLmNvbnRlbnRUeXBlKSB7XG4gICAgICB0aGlzLmJvZHkuY29udGVudFR5cGUgPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3QuYm9keSA9IHRoaXMuYm9keTtcbiAgfVxuXG4gIC8qIFNldCBvdGhlciBwcm9wZXJ0aWVzIGZyb20gdGhlIHJlcXVlc3QgKi9cbiAgdGhpcy5sb2NhbElkZW50aXR5ID0gdGhpcy5yZXF1ZXN0LmZyb207XG4gIHRoaXMucmVtb3RlSWRlbnRpdHkgPSB0aGlzLnJlcXVlc3QudG87XG5cbiAgdGhpcy5kYXRhID0ge307XG59O1xuQ2xpZW50Q29udGV4dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNJUC5FdmVudEVtaXR0ZXIucHJvdG90eXBlKTtcblxuQ2xpZW50Q29udGV4dC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgKG5ldyBTSVAuUmVxdWVzdFNlbmRlcih0aGlzLCB0aGlzLnVhKSkuc2VuZCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkNsaWVudENvbnRleHQucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIG9wdGlvbnMuZXh0cmFIZWFkZXJzID0gKG9wdGlvbnMuZXh0cmFIZWFkZXJzIHx8IFtdKS5zbGljZSgpO1xuXG4gIHZhciBjYW5jZWxfcmVhc29uID0gU0lQLlV0aWxzLmdldENhbmNlbFJlYXNvbihvcHRpb25zLnN0YXR1c19jb2RlLCBvcHRpb25zLnJlYXNvbl9waHJhc2UpO1xuICB0aGlzLnJlcXVlc3QuY2FuY2VsKGNhbmNlbF9yZWFzb24sIG9wdGlvbnMuZXh0cmFIZWFkZXJzKTtcblxuICB0aGlzLmVtaXQoJ2NhbmNlbCcpO1xufTtcblxuQ2xpZW50Q29udGV4dC5wcm90b3R5cGUucmVjZWl2ZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gIHZhciBjYXVzZSA9IFNJUC5VdGlscy5nZXRSZWFzb25QaHJhc2UocmVzcG9uc2Uuc3RhdHVzX2NvZGUpO1xuXG4gIHN3aXRjaCh0cnVlKSB7XG4gICAgY2FzZSAvXjFbMC05XXsyfSQvLnRlc3QocmVzcG9uc2Uuc3RhdHVzX2NvZGUpOlxuICAgICAgdGhpcy5lbWl0KCdwcm9ncmVzcycsIHJlc3BvbnNlLCBjYXVzZSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgL14yWzAtOV17Mn0kLy50ZXN0KHJlc3BvbnNlLnN0YXR1c19jb2RlKTpcbiAgICAgIGlmKHRoaXMudWEuYXBwbGljYW50c1t0aGlzXSkge1xuICAgICAgICBkZWxldGUgdGhpcy51YS5hcHBsaWNhbnRzW3RoaXNdO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KCdhY2NlcHRlZCcsIHJlc3BvbnNlLCBjYXVzZSk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBpZih0aGlzLnVhLmFwcGxpY2FudHNbdGhpc10pIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudWEuYXBwbGljYW50c1t0aGlzXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1pdCgncmVqZWN0ZWQnLCByZXNwb25zZSwgY2F1c2UpO1xuICAgICAgdGhpcy5lbWl0KCdmYWlsZWQnLCByZXNwb25zZSwgY2F1c2UpO1xuICAgICAgYnJlYWs7XG4gIH1cblxufTtcblxuQ2xpZW50Q29udGV4dC5wcm90b3R5cGUub25SZXF1ZXN0VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdmYWlsZWQnLCBudWxsLCBTSVAuQy5jYXVzZXMuUkVRVUVTVF9USU1FT1VUKTtcbn07XG5cbkNsaWVudENvbnRleHQucHJvdG90eXBlLm9uVHJhbnNwb3J0RXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZmFpbGVkJywgbnVsbCwgU0lQLkMuY2F1c2VzLkNPTk5FQ1RJT05fRVJST1IpO1xufTtcblxuU0lQLkNsaWVudENvbnRleHQgPSBDbGllbnRDb250ZXh0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9DbGllbnRDb250ZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAzNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///360\n");

/***/ }),
/* 361 */
/*!**********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/ServerContext.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (SIP) {\nvar ServerContext;\n\nServerContext = function (ua, request) {\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.servercontext');\n  this.request = request;\n  if (request.method === SIP.C.INVITE) {\n    this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);\n  } else {\n    this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);\n  }\n\n  if (request.body) {\n    this.body = request.body;\n  }\n  if (request.hasHeader('Content-Type')) {\n    this.contentType = request.getHeader('Content-Type');\n  }\n  this.method = request.method;\n\n  this.data = {};\n\n  this.localIdentity = request.to;\n  this.remoteIdentity = request.from;\n};\n\nServerContext.prototype = Object.create(SIP.EventEmitter.prototype);\n\nServerContext.prototype.progress = function (options) {\n  options = Object.create(options || Object.prototype);\n  options.statusCode || (options.statusCode = 180);\n  options.minCode = 100;\n  options.maxCode = 199;\n  options.events = ['progress'];\n  return this.reply(options);\n};\n\nServerContext.prototype.accept = function (options) {\n  options = Object.create(options || Object.prototype);\n  options.statusCode || (options.statusCode = 200);\n  options.minCode = 200;\n  options.maxCode = 299;\n  options.events = ['accepted'];\n  return this.reply(options);\n};\n\nServerContext.prototype.reject = function (options) {\n  options = Object.create(options || Object.prototype);\n  options.statusCode || (options.statusCode = 480);\n  options.minCode = 300;\n  options.maxCode = 699;\n  options.events = ['rejected', 'failed'];\n  return this.reply(options);\n};\n\nServerContext.prototype.reply = function (options) {\n  options = options || {}; // This is okay, so long as we treat options as read-only in this method\n  var\n    statusCode = options.statusCode || 100,\n    minCode = options.minCode || 100,\n    maxCode = options.maxCode || 699,\n    reasonPhrase = SIP.Utils.getReasonPhrase(statusCode, options.reasonPhrase),\n    extraHeaders = options.extraHeaders || [],\n    body = options.body,\n    events = options.events || [],\n    response;\n\n  if (statusCode < minCode || statusCode > maxCode) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  events.forEach(function (event) {\n    this.emit(event, response, reasonPhrase);\n  }, this);\n\n  return this;\n};\n\nServerContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nServerContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ServerContext = ServerContext;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1NlcnZlckNvbnRleHQuanM/NjRmMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjM2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoU0lQKSB7XG52YXIgU2VydmVyQ29udGV4dDtcblxuU2VydmVyQ29udGV4dCA9IGZ1bmN0aW9uICh1YSwgcmVxdWVzdCkge1xuICB0aGlzLnVhID0gdWE7XG4gIHRoaXMubG9nZ2VyID0gdWEuZ2V0TG9nZ2VyKCdzaXAuc2VydmVyY29udGV4dCcpO1xuICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBpZiAocmVxdWVzdC5tZXRob2QgPT09IFNJUC5DLklOVklURSkge1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgU0lQLlRyYW5zYWN0aW9ucy5JbnZpdGVTZXJ2ZXJUcmFuc2FjdGlvbihyZXF1ZXN0LCB1YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBTSVAuVHJhbnNhY3Rpb25zLk5vbkludml0ZVNlcnZlclRyYW5zYWN0aW9uKHJlcXVlc3QsIHVhKTtcbiAgfVxuXG4gIGlmIChyZXF1ZXN0LmJvZHkpIHtcbiAgICB0aGlzLmJvZHkgPSByZXF1ZXN0LmJvZHk7XG4gIH1cbiAgaWYgKHJlcXVlc3QuaGFzSGVhZGVyKCdDb250ZW50LVR5cGUnKSkge1xuICAgIHRoaXMuY29udGVudFR5cGUgPSByZXF1ZXN0LmdldEhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gIH1cbiAgdGhpcy5tZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcblxuICB0aGlzLmRhdGEgPSB7fTtcblxuICB0aGlzLmxvY2FsSWRlbnRpdHkgPSByZXF1ZXN0LnRvO1xuICB0aGlzLnJlbW90ZUlkZW50aXR5ID0gcmVxdWVzdC5mcm9tO1xufTtcblxuU2VydmVyQ29udGV4dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNJUC5FdmVudEVtaXR0ZXIucHJvdG90eXBlKTtcblxuU2VydmVyQ29udGV4dC5wcm90b3R5cGUucHJvZ3Jlc3MgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IE9iamVjdC5wcm90b3R5cGUpO1xuICBvcHRpb25zLnN0YXR1c0NvZGUgfHwgKG9wdGlvbnMuc3RhdHVzQ29kZSA9IDE4MCk7XG4gIG9wdGlvbnMubWluQ29kZSA9IDEwMDtcbiAgb3B0aW9ucy5tYXhDb2RlID0gMTk5O1xuICBvcHRpb25zLmV2ZW50cyA9IFsncHJvZ3Jlc3MnXTtcbiAgcmV0dXJuIHRoaXMucmVwbHkob3B0aW9ucyk7XG59O1xuXG5TZXJ2ZXJDb250ZXh0LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IE9iamVjdC5wcm90b3R5cGUpO1xuICBvcHRpb25zLnN0YXR1c0NvZGUgfHwgKG9wdGlvbnMuc3RhdHVzQ29kZSA9IDIwMCk7XG4gIG9wdGlvbnMubWluQ29kZSA9IDIwMDtcbiAgb3B0aW9ucy5tYXhDb2RlID0gMjk5O1xuICBvcHRpb25zLmV2ZW50cyA9IFsnYWNjZXB0ZWQnXTtcbiAgcmV0dXJuIHRoaXMucmVwbHkob3B0aW9ucyk7XG59O1xuXG5TZXJ2ZXJDb250ZXh0LnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IE9iamVjdC5wcm90b3R5cGUpO1xuICBvcHRpb25zLnN0YXR1c0NvZGUgfHwgKG9wdGlvbnMuc3RhdHVzQ29kZSA9IDQ4MCk7XG4gIG9wdGlvbnMubWluQ29kZSA9IDMwMDtcbiAgb3B0aW9ucy5tYXhDb2RlID0gNjk5O1xuICBvcHRpb25zLmV2ZW50cyA9IFsncmVqZWN0ZWQnLCAnZmFpbGVkJ107XG4gIHJldHVybiB0aGlzLnJlcGx5KG9wdGlvbnMpO1xufTtcblxuU2VydmVyQ29udGV4dC5wcm90b3R5cGUucmVwbHkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gVGhpcyBpcyBva2F5LCBzbyBsb25nIGFzIHdlIHRyZWF0IG9wdGlvbnMgYXMgcmVhZC1vbmx5IGluIHRoaXMgbWV0aG9kXG4gIHZhclxuICAgIHN0YXR1c0NvZGUgPSBvcHRpb25zLnN0YXR1c0NvZGUgfHwgMTAwLFxuICAgIG1pbkNvZGUgPSBvcHRpb25zLm1pbkNvZGUgfHwgMTAwLFxuICAgIG1heENvZGUgPSBvcHRpb25zLm1heENvZGUgfHwgNjk5LFxuICAgIHJlYXNvblBocmFzZSA9IFNJUC5VdGlscy5nZXRSZWFzb25QaHJhc2Uoc3RhdHVzQ29kZSwgb3B0aW9ucy5yZWFzb25QaHJhc2UpLFxuICAgIGV4dHJhSGVhZGVycyA9IG9wdGlvbnMuZXh0cmFIZWFkZXJzIHx8IFtdLFxuICAgIGJvZHkgPSBvcHRpb25zLmJvZHksXG4gICAgZXZlbnRzID0gb3B0aW9ucy5ldmVudHMgfHwgW10sXG4gICAgcmVzcG9uc2U7XG5cbiAgaWYgKHN0YXR1c0NvZGUgPCBtaW5Db2RlIHx8IHN0YXR1c0NvZGUgPiBtYXhDb2RlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBzdGF0dXNDb2RlOiAnICsgc3RhdHVzQ29kZSk7XG4gIH1cbiAgcmVzcG9uc2UgPSB0aGlzLnJlcXVlc3QucmVwbHkoc3RhdHVzQ29kZSwgcmVhc29uUGhyYXNlLCBleHRyYUhlYWRlcnMsIGJvZHkpO1xuICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB0aGlzLmVtaXQoZXZlbnQsIHJlc3BvbnNlLCByZWFzb25QaHJhc2UpO1xuICB9LCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cblNlcnZlckNvbnRleHQucHJvdG90eXBlLm9uUmVxdWVzdFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZmFpbGVkJywgbnVsbCwgU0lQLkMuY2F1c2VzLlJFUVVFU1RfVElNRU9VVCk7XG59O1xuXG5TZXJ2ZXJDb250ZXh0LnByb3RvdHlwZS5vblRyYW5zcG9ydEVycm9yID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2ZhaWxlZCcsIG51bGwsIFNJUC5DLmNhdXNlcy5DT05ORUNUSU9OX0VSUk9SKTtcbn07XG5cblNJUC5TZXJ2ZXJDb250ZXh0ID0gU2VydmVyQ29udGV4dDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9zcmMvU2VydmVyQ29udGV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMzYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///361\n");

/***/ }),
/* 362 */
/*!****************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Session.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (SIP, environment) {\n\nvar DTMF = __webpack_require__(/*! ./Session/DTMF */ 363)(SIP);\nvar RFC4028 = __webpack_require__(/*! ./RFC4028 */ 364)(SIP.Timers);\n\nvar Session, InviteServerContext, InviteClientContext,\n C = {\n    //Session states\n    STATUS_NULL:                        0,\n    STATUS_INVITE_SENT:                 1,\n    STATUS_1XX_RECEIVED:                2,\n    STATUS_INVITE_RECEIVED:             3,\n    STATUS_WAITING_FOR_ANSWER:          4,\n    STATUS_ANSWERED:                    5,\n    STATUS_WAITING_FOR_PRACK:           6,\n    STATUS_WAITING_FOR_ACK:             7,\n    STATUS_CANCELED:                    8,\n    STATUS_TERMINATED:                  9,\n    STATUS_ANSWERED_WAITING_FOR_PRACK: 10,\n    STATUS_EARLY_MEDIA:                11,\n    STATUS_CONFIRMED:                  12\n  };\n\n/*\n * @param {function returning SIP.MediaHandler} [mediaHandlerFactory]\n *        (See the documentation for the mediaHandlerFactory argument of the UA constructor.)\n */\nSession = function (mediaHandlerFactory) {\n  this.status = C.STATUS_NULL;\n  this.dialog = null;\n  this.earlyDialogs = {};\n  this.mediaHandlerFactory = mediaHandlerFactory || SIP.WebRTC.MediaHandler.defaultFactory;\n  // this.mediaHandler gets set by ICC/ISC constructors\n  this.hasOffer = false;\n  this.hasAnswer = false;\n\n  // Session Timers\n  this.timers = {\n    ackTimer: null,\n    expiresTimer: null,\n    invite2xxTimer: null,\n    userNoAnswerTimer: null,\n    rel1xxTimer: null,\n    prackTimer: null\n  };\n\n  // Session info\n  this.startTime = null;\n  this.endTime = null;\n  this.tones = null;\n\n  // Mute/Hold state\n  this.local_hold = false;\n  this.remote_hold = false;\n\n  this.pending_actions = {\n    actions: [],\n\n    length: function() {\n      return this.actions.length;\n    },\n\n    isPending: function(name){\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    shift: function() {\n      return this.actions.shift();\n    },\n\n    push: function(name) {\n      this.actions.push({\n        name: name\n      });\n    },\n\n    pop: function(name) {\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          this.actions.splice(idx,1);\n          length --;\n          idx--;\n        }\n      }\n    }\n   };\n\n  this.early_sdp = null;\n  this.rel100 = SIP.C.supported.UNSUPPORTED;\n};\n\nSession.prototype = {\n  dtmf: function(tones, options) {\n    var tone, dtmfs = [],\n        self = this;\n\n    options = options || {};\n\n    if (tones === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    // Check Session Status\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // Check tones\n    if ((typeof tones !== 'string' && typeof tones !== 'number') || !tones.toString().match(/^[0-9A-D#*,]+$/i)) {\n      throw new TypeError('Invalid tones: '+ tones);\n    }\n\n    tones = tones.toString().split('');\n\n    while (tones.length > 0) { dtmfs.push(new DTMF(this, tones.shift(), options)); }\n\n    if (this.tones) {\n      // Tones are already queued, just add to the queue\n      this.tones =  this.tones.concat(dtmfs);\n      return this;\n    }\n\n    var sendDTMF = function () {\n      var dtmf, timeout;\n\n      if (self.status === C.STATUS_TERMINATED || !self.tones || self.tones.length === 0) {\n        // Stop sending DTMF\n        self.tones = null;\n        return this;\n      }\n\n      dtmf = self.tones.shift();\n\n      if (tone === ',') {\n        timeout = 2000;\n      } else {\n        dtmf.on('failed', function(){self.tones = null;});\n        dtmf.send(options);\n        timeout = dtmf.duration + dtmf.interToneGap;\n      }\n\n      // Set timeout for the next tone\n      SIP.Timers.setTimeout(sendDTMF, timeout);\n    };\n\n    this.tones = dtmfs;\n    sendDTMF();\n    return this;\n  },\n\n  bye: function(options) {\n    options = Object.create(options || Object.prototype);\n    var statusCode = options.statusCode;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      this.logger.error('Error: Attempted to send BYE in a terminated session.');\n      return this;\n    }\n\n    this.logger.log('terminating Session');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid statusCode: '+ statusCode);\n    }\n\n    options.receiveResponse = function () {};\n\n    return this.\n      sendRequest(SIP.C.BYE, options).\n      terminated();\n  },\n\n  refer: function(target, options) {\n    options = options || {};\n    var extraHeaders = (options.extraHeaders || []).slice(),\n        withReplaces =\n          target instanceof SIP.InviteServerContext ||\n          target instanceof SIP.InviteClientContext,\n        originalTarget = target;\n\n    if (target === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    // Check Session Status\n    if (this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // transform `target` so that it can be a Refer-To header value\n    if (withReplaces) {\n      //Attended Transfer\n      // B.transfer(C)\n      target = '\"' + target.remoteIdentity.friendlyName + '\" ' +\n        '<' + target.dialog.remote_target.toString() +\n        '?Replaces=' + target.dialog.id.call_id +\n        '%3Bto-tag%3D' + target.dialog.id.remote_tag +\n        '%3Bfrom-tag%3D' + target.dialog.id.local_tag + '>';\n    } else {\n      //Blind Transfer\n      // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n      // so try to make one ahead of time\n      try {\n        target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n      } catch (e) {\n        this.logger.debug(\".refer() cannot parse Refer_To from\", target);\n        this.logger.debug(\"...falling through to normalizeTarget()\");\n      }\n\n      // Check target validity\n      target = this.ua.normalizeTarget(target);\n      if (!target) {\n        throw new TypeError('Invalid target: ' + originalTarget);\n      }\n    }\n\n    extraHeaders.push('Contact: '+ this.contact);\n    extraHeaders.push('Allow: '+ SIP.UA.C.ALLOWED_METHODS.toString());\n    extraHeaders.push('Refer-To: '+ target);\n\n    // Send the request\n    this.sendRequest(SIP.C.REFER, {\n      extraHeaders: extraHeaders,\n      body: options.body,\n      receiveResponse: function (response) {\n        if ( ! /^2[0-9]{2}$/.test(response.status_code) ) {\n          return;\n        }\n        // hang up only if we transferred to a SIP address\n        if (withReplaces || (target.scheme && target.scheme.match(\"^sips?$\"))) {\n          this.terminate();\n        }\n      }.bind(this)\n    });\n    return this;\n  },\n\n  followRefer: function followRefer (callback) {\n    return function referListener (callback, request) {\n      // open non-SIP URIs if possible and keep session open\n      var referTo = request.parseHeader('refer-to');\n      var target = referTo.uri;\n      if (!target.scheme.match(\"^sips?$\")) {\n        var targetString = target.toString();\n        if (typeof environment.open === \"function\") {\n          environment.open(targetString);\n        } else {\n          this.logger.warn(\"referred to non-SIP URI but `open` isn't in the environment: \" + targetString);\n        }\n        return;\n      }\n\n      var extraHeaders = [];\n\n      /* Copy the Replaces query into a Replaces header */\n      /* TODO - make sure we don't copy a poorly formatted header? */\n      var replaces = target.getHeader('Replaces');\n      if (replaces !== undefined) {\n        extraHeaders.push('Replaces: ' + decodeURIComponent(replaces));\n      }\n\n      // don't embed headers into Request-URI of INVITE\n      target.clearHeaders();\n\n      /*\n        Harmless race condition.  Both sides of REFER\n        may send a BYE, but in the end the dialogs are destroyed.\n      */\n      var getReferMedia = this.mediaHandler.getReferMedia;\n      var mediaHint = getReferMedia ? getReferMedia.call(this.mediaHandler) : this.mediaHint;\n\n      SIP.Hacks.Chrome.getsConfusedAboutGUM(this);\n\n      var referSession = this.ua.invite(target, {\n        media: mediaHint,\n        params: {\n          to_displayName: referTo.friendlyName\n        },\n        extraHeaders: extraHeaders\n      });\n\n      callback.call(this, request, referSession);\n\n      this.terminate();\n    }.bind(this, callback);\n  },\n\n  sendRequest: function(method,options) {\n    options = options || {};\n    var self = this;\n\n    var request = new SIP.OutgoingRequest(\n      method,\n      this.dialog.remote_target,\n      this.ua,\n      {\n        cseq: options.cseq || (this.dialog.local_seqnum += 1),\n        call_id: this.dialog.id.call_id,\n        from_uri: this.dialog.local_uri,\n        from_tag: this.dialog.id.local_tag,\n        to_uri: this.dialog.remote_uri,\n        to_tag: this.dialog.id.remote_tag,\n        route_set: this.dialog.route_set,\n        statusCode: options.statusCode,\n        reasonPhrase: options.reasonPhrase\n      },\n      options.extraHeaders || [],\n      options.body\n    );\n\n    new SIP.RequestSender({\n      request: request,\n      onRequestTimeout: function() {\n        self.onRequestTimeout();\n      },\n      onTransportError: function() {\n        self.onTransportError();\n      },\n      receiveResponse: options.receiveResponse || function(response) {\n        self.receiveNonInviteResponse(response);\n      }\n    }, this.ua).send();\n\n    // Emit the request event\n    this.emit(method.toLowerCase(), request);\n\n    return this;\n  },\n\n  close: function() {\n    var idx;\n\n    if(this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    this.logger.log('closing INVITE session ' + this.id);\n\n    // 1st Step. Terminate media.\n    if (this.mediaHandler){\n      this.mediaHandler.close();\n    }\n\n    // 2nd Step. Terminate signaling.\n\n    // Clear session timers\n    for(idx in this.timers) {\n      SIP.Timers.clearTimeout(this.timers[idx]);\n    }\n\n    // Terminate dialogs\n\n    // Terminate confirmed dialog\n    if(this.dialog) {\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n\n    // Terminate early dialogs\n    for(idx in this.earlyDialogs) {\n      this.earlyDialogs[idx].terminate();\n      delete this.earlyDialogs[idx];\n    }\n\n    this.status = C.STATUS_TERMINATED;\n\n    delete this.ua.sessions[this.id];\n    return this;\n  },\n\n  createDialog: function(message, type, early) {\n    var dialog, early_dialog,\n      local_tag = message[(type === 'UAS') ? 'to_tag' : 'from_tag'],\n      remote_tag = message[(type === 'UAS') ? 'from_tag' : 'to_tag'],\n      id = message.call_id + local_tag + remote_tag;\n\n    early_dialog = this.earlyDialogs[id];\n\n    // Early Dialog\n    if (early) {\n      if (early_dialog) {\n        return true;\n      } else {\n        early_dialog = new SIP.Dialog(this, message, type, SIP.Dialog.C.STATUS_EARLY);\n\n        // Dialog has been successfully created.\n        if(early_dialog.error) {\n          this.logger.error(early_dialog.error);\n          this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n          return false;\n        } else {\n          this.earlyDialogs[id] = early_dialog;\n          return true;\n        }\n      }\n    }\n    // Confirmed Dialog\n    else {\n      // In case the dialog is in _early_ state, update it\n      if (early_dialog) {\n        early_dialog.update(message, type);\n        this.dialog = early_dialog;\n        delete this.earlyDialogs[id];\n        for (var dia in this.earlyDialogs) {\n          this.earlyDialogs[dia].terminate();\n          delete this.earlyDialogs[dia];\n        }\n        return true;\n      }\n\n      // Otherwise, create a _confirmed_ dialog\n      dialog = new SIP.Dialog(this, message, type);\n\n      if(dialog.error) {\n        this.logger.error(dialog.error);\n        this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n        return false;\n      } else {\n        this.to_tag = message.to_tag;\n        this.dialog = dialog;\n        return true;\n      }\n    }\n  },\n\n  /**\n  * Check if Session is ready for a re-INVITE\n  *\n  * @returns {Boolean}\n  */\n  isReadyToReinvite: function() {\n    return this.mediaHandler.isReady() &&\n      !this.dialog.uac_pending_reply &&\n      !this.dialog.uas_pending_reply;\n  },\n\n  /**\n   * Mute\n   */\n  mute: function(options) {\n    var ret = this.mediaHandler.mute(options);\n    if (ret) {\n      this.onmute(ret);\n    }\n  },\n\n  /**\n   * Unmute\n   */\n  unmute: function(options) {\n    var ret = this.mediaHandler.unmute(options);\n    if (ret) {\n      this.onunmute(ret);\n    }\n  },\n\n  /**\n   * Hold\n   */\n  hold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.hold();\n\n    // Check if RTCSession is ready to send a reINVITE\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'unhold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'hold' action, add this one to the queue\n       * Else, if there is already a 'hold' action, skip\n       */\n      if (this.pending_actions.isPending('unhold')) {\n        this.pending_actions.pop('unhold');\n      } else if (!this.pending_actions.isPending('hold')) {\n        this.pending_actions.push('hold');\n      }\n      return;\n    } else if (this.local_hold === true) {\n        return;\n    }\n\n    this.onhold('local');\n\n    this.sendReinvite();\n  },\n\n  /**\n   * Unhold\n   */\n  unhold: function(options) {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.unhold();\n\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'hold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'unhold' action, add this one to the queue\n       * Else, if there is already a 'unhold' action, skip\n       */\n      if (this.pending_actions.isPending('hold')) {\n        this.pending_actions.pop('hold');\n      } else if (!this.pending_actions.isPending('unhold')) {\n        this.pending_actions.push('unhold');\n      }\n      return;\n    } else if (this.local_hold === false) {\n      return;\n    }\n\n    this.onunhold('local');\n\n    this.sendReinvite(options);\n  },\n\n  /**\n   * isOnHold\n   */\n  isOnHold: function() {\n    return {\n      local: this.local_hold,\n      remote: this.remote_hold\n    };\n  },\n\n  /**\n   * In dialog INVITE Reception\n   * @private\n   */\n  receiveReinvite: function(request) {\n    var self = this;\n\n    if (!this.mediaHandler.hasDescription(request)) {\n      this.logger.warn('invalid Content-Type');\n      request.reply(415);\n      return;\n    }\n\n    this.mediaHandler.setDescription(request)\n    .then(this.mediaHandler.getDescription.bind(this.mediaHandler, this.mediaHint))\n    .then(function(description) {\n      var extraHeaders = ['Contact: ' + self.contact];\n      request.reply(200, null, extraHeaders, description,\n        function() {\n          self.status = C.STATUS_WAITING_FOR_ACK;\n          self.setInvite2xxTimer(request, description);\n          self.setACKTimer();\n\n          if (self.remote_hold && !self.mediaHandler.remote_hold) {\n            self.onunhold('remote');\n          } else if (!self.remote_hold && self.mediaHandler.remote_hold) {\n            self.onhold('remote');\n          }\n        });\n    })\n    .catch(function onFailure (e) {\n      var statusCode;\n      if (e instanceof SIP.Exceptions.GetDescriptionError) {\n        statusCode = 500;\n      } else {\n        self.logger.error(e);\n        statusCode = 488;\n      }\n      request.reply(statusCode);\n    });\n  },\n\n  sendReinvite: function(options) {\n    options = options || {};\n\n    var\n      self = this,\n       extraHeaders = (options.extraHeaders || []).slice(),\n       eventHandlers = options.eventHandlers || {},\n       succeeded;\n\n    if (eventHandlers.succeeded) {\n      succeeded = eventHandlers.succeeded;\n    }\n    this.reinviteSucceeded = function(){\n      SIP.Timers.clearTimeout(self.timers.ackTimer);\n      SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n      self.status = C.STATUS_CONFIRMED;\n      succeeded && succeeded.apply(this, arguments);\n    };\n    if (eventHandlers.failed) {\n      this.reinviteFailed = eventHandlers.failed;\n    } else {\n      this.reinviteFailed = function(){};\n    }\n\n    extraHeaders.push('Contact: ' + this.contact);\n    extraHeaders.push('Allow: '+ SIP.UA.C.ALLOWED_METHODS.toString());\n\n    this.receiveResponse = this.receiveReinviteResponse;\n    //REVISIT\n    this.mediaHandler.getDescription(self.mediaHint)\n    .then(\n      function(description){\n        self.dialog.sendRequest(self, SIP.C.INVITE, {\n          extraHeaders: extraHeaders,\n          body: description\n        });\n      },\n      function() {\n        if (self.isReadyToReinvite()) {\n          self.onReadyToReinvite();\n        }\n        self.reinviteFailed();\n      }\n    );\n  },\n\n  receiveRequest: function (request) {\n    switch (request.method) {\n      case SIP.C.BYE:\n        request.reply(200);\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.emit('bye', request);\n          this.terminated(request, SIP.C.causes.BYE);\n        }\n        break;\n      case SIP.C.INVITE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.logger.log('re-INVITE received');\n          this.receiveReinvite(request);\n        }\n        break;\n      case SIP.C.INFO:\n        if (this.status === C.STATUS_1XX_RECEIVED ||\n            this.status === C.STATUS_WAITING_FOR_PRACK ||\n            this.status === C.STATUS_WAITING_FOR_ACK ||\n            this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n            this.status === C.STATUS_EARLY_MEDIA ||\n            this.status === C.STATUS_CONFIRMED ||\n            this.dialog) {\n          if (this.onInfo) {\n            return this.onInfo(request);\n          }\n\n          var body, tone, duration,\n              contentType = request.getHeader('content-type'),\n              reg_tone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/,\n              reg_duration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n\n          if (contentType) {\n            if (contentType.match(/^application\\/dtmf-relay/i)) {\n              if (request.body) {\n                body = request.body.split('\\r\\n', 2);\n                if (body.length === 2) {\n                  if (reg_tone.test(body[0])) {\n                    tone = body[0].replace(reg_tone,\"$2\");\n                  }\n                  if (reg_duration.test(body[1])) {\n                    duration = parseInt(body[1].replace(reg_duration,\"$2\"), 10);\n                  }\n                }\n              }\n\n              new DTMF(this, tone, {duration: duration}).init_incoming(request);\n            } else {\n              request.reply(415, null, [\"Accept: application/dtmf-relay\"]);\n            }\n          }\n        }\n        break;\n      case SIP.C.REFER:\n        if(this.status ===  C.STATUS_CONFIRMED) {\n          this.logger.log('REFER received');\n          var hasReferListener = this.listeners('refer').length,\n              notifyBody;\n\n          if (hasReferListener) {\n            request.reply(202, 'Accepted');\n            notifyBody = 'SIP/2.0 100 Trying';\n\n            this.sendRequest(SIP.C.NOTIFY, {\n              extraHeaders:[\n                'Event: refer',\n                'Subscription-State: terminated',\n                'Content-Type: message/sipfrag'\n              ],\n              body: notifyBody,\n              receiveResponse: function() {}\n            });\n\n            this.emit('refer', request);\n          } else {\n            // RFC 3515.2.4.2: 'the UA MAY decline the request.'\n            request.reply(603, 'Declined');\n          }\n        }\n        break;\n      case SIP.C.NOTIFY:\n        request.reply(200, 'OK');\n        this.emit('notify', request);\n        break;\n    }\n  },\n\n  /**\n   * Reception of Response for in-dialog INVITE\n   * @private\n   */\n  receiveReinviteResponse: function(response) {\n    var self = this;\n\n    if (this.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    switch(true) {\n      case /^1[0-9]{2}$/.test(response.status_code):\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        this.status = C.STATUS_CONFIRMED;\n\n        this.sendRequest(SIP.C.ACK,{cseq:response.cseq});\n\n        if (!this.mediaHandler.hasDescription(response)) {\n          this.reinviteFailed();\n          break;\n        }\n\n        //REVISIT\n        this.mediaHandler.setDescription(response)\n        .then(\n          function onSuccess () {\n            self.reinviteSucceeded();\n          },\n          function onFailure () {\n            self.reinviteFailed();\n          }\n        );\n        break;\n      default:\n        this.reinviteFailed();\n    }\n  },\n\n  acceptAndTerminate: function(response, status_code, reason_phrase) {\n    var extraHeaders = [];\n\n    if (status_code) {\n      extraHeaders.push('Reason: ' + SIP.Utils.getReasonHeaderValue(status_code, reason_phrase));\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if (this.dialog || this.createDialog(response, 'UAC')) {\n      this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n      this.sendRequest(SIP.C.BYE, {\n        extraHeaders: extraHeaders\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * RFC3261 13.3.1.4\n   * Response retransmissions cannot be accomplished by transaction layer\n   *  since it is destroyed when receiving the first 2xx answer\n   */\n  setInvite2xxTimer: function(request, description) {\n    var self = this,\n        timeout = SIP.Timers.T1;\n\n    this.timers.invite2xxTimer = SIP.Timers.setTimeout(function invite2xxRetransmission() {\n      if (self.status !== C.STATUS_WAITING_FOR_ACK) {\n        return;\n      }\n\n      self.logger.log('no ACK received, attempting to retransmit OK');\n\n      var extraHeaders = ['Contact: ' + self.contact];\n\n      request.reply(200, null, extraHeaders, description);\n\n      timeout = Math.min(timeout * 2, SIP.Timers.T2);\n\n      self.timers.invite2xxTimer = SIP.Timers.setTimeout(invite2xxRetransmission, timeout);\n    }, timeout);\n  },\n\n  /**\n   * RFC3261 14.2\n   * If a UAS generates a 2xx response and never receives an ACK,\n   *  it SHOULD generate a BYE to terminate the dialog.\n   */\n  setACKTimer: function() {\n    var self = this;\n\n    this.timers.ackTimer = SIP.Timers.setTimeout(function() {\n      if(self.status === C.STATUS_WAITING_FOR_ACK) {\n        self.logger.log('no ACK received for an extended period of time, terminating the call');\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.sendRequest(SIP.C.BYE);\n        self.terminated(null, SIP.C.causes.NO_ACK);\n      }\n    }, SIP.Timers.TIMER_H);\n  },\n\n  /*\n   * @private\n   */\n  onReadyToReinvite: function() {\n    var action = this.pending_actions.shift();\n\n    if (!action || !this[action.name]) {\n      return;\n    }\n\n    this[action.name]();\n  },\n\n  onTransportError: function() {\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  },\n\n  onDialogError: function(response) {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(response, SIP.C.causes.DIALOG_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(response, SIP.C.causes.DIALOG_ERROR);\n      this.terminated(response, SIP.C.causes.DIALOG_ERROR);\n    }\n  },\n\n  /**\n   * @private\n   */\n  onhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = true;\n    this.emit('hold', { originator: originator });\n  },\n\n  /**\n   * @private\n   */\n  onunhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = false;\n    this.emit('unhold', { originator: originator });\n  },\n\n  /*\n   * @private\n   */\n  onmute: function(options) {\n    this.emit('muted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  /*\n   * @private\n   */\n  onunmute: function(options) {\n    this.emit('unmuted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  failed: function(response, cause) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n    this.emit('failed', response || null, cause || null);\n    return this;\n  },\n\n  rejected: function(response, cause) {\n    this.emit('rejected',\n      response || null,\n      cause || null\n    );\n    return this;\n  },\n\n  canceled: function() {\n    this.emit('cancel');\n    return this;\n  },\n\n  accepted: function(response, cause) {\n    cause = SIP.Utils.getReasonPhrase(response && response.status_code, cause);\n\n    this.startTime = new Date();\n\n    if (this.replacee) {\n      this.replacee.emit('replaced', this);\n      this.replacee.terminate();\n    }\n    if (response) {\n      RFC4028.updateState(this.dialog, response, SIP.Parser.parseMessage, this.ua);\n    }\n    this.emit('accepted', response, cause);\n    return this;\n  },\n\n  terminated: function(message, cause) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    this.endTime = new Date();\n\n    this.close();\n    this.emit('terminated',\n      message || null,\n      cause || null\n    );\n    return this;\n  },\n\n  connecting: function(request) {\n    this.emit('connecting', { request: request });\n    return this;\n  }\n};\n\nSession.desugar = function desugar(options) {\n  if (environment.HTMLMediaElement && options instanceof environment.HTMLMediaElement) {\n    options = {\n      media: {\n        constraints: {\n          audio: true,\n          video: options.tagName === 'VIDEO'\n        },\n        render: {\n          remote: options\n        }\n      }\n    };\n  }\n  return options || {};\n};\n\n\nSession.C = C;\nSIP.Session = Session;\n\n\nInviteServerContext = function(ua, request) {\n  var expires,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    contentDisp = request.parseHeader('Content-Disposition');\n\n  SIP.Utils.augment(this, SIP.ServerContext, [ua, request]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: {\"optional\": [{'DtlsSrtpKeyAgreement': 'true'}]}\n  });\n\n  // Check body and content type\n  if ((!contentDisp && !this.mediaHandler.hasDescription(request)) || (contentDisp && contentDisp.type === 'render')) {\n    this.renderbody = request.body;\n    this.rendertype = contentType;\n  } else if (!this.mediaHandler.hasDescription(request) && (contentDisp && contentDisp.type === 'session')) {\n    request.reply(415);\n    //TODO: instead of 415, pass off to the media handler, who can then decide if we can use it\n    return;\n  }\n\n  // TODO test\n  // http://tools.ietf.org/html/rfc4028#section-9\n  if (RFC4028.hasSmallMinSE(request)) {\n    request.reply(422, null, ['Min-SE: ' + RFC4028.localMinSE]);\n    return;\n  }\n\n  this.status = C.STATUS_INVITE_RECEIVED;\n  this.from_tag = request.from_tag;\n  this.id = request.call_id + this.from_tag;\n  this.request = request;\n  this.contact = this.ua.contact.toString();\n\n  this.receiveNonInviteResponse = function () {}; // intentional no-op\n\n  this.logger = ua.getLogger('sip.inviteservercontext', this.id);\n\n  //Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  //Get the Expires header value if exists\n  if(request.hasHeader('expires')) {\n    expires = request.getHeader('expires') * 1000;\n  }\n\n  //Set 100rel if necessary\n  function set100rel(h,c) {\n    if (request.hasHeader(h) && request.getHeader(h).toLowerCase().indexOf('100rel') >= 0) {\n      self.rel100 = c;\n    }\n  }\n  set100rel('require', SIP.C.supported.REQUIRED);\n  set100rel('supported', SIP.C.supported.SUPPORTED);\n\n  /* Set the to_tag before\n   * replying a response code that will create a dialog.\n   */\n  request.to_tag = SIP.Utils.newTag();\n\n  // An error on dialog creation will fire 'failed' event\n  if(!this.createDialog(request, 'UAS', true)) {\n    request.reply(500, 'Missing Contact header field');\n    return;\n  }\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n\n  function fireNewSession() {\n    var options = {extraHeaders: ['Contact: ' + self.contact]};\n\n    if (self.rel100 !== SIP.C.supported.REQUIRED) {\n      self.progress(options);\n    }\n    self.status = C.STATUS_WAITING_FOR_ANSWER;\n\n    // Set userNoAnswerTimer\n    self.timers.userNoAnswerTimer = SIP.Timers.setTimeout(function() {\n      request.reply(408);\n      self.failed(request, SIP.C.causes.NO_ANSWER);\n      self.terminated(request, SIP.C.causes.NO_ANSWER);\n    }, self.ua.configuration.noAnswerTimeout);\n\n    /* Set expiresTimer\n     * RFC3261 13.3.1\n     */\n    if (expires) {\n      self.timers.expiresTimer = SIP.Timers.setTimeout(function() {\n        if(self.status === C.STATUS_WAITING_FOR_ANSWER) {\n          request.reply(487);\n          self.failed(request, SIP.C.causes.EXPIRES);\n          self.terminated(request, SIP.C.causes.EXPIRES);\n        }\n      }, expires);\n    }\n\n    self.emit('invite',request);\n  }\n\n  if (!this.mediaHandler.hasDescription(request) || this.renderbody) {\n    SIP.Timers.setTimeout(fireNewSession, 0);\n  } else {\n    this.hasOffer = true;\n    this.mediaHandler.setDescription(request)\n    .then(\n      fireNewSession,\n      function onFailure (e) {\n        self.logger.warn('invalid description');\n        self.logger.warn(e);\n        request.reply(488);\n      }\n    );\n  }\n};\n\nInviteServerContext.prototype = {\n  reject: function(options) {\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('rejecting RTCSession');\n\n    SIP.ServerContext.prototype.reject.call(this, options);\n    return this.terminated();\n  },\n\n  terminate: function(options) {\n    options = options || {};\n\n    var\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    dialog,\n    self = this;\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK &&\n       this.request.server_transaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      dialog = this.dialog;\n\n      this.receiveRequest = function(request) {\n        if (request.method === SIP.C.ACK) {\n          this.sendRequest(SIP.C.BYE, {\n            extraHeaders: extraHeaders,\n            body: body\n          });\n          dialog.terminate();\n        }\n      };\n\n      this.request.server_transaction.on('stateChanged', function(){\n        if (this.state === SIP.Transactions.C.STATUS_TERMINATED && this.dialog) {\n          this.request = new SIP.OutgoingRequest(\n            SIP.C.BYE,\n            this.dialog.remote_target,\n            this.ua,\n            {\n              'cseq': this.dialog.local_seqnum+=1,\n              'call_id': this.dialog.id.call_id,\n              'from_uri': this.dialog.local_uri,\n              'from_tag': this.dialog.id.local_tag,\n              'to_uri': this.dialog.remote_uri,\n              'to_tag': this.dialog.id.remote_tag,\n              'route_set': this.dialog.route_set\n            },\n            extraHeaders,\n            body\n          );\n\n          new SIP.RequestSender(\n            {\n              request: this.request,\n              onRequestTimeout: function() {\n                self.onRequestTimeout();\n              },\n              onTransportError: function() {\n                self.onTransportError();\n              },\n              receiveResponse: function() {\n                return;\n              }\n            },\n            this.ua\n          ).send();\n          dialog.terminate();\n        }\n      });\n\n      this.emit('bye', this.request);\n      this.terminated();\n\n      // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-)\n      this.dialog = dialog;\n\n      // Restore the dialog into 'ua' so the ACK can reach 'this' session\n      this.ua.dialogs[dialog.id.toString()] = dialog;\n\n    } else if (this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.reject(options);\n    }\n\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  progress: function (options) {\n    options = options || {};\n    var\n      statusCode = options.statusCode || 180,\n      reasonPhrase = options.reasonPhrase,\n      extraHeaders = (options.extraHeaders || []).slice(),\n      iceServers,\n      stunServers = options.stunServers || null,\n      turnServers = options.turnServers || null,\n      body = options.body,\n      response;\n\n    if (statusCode < 100 || statusCode > 199) {\n      throw new TypeError('Invalid statusCode: ' + statusCode);\n    }\n\n    if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    if (stunServers || turnServers) {\n      if (stunServers) {\n        iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n        if (!iceServers) {\n          throw new TypeError('Invalid stunServers: '+ stunServers);\n        } else {\n          this.stunServers = iceServers;\n        }\n      }\n\n      if (turnServers) {\n        iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n        if (!iceServers) {\n          throw new TypeError('Invalid turnServers: '+ turnServers);\n        } else {\n          this.turnServers = iceServers;\n        }\n      }\n\n      this.mediaHandler.updateIceServers({\n        stunServers: this.stunServers,\n        turnServers: this.turnServers\n      });\n    }\n\n    function do100rel() {\n      /* jshint validthis: true */\n      statusCode = options.statusCode || 183;\n\n      // Set status and add extra headers\n      this.status = C.STATUS_WAITING_FOR_PRACK;\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Require: 100rel');\n      extraHeaders.push('RSeq: ' + Math.floor(Math.random() * 10000));\n\n      // Save media hint for later (referred sessions)\n      this.mediaHint = options.media;\n\n      // Get the session description to add to preaccept with\n      this.mediaHandler.getDescription(options.media)\n      .then(\n        function onSuccess (description) {\n          if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n            return;\n          }\n\n          this.early_sdp = description.body;\n          this[this.hasOffer ? 'hasAnswer' : 'hasOffer'] = true;\n\n          // Retransmit until we get a response or we time out (see prackTimer below)\n          var timeout = SIP.Timers.T1;\n          this.timers.rel1xxTimer = SIP.Timers.setTimeout(function rel1xxRetransmission() {\n            this.request.reply(statusCode, null, extraHeaders, description);\n            timeout *= 2;\n            this.timers.rel1xxTimer = SIP.Timers.setTimeout(rel1xxRetransmission.bind(this), timeout);\n          }.bind(this), timeout);\n\n          // Timeout and reject INVITE if no response\n          this.timers.prackTimer = SIP.Timers.setTimeout(function () {\n            if (this.status !== C.STATUS_WAITING_FOR_PRACK) {\n              return;\n            }\n\n            this.logger.log('no PRACK received, rejecting the call');\n            SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n            this.request.reply(504);\n            this.terminated(null, SIP.C.causes.NO_PRACK);\n          }.bind(this), SIP.Timers.T1 * 64);\n\n          // Send the initial response\n          response = this.request.reply(statusCode, reasonPhrase, extraHeaders, description);\n          this.emit('progress', response, reasonPhrase);\n        }.bind(this),\n\n        function onFailure () {\n          this.request.reply(480);\n          this.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          this.terminated(null, SIP.C.causes.WEBRTC_ERROR);\n        }.bind(this)\n      );\n    } // end do100rel\n\n    function normalReply() {\n      /* jshint validthis:true */\n      response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n      this.emit('progress', response, reasonPhrase);\n    }\n\n    if (options.statusCode !== 100 &&\n        (this.rel100 === SIP.C.supported.REQUIRED ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && options.rel100) ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && (this.ua.configuration.rel100 === SIP.C.supported.REQUIRED)))) {\n      do100rel.apply(this);\n    } else {\n      normalReply.apply(this);\n    }\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  accept: function(options) {\n    options = Object.create(Session.desugar(options));\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    this.onInfo = options.onInfo;\n\n    // commented out now-unused hold-related variables for jshint. See below. JMF 2014-1-21\n    var\n      //idx, length, hasAudio, hasVideo,\n      self = this,\n      request = this.request,\n      extraHeaders = (options.extraHeaders || []).slice(),\n    //mediaStream = options.mediaStream || null,\n      iceServers,\n      stunServers = options.stunServers || null,\n      turnServers = options.turnServers || null,\n      descriptionCreationSucceeded = function(description) {\n        var\n          response,\n          // run for reply success callback\n          replySucceeded = function() {\n            self.status = C.STATUS_WAITING_FOR_ACK;\n\n            self.setInvite2xxTimer(request, description);\n            self.setACKTimer();\n          },\n\n          // run for reply failure callback\n          replyFailed = function() {\n            self.failed(null, SIP.C.causes.CONNECTION_ERROR);\n            self.terminated(null, SIP.C.causes.CONNECTION_ERROR);\n          };\n\n        // Chrome might call onaddstream before accept() is called, which means\n        // mediaHandler.render() was called without a renderHint, so we need to\n        // re-render now that mediaHint.render has been set.\n        //\n        // Chrome seems to be in the right regarding this, see\n        // http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-onaddstream\n        self.mediaHandler.render();\n\n        extraHeaders.push('Contact: ' + self.contact);\n        extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());\n\n        // TODO test\n        // http://tools.ietf.org/html/rfc4028#section-9\n        var supportedOptions = request.parseHeader('Supported') || [];\n        var sessionExpires = request.parseHeader('Session-Expires') || {};\n        var interval = sessionExpires.deltaSeconds;\n        if (interval) {\n          var refresher = sessionExpires.refresher || 'uas';\n          extraHeaders.push('Session-Expires: ' + interval + ';' + refresher);\n          if (refresher === 'uac' || supportedOptions.indexOf('timer') >= 0) {\n            extraHeaders.push('Require: timer');\n          }\n        }\n\n        if(!self.hasOffer) {\n          self.hasOffer = true;\n        } else {\n          self.hasAnswer = true;\n        }\n        response = request.reply(200, null, extraHeaders,\n                      description,\n                      replySucceeded,\n                      replyFailed\n                     );\n        if (self.status !== C.STATUS_TERMINATED) { // Didn't fail\n          self.accepted(response, SIP.Utils.getReasonPhrase(200));\n        }\n      },\n\n      descriptionCreationFailed = function() {\n        if (self.status === C.STATUS_TERMINATED) {\n          return;\n        }\n        // TODO - fail out on error\n        self.request.reply(480);\n        //self.failed(response, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n        self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        self.terminated(null, SIP.C.causes.WEBRTC_ERROR);\n      };\n\n    // Check Session Status\n    if (this.status === C.STATUS_WAITING_FOR_PRACK) {\n      this.status = C.STATUS_ANSWERED_WAITING_FOR_PRACK;\n      return this;\n    } else if (this.status === C.STATUS_WAITING_FOR_ANSWER) {\n      this.status = C.STATUS_ANSWERED;\n    } else if (this.status !== C.STATUS_EARLY_MEDIA) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    if ((stunServers || turnServers) &&\n        (this.status !== C.STATUS_EARLY_MEDIA && this.status !== C.STATUS_ANSWERED_WAITING_FOR_PRACK)) {\n      if (stunServers) {\n        iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n        if (!iceServers) {\n          throw new TypeError('Invalid stunServers: '+ stunServers);\n        } else {\n          this.stunServers = iceServers;\n        }\n      }\n\n      if (turnServers) {\n        iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n        if (!iceServers) {\n          throw new TypeError('Invalid turnServers: '+ turnServers);\n        } else {\n          this.turnServers = iceServers;\n        }\n      }\n\n      this.mediaHandler.updateIceServers({\n        stunServers: this.stunServers,\n        turnServers: this.turnServers\n      });\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if(!this.createDialog(request, 'UAS')) {\n      request.reply(500, 'Missing Contact header field');\n      return this;\n    }\n\n    SIP.Timers.clearTimeout(this.timers.userNoAnswerTimer);\n\n    // this hold-related code breaks FF accepting new calls - JMF 2014-1-21\n    /*\n    length = this.getRemoteStreams().length;\n\n    for (idx = 0; idx < length; idx++) {\n      if (this.mediaHandler.getRemoteStreams()[idx].getVideoTracks().length > 0) {\n        hasVideo = true;\n      }\n      if (this.mediaHandler.getRemoteStreams()[idx].getAudioTracks().length > 0) {\n        hasAudio = true;\n      }\n    }\n\n    if (!hasAudio && this.mediaConstraints.audio === true) {\n      this.mediaConstraints.audio = false;\n      if (mediaStream) {\n        length = mediaStream.getAudioTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getAudioTracks()[idx]);\n        }\n      }\n    }\n\n    if (!hasVideo && this.mediaConstraints.video === true) {\n      this.mediaConstraints.video = false;\n      if (mediaStream) {\n        length = mediaStream.getVideoTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getVideoTracks()[idx]);\n        }\n      }\n    }\n    */\n\n    if (this.status === C.STATUS_EARLY_MEDIA) {\n      descriptionCreationSucceeded({});\n    } else {\n      this.mediaHandler.getDescription(self.mediaHint)\n      .then(\n        descriptionCreationSucceeded,\n        descriptionCreationFailed\n      );\n    }\n\n    return this;\n  },\n\n  receiveRequest: function(request) {\n\n    // ISC RECEIVE REQUEST\n\n    function confirmSession() {\n      /* jshint validthis:true */\n      var contentType;\n\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      // TODO - this logic assumes Content-Disposition defaults\n      contentType = request.getHeader('Content-Type');\n      if (!this.mediaHandler.hasDescription(request)) {\n        this.renderbody = request.body;\n        this.rendertype = contentType;\n      }\n\n      this.emit('confirmed', request);\n    }\n\n    switch(request.method) {\n    case SIP.C.CANCEL:\n      /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL\n       * was in progress and that the UAC MAY continue with the session established by\n       * any 2xx response, or MAY terminate with BYE. SIP does continue with the\n       * established session. So the CANCEL is processed only if the session is not yet\n       * established.\n       */\n\n      /*\n       * Terminate the whole session in case the user didn't accept (or yet to send the answer) nor reject the\n       *request opening the session.\n       */\n      if(this.status === C.STATUS_WAITING_FOR_ANSWER ||\n         this.status === C.STATUS_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_EARLY_MEDIA ||\n         this.status === C.STATUS_ANSWERED) {\n\n        this.status = C.STATUS_CANCELED;\n        this.request.reply(487);\n        this.canceled(request);\n        this.rejected(request, SIP.C.causes.CANCELED);\n        this.failed(request, SIP.C.causes.CANCELED);\n        this.terminated(request, SIP.C.causes.CANCELED);\n      }\n      break;\n    case SIP.C.ACK:\n      if(this.status === C.STATUS_WAITING_FOR_ACK) {\n        if (!this.hasAnswer) {\n          if(this.mediaHandler.hasDescription(request)) {\n            // ACK contains answer to an INVITE w/o SDP negotiation\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(request)\n            .then(\n              confirmSession.bind(this),\n              function onFailure (e) {\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n                this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else if (this.early_sdp) {\n            confirmSession.apply(this);\n          } else {\n            //TODO: Pass to mediahandler\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          confirmSession.apply(this);\n        }\n      }\n      break;\n    case SIP.C.PRACK:\n      if (this.status === C.STATUS_WAITING_FOR_PRACK || this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n        //localMedia = session.mediaHandler.localMedia;\n        if(!this.hasAnswer) {\n          if(this.mediaHandler.hasDescription(request)) {\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(request)\n            .then(\n              function onSuccess () {\n                SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n                SIP.Timers.clearTimeout(this.timers.prackTimer);\n                request.reply(200);\n                if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                  this.status = C.STATUS_EARLY_MEDIA;\n                  this.accept();\n                }\n                this.status = C.STATUS_EARLY_MEDIA;\n                //REVISIT\n                this.mute();\n              }.bind(this),\n              function onFailure (e) {\n                //TODO: Send to media handler\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n                this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else {\n            this.terminate({\n              statusCode: '488',\n              reasonPhrase: 'Bad Media Description'\n            });\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n          SIP.Timers.clearTimeout(this.timers.prackTimer);\n          request.reply(200);\n\n          if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n            this.status = C.STATUS_EARLY_MEDIA;\n            this.accept();\n          }\n          this.status = C.STATUS_EARLY_MEDIA;\n          //REVISIT\n          this.mute();\n        }\n      } else if(this.status === C.STATUS_EARLY_MEDIA) {\n        request.reply(200);\n      }\n      break;\n    default:\n      Session.prototype.receiveRequest.apply(this, [request]);\n      break;\n    }\n  },\n\n  onTransportError: function() {\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  }\n\n};\n\nSIP.InviteServerContext = InviteServerContext;\n\nInviteClientContext = function(ua, target, options) {\n  options = Object.create(Session.desugar(options));\n  options.params = Object.create(options.params || Object.prototype);\n\n  var iceServers,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    mediaHandlerFactory = options.mediaHandlerFactory || ua.configuration.mediaHandlerFactory,\n    isMediaSupported = mediaHandlerFactory.isSupported;\n\n  // Check WebRTC support\n  if (isMediaSupported && !isMediaSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  this.RTCConstraints = options.RTCConstraints || {};\n  this.inviteWithoutSdp = options.inviteWithoutSdp || false;\n\n  // Set anonymous property\n  this.anonymous = options.anonymous || false;\n\n  // Custom data to be sent either in INVITE or in ACK\n  this.renderbody = options.renderbody || null;\n  this.rendertype = options.rendertype || 'text/plain';\n\n  options.params.from_tag = this.from_tag;\n\n  /* Do not add ;ob in initial forming dialog requests if the registration over\n   *  the current connection got a GRUU URI.\n   */\n  this.contact = ua.contact.toString({\n    anonymous: this.anonymous,\n    outbound: this.anonymous ? !ua.contact.temp_gruu : !ua.contact.pub_gruu\n  });\n\n  if (this.anonymous) {\n    options.params.from_displayName = 'Anonymous';\n    options.params.from_uri = 'sip:anonymous@anonymous.invalid';\n\n    extraHeaders.push('P-Preferred-Identity: '+ ua.configuration.uri.toString());\n    extraHeaders.push('Privacy: id');\n  }\n  extraHeaders.push('Contact: '+ this.contact);\n  extraHeaders.push('Allow: '+ SIP.UA.C.ALLOWED_METHODS.toString());\n  if (this.inviteWithoutSdp && this.renderbody) {\n    extraHeaders.push('Content-Type: ' + this.rendertype);\n    extraHeaders.push('Content-Disposition: render;handling=optional');\n  }\n\n  if (ua.configuration.rel100 === SIP.C.supported.REQUIRED) {\n    extraHeaders.push('Require: 100rel');\n  }\n  if (ua.configuration.replaces === SIP.C.supported.REQUIRED) {\n    extraHeaders.push('Require: replaces');\n  }\n\n  options.extraHeaders = extraHeaders;\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.INVITE, target, options]);\n  SIP.Utils.augment(this, SIP.Session, [mediaHandlerFactory]);\n\n  // Check Session Status\n  if (this.status !== C.STATUS_NULL) {\n    throw new SIP.Exceptions.InvalidStateError(this.status);\n  }\n\n  // Session parameter initialization\n  this.from_tag = SIP.Utils.newTag();\n\n  // OutgoingSession specific parameters\n  this.isCanceled = false;\n  this.received_100 = false;\n\n  this.method = SIP.C.INVITE;\n\n  this.receiveNonInviteResponse = this.receiveResponse;\n  this.receiveResponse = this.receiveInviteResponse;\n\n  this.logger = ua.getLogger('sip.inviteclientcontext');\n\n  if (stunServers) {\n    iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid stunServers: '+ stunServers);\n    } else {\n      this.stunServers = iceServers;\n    }\n  }\n\n  if (turnServers) {\n    iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid turnServers: '+ turnServers);\n    } else {\n      this.turnServers = iceServers;\n    }\n  }\n\n  ua.applicants[this] = this;\n\n  this.id = this.request.call_id + this.from_tag;\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: this.RTCConstraints,\n    stunServers: this.stunServers,\n    turnServers: this.turnServers\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n\n  SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n  this.mediaHint = options.media;\n\n  this.onInfo = options.onInfo;\n};\n\nInviteClientContext.prototype = {\n  invite: function () {\n    var self = this;\n\n    //Save the session into the ua sessions collection.\n    //Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\n    this.ua.sessions[this.id] = this;\n\n    //Note: due to the way Firefox handles gUM calls, it is recommended to make the gUM call at the app level\n    // and hand sip.js a stream as the mediaHint\n    if (this.inviteWithoutSdp) {\n      //just send an invite with no sdp...\n      this.request.body = self.renderbody;\n      this.status = C.STATUS_INVITE_SENT;\n      this.send();\n    } else {\n      this.mediaHandler.getDescription(self.mediaHint)\n      .then(\n        function onSuccess(description) {\n          if (self.isCanceled || self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          self.hasOffer = true;\n          self.request.body = description;\n          self.status = C.STATUS_INVITE_SENT;\n          self.send();\n        },\n        function onFailure() {\n          if (self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          // TODO...fail out\n          //self.failed(null, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n          //self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          self.terminated(null, SIP.C.causes.WEBRTC_ERROR);\n        }\n      );\n    }\n\n    return this;\n  },\n\n  receiveInviteResponse: function(response) {\n    var cause, //localMedia,\n      session = this,\n      id = response.call_id + response.from_tag + response.to_tag,\n      extraHeaders = [],\n      options = {};\n\n    if (this.status === C.STATUS_TERMINATED || response.method !== SIP.C.INVITE) {\n      return;\n    }\n\n    if (this.dialog && (response.status_code >= 200 && response.status_code <= 299)) {\n      if (id !== this.dialog.id.toString() ) {\n        if (!this.createDialog(response, 'UAC', true)) {\n          return;\n        }\n        this.earlyDialogs[id].sendRequest(this, SIP.C.ACK,\n                                          {\n                                            body: SIP.Utils.generateFakeSDP(response.body)\n                                          });\n        this.earlyDialogs[id].sendRequest(this, SIP.C.BYE);\n\n        /* NOTE: This fails because the forking proxy does not recognize that an unanswerable\n         * leg (due to peerConnection limitations) has been answered first. If your forking\n         * proxy does not hang up all unanswered branches on the first branch answered, remove this.\n         */\n        if(this.status !== C.STATUS_CONFIRMED) {\n          this.failed(response, SIP.C.causes.WEBRTC_ERROR);\n          this.terminated(response, SIP.C.causes.WEBRTC_ERROR);\n        }\n        return;\n      } else if (this.status === C.STATUS_CONFIRMED) {\n        this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n        return;\n      } else if (!this.hasAnswer) {\n        // invite w/o sdp is waiting for callback\n        //an invite with sdp must go on, and hasAnswer is true\n        return;\n      }\n    }\n\n    if (this.dialog && response.status_code < 200) {\n      /*\n        Early media has been set up with at least one other different branch,\n        but a final 2xx response hasn't been received\n      */\n      if (this.dialog.pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n          (this.dialog.pracked[this.dialog.pracked.length-1] >= response.getHeader('rseq') && this.dialog.pracked.length > 0)) {\n        return;\n      }\n\n      if (!this.earlyDialogs[id] && !this.createDialog(response, 'UAC', true)) {\n        return;\n      }\n\n      if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n          (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length-1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {\n        return;\n      }\n\n      extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n      this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n\n      this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n        extraHeaders: extraHeaders,\n        body: SIP.Utils.generateFakeSDP(response.body)\n      });\n      return;\n    }\n\n    // Proceed to cancellation if the user requested.\n    if(this.isCanceled) {\n      if(response.status_code >= 100 && response.status_code < 200) {\n        this.request.cancel(this.cancelReason, extraHeaders);\n        this.canceled(null);\n      } else if(response.status_code >= 200 && response.status_code < 299) {\n        this.acceptAndTerminate(response);\n        this.emit('bye', this.request);\n      } else if (response.status_code >= 300) {\n        cause = SIP.C.REASON_PHRASE[response.status_code] || SIP.C.causes.CANCELED;\n        this.rejected(response, cause);\n        this.failed(response, cause);\n        this.terminated(response, cause);\n      }\n      return;\n    }\n\n    switch(true) {\n      case /^100$/.test(response.status_code):\n        this.received_100 = true;\n        this.emit('progress', response);\n        break;\n      case (/^1[0-9]{2}$/.test(response.status_code)):\n        // Do nothing with 1xx responses without To tag.\n        if(!response.to_tag) {\n          this.logger.warn('1xx response received without to tag');\n          break;\n        }\n\n        // Create Early Dialog if 1XX comes with contact\n        if(response.hasHeader('contact')) {\n          // An error on dialog creation will fire 'failed' event\n          if (!this.createDialog(response, 'UAC', true)) {\n            break;\n          }\n        }\n\n        this.status = C.STATUS_1XX_RECEIVED;\n\n        if(response.hasHeader('require') &&\n           response.getHeader('require').indexOf('100rel') !== -1) {\n\n          // Do nothing if this.dialog is already confirmed\n          if (this.dialog || !this.earlyDialogs[id]) {\n            break;\n          }\n\n          if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n              (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length-1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {\n            return;\n          }\n\n          if (!this.mediaHandler.hasDescription(response)) {\n            extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n              extraHeaders: extraHeaders\n            });\n            this.emit('progress', response);\n\n          } else if (this.hasOffer) {\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasAnswer = true;\n            this.dialog.pracked.push(response.getHeader('rseq'));\n\n            this.mediaHandler.setDescription(response)\n            .then(\n              function onSuccess () {\n                extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n\n                session.sendRequest(SIP.C.PRACK, {\n                  extraHeaders: extraHeaders,\n                  receiveResponse: function() {}\n                });\n                session.status = C.STATUS_EARLY_MEDIA;\n                session.mute();\n                session.emit('progress', response);\n                /*\n                if (session.status === C.STATUS_EARLY_MEDIA) {\n                  localMedia = session.mediaHandler.localMedia;\n                  if (localMedia.getAudioTracks().length > 0) {\n                    localMedia.getAudioTracks()[0].enabled = false;\n                  }\n                  if (localMedia.getVideoTracks().length > 0) {\n                    localMedia.getVideoTracks()[0].enabled = false;\n                  }\n                }*/\n              },\n              function onFailure (e) {\n                session.logger.warn(e);\n                session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }\n            );\n          } else {\n            var earlyDialog = this.earlyDialogs[id];\n            var earlyMedia = earlyDialog.mediaHandler;\n\n            earlyDialog.pracked.push(response.getHeader('rseq'));\n\n            earlyMedia.setDescription(response)\n            .then(earlyMedia.getDescription.bind(earlyMedia, session.mediaHint))\n            .then(function onSuccess(description) {\n              extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n              earlyDialog.sendRequest(session, SIP.C.PRACK, {\n                extraHeaders: extraHeaders,\n                body: description\n              });\n              session.status = C.STATUS_EARLY_MEDIA;\n              session.emit('progress', response);\n            })\n            .catch(function onFailure(e) {\n              if (e instanceof SIP.Exceptions.GetDescriptionError) {\n                earlyDialog.pracked.push(response.getHeader('rseq'));\n                if (session.status === C.STATUS_TERMINATED) {\n                  return;\n                }\n                // TODO - fail out on error\n                // session.failed(gum error);\n                session.failed(null, SIP.C.causes.WEBRTC_ERROR);\n                session.terminated(null, SIP.C.causes.WEBRTC_ERROR);\n              } else {\n                earlyDialog.pracked.splice(earlyDialog.pracked.indexOf(response.getHeader('rseq')), 1);\n                // Could not set remote description\n                session.logger.warn('invalid description');\n                session.logger.warn(e);\n              }\n            });\n          }\n        } else {\n          this.emit('progress', response);\n        }\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        var cseq = this.request.cseq + ' ' + this.request.method;\n        if (cseq !== response.getHeader('cseq')) {\n          break;\n        }\n\n        if (this.status === C.STATUS_EARLY_MEDIA && this.dialog) {\n          this.status = C.STATUS_CONFIRMED;\n          this.unmute();\n          /*localMedia = this.mediaHandler.localMedia;\n          if (localMedia.getAudioTracks().length > 0) {\n            localMedia.getAudioTracks()[0].enabled = true;\n          }\n          if (localMedia.getVideoTracks().length > 0) {\n            localMedia.getVideoTracks()[0].enabled = true;\n          }*/\n          options = {};\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + this.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          options.cseq = response.cseq;\n          this.sendRequest(SIP.C.ACK, options);\n          this.accepted(response);\n          break;\n        }\n        // Do nothing if this.dialog is already confirmed\n        if (this.dialog) {\n          break;\n        }\n\n        // This is an invite without sdp\n        if (!this.hasOffer) {\n          if (this.earlyDialogs[id] && this.earlyDialogs[id].mediaHandler.localMedia) {\n            //REVISIT\n            this.hasOffer = true;\n            this.hasAnswer = true;\n            this.mediaHandler = this.earlyDialogs[id].mediaHandler;\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.status = C.STATUS_CONFIRMED;\n            this.sendRequest(SIP.C.ACK, {cseq:response.cseq});\n\n            this.unmute();\n            /*\n            localMedia = session.mediaHandler.localMedia;\n            if (localMedia.getAudioTracks().length > 0) {\n              localMedia.getAudioTracks()[0].enabled = true;\n            }\n            if (localMedia.getVideoTracks().length > 0) {\n              localMedia.getVideoTracks()[0].enabled = true;\n            }*/\n            this.accepted(response);\n          } else {\n            if(!this.mediaHandler.hasDescription(response)) {\n              this.acceptAndTerminate(response, 400, 'Missing session description');\n              this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              break;\n            }\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasOffer = true;\n            this.mediaHandler.setDescription(response)\n            .then(this.mediaHandler.getDescription.bind(this.mediaHandler, this.mediaHint))\n            .then(function onSuccess(description) {\n              //var localMedia;\n              if(session.isCanceled || session.status === C.STATUS_TERMINATED) {\n                return;\n              }\n\n              session.status = C.STATUS_CONFIRMED;\n              session.hasAnswer = true;\n\n              session.unmute();\n              /*localMedia = session.mediaHandler.localMedia;\n              if (localMedia.getAudioTracks().length > 0) {\n                localMedia.getAudioTracks()[0].enabled = true;\n              }\n              if (localMedia.getVideoTracks().length > 0) {\n                localMedia.getVideoTracks()[0].enabled = true;\n              }*/\n              session.sendRequest(SIP.C.ACK,{\n                body: description,\n                cseq:response.cseq\n              });\n              session.accepted(response);\n            })\n            .catch(function onFailure(e) {\n              if (e instanceof SIP.Exceptions.GetDescriptionError) {\n                // TODO do something here\n                session.logger.warn(\"there was a problem\");\n              } else {\n                session.logger.warn('invalid description');\n                session.logger.warn(e);\n                response.reply(488);\n              }\n            });\n          }\n        } else if (this.hasAnswer){\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + session.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          this.sendRequest(SIP.C.ACK, options);\n        } else {\n          if(!this.mediaHandler.hasDescription(response)) {\n            this.acceptAndTerminate(response, 400, 'Missing session description');\n            this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            break;\n          }\n          if (!this.createDialog(response, 'UAC')) {\n            break;\n          }\n          this.hasAnswer = true;\n          this.mediaHandler.setDescription(response)\n          .then(\n            function onSuccess () {\n              var options = {};//,localMedia;\n              session.status = C.STATUS_CONFIRMED;\n              session.unmute();\n              /*localMedia = session.mediaHandler.localMedia;\n              if (localMedia.getAudioTracks().length > 0) {\n                localMedia.getAudioTracks()[0].enabled = true;\n              }\n              if (localMedia.getVideoTracks().length > 0) {\n                localMedia.getVideoTracks()[0].enabled = true;\n              }*/\n              if (session.renderbody) {\n                extraHeaders.push('Content-Type: ' + session.rendertype);\n                options.extraHeaders = extraHeaders;\n                options.body = session.renderbody;\n              }\n              options.cseq = response.cseq;\n              session.sendRequest(SIP.C.ACK, options);\n              session.accepted(response);\n            },\n            function onFailure (e) {\n              session.logger.warn(e);\n              session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n              session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            }\n          );\n        }\n        break;\n      default:\n        cause = SIP.Utils.sipErrorCause(response.status_code);\n        this.rejected(response, cause);\n        this.failed(response, cause);\n        this.terminated(response, cause);\n    }\n  },\n\n  cancel: function(options) {\n    options = options || {};\n\n    options.extraHeaders = (options.extraHeaders || []).slice();\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED || this.status === C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('canceling RTCSession');\n\n    var cancel_reason = SIP.Utils.getCancelReason(options.status_code, options.reason_phrase);\n\n    // Check Session Status\n    if (this.status === C.STATUS_NULL ||\n        (this.status === C.STATUS_INVITE_SENT && !this.received_100)) {\n      this.isCanceled = true;\n      this.cancelReason = cancel_reason;\n    } else if (this.status === C.STATUS_INVITE_SENT ||\n               this.status === C.STATUS_1XX_RECEIVED ||\n               this.status === C.STATUS_EARLY_MEDIA) {\n      this.request.cancel(cancel_reason, options.extraHeaders);\n    }\n\n    return this.canceled();\n  },\n\n  terminate: function(options) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.cancel(options);\n    }\n\n    return this;\n  },\n\n  receiveRequest: function(request) {\n    // ICC RECEIVE REQUEST\n\n    // Reject CANCELs\n    if (request.method === SIP.C.CANCEL) {\n      // TODO; make this a switch when it gets added\n    }\n\n    if (request.method === SIP.C.ACK && this.status === C.STATUS_WAITING_FOR_ACK) {\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      this.accepted();\n    }\n\n    return Session.prototype.receiveRequest.apply(this, [request]);\n  },\n\n  onTransportError: function() {\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  }\n\n};\n\nSIP.InviteClientContext = InviteClientContext;\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///362\n");

/***/ }),
/* 363 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Session/DTMF.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview DTMF\n */\n\n/**\n * @class DTMF\n * @param {SIP.Session} session\n */\nmodule.exports = function (SIP) {\n\nvar DTMF,\n  C = {\n    MIN_DURATION:            70,\n    MAX_DURATION:            6000,\n    DEFAULT_DURATION:        100,\n    MIN_INTER_TONE_GAP:      50,\n    DEFAULT_INTER_TONE_GAP:  500\n  };\n\nDTMF = function(session, tone, options) {\n  var duration, interToneGap;\n\n  if (tone === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.logger = session.ua.getLogger('sip.invitecontext.dtmf', session.id);\n  this.owner = session;\n  this.direction = null;\n\n  options = options || {};\n  duration = options.duration || null;\n  interToneGap = options.interToneGap || null;\n\n  // Check tone type\n  if (typeof tone === 'string' ) {\n    tone = tone.toUpperCase();\n  } else if (typeof tone === 'number') {\n    tone = tone.toString();\n  } else {\n    throw new TypeError('Invalid tone: '+ tone);\n  }\n\n  // Check tone value\n  if (!tone.match(/^[0-9A-D#*]$/)) {\n    throw new TypeError('Invalid tone: '+ tone);\n  } else {\n    this.tone = tone;\n  }\n\n  // Check duration\n  if (duration && !SIP.Utils.isDecimal(duration)) {\n    throw new TypeError('Invalid tone duration: '+ duration);\n  } else if (!duration) {\n    duration = DTMF.C.DEFAULT_DURATION;\n  } else if (duration < DTMF.C.MIN_DURATION) {\n    this.logger.warn('\"duration\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_DURATION+ ' milliseconds');\n    duration = DTMF.C.MIN_DURATION;\n  } else if (duration > DTMF.C.MAX_DURATION) {\n    this.logger.warn('\"duration\" value is greater than the maximum allowed, setting it to '+ DTMF.C.MAX_DURATION +' milliseconds');\n    duration = DTMF.C.MAX_DURATION;\n  } else {\n    duration = Math.abs(duration);\n  }\n  this.duration = duration;\n\n  // Check interToneGap\n  if (interToneGap && !SIP.Utils.isDecimal(interToneGap)) {\n    throw new TypeError('Invalid interToneGap: '+ interToneGap);\n  } else if (!interToneGap) {\n    interToneGap = DTMF.C.DEFAULT_INTER_TONE_GAP;\n  } else if (interToneGap < DTMF.C.MIN_INTER_TONE_GAP) {\n    this.logger.warn('\"interToneGap\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_INTER_TONE_GAP +' milliseconds');\n    interToneGap = DTMF.C.MIN_INTER_TONE_GAP;\n  } else {\n    interToneGap = Math.abs(interToneGap);\n  }\n  this.interToneGap = interToneGap;\n};\nDTMF.prototype = Object.create(SIP.EventEmitter.prototype);\n\n\nDTMF.prototype.send = function(options) {\n  var extraHeaders,\n    body = {};\n\n  this.direction = 'outgoing';\n\n  // Check RTCSession Status\n  if (this.owner.status !== SIP.Session.C.STATUS_CONFIRMED &&\n    this.owner.status !== SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n    throw new SIP.Exceptions.InvalidStateError(this.owner.status);\n  }\n\n  // Get DTMF options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n\n  body.contentType = 'application/dtmf-relay';\n\n  body.body = \"Signal= \" + this.tone + \"\\r\\n\";\n  body.body += \"Duration= \" + this.duration;\n\n  this.request = this.owner.dialog.sendRequest(this, SIP.C.INFO, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n\n  this.owner.emit('dtmf', this.request, this);\n};\n\n/**\n * @private\n */\nDTMF.prototype.receiveResponse = function(response) {\n  var cause;\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      cause = SIP.Utils.sipErrorCause(response.status_code);\n      this.emit('failed', response, cause);\n      break;\n  }\n};\n\n/**\n * @private\n */\nDTMF.prototype.onRequestTimeout = function() {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  this.owner.onRequestTimeout();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onTransportError = function() {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  this.owner.onTransportError();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onDialogError = function(response) {\n  this.emit('failed', response, SIP.C.causes.DIALOG_ERROR);\n  this.owner.onDialogError(response);\n};\n\n/**\n * @private\n */\nDTMF.prototype.init_incoming = function(request) {\n  this.direction = 'incoming';\n  this.request = request;\n\n  request.reply(200);\n\n  if (!this.tone || !this.duration) {\n    this.logger.warn('invalid INFO DTMF received, discarded');\n  } else {\n    this.owner.emit('dtmf', request, this);\n  }\n};\n\nDTMF.C = C;\nreturn DTMF;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1Nlc3Npb24vRFRNRi5qcz9iN2RlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsRUFBRTtBQUNwQjtBQUNBOztBQUVBLGtCQUFrQixFQUFFO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGZpbGVvdmVydmlldyBEVE1GXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgRFRNRlxuICogQHBhcmFtIHtTSVAuU2Vzc2lvbn0gc2Vzc2lvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTSVApIHtcblxudmFyIERUTUYsXG4gIEMgPSB7XG4gICAgTUlOX0RVUkFUSU9OOiAgICAgICAgICAgIDcwLFxuICAgIE1BWF9EVVJBVElPTjogICAgICAgICAgICA2MDAwLFxuICAgIERFRkFVTFRfRFVSQVRJT046ICAgICAgICAxMDAsXG4gICAgTUlOX0lOVEVSX1RPTkVfR0FQOiAgICAgIDUwLFxuICAgIERFRkFVTFRfSU5URVJfVE9ORV9HQVA6ICA1MDBcbiAgfTtcblxuRFRNRiA9IGZ1bmN0aW9uKHNlc3Npb24sIHRvbmUsIG9wdGlvbnMpIHtcbiAgdmFyIGR1cmF0aW9uLCBpbnRlclRvbmVHYXA7XG5cbiAgaWYgKHRvbmUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG4gIH1cblxuICB0aGlzLmxvZ2dlciA9IHNlc3Npb24udWEuZ2V0TG9nZ2VyKCdzaXAuaW52aXRlY29udGV4dC5kdG1mJywgc2Vzc2lvbi5pZCk7XG4gIHRoaXMub3duZXIgPSBzZXNzaW9uO1xuICB0aGlzLmRpcmVjdGlvbiA9IG51bGw7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbiB8fCBudWxsO1xuICBpbnRlclRvbmVHYXAgPSBvcHRpb25zLmludGVyVG9uZUdhcCB8fCBudWxsO1xuXG4gIC8vIENoZWNrIHRvbmUgdHlwZVxuICBpZiAodHlwZW9mIHRvbmUgPT09ICdzdHJpbmcnICkge1xuICAgIHRvbmUgPSB0b25lLnRvVXBwZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRvbmUgPT09ICdudW1iZXInKSB7XG4gICAgdG9uZSA9IHRvbmUudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHRvbmU6ICcrIHRvbmUpO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG9uZSB2YWx1ZVxuICBpZiAoIXRvbmUubWF0Y2goL15bMC05QS1EIypdJC8pKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0b25lOiAnKyB0b25lKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRvbmUgPSB0b25lO1xuICB9XG5cbiAgLy8gQ2hlY2sgZHVyYXRpb25cbiAgaWYgKGR1cmF0aW9uICYmICFTSVAuVXRpbHMuaXNEZWNpbWFsKGR1cmF0aW9uKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdG9uZSBkdXJhdGlvbjogJysgZHVyYXRpb24pO1xuICB9IGVsc2UgaWYgKCFkdXJhdGlvbikge1xuICAgIGR1cmF0aW9uID0gRFRNRi5DLkRFRkFVTFRfRFVSQVRJT047XG4gIH0gZWxzZSBpZiAoZHVyYXRpb24gPCBEVE1GLkMuTUlOX0RVUkFUSU9OKSB7XG4gICAgdGhpcy5sb2dnZXIud2FybignXCJkdXJhdGlvblwiIHZhbHVlIGlzIGxvd2VyIHRoYW4gdGhlIG1pbmltdW0gYWxsb3dlZCwgc2V0dGluZyBpdCB0byAnKyBEVE1GLkMuTUlOX0RVUkFUSU9OKyAnIG1pbGxpc2Vjb25kcycpO1xuICAgIGR1cmF0aW9uID0gRFRNRi5DLk1JTl9EVVJBVElPTjtcbiAgfSBlbHNlIGlmIChkdXJhdGlvbiA+IERUTUYuQy5NQVhfRFVSQVRJT04pIHtcbiAgICB0aGlzLmxvZ2dlci53YXJuKCdcImR1cmF0aW9uXCIgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBtYXhpbXVtIGFsbG93ZWQsIHNldHRpbmcgaXQgdG8gJysgRFRNRi5DLk1BWF9EVVJBVElPTiArJyBtaWxsaXNlY29uZHMnKTtcbiAgICBkdXJhdGlvbiA9IERUTUYuQy5NQVhfRFVSQVRJT047XG4gIH0gZWxzZSB7XG4gICAgZHVyYXRpb24gPSBNYXRoLmFicyhkdXJhdGlvbik7XG4gIH1cbiAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG4gIC8vIENoZWNrIGludGVyVG9uZUdhcFxuICBpZiAoaW50ZXJUb25lR2FwICYmICFTSVAuVXRpbHMuaXNEZWNpbWFsKGludGVyVG9uZUdhcCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGludGVyVG9uZUdhcDogJysgaW50ZXJUb25lR2FwKTtcbiAgfSBlbHNlIGlmICghaW50ZXJUb25lR2FwKSB7XG4gICAgaW50ZXJUb25lR2FwID0gRFRNRi5DLkRFRkFVTFRfSU5URVJfVE9ORV9HQVA7XG4gIH0gZWxzZSBpZiAoaW50ZXJUb25lR2FwIDwgRFRNRi5DLk1JTl9JTlRFUl9UT05FX0dBUCkge1xuICAgIHRoaXMubG9nZ2VyLndhcm4oJ1wiaW50ZXJUb25lR2FwXCIgdmFsdWUgaXMgbG93ZXIgdGhhbiB0aGUgbWluaW11bSBhbGxvd2VkLCBzZXR0aW5nIGl0IHRvICcrIERUTUYuQy5NSU5fSU5URVJfVE9ORV9HQVAgKycgbWlsbGlzZWNvbmRzJyk7XG4gICAgaW50ZXJUb25lR2FwID0gRFRNRi5DLk1JTl9JTlRFUl9UT05FX0dBUDtcbiAgfSBlbHNlIHtcbiAgICBpbnRlclRvbmVHYXAgPSBNYXRoLmFicyhpbnRlclRvbmVHYXApO1xuICB9XG4gIHRoaXMuaW50ZXJUb25lR2FwID0gaW50ZXJUb25lR2FwO1xufTtcbkRUTUYucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTSVAuRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5cblxuRFRNRi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIGV4dHJhSGVhZGVycyxcbiAgICBib2R5ID0ge307XG5cbiAgdGhpcy5kaXJlY3Rpb24gPSAnb3V0Z29pbmcnO1xuXG4gIC8vIENoZWNrIFJUQ1Nlc3Npb24gU3RhdHVzXG4gIGlmICh0aGlzLm93bmVyLnN0YXR1cyAhPT0gU0lQLlNlc3Npb24uQy5TVEFUVVNfQ09ORklSTUVEICYmXG4gICAgdGhpcy5vd25lci5zdGF0dXMgIT09IFNJUC5TZXNzaW9uLkMuU1RBVFVTX1dBSVRJTkdfRk9SX0FDSykge1xuICAgIHRocm93IG5ldyBTSVAuRXhjZXB0aW9ucy5JbnZhbGlkU3RhdGVFcnJvcih0aGlzLm93bmVyLnN0YXR1cyk7XG4gIH1cblxuICAvLyBHZXQgRFRNRiBvcHRpb25zXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBleHRyYUhlYWRlcnMgPSBvcHRpb25zLmV4dHJhSGVhZGVycyA/IG9wdGlvbnMuZXh0cmFIZWFkZXJzLnNsaWNlKCkgOiBbXTtcblxuICBib2R5LmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2R0bWYtcmVsYXknO1xuXG4gIGJvZHkuYm9keSA9IFwiU2lnbmFsPSBcIiArIHRoaXMudG9uZSArIFwiXFxyXFxuXCI7XG4gIGJvZHkuYm9keSArPSBcIkR1cmF0aW9uPSBcIiArIHRoaXMuZHVyYXRpb247XG5cbiAgdGhpcy5yZXF1ZXN0ID0gdGhpcy5vd25lci5kaWFsb2cuc2VuZFJlcXVlc3QodGhpcywgU0lQLkMuSU5GTywge1xuICAgIGV4dHJhSGVhZGVyczogZXh0cmFIZWFkZXJzLFxuICAgIGJvZHk6IGJvZHlcbiAgfSk7XG5cbiAgdGhpcy5vd25lci5lbWl0KCdkdG1mJywgdGhpcy5yZXF1ZXN0LCB0aGlzKTtcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuRFRNRi5wcm90b3R5cGUucmVjZWl2ZVJlc3BvbnNlID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgdmFyIGNhdXNlO1xuXG4gIHN3aXRjaCh0cnVlKSB7XG4gICAgY2FzZSAvXjFbMC05XXsyfSQvLnRlc3QocmVzcG9uc2Uuc3RhdHVzX2NvZGUpOlxuICAgICAgLy8gSWdub3JlIHByb3Zpc2lvbmFsIHJlc3BvbnNlcy5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAvXjJbMC05XXsyfSQvLnRlc3QocmVzcG9uc2Uuc3RhdHVzX2NvZGUpOlxuICAgICAgdGhpcy5lbWl0KCdzdWNjZWVkZWQnLCB7XG4gICAgICAgIG9yaWdpbmF0b3I6ICdyZW1vdGUnLFxuICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgY2F1c2UgPSBTSVAuVXRpbHMuc2lwRXJyb3JDYXVzZShyZXNwb25zZS5zdGF0dXNfY29kZSk7XG4gICAgICB0aGlzLmVtaXQoJ2ZhaWxlZCcsIHJlc3BvbnNlLCBjYXVzZSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5EVE1GLnByb3RvdHlwZS5vblJlcXVlc3RUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW1pdCgnZmFpbGVkJywgbnVsbCwgU0lQLkMuY2F1c2VzLlJFUVVFU1RfVElNRU9VVCk7XG4gIHRoaXMub3duZXIub25SZXF1ZXN0VGltZW91dCgpO1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5EVE1GLnByb3RvdHlwZS5vblRyYW5zcG9ydEVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW1pdCgnZmFpbGVkJywgbnVsbCwgU0lQLkMuY2F1c2VzLkNPTk5FQ1RJT05fRVJST1IpO1xuICB0aGlzLm93bmVyLm9uVHJhbnNwb3J0RXJyb3IoKTtcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuRFRNRi5wcm90b3R5cGUub25EaWFsb2dFcnJvciA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gIHRoaXMuZW1pdCgnZmFpbGVkJywgcmVzcG9uc2UsIFNJUC5DLmNhdXNlcy5ESUFMT0dfRVJST1IpO1xuICB0aGlzLm93bmVyLm9uRGlhbG9nRXJyb3IocmVzcG9uc2UpO1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5EVE1GLnByb3RvdHlwZS5pbml0X2luY29taW5nID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuICB0aGlzLmRpcmVjdGlvbiA9ICdpbmNvbWluZyc7XG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG5cbiAgcmVxdWVzdC5yZXBseSgyMDApO1xuXG4gIGlmICghdGhpcy50b25lIHx8ICF0aGlzLmR1cmF0aW9uKSB7XG4gICAgdGhpcy5sb2dnZXIud2FybignaW52YWxpZCBJTkZPIERUTUYgcmVjZWl2ZWQsIGRpc2NhcmRlZCcpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3duZXIuZW1pdCgnZHRtZicsIHJlcXVlc3QsIHRoaXMpO1xuICB9XG59O1xuXG5EVE1GLkMgPSBDO1xucmV0dXJuIERUTUY7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1Nlc3Npb24vRFRNRi5qc1xuLy8gbW9kdWxlIGlkID0gMzYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///363\n");

/***/ }),
/* 364 */
/*!****************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/RFC4028.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("var localMinSE = 90;\n\nmodule.exports = function (Timers) {\n\n// http://tools.ietf.org/html/rfc4028#section-9\nfunction hasSmallMinSE (message) {\n  var supportedOptions = message.parseHeader('Supported') || [];\n  var sessionExpires = message.parseHeader('Session-Expires') || {};\n  return supportedOptions.indexOf('timer') >= 0 && sessionExpires.deltaSeconds < localMinSE;\n}\n\n// `response` is an IncomingResponse or a String (outgoing response)\nfunction updateState (dialog, response, parseMessage, ua) {\n  dialog.sessionTimerState = dialog.sessionTimerState || {};\n  Timers.clearTimeout(dialog.sessionTimerState.timeout);\n\n  var isUAS = typeof response === 'string';\n  if (isUAS) {\n    response = parseMessage(response, ua);\n  }\n\n  var sessionExpires = response.parseHeader('Session-Expires');\n  // If the most recent 2xx response had no Session-Expires header field, there\n  // is no session expiration, and no refreshes have to be performed\n  if (!sessionExpires) {\n    dialog.sessionTimerState = null;\n    return;\n  }\n\n  var interval = sessionExpires.deltaSeconds;\n  var isRefresher = isUAS === (sessionExpires.refresher === 'uas');\n\n  dialog.sessionTimerState = {\n    interval: interval,\n    isRefresher: isRefresher\n  };\n\n  var intervalMilliseconds = interval * 1000;\n  var self = this;\n  if (isRefresher) {\n    dialog.sessionTimerState.timeout = Timers.setInterval(function sendRefresh () {\n      var exists = dialog.owner.ua.dialogs[dialog.id.toString()] || false;\n      if (exists) {\n        dialog.sendRequest(self, \"UPDATE\", { extraHeaders: [\"Session-Expires: \" + interval]});\n      } else {\n        Timers.clearInterval(dialog.sessionTimerState.timeout);\n      }\n    }, intervalMilliseconds / 2);\n  } else {\n    var before = Math.min(32 * 1000, intervalMilliseconds / 3);\n    dialog.sessionTimerState.timeout = Timers.setTimeout(function sendBye () {\n      // TODO\n    }, intervalMilliseconds - before);\n  }\n}\n\nfunction receiveResponse(response) {\n  /* jshint unused: false */\n}\n\nfunction onDialogError(response) {\n  /* jshint unused: false */\n}\n\nfunction onRequestTimeout() {\n  /* jshint unused: false */\n}\n\nfunction onTransportError() {\n  /* jshint unused: false */\n}\n\nreturn {\n  localMinSE: localMinSE,\n  hasSmallMinSE: hasSmallMinSE,\n  updateState: updateState,\n  receiveResponse: receiveResponse,\n  onDialogError: onDialogError,\n  onRequestTimeout: onRequestTimeout,\n  onTransportError: onTransportError\n};\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1JGQzQwMjguanM/MzliZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0RBQWdEO0FBQzVGLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjM2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBsb2NhbE1pblNFID0gOTA7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRpbWVycykge1xuXG4vLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MDI4I3NlY3Rpb24tOVxuZnVuY3Rpb24gaGFzU21hbGxNaW5TRSAobWVzc2FnZSkge1xuICB2YXIgc3VwcG9ydGVkT3B0aW9ucyA9IG1lc3NhZ2UucGFyc2VIZWFkZXIoJ1N1cHBvcnRlZCcpIHx8IFtdO1xuICB2YXIgc2Vzc2lvbkV4cGlyZXMgPSBtZXNzYWdlLnBhcnNlSGVhZGVyKCdTZXNzaW9uLUV4cGlyZXMnKSB8fCB7fTtcbiAgcmV0dXJuIHN1cHBvcnRlZE9wdGlvbnMuaW5kZXhPZigndGltZXInKSA+PSAwICYmIHNlc3Npb25FeHBpcmVzLmRlbHRhU2Vjb25kcyA8IGxvY2FsTWluU0U7XG59XG5cbi8vIGByZXNwb25zZWAgaXMgYW4gSW5jb21pbmdSZXNwb25zZSBvciBhIFN0cmluZyAob3V0Z29pbmcgcmVzcG9uc2UpXG5mdW5jdGlvbiB1cGRhdGVTdGF0ZSAoZGlhbG9nLCByZXNwb25zZSwgcGFyc2VNZXNzYWdlLCB1YSkge1xuICBkaWFsb2cuc2Vzc2lvblRpbWVyU3RhdGUgPSBkaWFsb2cuc2Vzc2lvblRpbWVyU3RhdGUgfHwge307XG4gIFRpbWVycy5jbGVhclRpbWVvdXQoZGlhbG9nLnNlc3Npb25UaW1lclN0YXRlLnRpbWVvdXQpO1xuXG4gIHZhciBpc1VBUyA9IHR5cGVvZiByZXNwb25zZSA9PT0gJ3N0cmluZyc7XG4gIGlmIChpc1VBUykge1xuICAgIHJlc3BvbnNlID0gcGFyc2VNZXNzYWdlKHJlc3BvbnNlLCB1YSk7XG4gIH1cblxuICB2YXIgc2Vzc2lvbkV4cGlyZXMgPSByZXNwb25zZS5wYXJzZUhlYWRlcignU2Vzc2lvbi1FeHBpcmVzJyk7XG4gIC8vIElmIHRoZSBtb3N0IHJlY2VudCAyeHggcmVzcG9uc2UgaGFkIG5vIFNlc3Npb24tRXhwaXJlcyBoZWFkZXIgZmllbGQsIHRoZXJlXG4gIC8vIGlzIG5vIHNlc3Npb24gZXhwaXJhdGlvbiwgYW5kIG5vIHJlZnJlc2hlcyBoYXZlIHRvIGJlIHBlcmZvcm1lZFxuICBpZiAoIXNlc3Npb25FeHBpcmVzKSB7XG4gICAgZGlhbG9nLnNlc3Npb25UaW1lclN0YXRlID0gbnVsbDtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaW50ZXJ2YWwgPSBzZXNzaW9uRXhwaXJlcy5kZWx0YVNlY29uZHM7XG4gIHZhciBpc1JlZnJlc2hlciA9IGlzVUFTID09PSAoc2Vzc2lvbkV4cGlyZXMucmVmcmVzaGVyID09PSAndWFzJyk7XG5cbiAgZGlhbG9nLnNlc3Npb25UaW1lclN0YXRlID0ge1xuICAgIGludGVydmFsOiBpbnRlcnZhbCxcbiAgICBpc1JlZnJlc2hlcjogaXNSZWZyZXNoZXJcbiAgfTtcblxuICB2YXIgaW50ZXJ2YWxNaWxsaXNlY29uZHMgPSBpbnRlcnZhbCAqIDEwMDA7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKGlzUmVmcmVzaGVyKSB7XG4gICAgZGlhbG9nLnNlc3Npb25UaW1lclN0YXRlLnRpbWVvdXQgPSBUaW1lcnMuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gc2VuZFJlZnJlc2ggKCkge1xuICAgICAgdmFyIGV4aXN0cyA9IGRpYWxvZy5vd25lci51YS5kaWFsb2dzW2RpYWxvZy5pZC50b1N0cmluZygpXSB8fCBmYWxzZTtcbiAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgZGlhbG9nLnNlbmRSZXF1ZXN0KHNlbGYsIFwiVVBEQVRFXCIsIHsgZXh0cmFIZWFkZXJzOiBbXCJTZXNzaW9uLUV4cGlyZXM6IFwiICsgaW50ZXJ2YWxdfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBUaW1lcnMuY2xlYXJJbnRlcnZhbChkaWFsb2cuc2Vzc2lvblRpbWVyU3RhdGUudGltZW91dCk7XG4gICAgICB9XG4gICAgfSwgaW50ZXJ2YWxNaWxsaXNlY29uZHMgLyAyKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYmVmb3JlID0gTWF0aC5taW4oMzIgKiAxMDAwLCBpbnRlcnZhbE1pbGxpc2Vjb25kcyAvIDMpO1xuICAgIGRpYWxvZy5zZXNzaW9uVGltZXJTdGF0ZS50aW1lb3V0ID0gVGltZXJzLnNldFRpbWVvdXQoZnVuY3Rpb24gc2VuZEJ5ZSAoKSB7XG4gICAgICAvLyBUT0RPXG4gICAgfSwgaW50ZXJ2YWxNaWxsaXNlY29uZHMgLSBiZWZvcmUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY2VpdmVSZXNwb25zZShyZXNwb25zZSkge1xuICAvKiBqc2hpbnQgdW51c2VkOiBmYWxzZSAqL1xufVxuXG5mdW5jdGlvbiBvbkRpYWxvZ0Vycm9yKHJlc3BvbnNlKSB7XG4gIC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG59XG5cbmZ1bmN0aW9uIG9uUmVxdWVzdFRpbWVvdXQoKSB7XG4gIC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG59XG5cbmZ1bmN0aW9uIG9uVHJhbnNwb3J0RXJyb3IoKSB7XG4gIC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG59XG5cbnJldHVybiB7XG4gIGxvY2FsTWluU0U6IGxvY2FsTWluU0UsXG4gIGhhc1NtYWxsTWluU0U6IGhhc1NtYWxsTWluU0UsXG4gIHVwZGF0ZVN0YXRlOiB1cGRhdGVTdGF0ZSxcbiAgcmVjZWl2ZVJlc3BvbnNlOiByZWNlaXZlUmVzcG9uc2UsXG4gIG9uRGlhbG9nRXJyb3I6IG9uRGlhbG9nRXJyb3IsXG4gIG9uUmVxdWVzdFRpbWVvdXQ6IG9uUmVxdWVzdFRpbWVvdXQsXG4gIG9uVHJhbnNwb3J0RXJyb3I6IG9uVHJhbnNwb3J0RXJyb3Jcbn07XG5cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AdHdpbGlvL3NpcC5qcy9zcmMvUkZDNDAyOC5qc1xuLy8gbW9kdWxlIGlkID0gMzY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///364\n");

/***/ }),
/* 365 */
/*!*********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Subscription.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @fileoverview SIP Subscriber (SIP-Specific Event Notifications RFC6665)\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP Subscription.\n */\nmodule.exports = function (SIP) {\nSIP.Subscription = function (ua, target, event, options) {\n  options = Object.create(options || Object.prototype);\n  this.extraHeaders = options.extraHeaders = (options.extraHeaders || []).slice();\n\n  this.id = null;\n  this.state = 'init';\n\n  if (!event) {\n    throw new TypeError('Event necessary to create a subscription.');\n  } else {\n    //TODO: check for valid events here probably make a list in SIP.C; or leave it up to app to check?\n    //The check may need to/should probably occur on the other side,\n    this.event = event;\n  }\n\n  if(typeof options.expires !== 'number'){\n    ua.logger.warn('expires must be a number. Using default of 3600.');\n    this.expires = 3600;\n  } else {\n    this.expires = options.expires;\n  }\n\n  options.extraHeaders.push('Event: ' + this.event);\n  options.extraHeaders.push('Expires: ' + this.expires);\n\n  if (options.body) {\n    this.body = options.body;\n  }\n\n  this.contact = ua.contact.toString();\n\n  options.extraHeaders.push('Contact: '+ this.contact);\n  options.extraHeaders.push('Allow: '+ SIP.UA.C.ALLOWED_METHODS.toString());\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.SUBSCRIBE, target, options]);\n\n  this.logger = ua.getLogger('sip.subscription');\n\n  this.dialog = null;\n  this.timers = {N: null, sub_duration: null};\n  this.errorCodes  = [404,405,410,416,480,481,482,483,484,485,489,501,604];\n};\n\nSIP.Subscription.prototype = {\n  subscribe: function() {\n    var sub = this;\n\n     //these states point to an existing subscription, no subscribe is necessary\n    if (this.state === 'active') {\n      this.refresh();\n      return this;\n    } else if (this.state === 'notify_wait') {\n      return this;\n    }\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n\n    this.state = 'notify_wait';\n\n    return this;\n  },\n\n  refresh: function () {\n    if (this.state === 'terminated' || this.state === 'pending' || this.state === 'notify_wait') {\n      return;\n    }\n\n    this.dialog.sendRequest(this, SIP.C.SUBSCRIBE, {\n      extraHeaders: this.extraHeaders,\n      body: this.body\n    });\n  },\n\n  receiveResponse: function(response) {\n    var expires, sub = this,\n        cause = SIP.Utils.getReasonPhrase(response.status_code);\n\n    if ((this.state === 'notify_wait' && response.status_code >= 300) ||\n        (this.state !== 'notify_wait' && this.errorCodes.indexOf(response.status_code) !== -1)) {\n      this.failed(response, null);\n    } else if (/^2[0-9]{2}$/.test(response.status_code)){\n      expires = response.getHeader('Expires');\n      SIP.Timers.clearTimeout(this.timers.N);\n\n      if (this.createConfirmedDialog(response,'UAC')) {\n        this.id = this.dialog.id.toString();\n        this.ua.subscriptions[this.id] = this;\n        this.emit('accepted', response, cause);\n        // UPDATE ROUTE SET TO BE BACKWARDS COMPATIBLE?\n      }\n\n      if (expires && expires <= this.expires) {\n        // Preserve new expires value for subsequent requests\n        this.expires = expires;\n        this.timers.sub_duration = SIP.Timers.setTimeout(sub.refresh.bind(sub), expires * 900);\n      } else {\n        if (!expires) {\n          this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n          this.failed(response, SIP.C.EXPIRES_HEADER_MISSING);\n        } else {\n          this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request');\n          this.failed(response, SIP.C.INVALID_EXPIRES_HEADER);\n        }\n      }\n    } //Used to just ignore provisional responses; now ignores everything except errorCodes and 2xx\n  },\n\n  unsubscribe: function() {\n    var extraHeaders = [], sub = this;\n\n    this.state = 'terminated';\n\n    extraHeaders.push('Event: ' + this.event);\n    extraHeaders.push('Expires: 0');\n\n    extraHeaders.push('Contact: '+ this.contact);\n    extraHeaders.push('Allow: '+ SIP.UA.C.ALLOWED_METHODS.toString());\n\n    //makes sure expires isn't set, and other typical resubscribe behavior\n    this.receiveResponse = function(){};\n\n    this.dialog.sendRequest(this, this.method, {\n      extraHeaders: extraHeaders,\n      body: this.body\n    });\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n  },\n\n  /**\n  * @private\n  */\n  timer_fire: function(){\n    if (this.state === 'terminated') {\n      this.terminateDialog();\n      SIP.Timers.clearTimeout(this.timers.N);\n      SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n      delete this.ua.subscriptions[this.id];\n    } else if (this.state === 'pending' || this.state === 'notify_wait') {\n      this.close();\n    } else {\n      this.refresh();\n    }\n  },\n\n  /**\n  * @private\n  */\n  close: function() {\n    if(this.state !== 'notify_wait' && this.state !== 'terminated') {\n      this.unsubscribe();\n    }\n  },\n\n  /**\n  * @private\n  */\n  createConfirmedDialog: function(message, type) {\n    var dialog;\n\n    this.terminateDialog();\n    dialog = new SIP.Dialog(this, message, type);\n\n    if(!dialog.error) {\n      this.dialog = dialog;\n      return true;\n    }\n    // Dialog not created due to an error\n    else {\n      return false;\n    }\n  },\n\n  /**\n  * @private\n  */\n  terminateDialog: function() {\n    if(this.dialog) {\n      delete this.ua.subscriptions[this.id];\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n  },\n\n  /**\n  * @private\n  */\n  receiveRequest: function(request) {\n    var sub_state, sub = this;\n\n    function setExpiresTimeout() {\n      if (sub_state.expires) {\n        SIP.Timers.clearTimeout(sub.timers.sub_duration);\n        sub_state.expires = Math.min(sub.expires,\n                                     Math.max(sub_state.expires, 0));\n        sub.timers.sub_duration = SIP.Timers.setTimeout(sub.refresh.bind(sub),\n                                                    sub_state.expires * 900);\n      }\n    }\n\n    if (!this.matchEvent(request)) { //checks event and subscription_state headers\n      request.reply(489);\n      return;\n    }\n\n    sub_state = request.parseHeader('Subscription-State');\n\n    request.reply(200, SIP.C.REASON_200);\n\n    SIP.Timers.clearTimeout(this.timers.N);\n\n    this.emit('notify', {request: request});\n\n    // if we've set state to terminated, no further processing should take place\n    // and we are only interested in cleaning up after the appropriate NOTIFY\n    if (this.state === 'terminated') {\n      if (sub_state.state === 'terminated') {\n        this.terminateDialog();\n        SIP.Timers.clearTimeout(this.timers.N);\n        SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n        delete this.ua.subscriptions[this.id];\n      }\n      return;\n    }\n\n    switch (sub_state.state) {\n      case 'active':\n        this.state = 'active';\n        setExpiresTimeout();\n        break;\n      case 'pending':\n        if (this.state === 'notify_wait') {\n          setExpiresTimeout();\n        }\n        this.state = 'pending';\n        break;\n      case 'terminated':\n        SIP.Timers.clearTimeout(this.timers.sub_duration);\n        if (sub_state.reason) {\n          this.logger.log('terminating subscription with reason '+ sub_state.reason);\n          switch (sub_state.reason) {\n            case 'deactivated':\n            case 'timeout':\n              this.subscribe();\n              return;\n            case 'probation':\n            case 'giveup':\n              if(sub_state.params && sub_state.params['retry-after']) {\n                this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), sub_state.params['retry-after']);\n              } else {\n                this.subscribe();\n              }\n              return;\n            case 'rejected':\n            case 'noresource':\n            case 'invariant':\n              break;\n          }\n        }\n        this.close();\n        break;\n    }\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    this.emit('failed', response, cause);\n    return this;\n  },\n\n  onDialogError: function(response) {\n    this.failed(response, SIP.C.causes.DIALOG_ERROR);\n  },\n\n  /**\n  * @private\n  */\n  matchEvent: function(request) {\n    var event;\n\n    // Check mandatory header Event\n    if (!request.hasHeader('Event')) {\n      this.logger.warn('missing Event header');\n      return false;\n    }\n    // Check mandatory header Subscription-State\n    if (!request.hasHeader('Subscription-State')) {\n      this.logger.warn('missing Subscription-State header');\n      return false;\n    }\n\n    // Check whether the event in NOTIFY matches the event in SUBSCRIBE\n    event = request.parseHeader('event').event;\n\n    if (this.event !== event) {\n      this.logger.warn('event match failed');\n      request.reply(481, 'Event Match Failed');\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///365\n");

/***/ }),
/* 366 */
/*!***************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/WebRTC.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview WebRTC\n */\n\nmodule.exports = function (SIP, environment) {\nvar WebRTC;\n\nWebRTC = {};\n\nWebRTC.MediaHandler = __webpack_require__(/*! ./WebRTC/MediaHandler */ 367)(SIP);\nWebRTC.MediaStreamManager = __webpack_require__(/*! ./WebRTC/MediaStreamManager */ 368)(SIP, environment);\n\nvar _isSupported;\n\nWebRTC.isSupported = function () {\n  if (_isSupported !== undefined) {\n    return _isSupported;\n  }\n\n  WebRTC.MediaStream = environment.MediaStream;\n  WebRTC.getUserMedia = environment.getUserMedia;\n  WebRTC.RTCPeerConnection = environment.RTCPeerConnection;\n  WebRTC.RTCSessionDescription = environment.RTCSessionDescription;\n\n  if (WebRTC.RTCPeerConnection && WebRTC.RTCSessionDescription) {\n    if (WebRTC.getUserMedia) {\n      WebRTC.getUserMedia = SIP.Utils.promisify(environment, 'getUserMedia');\n    }\n    _isSupported = true;\n  }\n  else {\n    _isSupported = false;\n  }\n  return _isSupported;\n};\n\nreturn WebRTC;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL1dlYlJUQy5qcz8xOGUwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsc0JBQXNCLG1CQUFPLENBQUMsZ0NBQXVCO0FBQ3JELDRCQUE0QixtQkFBTyxDQUFDLHNDQUE2Qjs7QUFFakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjM2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFdlYlJUQ1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFNJUCwgZW52aXJvbm1lbnQpIHtcbnZhciBXZWJSVEM7XG5cbldlYlJUQyA9IHt9O1xuXG5XZWJSVEMuTWVkaWFIYW5kbGVyID0gcmVxdWlyZSgnLi9XZWJSVEMvTWVkaWFIYW5kbGVyJykoU0lQKTtcbldlYlJUQy5NZWRpYVN0cmVhbU1hbmFnZXIgPSByZXF1aXJlKCcuL1dlYlJUQy9NZWRpYVN0cmVhbU1hbmFnZXInKShTSVAsIGVudmlyb25tZW50KTtcblxudmFyIF9pc1N1cHBvcnRlZDtcblxuV2ViUlRDLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX2lzU3VwcG9ydGVkO1xuICB9XG5cbiAgV2ViUlRDLk1lZGlhU3RyZWFtID0gZW52aXJvbm1lbnQuTWVkaWFTdHJlYW07XG4gIFdlYlJUQy5nZXRVc2VyTWVkaWEgPSBlbnZpcm9ubWVudC5nZXRVc2VyTWVkaWE7XG4gIFdlYlJUQy5SVENQZWVyQ29ubmVjdGlvbiA9IGVudmlyb25tZW50LlJUQ1BlZXJDb25uZWN0aW9uO1xuICBXZWJSVEMuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uID0gZW52aXJvbm1lbnQuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uO1xuXG4gIGlmIChXZWJSVEMuUlRDUGVlckNvbm5lY3Rpb24gJiYgV2ViUlRDLlJUQ1Nlc3Npb25EZXNjcmlwdGlvbikge1xuICAgIGlmIChXZWJSVEMuZ2V0VXNlck1lZGlhKSB7XG4gICAgICBXZWJSVEMuZ2V0VXNlck1lZGlhID0gU0lQLlV0aWxzLnByb21pc2lmeShlbnZpcm9ubWVudCwgJ2dldFVzZXJNZWRpYScpO1xuICAgIH1cbiAgICBfaXNTdXBwb3J0ZWQgPSB0cnVlO1xuICB9XG4gIGVsc2Uge1xuICAgIF9pc1N1cHBvcnRlZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBfaXNTdXBwb3J0ZWQ7XG59O1xuXG5yZXR1cm4gV2ViUlRDO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9XZWJSVEMuanNcbi8vIG1vZHVsZSBpZCA9IDM2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///366\n");

/***/ }),
/* 367 */
/*!****************************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/WebRTC/MediaHandler.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n * @param {SIP.WebRTC.MediaStreamManager} [options.mediaStreamManager]\n *        The MediaStreamManager to acquire/release streams from/to.\n *        If not provided, a default MediaStreamManager will be used.\n */\nmodule.exports = function (SIP) {\n\nvar MediaHandler = function(session, options) {\n  options = options || {};\n\n  this.logger = session.ua.getLogger('sip.invitecontext.mediahandler', session.id);\n  this.session = session;\n  this.localMedia = null;\n  this.ready = true;\n  this.mediaStreamManager = options.mediaStreamManager || new SIP.WebRTC.MediaStreamManager(this.logger);\n  this.audioMuted = false;\n  this.videoMuted = false;\n  this.local_hold = false;\n  this.remote_hold = false;\n\n  // old init() from here on\n  var servers = this.prepareIceServers(options.stunServers, options.turnServers);\n  this.RTCConstraints = options.RTCConstraints || {};\n\n  this.initPeerConnection(servers);\n\n  function selfEmit(mh, event) {\n    if (mh.mediaStreamManager.on) {\n      mh.mediaStreamManager.on(event, function () {\n        mh.emit.apply(mh, [event].concat(Array.prototype.slice.call(arguments)));\n      });\n    }\n  }\n\n  selfEmit(this, 'userMediaRequest');\n  selfEmit(this, 'userMedia');\n  selfEmit(this, 'userMediaFailed');\n};\n\nMediaHandler.defaultFactory = function defaultFactory (session, options) {\n  return new MediaHandler(session, options);\n};\nMediaHandler.defaultFactory.isSupported = function () {\n  return SIP.WebRTC.isSupported();\n};\n\nMediaHandler.prototype = Object.create(SIP.MediaHandler.prototype, {\n// Functions the session can use\n  isReady: {writable: true, value: function isReady () {\n    return this.ready;\n  }},\n\n  close: {writable: true, value: function close () {\n    this.logger.log('closing PeerConnection');\n    this._remoteStreams = [];\n    // have to check signalingState since this.close() gets called multiple times\n    // TODO figure out why that happens\n    if(this.peerConnection && this.peerConnection.signalingState !== 'closed') {\n      this.peerConnection.close();\n\n      if(this.localMedia) {\n        this.mediaStreamManager.release(this.localMedia);\n      }\n    }\n  }},\n\n  /**\n   * @param {SIP.WebRTC.MediaStream | (getUserMedia constraints)} [mediaHint]\n   *        the MediaStream (or the constraints describing it) to be used for the session\n   */\n  getDescription: {writable: true, value: function getDescription (mediaHint) {\n    var self = this;\n    var acquire = self.mediaStreamManager.acquire;\n    if (acquire.length > 1) {\n      acquire = SIP.Utils.promisify(this.mediaStreamManager, 'acquire', true);\n    }\n    mediaHint = mediaHint || {};\n    if (mediaHint.dataChannel === true) {\n      mediaHint.dataChannel = {};\n    }\n    this.mediaHint = mediaHint;\n\n    /*\n     * 1. acquire streams (skip if MediaStreams passed in)\n     * 2. addStreams\n     * 3. createOffer/createAnswer\n     */\n\n    var streamPromise;\n    if (self.localMedia) {\n      self.logger.log('already have local media');\n      streamPromise = SIP.Utils.Promise.resolve(self.localMedia);\n    }\n    else {\n      self.logger.log('acquiring local media');\n      streamPromise = acquire.call(self.mediaStreamManager, mediaHint)\n        .then(function acquireSucceeded(streams) {\n          self.logger.log('acquired local media streams');\n          self.localMedia = streams;\n          self.session.connecting();\n          return streams;\n        }, function acquireFailed(err) {\n          self.logger.error('unable to acquire streams');\n          self.logger.error(err);\n          self.session.connecting();\n          throw err;\n        })\n        .then(this.addStreams.bind(this))\n      ;\n    }\n\n    return streamPromise\n      .then(function streamAdditionSucceeded() {\n        if (self.hasOffer('remote')) {\n          self.peerConnection.ondatachannel = function (evt) {\n            self.dataChannel = evt.channel;\n            self.emit('dataChannel', self.dataChannel);\n          };\n        } else if (mediaHint.dataChannel &&\n                   self.peerConnection.createDataChannel) {\n          self.dataChannel = self.peerConnection.createDataChannel(\n            'sipjs',\n            mediaHint.dataChannel\n          );\n          self.emit('dataChannel', self.dataChannel);\n        }\n\n        self.render();\n        return self.createOfferOrAnswer(self.RTCConstraints);\n      })\n      .then(function(sdp) {\n        sdp = SIP.Hacks.Firefox.hasMissingCLineInSDP(sdp);\n\n        if (self.local_hold) {\n          // Don't receive media\n          // TODO - This will break for media streams with different directions.\n          if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(sdp)) {\n            sdp = sdp.replace(/(m=[^\\r]*\\r\\n)/g, '$1a=sendonly\\r\\n');\n          } else {\n            sdp = sdp.replace(/a=sendrecv\\r\\n/g, 'a=sendonly\\r\\n');\n            sdp = sdp.replace(/a=recvonly\\r\\n/g, 'a=inactive\\r\\n');\n          }\n        }\n\n        return {\n          body: sdp,\n          contentType: 'application/sdp'\n        };\n      })\n    ;\n  }},\n\n  /**\n   * Check if a SIP message contains a session description.\n   * @param {SIP.SIPMessage} message\n   * @returns {boolean}\n   */\n  hasDescription: {writeable: true, value: function hasDescription (message) {\n    return message.getHeader('Content-Type') === 'application/sdp' && !!message.body;\n  }},\n\n  /**\n   * Set the session description contained in a SIP message.\n   * @param {SIP.SIPMessage} message\n   * @returns {Promise}\n   */\n  setDescription: {writable: true, value: function setDescription (message) {\n    var sdp = message.body;\n\n    this.remote_hold = /a=(sendonly|inactive)/.test(sdp);\n\n    sdp = SIP.Hacks.Firefox.cannotHandleExtraWhitespace(sdp);\n    sdp = SIP.Hacks.AllBrowsers.maskDtls(sdp);\n\n    var rawDescription = {\n      type: this.hasOffer('local') ? 'answer' : 'offer',\n      sdp: sdp\n    };\n\n    this.emit('setDescription', rawDescription);\n\n    var description = new SIP.WebRTC.RTCSessionDescription(rawDescription);\n    return SIP.Utils.promisify(this.peerConnection, 'setRemoteDescription')(description);\n  }},\n\n  /**\n   * If the Session associated with this MediaHandler were to be referred,\n   * what mediaHint should be provided to the UA's invite method?\n   */\n  getReferMedia: {writable: true, value: function getReferMedia () {\n    function hasTracks (trackGetter, stream) {\n      return stream[trackGetter]().length > 0;\n    }\n\n    function bothHaveTracks (trackGetter) {\n      /* jshint validthis:true */\n      return this.getLocalStreams().some(hasTracks.bind(null, trackGetter)) &&\n             this.getRemoteStreams().some(hasTracks.bind(null, trackGetter));\n    }\n\n    return {\n      constraints: {\n        audio: bothHaveTracks.call(this, 'getAudioTracks'),\n        video: bothHaveTracks.call(this, 'getVideoTracks')\n      }\n    };\n  }},\n\n  updateIceServers: {writeable:true, value: function (options) {\n    var servers = this.prepareIceServers(options.stunServers, options.turnServers);\n    this.RTCConstraints = options.RTCConstraints || this.RTCConstraints;\n\n    this.initPeerConnection(servers);\n\n    /* once updateIce is implemented correctly, this is better than above\n    //no op if browser does not support this\n    if (!this.peerConnection.updateIce) {\n      return;\n    }\n\n    this.peerConnection.updateIce({'iceServers': servers}, this.RTCConstraints);\n    */\n  }},\n\n// Functions the session can use, but only because it's convenient for the application\n  isMuted: {writable: true, value: function isMuted () {\n    return {\n      audio: this.audioMuted,\n      video: this.videoMuted\n    };\n  }},\n\n  mute: {writable: true, value: function mute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioMuted = false,\n        videoMuted = false;\n\n    if (options.audio && !this.audioMuted) {\n      audioMuted = true;\n      this.audioMuted = true;\n      this.toggleMuteAudio(true);\n    }\n\n    if (options.video && !this.videoMuted) {\n      videoMuted = true;\n      this.videoMuted = true;\n      this.toggleMuteVideo(true);\n    }\n\n    //REVISIT\n    if (audioMuted || videoMuted) {\n      return {\n        audio: audioMuted,\n        video: videoMuted\n      };\n      /*this.session.onmute({\n        audio: audioMuted,\n        video: videoMuted\n      });*/\n    }\n  }},\n\n  unmute: {writable: true, value: function unmute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioUnMuted = false,\n        videoUnMuted = false;\n\n    if (options.audio && this.audioMuted) {\n      audioUnMuted = true;\n      this.audioMuted = false;\n      this.toggleMuteAudio(false);\n    }\n\n    if (options.video && this.videoMuted) {\n      videoUnMuted = true;\n      this.videoMuted = false;\n      this.toggleMuteVideo(false);\n    }\n\n    //REVISIT\n    if (audioUnMuted || videoUnMuted) {\n      return {\n        audio: audioUnMuted,\n        video: videoUnMuted\n      };\n      /*this.session.onunmute({\n        audio: audioUnMuted,\n        video: videoUnMuted\n      });*/\n    }\n  }},\n\n  hold: {writable: true, value: function hold () {\n    this.local_hold = true;\n    this.toggleMuteAudio(true);\n    this.toggleMuteVideo(true);\n  }},\n\n  unhold: {writable: true, value: function unhold () {\n    this.local_hold = false;\n\n    if (!this.audioMuted) {\n      this.toggleMuteAudio(false);\n    }\n\n    if (!this.videoMuted) {\n      this.toggleMuteVideo(false);\n    }\n  }},\n\n// Functions the application can use, but not the session\n  getLocalStreams: {writable: true, value: function getLocalStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getLocalStreams returning []');\n      return [];\n    }\n    return (pc.getLocalStreams && pc.getLocalStreams()) ||\n      pc.localStreams || [];\n  }},\n\n  getRemoteStreams: {writable: true, value: function getRemoteStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getRemoteStreams returning this._remoteStreams');\n      return this._remoteStreams;\n    }\n    return(pc.getRemoteStreams && pc.getRemoteStreams()) ||\n      pc.remoteStreams || [];\n  }},\n\n  render: {writable: true, value: function render (renderHint) {\n    renderHint = renderHint || (this.mediaHint && this.mediaHint.render);\n    if (!renderHint) {\n      return false;\n    }\n    var streamGetters = {\n      local: 'getLocalStreams',\n      remote: 'getRemoteStreams'\n    };\n    Object.keys(streamGetters).forEach(function (loc) {\n      var streamGetter = streamGetters[loc];\n      var streams = this[streamGetter]();\n      SIP.WebRTC.MediaStreamManager.render(streams, renderHint[loc]);\n    }.bind(this));\n  }},\n\n// Internal functions\n  hasOffer: {writable: true, value: function hasOffer (where) {\n    var offerState = 'have-' + where + '-offer';\n    return this.peerConnection.signalingState === offerState;\n    // TODO consider signalingStates with 'pranswer'?\n  }},\n\n  prepareIceServers: {writable: true, value: function prepareIceServers (stunServers, turnServers) {\n    var servers = [],\n      config = this.session.ua.configuration;\n\n    stunServers = stunServers || config.stunServers;\n    turnServers = turnServers || config.turnServers;\n\n    [].concat(stunServers).forEach(function (server) {\n      servers.push({'urls': server});\n    });\n\n    [].concat(turnServers).forEach(function (server) {\n      servers.push({\n        'urls': server.urls,\n        'username': server.username,\n        'credential': server.password\n      });\n    });\n\n    return servers;\n  }},\n\n  initPeerConnection: {writable: true, value: function initPeerConnection(servers) {\n    var self = this,\n      config = this.session.ua.configuration;\n\n    this.onIceCompleted = SIP.Utils.defer();\n    this.onIceCompleted.promise.then(function(pc) {\n      self.emit('iceGatheringComplete', pc);\n      if (self.iceCheckingTimer) {\n        SIP.Timers.clearTimeout(self.iceCheckingTimer);\n        self.iceCheckingTimer = null;\n      }\n    });\n\n    if (this.peerConnection) {\n      this.peerConnection.close();\n    }\n\n    this.peerConnection = new SIP.WebRTC.RTCPeerConnection({'iceServers': servers});\n\n    // Firefox (35.0.1) sometimes throws on calls to peerConnection.getRemoteStreams\n    // even if peerConnection.onaddstream was just called. In order to make\n    // MediaHandler.prototype.getRemoteStreams work, keep track of them manually\n    this._remoteStreams = [];\n\n    this.peerConnection.onaddstream = function(e) {\n      self.logger.log('stream added: '+ e.stream.id);\n      self._remoteStreams.push(e.stream);\n      self.render();\n      self.emit('addStream', e);\n    };\n\n    this.peerConnection.onremovestream = function(e) {\n      self.logger.log('stream removed: '+ e.stream.id);\n    };\n\n    this.startIceCheckingTimer = function () {\n      if (!self.iceCheckingTimer) {\n        self.iceCheckingTimer = SIP.Timers.setTimeout(function() {\n          self.logger.log('RTCIceChecking Timeout Triggered after '+config.iceCheckingTimeout+' milliseconds');\n          self.onIceCompleted.resolve(this);\n        }.bind(this.peerConnection), config.iceCheckingTimeout);\n      }\n    };\n\n    this.peerConnection.onicecandidate = function(e) {\n      self.emit('iceCandidate', e);\n      if (e.candidate) {\n        self.logger.log('ICE candidate received: '+ (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\n        self.startIceCheckingTimer();\n      } else {\n        self.onIceCompleted.resolve(this);\n      }\n    };\n\n    this.peerConnection.onicegatheringstatechange = function () {\n      self.logger.log('RTCIceGatheringState changed: ' + this.iceGatheringState);\n      if (this.iceGatheringState === 'gathering') {\n        self.emit('iceGathering', this);\n      }\n      if (this.iceGatheringState === 'complete') {\n        self.onIceCompleted.resolve(this);\n      }\n    };\n\n    this.peerConnection.oniceconnectionstatechange = function() {  //need e for commented out case\n      var stateEvent;\n\n      if (this.iceConnectionState === 'checking') {\n        self.startIceCheckingTimer();\n      }\n\n      switch (this.iceConnectionState) {\n      case 'new':\n        stateEvent = 'iceConnection';\n        break;\n      case 'checking':\n        stateEvent = 'iceConnectionChecking';\n        break;\n      case 'connected':\n        stateEvent = 'iceConnectionConnected';\n        break;\n      case 'completed':\n        stateEvent = 'iceConnectionCompleted';\n        break;\n      case 'failed':\n        stateEvent = 'iceConnectionFailed';\n        break;\n      case 'disconnected':\n        stateEvent = 'iceConnectionDisconnected';\n        break;\n      case 'closed':\n        stateEvent = 'iceConnectionClosed';\n        break;\n      default:\n        self.logger.warn('Unknown iceConnection state:', this.iceConnectionState);\n        return;\n      }\n      self.emit(stateEvent, this);\n\n      //Bria state changes are always connected -> disconnected -> connected on accept, so session gets terminated\n      //normal calls switch from failed to connected in some cases, so checking for failed and terminated\n      /*if (this.iceConnectionState === 'failed') {\n        self.session.terminate({\n        cause: SIP.C.causes.RTP_TIMEOUT,\n        status_code: 200,\n        reason_phrase: SIP.C.causes.RTP_TIMEOUT\n      });\n      } else if (e.currentTarget.iceGatheringState === 'complete' && this.iceConnectionState !== 'closed') {\n      self.onIceCompleted(this);\n      }*/\n    };\n\n    this.peerConnection.onstatechange = function() {\n      self.logger.log('PeerConnection state changed to \"'+ this.readyState +'\"');\n    };\n  }},\n\n  createOfferOrAnswer: {writable: true, value: function createOfferOrAnswer (constraints) {\n    var self = this;\n    var methodName;\n    var pc = self.peerConnection;\n\n    self.ready = false;\n    methodName = self.hasOffer('remote') ? 'createAnswer' : 'createOffer';\n\n    return SIP.Utils.promisify(pc, methodName, true)(constraints)\n      .then(SIP.Utils.promisify(pc, 'setLocalDescription'))\n      .then(function onSetLocalDescriptionSuccess() {\n        var deferred = SIP.Utils.defer();\n        if (pc.iceConnectionState === 'complete' || pc.iceConnectionState === 'completed') {\n          deferred.resolve();\n        } else {\n          self.onIceCompleted.promise.then(deferred.resolve);\n        }\n        return deferred.promise;\n      })\n      .then(function readySuccess () {\n        var sdp = pc.localDescription.sdp;\n\n        sdp = SIP.Hacks.Chrome.needsExplicitlyInactiveSDP(sdp);\n        sdp = SIP.Hacks.AllBrowsers.unmaskDtls(sdp);\n\n        var sdpWrapper = {\n          type: methodName === 'createOffer' ? 'offer' : 'answer',\n          sdp: sdp\n        };\n\n        self.emit('getDescription', sdpWrapper);\n\n        if (self.session.ua.configuration.hackStripTcp) {\n          sdpWrapper.sdp = sdpWrapper.sdp.replace(/^a=candidate:\\d+ \\d+ tcp .*?\\r\\n/img, \"\");\n        }\n\n        self.ready = true;\n        return sdpWrapper.sdp;\n      })\n      .catch(function methodFailed (e) {\n        self.logger.error(e);\n        self.ready = true;\n        throw new SIP.Exceptions.GetDescriptionError(e);\n      })\n    ;\n  }},\n\n  addStreams: {writable: true, value: function addStreams (streams) {\n    try {\n      streams = [].concat(streams);\n      streams.forEach(function (stream) {\n        this.peerConnection.addStream(stream);\n      }, this);\n    } catch(e) {\n      this.logger.error('error adding stream');\n      this.logger.error(e);\n      return SIP.Utils.Promise.reject(e);\n    }\n\n    return SIP.Utils.Promise.resolve();\n  }},\n\n  toggleMuteHelper: {writable: true, value: function toggleMuteHelper (trackGetter, mute) {\n    this.getLocalStreams().forEach(function (stream) {\n      stream[trackGetter]().forEach(function (track) {\n        track.enabled = !mute;\n      });\n    });\n  }},\n\n  toggleMuteAudio: {writable: true, value: function toggleMuteAudio (mute) {\n    this.toggleMuteHelper('getAudioTracks', mute);\n  }},\n\n  toggleMuteVideo: {writable: true, value: function toggleMuteVideo (mute) {\n    this.toggleMuteHelper('getVideoTracks', mute);\n  }}\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaHandler;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///367\n");

/***/ }),
/* 368 */
/*!**********************************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/WebRTC/MediaStreamManager.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview MediaStreamManager\n */\n\n/* MediaStreamManager\n * @class Manages the acquisition and release of MediaStreams.\n * @param {mediaHint} [defaultMediaHint] The mediaHint to use if none is provided to acquire()\n */\nmodule.exports = function (SIP, environment) {\n\n// Default MediaStreamManager provides single-use streams created with getUserMedia\nvar MediaStreamManager = function MediaStreamManager (logger, defaultMediaHint) {\n  if (!SIP.WebRTC.isSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  this.mediaHint = defaultMediaHint || {\n    constraints: {audio: true, video: true}\n  };\n\n  // map of streams to acquisition manner:\n  // true -> passed in as mediaHint.stream\n  // false -> getUserMedia\n  this.acquisitions = {};\n};\nMediaStreamManager.streamId = function (stream) {\n  return stream.getAudioTracks().concat(stream.getVideoTracks())\n    .map(function trackId (track) {\n      return track.id;\n    })\n    .join('');\n};\n\n/**\n * @param {(Array of) MediaStream} streams - The streams to render\n *\n * @param {(Array of) HTMLMediaElement} elements\n *        - The <audio>/<video> element(s) that should render the streams\n *\n * Each stream in streams renders to the corresponding element in elements,\n * wrapping around elements if needed.\n */\nMediaStreamManager.render = function render (streams, elements) {\n  if (!elements) {\n    return false;\n  }\n  if (Array.isArray(elements) && !elements.length) {\n    throw new TypeError('elements must not be empty');\n  }\n\n  function attachMediaStream(element, stream) {\n    element.srcObject = stream;\n  }\n\n  function ensureMediaPlaying (mediaElement) {\n    var interval = 100;\n    mediaElement.ensurePlayingIntervalId = SIP.Timers.setInterval(function () {\n      if (mediaElement.paused && mediaElement.srcObject) {\n        mediaElement.play();\n      }\n      else {\n        SIP.Timers.clearInterval(mediaElement.ensurePlayingIntervalId);\n      }\n    }, interval);\n  }\n\n  function attachAndPlay (elements, stream, index) {\n    var element = elements[index % elements.length];\n    if (typeof element === 'function') {\n      element = element();\n    }\n    (environment.attachMediaStream || attachMediaStream)(element, stream);\n    ensureMediaPlaying(element);\n  }\n\n  // [].concat \"casts\" `elements` into an array\n  // so forEach works even if `elements` was a single element\n  elements = [].concat(elements);\n  [].concat(streams).forEach(attachAndPlay.bind(null, elements));\n};\n\nMediaStreamManager.prototype = Object.create(SIP.EventEmitter.prototype, {\n  'acquire': {writable: true, value: function acquire (mediaHint) {\n    mediaHint = Object.keys(mediaHint || {}).length ? mediaHint : this.mediaHint;\n\n    var saveSuccess = function (isHintStream, streams) {\n      streams = [].concat(streams);\n      streams.forEach(function (stream) {\n        var streamId = MediaStreamManager.streamId(stream);\n        this.acquisitions[streamId] = !!isHintStream;\n      }, this);\n      return SIP.Utils.Promise.resolve(streams);\n    }.bind(this);\n\n    if (mediaHint.stream) {\n      return saveSuccess(true, mediaHint.stream);\n    } else {\n      // Fallback to audio/video enabled if no mediaHint can be found.\n      var constraints = mediaHint.constraints ||\n        (this.mediaHint && this.mediaHint.constraints) ||\n        {audio: true, video: true};\n\n      var deferred = SIP.Utils.defer();\n\n      /*\n       * Make the call asynchronous, so that ICCs have a chance\n       * to define callbacks to `userMediaRequest`\n       */\n      SIP.Timers.setTimeout(function () {\n        this.emit('userMediaRequest', constraints);\n\n        var emitThenCall = function (eventName, callback) {\n          var callbackArgs = Array.prototype.slice.call(arguments, 2);\n          // Emit with all of the arguments from the real callback.\n          var newArgs = [eventName].concat(callbackArgs);\n\n          this.emit.apply(this, newArgs);\n\n          return callback.apply(null, callbackArgs);\n        }.bind(this);\n\n        if (constraints.audio || constraints.video) {\n          deferred.resolve(\n            SIP.WebRTC.getUserMedia(constraints)\n            .then(\n              emitThenCall.bind(this, 'userMedia', saveSuccess.bind(null, false)),\n              emitThenCall.bind(this, 'userMediaFailed', function(e){throw e;})\n            )\n          );\n        } else {\n          // Local streams were explicitly excluded.\n          deferred.resolve([]);\n        }\n      }.bind(this), 0);\n\n      return deferred.promise;\n    }\n  }},\n\n  'release': {writable: true, value: function release (streams) {\n    streams = [].concat(streams);\n    streams.forEach(function (stream) {\n      var streamId = MediaStreamManager.streamId(stream);\n      if (this.acquisitions[streamId] === false) {\n        stream.getTracks().forEach(function (track) {\n          track.stop();\n        });\n      }\n      delete this.acquisitions[streamId];\n    }, this);\n  }},\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaStreamManager;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///368\n");

/***/ }),
/* 369 */
/*!***********************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/UA.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * @augments SIP\n * @class Class creating a SIP User Agent.\n * @param {function returning SIP.MediaHandler} [configuration.mediaHandlerFactory]\n *        A function will be invoked by each of the UA's Sessions to build the MediaHandler for that Session.\n *        If no (or a falsy) value is provided, each Session will use a default (WebRTC) MediaHandler.\n *\n * @param {Object} [configuration.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n */\nmodule.exports = function (SIP, environment) {\nvar UA,\n  C = {\n    // UA status codes\n    STATUS_INIT:                0,\n    STATUS_STARTING:            1,\n    STATUS_READY:               2,\n    STATUS_USER_CLOSED:         3,\n    STATUS_NOT_READY:           4,\n\n    // UA error codes\n    CONFIGURATION_ERROR:  1,\n    NETWORK_ERROR:        2,\n\n    ALLOWED_METHODS: [\n      'ACK',\n      'CANCEL',\n      'INVITE',\n      'MESSAGE',\n      'BYE',\n      'OPTIONS',\n      'INFO',\n      'NOTIFY',\n      'REFER'\n    ],\n\n    ACCEPTED_BODY_TYPES: [\n      'application/sdp',\n      'application/dtmf-relay'\n    ],\n\n    MAX_FORWARDS: 70,\n    TAG_LENGTH: 10\n  };\n\nUA = function(configuration) {\n  var self = this;\n\n  // Helper function for forwarding events\n  function selfEmit(type) {\n    //registrationFailed handler is invoked with two arguments. Allow event handlers to be invoked with a variable no. of arguments\n    return self.emit.bind(self, type);\n  }\n\n  // Set Accepted Body Types\n  C.ACCEPTED_BODY_TYPES = C.ACCEPTED_BODY_TYPES.toString();\n\n  this.log = new SIP.LoggerFactory();\n  this.logger = this.getLogger('sip.ua');\n\n  this.cache = {\n    credentials: {}\n  };\n\n  this.configuration = {};\n  this.dialogs = {};\n\n  //User actions outside any session/dialog (MESSAGE)\n  this.applicants = {};\n\n  this.data = {};\n  this.sessions = {};\n  this.subscriptions = {};\n  this.transport = null;\n  this.contact = null;\n  this.status = C.STATUS_INIT;\n  this.error = null;\n  this.transactions = {\n    nist: {},\n    nict: {},\n    ist: {},\n    ict: {}\n  };\n\n  this.transportRecoverAttempts = 0;\n  this.transportRecoveryTimer = null;\n\n  Object.defineProperties(this, {\n    transactionsCount: {\n      get: function() {\n        var type,\n          transactions = ['nist','nict','ist','ict'],\n          count = 0;\n\n        for (type in transactions) {\n          count += Object.keys(this.transactions[transactions[type]]).length;\n        }\n\n        return count;\n      }\n    },\n\n    nictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nict']).length;\n      }\n    },\n\n    nistTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nist']).length;\n      }\n    },\n\n    ictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ict']).length;\n      }\n    },\n\n    istTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ist']).length;\n      }\n    }\n  });\n\n  /**\n   * Load configuration\n   *\n   * @throws {SIP.Exceptions.ConfigurationError}\n   * @throws {TypeError}\n   */\n\n  if(configuration === undefined) {\n    configuration = {};\n  } else if (typeof configuration === 'string' || configuration instanceof String) {\n    configuration = {\n      uri: configuration\n    };\n  }\n\n  // Apply log configuration if present\n  if (configuration.log) {\n    if (configuration.log.hasOwnProperty('builtinEnabled')) {\n      this.log.builtinEnabled = configuration.log.builtinEnabled;\n    }\n\n    if (configuration.log.hasOwnProperty('level')) {\n      this.log.level = configuration.log.level;\n    }\n\n    if (configuration.log.hasOwnProperty('connector')) {\n      this.log.connector = configuration.log.connector;\n    }\n  }\n\n  try {\n    this.loadConfig(configuration);\n  } catch(e) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.CONFIGURATION_ERROR;\n    throw e;\n  }\n\n  // Initialize registerContext\n  this.registerContext = new SIP.RegisterContext(this);\n  this.registerContext.on('failed', selfEmit('registrationFailed'));\n  this.registerContext.on('registered', selfEmit('registered'));\n  this.registerContext.on('unregistered', selfEmit('unregistered'));\n\n  if(this.configuration.autostart) {\n    this.start();\n  }\n\n  if (typeof environment.addEventListener === 'function') {\n    // Google Chrome Packaged Apps don't allow 'unload' listeners:\n    // unload is not available in packaged apps\n    if (!(global.chrome && global.chrome.app && global.chrome.app.runtime)) {\n      environment.addEventListener('unload', this.stop.bind(this));\n    }\n  }\n};\nUA.prototype = Object.create(SIP.EventEmitter.prototype);\n\n//=================\n//  High Level API\n//=================\n\nUA.prototype.register = function(options) {\n  this.configuration.register = true;\n  this.registerContext.register(options);\n\n  return this;\n};\n\n/**\n * Unregister.\n *\n * @param {Boolean} [all] unregister all user bindings.\n *\n */\nUA.prototype.unregister = function(options) {\n  this.configuration.register = false;\n\n  var context = this.registerContext;\n  this.afterConnected(context.unregister.bind(context, options));\n\n  return this;\n};\n\nUA.prototype.isRegistered = function() {\n  return this.registerContext.registered;\n};\n\n/**\n * Connection state.\n * @param {Boolean}\n */\nUA.prototype.isConnected = function() {\n  return this.transport ? this.transport.connected : false;\n};\n\nUA.prototype.afterConnected = function afterConnected (callback) {\n  if (this.isConnected()) {\n    callback();\n  } else {\n    this.once('connected', callback);\n  }\n};\n\n/**\n * Make an outgoing call.\n *\n * @param {String} target\n * @param {Object} views\n * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.invite = function(target, options) {\n  var context = new SIP.InviteClientContext(this, target, options);\n\n  this.afterConnected(context.invite.bind(context));\n  return context;\n};\n\nUA.prototype.subscribe = function(target, event, options) {\n  var sub = new SIP.Subscription(this, target, event, options);\n\n  this.afterConnected(sub.subscribe.bind(sub));\n  return sub;\n};\n\n/**\n * Send a message.\n *\n * @param {String} target\n * @param {String} body\n * @param {Object} [options]\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.message = function(target, body, options) {\n  if (body === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // There is no Message module, so it is okay that the UA handles defaults here.\n  options = Object.create(options || Object.prototype);\n  options.contentType || (options.contentType = 'text/plain');\n  options.body = body;\n\n  return this.request(SIP.C.MESSAGE, target, options);\n};\n\nUA.prototype.request = function (method, target, options) {\n  var req = new SIP.ClientContext(this, method, target, options);\n\n  this.afterConnected(req.send.bind(req));\n  return req;\n};\n\n/**\n * Gracefully close.\n *\n */\nUA.prototype.stop = function() {\n  var session, subscription, applicant,\n    ua = this;\n\n  function transactionsListener() {\n    if (ua.nistTransactionsCount === 0 && ua.nictTransactionsCount === 0) {\n        ua.removeListener('transactionDestroyed', transactionsListener);\n        ua.transport.disconnect();\n    }\n  }\n\n  this.logger.log('user requested closure...');\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.warn('UA already closed');\n    return this;\n  }\n\n  // Clear transportRecoveryTimer\n  SIP.Timers.clearTimeout(this.transportRecoveryTimer);\n\n  // Close registerContext\n  this.logger.log('closing registerContext');\n  this.registerContext.close();\n\n  // Run  _terminate_ on every Session\n  for(session in this.sessions) {\n    this.logger.log('closing session ' + session);\n    this.sessions[session].terminate();\n  }\n\n  //Run _close_ on every Subscription\n  for(subscription in this.subscriptions) {\n    this.logger.log('unsubscribing from subscription ' + subscription);\n    this.subscriptions[subscription].close();\n  }\n\n  // Run  _close_ on every applicant\n  for(applicant in this.applicants) {\n    this.applicants[applicant].close();\n  }\n\n  this.status = C.STATUS_USER_CLOSED;\n\n  /*\n   * If the remaining transactions are all INVITE transactions, there is no need to\n   * wait anymore because every session has already been closed by this method.\n   * - locally originated sessions where terminated (CANCEL or BYE)\n   * - remotely originated sessions where rejected (4XX) or terminated (BYE)\n   * Remaining INVITE transactions belong tho sessions that where answered. This are in\n   * 'accepted' state due to timers 'L' and 'M' defined in [RFC 6026]\n   */\n  if (this.nistTransactionsCount === 0 && this.nictTransactionsCount === 0) {\n    if (this.transport) {\n      this.transport.disconnect();\n    }\n  } else {\n    this.on('transactionDestroyed', transactionsListener);\n  }\n\n  return this;\n};\n\n/**\n * Connect to the WS server if status = STATUS_INIT.\n * Resume UA after being closed.\n *\n */\nUA.prototype.start = function() {\n  var server;\n\n  this.logger.log('user requested startup...');\n  if (this.status === C.STATUS_INIT) {\n    server = this.getNextWsServer();\n    this.status = C.STATUS_STARTING;\n    new SIP.Transport(this, server);\n  } else if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.log('resuming');\n    this.status = C.STATUS_READY;\n    this.transport.connect();\n  } else if (this.status === C.STATUS_STARTING) {\n    this.logger.log('UA is in STARTING status, not opening new connection');\n  } else if (this.status === C.STATUS_READY) {\n    this.logger.log('UA is in READY status, not resuming');\n  } else {\n    this.logger.error('Connection is down. Auto-Recovery system is trying to connect');\n  }\n\n  return this;\n};\n\n/**\n * Normalize a string into a valid SIP request URI\n *\n * @param {String} target\n *\n * @returns {SIP.URI|undefined}\n */\nUA.prototype.normalizeTarget = function(target) {\n  return SIP.Utils.normalizeTarget(target, this.configuration.hostportParams);\n};\n\n\n//===============================\n//  Private (For internal use)\n//===============================\n\nUA.prototype.saveCredentials = function(credentials) {\n  this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};\n  this.cache.credentials[credentials.realm][credentials.uri] = credentials;\n\n  return this;\n};\n\nUA.prototype.getCredentials = function(request) {\n  var realm, credentials;\n\n  realm = request.ruri.host;\n\n  if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {\n    credentials = this.cache.credentials[realm][request.ruri];\n    credentials.method = request.method;\n  }\n\n  return credentials;\n};\n\nUA.prototype.getLogger = function(category, label) {\n  return this.log.getLogger(category, label);\n};\n\n\n//==============================\n// Event Handlers\n//==============================\n\n/**\n * Transport Close event\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportClosed = function(transport) {\n  // Run _onTransportError_ callback on every client transaction using _transport_\n  var type, idx, length,\n    client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  transport.server.status = SIP.Transport.C.STATUS_DISCONNECTED;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_DISCONNECTED);\n\n  length = client_transactions.length;\n  for (type = 0; type < length; type++) {\n    for(idx in this.transactions[client_transactions[type]]) {\n      this.transactions[client_transactions[type]][idx].onTransportError();\n    }\n  }\n\n  // Close sessions if GRUU is not being used\n  if (!this.contact.pub_gruu) {\n    this.closeSessionsOnTransportError();\n  }\n\n};\n\n/**\n * Unrecoverable transport event.\n * Connection reattempt logic has been done and didn't success.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportError = function(transport) {\n  var server;\n\n  this.logger.log('transport ' + transport.server.ws_uri + ' failed | connection state set to '+ SIP.Transport.C.STATUS_ERROR);\n\n  // Close sessions.\n  //Mark this transport as 'down'\n  transport.server.status = SIP.Transport.C.STATUS_ERROR;\n\n  this.emit('disconnected', {\n    transport: transport\n  });\n\n  // try the next transport if the UA isn't closed\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  server = this.getNextWsServer();\n\n  if(server) {\n    new SIP.Transport(this, server);\n  }else {\n    this.closeSessionsOnTransportError();\n    if (!this.error || this.error !== C.NETWORK_ERROR) {\n      this.status = C.STATUS_NOT_READY;\n      this.error = C.NETWORK_ERROR;\n    }\n    // Transport Recovery process\n    this.recoverTransport();\n  }\n};\n\n/**\n * Transport connection event.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportConnected = function(transport) {\n  this.transport = transport;\n\n  // Reset transport recovery counter\n  this.transportRecoverAttempts = 0;\n\n  transport.server.status = SIP.Transport.C.STATUS_READY;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_READY);\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this.status = C.STATUS_READY;\n  this.error = null;\n\n  if(this.configuration.register) {\n    this.configuration.authenticationFactory.initialize().then(function () {\n      this.registerContext.onTransportConnected();\n    }.bind(this));\n  }\n\n  this.emit('connected', {\n    transport: transport\n  });\n};\n\n\n/**\n * Transport connecting event\n * @private\n * @param {SIP.Transport} transport.\n * #param {Integer} attempts.\n */\n  UA.prototype.onTransportConnecting = function(transport, attempts) {\n    this.emit('connecting', {\n      transport: transport,\n      attempts: attempts\n    });\n  };\n\n\n/**\n * new Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.newTransaction = function(transaction) {\n  this.transactions[transaction.type][transaction.id] = transaction;\n  this.emit('newTransaction', {transaction: transaction});\n};\n\n\n/**\n * destroy Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.destroyTransaction = function(transaction) {\n  delete this.transactions[transaction.type][transaction.id];\n  this.emit('transactionDestroyed', {\n    transaction: transaction\n  });\n};\n\n\n//=========================\n// receiveRequest\n//=========================\n\n/**\n * Request reception\n * @private\n * @param {SIP.IncomingRequest} request.\n */\nUA.prototype.receiveRequest = function(request) {\n  var dialog, session, message,\n    method = request.method,\n    transaction,\n    replaces,\n    replacedDialog,\n    self = this;\n\n  function ruriMatches (uri) {\n    return uri && uri.user === request.ruri.user;\n  }\n\n  // Check that request URI points to us\n  if(!(ruriMatches(this.configuration.uri) ||\n       ruriMatches(this.contact.uri) ||\n       ruriMatches(this.contact.pub_gruu) ||\n       ruriMatches(this.contact.temp_gruu))) {\n    this.logger.warn('Request-URI does not point to us');\n    if (request.method !== SIP.C.ACK) {\n      request.reply_sl(404);\n    }\n    return;\n  }\n\n  // Check request URI scheme\n  if(request.ruri.scheme === SIP.C.SIPS) {\n    request.reply_sl(416);\n    return;\n  }\n\n  // Check transaction\n  if(SIP.Transactions.checkTransaction(this, request)) {\n    return;\n  }\n\n  /* RFC3261 12.2.2\n   * Requests that do not change in any way the state of a dialog may be\n   * received within a dialog (for example, an OPTIONS request).\n   * They are processed as if they had been received outside the dialog.\n   */\n  if(method === SIP.C.OPTIONS) {\n    new SIP.Transactions.NonInviteServerTransaction(request, this);\n    request.reply(200, null, [\n      'Allow: '+ SIP.UA.C.ALLOWED_METHODS.toString(),\n      'Accept: '+ C.ACCEPTED_BODY_TYPES\n    ]);\n  } else if (method === SIP.C.MESSAGE) {\n    message = new SIP.ServerContext(this, request);\n    message.body = request.body;\n    message.content_type = request.getHeader('Content-Type') || 'text/plain';\n\n    request.reply(200, null);\n    this.emit('message', message);\n  } else if (method !== SIP.C.INVITE &&\n             method !== SIP.C.ACK) {\n    // Let those methods pass through to normal processing for now.\n    transaction = new SIP.ServerContext(this, request);\n  }\n\n  // Initial Request\n  if(!request.to_tag) {\n    switch(method) {\n      case SIP.C.INVITE:\n        replaces =\n          this.configuration.replaces !== SIP.C.supported.UNSUPPORTED &&\n          request.parseHeader('replaces');\n\n        if (replaces) {\n          replacedDialog = this.dialogs[replaces.call_id + replaces.replaces_to_tag + replaces.replaces_from_tag];\n\n          if (!replacedDialog) {\n            //Replaced header without a matching dialog, reject\n            request.reply_sl(481, null);\n            return;\n          } else if (replacedDialog.owner.status === SIP.Session.C.STATUS_TERMINATED) {\n            request.reply_sl(603, null);\n            return;\n          } else if (replacedDialog.state === SIP.Dialog.C.STATUS_CONFIRMED && replaces.early_only) {\n            request.reply_sl(486, null);\n            return;\n          }\n        }\n\n        var isMediaSupported = this.configuration.mediaHandlerFactory.isSupported;\n        if(!isMediaSupported || isMediaSupported()) {\n          session = new SIP.InviteServerContext(this, request);\n          session.replacee = replacedDialog && replacedDialog.owner;\n          session.on('invite', function() {\n            self.emit('invite', this);\n          });\n        } else {\n          this.logger.warn('INVITE received but WebRTC is not supported');\n          request.reply(488);\n        }\n        break;\n      case SIP.C.BYE:\n        // Out of dialog BYE received\n        request.reply(481);\n        break;\n      case SIP.C.CANCEL:\n        session = this.findSession(request);\n        if(session) {\n          session.receiveRequest(request);\n        } else {\n          this.logger.warn('received CANCEL request for a non existent session');\n        }\n        break;\n      case SIP.C.ACK:\n        /* Absorb it.\n         * ACK request without a corresponding Invite Transaction\n         * and without To tag.\n         */\n        break;\n      case SIP.C.NOTIFY:\n        if (this.configuration.allowLegacyNotifications && this.listeners('notify').length > 0) {\n          request.reply(200, null);\n          self.emit('notify', {request: request});\n        } else {\n          request.reply(481, 'Subscription does not exist');\n        }\n        break;\n      default:\n        request.reply(405);\n        break;\n    }\n  }\n  // In-dialog request\n  else {\n    dialog = this.findDialog(request);\n\n    if(dialog) {\n      if (method === SIP.C.INVITE) {\n        new SIP.Transactions.InviteServerTransaction(request, this);\n      }\n      dialog.receiveRequest(request);\n    } else if (method === SIP.C.NOTIFY) {\n      session = this.findSession(request);\n      if(session) {\n        session.receiveRequest(request);\n      } else {\n        this.logger.warn('received NOTIFY request for a non existent session');\n        request.reply(481, 'Subscription does not exist');\n      }\n    }\n    /* RFC3261 12.2.2\n     * Request with to tag, but no matching dialog found.\n     * Exception: ACK for an Invite request for which a dialog has not\n     * been created.\n     */\n    else {\n      if(method !== SIP.C.ACK) {\n        request.reply(481);\n      }\n    }\n  }\n};\n\n//=================\n// Utils\n//=================\n\n/**\n * Get the session to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest} request.\n * @returns {SIP.OutgoingSession|SIP.IncomingSession|null}\n */\nUA.prototype.findSession = function(request) {\n  return this.sessions[request.call_id + request.from_tag] ||\n          this.sessions[request.call_id + request.to_tag] ||\n          null;\n};\n\n/**\n * Get the dialog to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest}\n * @returns {SIP.Dialog|null}\n */\nUA.prototype.findDialog = function(request) {\n  return this.dialogs[request.call_id + request.from_tag + request.to_tag] ||\n          this.dialogs[request.call_id + request.to_tag + request.from_tag] ||\n          null;\n};\n\n/**\n * Retrieve the next server to which connect.\n * @private\n * @returns {Object} ws_server\n */\nUA.prototype.getNextWsServer = function() {\n  // Order servers by weight\n  var idx, length, ws_server,\n    candidates = [];\n\n  length = this.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ws_server = this.configuration.wsServers[idx];\n\n    if (ws_server.status === SIP.Transport.C.STATUS_ERROR) {\n      continue;\n    } else if (candidates.length === 0) {\n      candidates.push(ws_server);\n    } else if (ws_server.weight > candidates[0].weight) {\n      candidates = [ws_server];\n    } else if (ws_server.weight === candidates[0].weight) {\n      candidates.push(ws_server);\n    }\n  }\n\n  idx = Math.floor(Math.random() * candidates.length);\n\n  return candidates[idx];\n};\n\n/**\n * Close all sessions on transport error.\n * @private\n */\nUA.prototype.closeSessionsOnTransportError = function() {\n  var idx;\n\n  // Run _transportError_ for every Session\n  for(idx in this.sessions) {\n    this.sessions[idx].onTransportError();\n  }\n  // Call registerContext _onTransportClosed_\n  this.registerContext.onTransportClosed();\n};\n\nUA.prototype.recoverTransport = function(ua) {\n  var idx, length, k, nextRetry, count, server;\n\n  ua = ua || this;\n  count = ua.transportRecoverAttempts;\n\n  length = ua.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ua.configuration.wsServers[idx].status = 0;\n  }\n\n  server = ua.getNextWsServer();\n\n  k = Math.floor((Math.random() * Math.pow(2,count)) +1);\n  nextRetry = k * ua.configuration.connectionRecoveryMinInterval;\n\n  if (nextRetry > ua.configuration.connectionRecoveryMaxInterval) {\n    this.logger.log('time for next connection attempt exceeds connectionRecoveryMaxInterval, resetting counter');\n    nextRetry = ua.configuration.connectionRecoveryMinInterval;\n    count = 0;\n  }\n\n  this.logger.log('next connection attempt in '+ nextRetry +' seconds');\n\n  this.transportRecoveryTimer = SIP.Timers.setTimeout(\n    function(){\n      ua.transportRecoverAttempts = count + 1;\n      new SIP.Transport(ua, server);\n    }, nextRetry * 1000);\n};\n\nfunction checkAuthenticationFactory (authenticationFactory) {\n  if (!(authenticationFactory instanceof Function)) {\n    return;\n  }\n  if (!authenticationFactory.initialize) {\n    authenticationFactory.initialize = function initialize () {\n      return SIP.Utils.Promise.resolve();\n    };\n  }\n  return authenticationFactory;\n}\n\n/**\n * Configuration load.\n * @private\n * returns {Boolean}\n */\nUA.prototype.loadConfig = function(configuration) {\n  // Settings and default values\n  var parameter, value, checked_value, hostportParams, registrarServer,\n    settings = {\n      /* Host address\n      * Value to be set in Via sent_by and host part of Contact FQDN\n      */\n      viaHost: SIP.Utils.createRandomToken(12) + '.invalid',\n\n      uri: new SIP.URI('sip', 'anonymous.' + SIP.Utils.createRandomToken(6), 'anonymous.invalid', null, null),\n      wsServers: [{\n        scheme: 'WSS',\n        sip_uri: '<sip:edge.sip.onsip.com;transport=ws;lr>',\n        status: 0,\n        weight: 0,\n        ws_uri: 'wss://edge.sip.onsip.com'\n      }],\n\n      // Password\n      password: null,\n\n      // Registration parameters\n      registerExpires: 600,\n      register: true,\n      registrarServer: null,\n\n      // Transport related parameters\n      wsServerMaxReconnection: 3,\n      wsServerReconnectionTimeout: 4,\n\n      connectionRecoveryMinInterval: 2,\n      connectionRecoveryMaxInterval: 30,\n\n      keepAliveInterval: 0,\n\n      extraSupported: [],\n\n      usePreloadedRoute: false,\n\n      //string to be inserted into User-Agent request header\n      userAgentString: SIP.C.USER_AGENT,\n\n      // Session parameters\n      iceCheckingTimeout: 5000,\n      noAnswerTimeout: 60,\n      stunServers: ['stun:stun.l.google.com:19302'],\n      turnServers: [],\n\n      // Logging parameters\n      traceSip: false,\n\n      // Hacks\n      hackViaTcp: false,\n      hackIpInContact: false,\n      hackWssInTransport: false,\n      hackAllowUnregisteredOptionTags: false,\n      hackCleanJitsiSdpImageattr: false,\n      hackStripTcp: false,\n\n      contactTransport: 'ws',\n      forceRport: false,\n\n      //autostarting\n      autostart: true,\n\n      //Reliable Provisional Responses\n      rel100: SIP.C.supported.UNSUPPORTED,\n\n      // Replaces header (RFC 3891)\n      // http://tools.ietf.org/html/rfc3891\n      replaces: SIP.C.supported.UNSUPPORTED,\n\n      mediaHandlerFactory: SIP.WebRTC.MediaHandler.defaultFactory,\n\n      authenticationFactory: checkAuthenticationFactory(function authenticationFactory (ua) {\n        return new SIP.DigestAuthentication(ua);\n      }),\n\n      allowLegacyNotifications: false\n    };\n\n  // Pre-Configuration\n  function aliasUnderscored (parameter, logger) {\n    var underscored = parameter.replace(/([a-z][A-Z])/g, function (m) {\n      return m[0] + '_' + m[1].toLowerCase();\n    });\n\n    if (parameter === underscored) {\n      return;\n    }\n\n    var hasParameter = configuration.hasOwnProperty(parameter);\n    if (configuration.hasOwnProperty(underscored)) {\n      logger.warn(underscored + ' is deprecated, please use ' + parameter);\n      if (hasParameter) {\n        logger.warn(parameter + ' overriding ' + underscored);\n      }\n    }\n\n    configuration[parameter] = hasParameter ? configuration[parameter] : configuration[underscored];\n  }\n\n  // Check Mandatory parameters\n  for(parameter in UA.configuration_check.mandatory) {\n    aliasUnderscored(parameter, this.logger);\n    if(!configuration.hasOwnProperty(parameter)) {\n      throw new SIP.Exceptions.ConfigurationError(parameter);\n    } else {\n      value = configuration[parameter];\n      checked_value = UA.configuration_check.mandatory[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  SIP.Utils.optionsOverride(configuration, 'rel100', 'reliable', true, this.logger, SIP.C.supported.UNSUPPORTED);\n\n  var emptyArraysAllowed = ['stunServers', 'turnServers'];\n\n  // Check Optional parameters\n  for(parameter in UA.configuration_check.optional) {\n    aliasUnderscored(parameter, this.logger);\n    if(configuration.hasOwnProperty(parameter)) {\n      value = configuration[parameter];\n\n      // If the parameter value is an empty array, but shouldn't be, apply its default value.\n      if (value instanceof Array && value.length === 0 && emptyArraysAllowed.indexOf(parameter) < 0) { continue; }\n\n      // If the parameter value is null, empty string, or undefined then apply its default value.\n      if(value === null || value === \"\" || value === undefined) { continue; }\n      // If it's a number with NaN value then also apply its default value.\n      // NOTE: JS does not allow \"value === NaN\", the following does the work:\n      else if(typeof(value) === 'number' && isNaN(value)) { continue; }\n\n      checked_value = UA.configuration_check.optional[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Sanity Checks\n\n  // Connection recovery intervals\n  if(settings.connectionRecoveryMaxInterval < settings.connectionRecoveryMinInterval) {\n    throw new SIP.Exceptions.ConfigurationError('connectionRecoveryMaxInterval', settings.connectionRecoveryMaxInterval);\n  }\n\n  // Post Configuration Process\n\n  // Allow passing 0 number as displayName.\n  if (settings.displayName === 0) {\n    settings.displayName = '0';\n  }\n\n  // Instance-id for GRUU\n  if (!settings.instanceId) {\n    settings.instanceId = SIP.Utils.newUUID();\n  }\n\n  // sipjsId instance parameter. Static random tag of length 5\n  settings.sipjsId = SIP.Utils.createRandomToken(5);\n\n  // String containing settings.uri without scheme and user.\n  hostportParams = settings.uri.clone();\n  hostportParams.user = null;\n  settings.hostportParams = hostportParams.toRaw().replace(/^sip:/i, '');\n\n  /* Check whether authorizationUser is explicitly defined.\n   * Take 'settings.uri.user' value if not.\n   */\n  if (!settings.authorizationUser) {\n    settings.authorizationUser = settings.uri.user;\n  }\n\n  /* If no 'registrarServer' is set use the 'uri' value without user portion. */\n  if (!settings.registrarServer) {\n    registrarServer = settings.uri.clone();\n    registrarServer.user = null;\n    settings.registrarServer = registrarServer;\n  }\n\n  // User noAnswerTimeout\n  settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\n\n  // Via Host\n  if (settings.hackIpInContact) {\n    if (typeof settings.hackIpInContact === 'boolean') {\n      settings.viaHost = SIP.Utils.getRandomTestNetIP();\n    }\n    else if (typeof settings.hackIpInContact === 'string') {\n      settings.viaHost = settings.hackIpInContact;\n    }\n  }\n\n  // Contact transport parameter\n  if (settings.hackWssInTransport) {\n    settings.contactTransport = 'wss';\n  }\n\n  this.contact = {\n    pub_gruu: null,\n    temp_gruu: null,\n    uri: new SIP.URI('sip', SIP.Utils.createRandomToken(8), settings.viaHost, null, {transport: settings.contactTransport}),\n    toString: function(options){\n      options = options || {};\n\n      var\n        anonymous = options.anonymous || null,\n        outbound = options.outbound || null,\n        contact = '<';\n\n      if (anonymous) {\n        contact += (this.temp_gruu || ('sip:anonymous@anonymous.invalid;transport='+settings.contactTransport)).toString();\n      } else {\n        contact += (this.pub_gruu || this.uri).toString();\n      }\n\n      if (outbound) {\n        contact += ';ob';\n      }\n\n      contact += '>';\n\n      return contact;\n    }\n  };\n\n  // media overrides mediaConstraints\n  SIP.Utils.optionsOverride(settings, 'media', 'mediaConstraints', true, this.logger);\n\n  // Fill the value of the configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = settings[parameter];\n  }\n\n  Object.defineProperties(this.configuration, UA.configuration_skeleton);\n\n  // Clean UA.configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = '';\n  }\n\n  this.logger.log('configuration parameters after validation:');\n  for(parameter in settings) {\n    switch(parameter) {\n      case 'uri':\n      case 'registrarServer':\n      case 'mediaHandlerFactory':\n        this.logger.log('· ' + parameter + ': ' + settings[parameter]);\n        break;\n      case 'password':\n        this.logger.log('· ' + parameter + ': ' + 'NOT SHOWN');\n        break;\n      default:\n        this.logger.log('· ' + parameter + ': ' + JSON.stringify(settings[parameter]));\n    }\n  }\n\n  return;\n};\n\n/**\n * Configuration Object skeleton.\n * @private\n */\nUA.configuration_skeleton = (function() {\n  var idx,  parameter,\n    skeleton = {},\n    parameters = [\n      // Internal parameters\n      \"sipjsId\",\n      \"hostportParams\",\n\n      // Optional user configurable parameters\n      \"uri\",\n      \"wsServers\",\n      \"authorizationUser\",\n      \"connectionRecoveryMaxInterval\",\n      \"connectionRecoveryMinInterval\",\n      \"keepAliveInterval\",\n      \"extraSupported\",\n      \"displayName\",\n      \"hackViaTcp\", // false.\n      \"hackIpInContact\", //false\n      \"hackWssInTransport\", //false\n      \"hackAllowUnregisteredOptionTags\", //false\n      \"hackCleanJitsiSdpImageattr\", //false\n      \"hackStripTcp\", //false\n      \"contactTransport\", // 'ws'\n      \"forceRport\", // false\n      \"iceCheckingTimeout\",\n      \"instanceId\",\n      \"noAnswerTimeout\", // 30 seconds.\n      \"password\",\n      \"registerExpires\", // 600 seconds.\n      \"registrarServer\",\n      \"reliable\",\n      \"rel100\",\n      \"replaces\",\n      \"userAgentString\", //SIP.C.USER_AGENT\n      \"autostart\",\n      \"stunServers\",\n      \"traceSip\",\n      \"turnServers\",\n      \"usePreloadedRoute\",\n      \"wsServerMaxReconnection\",\n      \"wsServerReconnectionTimeout\",\n      \"mediaHandlerFactory\",\n      \"media\",\n      \"mediaConstraints\",\n      \"authenticationFactory\",\n      \"allowLegacyNotifications\",\n\n      // Post-configuration generated parameters\n      \"via_core_value\",\n      \"viaHost\"\n    ];\n\n  for(idx in parameters) {\n    parameter = parameters[idx];\n    skeleton[parameter] = {\n      value: '',\n      writable: false,\n      configurable: false\n    };\n  }\n\n  skeleton['register'] = {\n    value: '',\n    writable: true,\n    configurable: false\n  };\n\n  return skeleton;\n}());\n\n/**\n * Configuration checker.\n * @private\n * @return {Boolean}\n */\nUA.configuration_check = {\n  mandatory: {\n  },\n\n  optional: {\n\n    uri: function(uri) {\n      var parsed;\n\n      if (!(/^sip:/i).test(uri)) {\n        uri = SIP.C.SIP + ':' + uri;\n      }\n      parsed = SIP.URI.parse(uri);\n\n      if(!parsed) {\n        return;\n      } else if(!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    //Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\n    wsServers: function(wsServers) {\n      var idx, length, url;\n\n      /* Allow defining wsServers parameter as:\n       *  String: \"host\"\n       *  Array of Strings: [\"host1\", \"host2\"]\n       *  Array of Objects: [{ws_uri:\"host1\", weight:1}, {ws_uri:\"host2\", weight:0}]\n       *  Array of Objects and Strings: [{ws_uri:\"host1\"}, \"host2\"]\n       */\n      if (typeof wsServers === 'string') {\n        wsServers = [{ws_uri: wsServers}];\n      } else if (wsServers instanceof Array) {\n        length = wsServers.length;\n        for (idx = 0; idx < length; idx++) {\n          if (typeof wsServers[idx] === 'string'){\n            wsServers[idx] = {ws_uri: wsServers[idx]};\n          }\n        }\n      } else {\n        return;\n      }\n\n      if (wsServers.length === 0) {\n        return false;\n      }\n\n      length = wsServers.length;\n      for (idx = 0; idx < length; idx++) {\n        if (!wsServers[idx].ws_uri) {\n          return;\n        }\n        if (wsServers[idx].weight && !Number(wsServers[idx].weight)) {\n          return;\n        }\n\n        url = SIP.Grammar.parse(wsServers[idx].ws_uri, 'absoluteURI');\n\n        if(url === -1) {\n          return;\n        } else if(['wss', 'ws', 'udp'].indexOf(url.scheme) < 0) {\n          return;\n        } else {\n          wsServers[idx].sip_uri = '<sip:' + url.host + (url.port ? ':' + url.port : '') + ';transport=' + url.scheme.replace(/^wss$/i, 'ws') + ';lr>';\n\n          if (!wsServers[idx].weight) {\n            wsServers[idx].weight = 0;\n          }\n\n          wsServers[idx].status = 0;\n          wsServers[idx].scheme = url.scheme.toUpperCase();\n        }\n      }\n      return wsServers;\n    },\n\n    authorizationUser: function(authorizationUser) {\n      if(SIP.Grammar.parse('\"'+ authorizationUser +'\"', 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorizationUser;\n      }\n    },\n\n    connectionRecoveryMaxInterval: function(connectionRecoveryMaxInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMaxInterval)) {\n        value = Number(connectionRecoveryMaxInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connectionRecoveryMinInterval: function(connectionRecoveryMinInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMinInterval)) {\n        value = Number(connectionRecoveryMinInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    displayName: function(displayName) {\n      if(SIP.Grammar.parse('\"' + displayName + '\"', 'displayName') === -1) {\n        return;\n      } else {\n        return displayName;\n      }\n    },\n\n    hackViaTcp: function(hackViaTcp) {\n      if (typeof hackViaTcp === 'boolean') {\n        return hackViaTcp;\n      }\n    },\n\n    hackIpInContact: function(hackIpInContact) {\n      if (typeof hackIpInContact === 'boolean') {\n        return hackIpInContact;\n      }\n      else if (typeof hackIpInContact === 'string' && SIP.Grammar.parse(hackIpInContact, 'host') !== -1) {\n        return hackIpInContact;\n      }\n    },\n\n    iceCheckingTimeout: function(iceCheckingTimeout) {\n      if(SIP.Utils.isDecimal(iceCheckingTimeout)) {\n        return Math.max(500, iceCheckingTimeout);\n      }\n    },\n\n    hackWssInTransport: function(hackWssInTransport) {\n      if (typeof hackWssInTransport === 'boolean') {\n        return hackWssInTransport;\n      }\n    },\n\n    hackAllowUnregisteredOptionTags: function(hackAllowUnregisteredOptionTags) {\n      if (typeof hackAllowUnregisteredOptionTags === 'boolean') {\n        return hackAllowUnregisteredOptionTags;\n      }\n    },\n\n    hackCleanJitsiSdpImageattr: function(hackCleanJitsiSdpImageattr) {\n      if (typeof hackCleanJitsiSdpImageattr === 'boolean') {\n        return hackCleanJitsiSdpImageattr;\n      }\n    },\n\n    hackStripTcp: function(hackStripTcp) {\n      if (typeof hackStripTcp === 'boolean') {\n        return hackStripTcp;\n      }\n    },\n\n    contactTransport: function(contactTransport) {\n      if (typeof contactTransport === 'string') {\n        return contactTransport;\n      }\n    },\n\n    forceRport: function(forceRport) {\n      if (typeof forceRport === 'boolean') {\n        return forceRport;\n      }\n    },\n\n    instanceId: function(instanceId) {\n      if(typeof instanceId !== 'string') {\n        return;\n      }\n\n      if ((/^uuid:/i.test(instanceId))) {\n        instanceId = instanceId.substr(5);\n      }\n\n      if(SIP.Grammar.parse(instanceId, 'uuid') === -1) {\n        return;\n      } else {\n        return instanceId;\n      }\n    },\n\n    keepAliveInterval: function(keepAliveInterval) {\n      var value;\n      if (SIP.Utils.isDecimal(keepAliveInterval)) {\n        value = Number(keepAliveInterval);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    extraSupported: function(optionTags) {\n      var idx, length;\n\n      if (!(optionTags instanceof Array)) {\n        return;\n      }\n\n      length = optionTags.length;\n      for (idx = 0; idx < length; idx++) {\n        if (typeof optionTags[idx] !== 'string') {\n          return;\n        }\n      }\n\n      return optionTags;\n    },\n\n    noAnswerTimeout: function(noAnswerTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(noAnswerTimeout)) {\n        value = Number(noAnswerTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    password: function(password) {\n      return String(password);\n    },\n\n    rel100: function(rel100) {\n      if(rel100 === SIP.C.supported.REQUIRED) {\n        return SIP.C.supported.REQUIRED;\n      } else if (rel100 === SIP.C.supported.SUPPORTED) {\n        return SIP.C.supported.SUPPORTED;\n      } else  {\n        return SIP.C.supported.UNSUPPORTED;\n      }\n    },\n\n    replaces: function(replaces) {\n      if(replaces === SIP.C.supported.REQUIRED) {\n        return SIP.C.supported.REQUIRED;\n      } else if (replaces === SIP.C.supported.SUPPORTED) {\n        return SIP.C.supported.SUPPORTED;\n      } else  {\n        return SIP.C.supported.UNSUPPORTED;\n      }\n    },\n\n    register: function(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    registerExpires: function(registerExpires) {\n      var value;\n      if (SIP.Utils.isDecimal(registerExpires)) {\n        value = Number(registerExpires);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrarServer: function(registrarServer) {\n      var parsed;\n\n      if(typeof registrarServer !== 'string') {\n        return;\n      }\n\n      if (!/^sip:/i.test(registrarServer)) {\n        registrarServer = SIP.C.SIP + ':' + registrarServer;\n      }\n      parsed = SIP.URI.parse(registrarServer);\n\n      if(!parsed) {\n        return;\n      } else if(parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    stunServers: function(stunServers) {\n      var idx, length, stun_server;\n\n      if (typeof stunServers === 'string') {\n        stunServers = [stunServers];\n      } else if (!(stunServers instanceof Array)) {\n        return;\n      }\n\n      length = stunServers.length;\n      for (idx = 0; idx < length; idx++) {\n        stun_server = stunServers[idx];\n        if (!(/^stuns?:/.test(stun_server))) {\n          stun_server = 'stun:' + stun_server;\n        }\n\n        if(SIP.Grammar.parse(stun_server, 'stun_URI') === -1) {\n          return;\n        } else {\n          stunServers[idx] = stun_server;\n        }\n      }\n      return stunServers;\n    },\n\n    traceSip: function(traceSip) {\n      if (typeof traceSip === 'boolean') {\n        return traceSip;\n      }\n    },\n\n    turnServers: function(turnServers) {\n      var idx, jdx, length, turn_server, num_turn_server_urls, url;\n\n      if (turnServers instanceof Array) {\n        // Do nothing\n      } else {\n        turnServers = [turnServers];\n      }\n\n      length = turnServers.length;\n      for (idx = 0; idx < length; idx++) {\n        turn_server = turnServers[idx];\n        //Backwards compatibility: Allow defining the turn_server url with the 'server' property.\n        if (turn_server.server) {\n          turn_server.urls = [turn_server.server];\n        }\n\n        if (!turn_server.urls || !turn_server.username || !turn_server.password) {\n          return;\n        }\n\n        if (turn_server.urls instanceof Array) {\n          num_turn_server_urls = turn_server.urls.length;\n        } else {\n          turn_server.urls = [turn_server.urls];\n          num_turn_server_urls = 1;\n        }\n\n        for (jdx = 0; jdx < num_turn_server_urls; jdx++) {\n          url = turn_server.urls[jdx];\n\n          if (!(/^turns?:/.test(url))) {\n            url = 'turn:' + url;\n          }\n\n          if(SIP.Grammar.parse(url, 'turn_URI') === -1) {\n            return;\n          }\n        }\n      }\n      return turnServers;\n    },\n\n    userAgentString: function(userAgentString) {\n      if (typeof userAgentString === 'string') {\n        return userAgentString;\n      }\n    },\n\n    usePreloadedRoute: function(usePreloadedRoute) {\n      if (typeof usePreloadedRoute === 'boolean') {\n        return usePreloadedRoute;\n      }\n    },\n\n    wsServerMaxReconnection: function(wsServerMaxReconnection) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerMaxReconnection)) {\n        value = Number(wsServerMaxReconnection);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    wsServerReconnectionTimeout: function(wsServerReconnectionTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerReconnectionTimeout)) {\n        value = Number(wsServerReconnectionTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    autostart: function(autostart) {\n      if (typeof autostart === 'boolean') {\n        return autostart;\n      }\n    },\n\n    mediaHandlerFactory: function(mediaHandlerFactory) {\n      if (mediaHandlerFactory instanceof Function) {\n        var promisifiedFactory = function promisifiedFactory () {\n          var mediaHandler = mediaHandlerFactory.apply(this, arguments);\n\n          function patchMethod (methodName) {\n            var method = mediaHandler[methodName];\n            if (method.length > 1) {\n              var callbacksFirst = methodName === 'getDescription';\n              mediaHandler[methodName] = SIP.Utils.promisify(mediaHandler, methodName, callbacksFirst);\n            }\n          }\n\n          patchMethod('getDescription');\n          patchMethod('setDescription');\n\n          return mediaHandler;\n        };\n\n        promisifiedFactory.isSupported = mediaHandlerFactory.isSupported;\n        return promisifiedFactory;\n      }\n    },\n\n    authenticationFactory: checkAuthenticationFactory,\n\n    allowLegacyNotifications: function(allowLegacyNotifications) {\n      if (typeof allowLegacyNotifications === 'boolean') {\n        return allowLegacyNotifications;\n      }\n    }\n  }\n};\n\nUA.C = C;\nSIP.UA = UA;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 141)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///369\n");

/***/ }),
/* 370 */
/*!**************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Hacks.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview Hacks - This file contains all of the things we\n * wish we didn't have to do, just for interop.  It is similar to\n * Utils, which provides actually useful and relevant functions for\n * a SIP library. Methods in this file are grouped by vendor, so\n * as to most easily track when particular hacks may not be necessary anymore.\n */\n\nmodule.exports = function (SIP) {\n\n//keep to quiet jshint, and remain consistent with other files\nSIP = SIP;\n\nvar Hacks = {\n  AllBrowsers: {\n    maskDtls: function (sdp) {\n      if (sdp) {\n        sdp = sdp.replace(/ UDP\\/TLS\\/RTP\\/SAVP/gmi, \" RTP/SAVP\");\n      }\n      return sdp;\n    },\n    unmaskDtls: function (sdp) {\n      /**\n       * Chrome does not handle DTLS correctly (Canaray does, but not production)\n       * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)\n       *\n       * UPDATE: May 21, 2014\n       * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES\n       *\n       * UPDATE: 2014-09-24\n       * Opera now supports DTLS by default as well.\n       *\n       **/\n      return sdp.replace(/ RTP\\/SAVP/gmi, \" UDP/TLS/RTP/SAVP\");\n    }\n  },\n  Firefox: {\n    /* Condition to detect if hacks are applicable */\n    isFirefox: function () {\n      return typeof mozRTCPeerConnection !== 'undefined';\n    },\n\n    cannotHandleExtraWhitespace: function (sdp) {\n      if (this.isFirefox() && sdp) {\n        sdp = sdp.replace(/ \\r\\n/g, \"\\r\\n\");\n      }\n      return sdp;\n    },\n\n    hasMissingCLineInSDP: function (sdp) {\n      /*\n       * This is a Firefox hack to insert valid sdp when getDescription is\n       * called with the constraint offerToReceiveVideo = false.\n       * We search for either a c-line at the top of the sdp above all\n       * m-lines. If that does not exist then we search for a c-line\n       * beneath each m-line. If it is missing a c-line, we insert\n       * a fake c-line with the ip address 0.0.0.0. This is then valid\n       * sdp and no media will be sent for that m-line.\n       *\n       * Valid SDP is:\n       * m=\n       * i=\n       * c=\n       */\n      var insertAt, mlines;\n      if (sdp.indexOf('c=') > sdp.indexOf('m=')) {\n\n        // Find all m= lines\n        mlines = sdp.match(/m=.*\\r\\n.*/g);\n        for (var i=0; i<mlines.length; i++) {\n\n          // If it has an i= line, check if the next line is the c= line\n          if (mlines[i].toString().search(/i=.*/) >= 0) {\n            insertAt = sdp.indexOf(mlines[i].toString())+mlines[i].toString().length;\n            if (sdp.substr(insertAt,2)!=='c=') {\n              sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n            }\n\n          // else add the C line if it's missing\n          } else if (mlines[i].toString().search(/c=.*/) < 0) {\n            insertAt = sdp.indexOf(mlines[i].toString().match(/.*/))+mlines[i].toString().match(/.*/).toString().length;\n            sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n          }\n        }\n      }\n      return sdp;\n    },\n  },\n\n  Chrome: {\n    needsExplicitlyInactiveSDP: function (sdp) {\n      var sub, index;\n\n      if (Hacks.Firefox.isFirefox()) { // Fix this in Firefox before sending\n        index = sdp.indexOf('m=video 0');\n        if (index !== -1) {\n          sub = sdp.substr(index);\n          sub = sub.replace(/\\r\\nc=IN IP4.*\\r\\n$/,\n                            '\\r\\nc=IN IP4 0.0.0.0\\r\\na=inactive\\r\\n');\n          return sdp.substr(0, index) + sub;\n        }\n      }\n      return sdp;\n    },\n\n    getsConfusedAboutGUM: function (session) {\n      if (session.mediaHandler) {\n        session.mediaHandler.close();\n      }\n    }\n  }\n};\nreturn Hacks;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0hhY2tzLmpzPzJiMGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixpQkFBaUI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEhhY2tzIC0gVGhpcyBmaWxlIGNvbnRhaW5zIGFsbCBvZiB0aGUgdGhpbmdzIHdlXG4gKiB3aXNoIHdlIGRpZG4ndCBoYXZlIHRvIGRvLCBqdXN0IGZvciBpbnRlcm9wLiAgSXQgaXMgc2ltaWxhciB0b1xuICogVXRpbHMsIHdoaWNoIHByb3ZpZGVzIGFjdHVhbGx5IHVzZWZ1bCBhbmQgcmVsZXZhbnQgZnVuY3Rpb25zIGZvclxuICogYSBTSVAgbGlicmFyeS4gTWV0aG9kcyBpbiB0aGlzIGZpbGUgYXJlIGdyb3VwZWQgYnkgdmVuZG9yLCBzb1xuICogYXMgdG8gbW9zdCBlYXNpbHkgdHJhY2sgd2hlbiBwYXJ0aWN1bGFyIGhhY2tzIG1heSBub3QgYmUgbmVjZXNzYXJ5IGFueW1vcmUuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoU0lQKSB7XG5cbi8va2VlcCB0byBxdWlldCBqc2hpbnQsIGFuZCByZW1haW4gY29uc2lzdGVudCB3aXRoIG90aGVyIGZpbGVzXG5TSVAgPSBTSVA7XG5cbnZhciBIYWNrcyA9IHtcbiAgQWxsQnJvd3NlcnM6IHtcbiAgICBtYXNrRHRsczogZnVuY3Rpb24gKHNkcCkge1xuICAgICAgaWYgKHNkcCkge1xuICAgICAgICBzZHAgPSBzZHAucmVwbGFjZSgvIFVEUFxcL1RMU1xcL1JUUFxcL1NBVlAvZ21pLCBcIiBSVFAvU0FWUFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZHA7XG4gICAgfSxcbiAgICB1bm1hc2tEdGxzOiBmdW5jdGlvbiAoc2RwKSB7XG4gICAgICAvKipcbiAgICAgICAqIENocm9tZSBkb2VzIG5vdCBoYW5kbGUgRFRMUyBjb3JyZWN0bHkgKENhbmFyYXkgZG9lcywgYnV0IG5vdCBwcm9kdWN0aW9uKVxuICAgICAgICoga2VlcGluZyBDaHJvbWUgYXMgU0RFUyB1bnRpbCBEVExTIGlzIGZpeGVkIChjb21tZW50IG91dCAnaXNfb3BlcmEnIGNvbmRpdGlvbilcbiAgICAgICAqXG4gICAgICAgKiBVUERBVEU6IE1heSAyMSwgMjAxNFxuICAgICAgICogQ2hyb21lIDM1IG5vdyBwcm9wZXJseSBkZWZhdWx0cyB0byBEVExTLiAgT25seSBPcGVyYSByZW1haW5zIHVzaW5nIFNERVNcbiAgICAgICAqXG4gICAgICAgKiBVUERBVEU6IDIwMTQtMDktMjRcbiAgICAgICAqIE9wZXJhIG5vdyBzdXBwb3J0cyBEVExTIGJ5IGRlZmF1bHQgYXMgd2VsbC5cbiAgICAgICAqXG4gICAgICAgKiovXG4gICAgICByZXR1cm4gc2RwLnJlcGxhY2UoLyBSVFBcXC9TQVZQL2dtaSwgXCIgVURQL1RMUy9SVFAvU0FWUFwiKTtcbiAgICB9XG4gIH0sXG4gIEZpcmVmb3g6IHtcbiAgICAvKiBDb25kaXRpb24gdG8gZGV0ZWN0IGlmIGhhY2tzIGFyZSBhcHBsaWNhYmxlICovXG4gICAgaXNGaXJlZm94OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG1velJUQ1BlZXJDb25uZWN0aW9uICE9PSAndW5kZWZpbmVkJztcbiAgICB9LFxuXG4gICAgY2Fubm90SGFuZGxlRXh0cmFXaGl0ZXNwYWNlOiBmdW5jdGlvbiAoc2RwKSB7XG4gICAgICBpZiAodGhpcy5pc0ZpcmVmb3goKSAmJiBzZHApIHtcbiAgICAgICAgc2RwID0gc2RwLnJlcGxhY2UoLyBcXHJcXG4vZywgXCJcXHJcXG5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2RwO1xuICAgIH0sXG5cbiAgICBoYXNNaXNzaW5nQ0xpbmVJblNEUDogZnVuY3Rpb24gKHNkcCkge1xuICAgICAgLypcbiAgICAgICAqIFRoaXMgaXMgYSBGaXJlZm94IGhhY2sgdG8gaW5zZXJ0IHZhbGlkIHNkcCB3aGVuIGdldERlc2NyaXB0aW9uIGlzXG4gICAgICAgKiBjYWxsZWQgd2l0aCB0aGUgY29uc3RyYWludCBvZmZlclRvUmVjZWl2ZVZpZGVvID0gZmFsc2UuXG4gICAgICAgKiBXZSBzZWFyY2ggZm9yIGVpdGhlciBhIGMtbGluZSBhdCB0aGUgdG9wIG9mIHRoZSBzZHAgYWJvdmUgYWxsXG4gICAgICAgKiBtLWxpbmVzLiBJZiB0aGF0IGRvZXMgbm90IGV4aXN0IHRoZW4gd2Ugc2VhcmNoIGZvciBhIGMtbGluZVxuICAgICAgICogYmVuZWF0aCBlYWNoIG0tbGluZS4gSWYgaXQgaXMgbWlzc2luZyBhIGMtbGluZSwgd2UgaW5zZXJ0XG4gICAgICAgKiBhIGZha2UgYy1saW5lIHdpdGggdGhlIGlwIGFkZHJlc3MgMC4wLjAuMC4gVGhpcyBpcyB0aGVuIHZhbGlkXG4gICAgICAgKiBzZHAgYW5kIG5vIG1lZGlhIHdpbGwgYmUgc2VudCBmb3IgdGhhdCBtLWxpbmUuXG4gICAgICAgKlxuICAgICAgICogVmFsaWQgU0RQIGlzOlxuICAgICAgICogbT1cbiAgICAgICAqIGk9XG4gICAgICAgKiBjPVxuICAgICAgICovXG4gICAgICB2YXIgaW5zZXJ0QXQsIG1saW5lcztcbiAgICAgIGlmIChzZHAuaW5kZXhPZignYz0nKSA+IHNkcC5pbmRleE9mKCdtPScpKSB7XG5cbiAgICAgICAgLy8gRmluZCBhbGwgbT0gbGluZXNcbiAgICAgICAgbWxpbmVzID0gc2RwLm1hdGNoKC9tPS4qXFxyXFxuLiovZyk7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxtbGluZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgIC8vIElmIGl0IGhhcyBhbiBpPSBsaW5lLCBjaGVjayBpZiB0aGUgbmV4dCBsaW5lIGlzIHRoZSBjPSBsaW5lXG4gICAgICAgICAgaWYgKG1saW5lc1tpXS50b1N0cmluZygpLnNlYXJjaCgvaT0uKi8pID49IDApIHtcbiAgICAgICAgICAgIGluc2VydEF0ID0gc2RwLmluZGV4T2YobWxpbmVzW2ldLnRvU3RyaW5nKCkpK21saW5lc1tpXS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZHAuc3Vic3RyKGluc2VydEF0LDIpIT09J2M9Jykge1xuICAgICAgICAgICAgICBzZHAgPSBzZHAuc3Vic3RyKDAsaW5zZXJ0QXQpICsgJ1xcclxcbmM9SU4gSVA0IDAuMC4wLjAnICsgc2RwLnN1YnN0cihpbnNlcnRBdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBlbHNlIGFkZCB0aGUgQyBsaW5lIGlmIGl0J3MgbWlzc2luZ1xuICAgICAgICAgIH0gZWxzZSBpZiAobWxpbmVzW2ldLnRvU3RyaW5nKCkuc2VhcmNoKC9jPS4qLykgPCAwKSB7XG4gICAgICAgICAgICBpbnNlcnRBdCA9IHNkcC5pbmRleE9mKG1saW5lc1tpXS50b1N0cmluZygpLm1hdGNoKC8uKi8pKSttbGluZXNbaV0udG9TdHJpbmcoKS5tYXRjaCgvLiovKS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICAgIHNkcCA9IHNkcC5zdWJzdHIoMCxpbnNlcnRBdCkgKyAnXFxyXFxuYz1JTiBJUDQgMC4wLjAuMCcgKyBzZHAuc3Vic3RyKGluc2VydEF0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZHA7XG4gICAgfSxcbiAgfSxcblxuICBDaHJvbWU6IHtcbiAgICBuZWVkc0V4cGxpY2l0bHlJbmFjdGl2ZVNEUDogZnVuY3Rpb24gKHNkcCkge1xuICAgICAgdmFyIHN1YiwgaW5kZXg7XG5cbiAgICAgIGlmIChIYWNrcy5GaXJlZm94LmlzRmlyZWZveCgpKSB7IC8vIEZpeCB0aGlzIGluIEZpcmVmb3ggYmVmb3JlIHNlbmRpbmdcbiAgICAgICAgaW5kZXggPSBzZHAuaW5kZXhPZignbT12aWRlbyAwJyk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBzdWIgPSBzZHAuc3Vic3RyKGluZGV4KTtcbiAgICAgICAgICBzdWIgPSBzdWIucmVwbGFjZSgvXFxyXFxuYz1JTiBJUDQuKlxcclxcbiQvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHJcXG5jPUlOIElQNCAwLjAuMC4wXFxyXFxuYT1pbmFjdGl2ZVxcclxcbicpO1xuICAgICAgICAgIHJldHVybiBzZHAuc3Vic3RyKDAsIGluZGV4KSArIHN1YjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNkcDtcbiAgICB9LFxuXG4gICAgZ2V0c0NvbmZ1c2VkQWJvdXRHVU06IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICBpZiAoc2Vzc2lvbi5tZWRpYUhhbmRsZXIpIHtcbiAgICAgICAgc2Vzc2lvbi5tZWRpYUhhbmRsZXIuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5yZXR1cm4gSGFja3M7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0hhY2tzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///370\n");

/***/ }),
/* 371 */
/*!********************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/SanityCheck.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @fileoverview Incoming SIP Message Sanity Check\n */\n\n/**\n * SIP message sanity check.\n * @augments SIP\n * @function\n * @param {SIP.IncomingMessage} message\n * @param {SIP.UA} ua\n * @param {SIP.Transport} transport\n * @returns {Boolean}\n */\nmodule.exports = function (SIP) {\nvar sanityCheck,\n requests = [],\n responses = [],\n all = [];\n\n// Reply\nfunction reply(status_code, message, transport) {\n  var to,\n    response = SIP.Utils.buildStatusLine(status_code),\n    vias = message.getHeaders('via'),\n    length = vias.length,\n    idx = 0;\n\n  for(idx; idx < length; idx++) {\n    response += \"Via: \" + vias[idx] + \"\\r\\n\";\n  }\n\n  to = message.getHeader('To');\n\n  if(!message.to_tag) {\n    to += ';tag=' + SIP.Utils.newTag();\n  }\n\n  response += \"To: \" + to + \"\\r\\n\";\n  response += \"From: \" + message.getHeader('From') + \"\\r\\n\";\n  response += \"Call-ID: \" + message.call_id + \"\\r\\n\";\n  response += \"CSeq: \" + message.cseq + \" \" + message.method + \"\\r\\n\";\n  response += \"\\r\\n\";\n\n  transport.send(response);\n}\n\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at sipjsId, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_1_2_ sent-by mismatch\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n\n// Sanity Check functions for requests\nfunction rfc3261_8_2_2_1(message, ua, transport) {\n  if(!message.ruri || message.ruri.scheme !== 'sip') {\n    reply(416, message, transport);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4(message, ua, transport) {\n  if(!message.to_tag) {\n    if(message.call_id.substr(0, 5) === ua.configuration.sipjsId) {\n      reply(482, message, transport);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request(message, ua, transport) {\n  var len = SIP.Utils.str_utf8_length(message.body),\n  contentLength = message.getHeader('content-length');\n\n  if(len < contentLength) {\n    reply(400, message, transport);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2(message, ua, transport) {\n  var tr, idx,\n    fromTag = message.from_tag,\n    call_id = message.call_id,\n    cseq = message.cseq;\n\n  if(!message.to_tag) {\n    if(message.method === SIP.C.INVITE) {\n      tr = ua.transactions.ist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.ist) {\n          tr = ua.transactions.ist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482, message, transport);\n            return false;\n          }\n        }\n      }\n    } else {\n      tr = ua.transactions.nist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.nist) {\n          tr = ua.transactions.nist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482, message, transport);\n            return false;\n          }\n        }\n      }\n    }\n  }\n}\n\n// Sanity Check functions for responses\nfunction rfc3261_8_1_3_3(message, ua) {\n  if(message.getHeaders('via').length > 1) {\n    ua.getLogger('sip.sanitycheck').warn('More than one Via header field present in the response. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response(message, ua) {\n  var\n    len = SIP.Utils.str_utf8_length(message.body),\n    contentLength = message.getHeader('content-length');\n\n    if(len < contentLength) {\n      ua.getLogger('sip.sanitycheck').warn('Message body length is lower than the value in Content-Length header field. Dropping the response');\n      return false;\n    }\n}\n\n// Sanity Check functions for requests and responses\nfunction minimumHeaders(message, ua) {\n  var\n    mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],\n    idx = mandatoryHeaders.length;\n\n  while(idx--) {\n    if(!message.hasHeader(mandatoryHeaders[idx])) {\n      ua.getLogger('sip.sanitycheck').warn('Missing mandatory header field : '+ mandatoryHeaders[idx] +'. Dropping the response');\n      return false;\n    }\n  }\n}\n\nrequests.push(rfc3261_8_2_2_1);\nrequests.push(rfc3261_16_3_4);\nrequests.push(rfc3261_18_3_request);\nrequests.push(rfc3261_8_2_2_2);\n\nresponses.push(rfc3261_8_1_3_3);\n// responses.push(rfc3261_18_1_2);\nresponses.push(rfc3261_18_3_response);\n\nall.push(minimumHeaders);\n\nsanityCheck = function(message, ua, transport) {\n  var len, pass;\n\n  len = all.length;\n  while(len--) {\n    pass = all[len](message, ua, transport);\n    if(pass === false) {\n      return false;\n    }\n  }\n\n  if(message instanceof SIP.IncomingRequest) {\n    len = requests.length;\n    while(len--) {\n      pass = requests[len](message, ua, transport);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  else if(message instanceof SIP.IncomingResponse) {\n    len = responses.length;\n    while(len--) {\n      pass = responses[len](message, ua, transport);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  //Everything is OK\n  return true;\n};\n\nSIP.sanityCheck = sanityCheck;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///371\n");

/***/ }),
/* 372 */
/*!*****************************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/DigestAuthentication.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @fileoverview SIP Digest Authentication\n */\n\n/**\n * SIP Digest Authentication.\n * @augments SIP.\n * @function Digest Authentication\n * @param {SIP.UA} ua\n */\nmodule.exports = function (Utils) {\nvar DigestAuthentication;\n\nDigestAuthentication = function(ua) {\n  this.logger = ua.getLogger('sipjs.digestauthentication');\n  this.username = ua.configuration.authorizationUser;\n  this.password = ua.configuration.password;\n  this.cnonce = null;\n  this.nc = 0;\n  this.ncHex = '00000000';\n  this.response = null;\n};\n\n\n/**\n* Performs Digest authentication given a SIP request and the challenge\n* received in a response to that request.\n* Returns true if credentials were successfully generated, false otherwise.\n*\n* @param {SIP.OutgoingRequest} request\n* @param {Object} challenge\n*/\nDigestAuthentication.prototype.authenticate = function(request, challenge) {\n  // Inspect and validate the challenge.\n\n  this.algorithm = challenge.algorithm;\n  this.realm = challenge.realm;\n  this.nonce = challenge.nonce;\n  this.opaque = challenge.opaque;\n  this.stale = challenge.stale;\n\n  if (this.algorithm) {\n    if (this.algorithm !== 'MD5') {\n      this.logger.warn('challenge with Digest algorithm different than \"MD5\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.algorithm = 'MD5';\n  }\n\n  if (! this.realm) {\n    this.logger.warn('challenge without Digest realm, authentication aborted');\n    return false;\n  }\n\n  if (! this.nonce) {\n    this.logger.warn('challenge without Digest nonce, authentication aborted');\n    return false;\n  }\n\n  // 'qop' can contain a list of values (Array). Let's choose just one.\n  if (challenge.qop) {\n    if (challenge.qop.indexOf('auth') > -1) {\n      this.qop = 'auth';\n    } else if (challenge.qop.indexOf('auth-int') > -1) {\n      this.qop = 'auth-int';\n    } else {\n      // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n      this.logger.warn('challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.qop = null;\n  }\n\n  // Fill other attributes.\n\n  this.method = request.method;\n  this.uri = request.ruri;\n  this.cnonce = Utils.createRandomToken(12);\n  this.nc += 1;\n  this.updateNcHex();\n\n  // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n  if (this.nc === 4294967296) {\n    this.nc = 1;\n    this.ncHex = '00000001';\n  }\n\n  // Calculate the Digest \"response\" value.\n  this.calculateResponse();\n\n  return true;\n};\n\n\n/**\n* Generate Digest 'response' value.\n* @private\n*/\nDigestAuthentication.prototype.calculateResponse = function() {\n  var ha1, ha2;\n\n  // HA1 = MD5(A1) = MD5(username:realm:password)\n  ha1 = Utils.calculateMD5(this.username + \":\" + this.realm + \":\" + this.password);\n\n  if (this.qop === 'auth') {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n\n  } else if (this.qop === 'auth-int') {\n    // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri + \":\" + Utils.calculateMD5(this.body ? this.body : \"\"));\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n\n  } else if (this.qop === null) {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n  }\n};\n\n\n/**\n* Return the Proxy-Authorization or WWW-Authorization header value.\n*/\nDigestAuthentication.prototype.toString = function() {\n  var auth_params = [];\n\n  if (! this.response) {\n    throw new Error('response field does not exist, cannot generate Authorization header');\n  }\n\n  auth_params.push('algorithm=' + this.algorithm);\n  auth_params.push('username=\"' + this.username + '\"');\n  auth_params.push('realm=\"' + this.realm + '\"');\n  auth_params.push('nonce=\"' + this.nonce + '\"');\n  auth_params.push('uri=\"' + this.uri + '\"');\n  auth_params.push('response=\"' + this.response + '\"');\n  if (this.opaque) {\n    auth_params.push('opaque=\"' + this.opaque + '\"');\n  }\n  if (this.qop) {\n    auth_params.push('qop=' + this.qop);\n    auth_params.push('cnonce=\"' + this.cnonce + '\"');\n    auth_params.push('nc=' + this.ncHex);\n  }\n\n  return 'Digest ' + auth_params.join(', ');\n};\n\n\n/**\n* Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n* @private\n*/\nDigestAuthentication.prototype.updateNcHex = function() {\n  var hex = Number(this.nc).toString(16);\n  this.ncHex = '00000000'.substr(0, 8-hex.length) + hex;\n};\n\nreturn DigestAuthentication;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///372\n");

/***/ }),
/* 373 */
/*!****************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Grammar.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar Grammar = __webpack_require__(/*! ./Grammar/dist/Grammar */ 374);\n\nmodule.exports = function (SIP) {\n\nreturn {\n  parse: function parseCustom (input, startRule) {\n    var options = {startRule: startRule, SIP: SIP};\n    try {\n      Grammar.parse(input, options);\n    } catch (e) {\n      options.data = -1;\n    }\n    return options.data;\n  }\n};\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9zaXAuanMvc3JjL0dyYW1tYXIuanM/YjQ4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGNBQWMsbUJBQU8sQ0FBQyxpQ0FBd0I7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjM3My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIEdyYW1tYXIgPSByZXF1aXJlKCcuL0dyYW1tYXIvZGlzdC9HcmFtbWFyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFNJUCkge1xuXG5yZXR1cm4ge1xuICBwYXJzZTogZnVuY3Rpb24gcGFyc2VDdXN0b20gKGlucHV0LCBzdGFydFJ1bGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtzdGFydFJ1bGU6IHN0YXJ0UnVsZSwgU0lQOiBTSVB9O1xuICAgIHRyeSB7XG4gICAgICBHcmFtbWFyLnBhcnNlKGlucHV0LCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnMuZGF0YTtcbiAgfVxufTtcblxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vc2lwLmpzL3NyYy9HcmFtbWFyLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///373\n");

/***/ }),
/* 374 */
/*!*****************************************************************!*\
  !*** ./node_modules/@twilio/sip.js/src/Grammar/dist/Grammar.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleIndices = { Contact: 118, Name_Addr_Header: 155, Record_Route: 175, Request_Response: 81, SIP_URI: 45, Subscription_State: 185, Supported: 190, Require: 181, Via: 193, absoluteURI: 84, Call_ID: 117, Content_Disposition: 129, Content_Length: 134, Content_Type: 135, CSeq: 145, displayName: 121, Event: 148, From: 150, host: 52, Max_Forwards: 153, Min_SE: 212, Proxy_Authenticate: 156, quoted_string: 40, Refer_To: 177, Replaces: 178, Session_Expires: 209, stun_URI: 216, To: 191, turn_URI: 223, uuid: 226, WWW_Authenticate: 208, challenge: 157 },\n        peg$startRuleIndex   = 118,\n\n        peg$consts = [\n          \"\\r\\n\",\n          { type: \"literal\", value: \"\\r\\n\", description: \"\\\"\\\\r\\\\n\\\"\" },\n          /^[0-9]/,\n          { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n          /^[a-zA-Z]/,\n          { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n          /^[0-9a-fA-F]/,\n          { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\n          /^[\\0-\\xFF]/,\n          { type: \"class\", value: \"[\\\\0-\\\\xFF]\", description: \"[\\\\0-\\\\xFF]\" },\n          /^[\"]/,\n          { type: \"class\", value: \"[\\\"]\", description: \"[\\\"]\" },\n          \" \",\n          { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n          \"\\t\",\n          { type: \"literal\", value: \"\\t\", description: \"\\\"\\\\t\\\"\" },\n          /^[a-zA-Z0-9]/,\n          { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n          \";\",\n          { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\n          \"/\",\n          { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n          \"?\",\n          { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n          \":\",\n          { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n          \"@\",\n          { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n          \"&\",\n          { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n          \"=\",\n          { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n          \"+\",\n          { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n          \"$\",\n          { type: \"literal\", value: \"$\", description: \"\\\"$\\\"\" },\n          \",\",\n          { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n          \"-\",\n          { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n          \"_\",\n          { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n          \".\",\n          { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n          \"!\",\n          { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n          \"~\",\n          { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n          \"*\",\n          { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n          \"'\",\n          { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n          \"(\",\n          { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n          \")\",\n          { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n          peg$FAILED,\n          \"%\",\n          { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n          null,\n          [],\n          function() {return \" \"; },\n          function() {return ':'; },\n          /^[!-~]/,\n          { type: \"class\", value: \"[!-~]\", description: \"[!-~]\" },\n          /^[\\x80-\\uFFFF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\uFFFF]\", description: \"[\\\\x80-\\\\uFFFF]\" },\n          /^[\\x80-\\xBF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\xBF]\", description: \"[\\\\x80-\\\\xBF]\" },\n          /^[a-f]/,\n          { type: \"class\", value: \"[a-f]\", description: \"[a-f]\" },\n          \"`\",\n          { type: \"literal\", value: \"`\", description: \"\\\"`\\\"\" },\n          \"<\",\n          { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n          \">\",\n          { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n          \"\\\\\",\n          { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n          \"[\",\n          { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n          \"]\",\n          { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n          \"{\",\n          { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n          \"}\",\n          { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n          function() {return \"*\"; },\n          function() {return \"/\"; },\n          function() {return \"=\"; },\n          function() {return \"(\"; },\n          function() {return \")\"; },\n          function() {return \">\"; },\n          function() {return \"<\"; },\n          function() {return \",\"; },\n          function() {return \";\"; },\n          function() {return \":\"; },\n          function() {return \"\\\"\"; },\n          /^[!-']/,\n          { type: \"class\", value: \"[!-']\", description: \"[!-']\" },\n          /^[*-[]/,\n          { type: \"class\", value: \"[*-[]\", description: \"[*-[]\" },\n          /^[\\]-~]/,\n          { type: \"class\", value: \"[\\\\]-~]\", description: \"[\\\\]-~]\" },\n          function(contents) {\n                                  return contents; },\n          /^[#-[]/,\n          { type: \"class\", value: \"[#-[]\", description: \"[#-[]\" },\n          /^[\\0-\\t]/,\n          { type: \"class\", value: \"[\\\\0-\\\\t]\", description: \"[\\\\0-\\\\t]\" },\n          /^[\\x0B-\\f]/,\n          { type: \"class\", value: \"[\\\\x0B-\\\\f]\", description: \"[\\\\x0B-\\\\f]\" },\n          /^[\\x0E-]/,\n          { type: \"class\", value: \"[\\\\x0E-]\", description: \"[\\\\x0E-]\" },\n          function() {\n                                  options.data.uri = new options.SIP.URI(options.data.scheme, options.data.user, options.data.host, options.data.port);\n                                  delete options.data.scheme;\n                                  delete options.data.user;\n                                  delete options.data.host;\n                                  delete options.data.host_type;\n                                  delete options.data.port;\n                                },\n          function() {\n                                  options.data.uri = new options.SIP.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);\n                                  delete options.data.scheme;\n                                  delete options.data.user;\n                                  delete options.data.host;\n                                  delete options.data.host_type;\n                                  delete options.data.port;\n                                  delete options.data.uri_params;\n\n                                  if (options.startRule === 'SIP_URI') { options.data = options.data.uri;}\n                                },\n          \"sips\",\n          { type: \"literal\", value: \"sips\", description: \"\\\"sips\\\"\" },\n          \"sip\",\n          { type: \"literal\", value: \"sip\", description: \"\\\"sip\\\"\" },\n          function(uri_scheme) {\n                              options.data.scheme = uri_scheme; },\n          function() {\n                              options.data.user = decodeURIComponent(text().slice(0, -1));},\n          function() {\n                              options.data.password = text(); },\n          function() {\n                              options.data.host = text();\n                              return options.data.host; },\n          function() {\n                            options.data.host_type = 'domain';\n                            return text(); },\n          /^[a-zA-Z0-9_\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9_\\\\-]\", description: \"[a-zA-Z0-9_\\\\-]\" },\n          /^[a-zA-Z0-9\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9\\\\-]\", description: \"[a-zA-Z0-9\\\\-]\" },\n          function() {\n                              options.data.host_type = 'IPv6';\n                              return text(); },\n          \"::\",\n          { type: \"literal\", value: \"::\", description: \"\\\"::\\\"\" },\n          function() {\n                            options.data.host_type = 'IPv6';\n                            return text(); },\n          function() {\n                              options.data.host_type = 'IPv4';\n                              return text(); },\n          \"25\",\n          { type: \"literal\", value: \"25\", description: \"\\\"25\\\"\" },\n          /^[0-5]/,\n          { type: \"class\", value: \"[0-5]\", description: \"[0-5]\" },\n          \"2\",\n          { type: \"literal\", value: \"2\", description: \"\\\"2\\\"\" },\n          /^[0-4]/,\n          { type: \"class\", value: \"[0-4]\", description: \"[0-4]\" },\n          \"1\",\n          { type: \"literal\", value: \"1\", description: \"\\\"1\\\"\" },\n          /^[1-9]/,\n          { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n          function(port) {\n                              port = parseInt(port.join(''));\n                              options.data.port = port;\n                              return port; },\n          \"transport=\",\n          { type: \"literal\", value: \"transport=\", description: \"\\\"transport=\\\"\" },\n          \"udp\",\n          { type: \"literal\", value: \"udp\", description: \"\\\"udp\\\"\" },\n          \"tcp\",\n          { type: \"literal\", value: \"tcp\", description: \"\\\"tcp\\\"\" },\n          \"sctp\",\n          { type: \"literal\", value: \"sctp\", description: \"\\\"sctp\\\"\" },\n          \"tls\",\n          { type: \"literal\", value: \"tls\", description: \"\\\"tls\\\"\" },\n          function(transport) {\n                                if(!options.data.uri_params) options.data.uri_params={};\n                                options.data.uri_params['transport'] = transport.toLowerCase(); },\n          \"user=\",\n          { type: \"literal\", value: \"user=\", description: \"\\\"user=\\\"\" },\n          \"phone\",\n          { type: \"literal\", value: \"phone\", description: \"\\\"phone\\\"\" },\n          \"ip\",\n          { type: \"literal\", value: \"ip\", description: \"\\\"ip\\\"\" },\n          function(user) {\n                                if(!options.data.uri_params) options.data.uri_params={};\n                                options.data.uri_params['user'] = user.toLowerCase(); },\n          \"method=\",\n          { type: \"literal\", value: \"method=\", description: \"\\\"method=\\\"\" },\n          function(method) {\n                                if(!options.data.uri_params) options.data.uri_params={};\n                                options.data.uri_params['method'] = method; },\n          \"ttl=\",\n          { type: \"literal\", value: \"ttl=\", description: \"\\\"ttl=\\\"\" },\n          function(ttl) {\n                                if(!options.data.params) options.data.params={};\n                                options.data.params['ttl'] = ttl; },\n          \"maddr=\",\n          { type: \"literal\", value: \"maddr=\", description: \"\\\"maddr=\\\"\" },\n          function(maddr) {\n                                if(!options.data.uri_params) options.data.uri_params={};\n                                options.data.uri_params['maddr'] = maddr; },\n          \"lr\",\n          { type: \"literal\", value: \"lr\", description: \"\\\"lr\\\"\" },\n          function() {\n                                if(!options.data.uri_params) options.data.uri_params={};\n                                options.data.uri_params['lr'] = undefined; },\n          function(param, value) {\n                                if(!options.data.uri_params) options.data.uri_params = {};\n                                if (value === null){\n                                  value = undefined;\n                                }\n                                else {\n                                  value = value[1];\n                                }\n                                options.data.uri_params[param.toLowerCase()] = value && value.toLowerCase();},\n          function(hname, hvalue) {\n                                hname = hname.join('').toLowerCase();\n                                hvalue = hvalue.join('');\n                                if(!options.data.uri_headers) options.data.uri_headers = {};\n                                if (!options.data.uri_headers[hname]) {\n                                  options.data.uri_headers[hname] = [hvalue];\n                                } else {\n                                  options.data.uri_headers[hname].push(hvalue);\n                                }},\n          function() {\n                                // lots of tests fail if this isn't guarded...\n                                if (options.startRule === 'Refer_To') {\n                                  options.data.uri = new options.SIP.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);\n                                  delete options.data.scheme;\n                                  delete options.data.user;\n                                  delete options.data.host;\n                                  delete options.data.host_type;\n                                  delete options.data.port;\n                                  delete options.data.uri_params;\n                                }\n                              },\n          \"//\",\n          { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n          function() {\n                              options.data.scheme= text(); },\n          { type: \"literal\", value: \"SIP\", description: \"\\\"SIP\\\"\" },\n          function() {\n                              options.data.sip_version = text(); },\n          \"INVITE\",\n          { type: \"literal\", value: \"INVITE\", description: \"\\\"INVITE\\\"\" },\n          \"ACK\",\n          { type: \"literal\", value: \"ACK\", description: \"\\\"ACK\\\"\" },\n          \"VXACH\",\n          { type: \"literal\", value: \"VXACH\", description: \"\\\"VXACH\\\"\" },\n          \"OPTIONS\",\n          { type: \"literal\", value: \"OPTIONS\", description: \"\\\"OPTIONS\\\"\" },\n          \"BYE\",\n          { type: \"literal\", value: \"BYE\", description: \"\\\"BYE\\\"\" },\n          \"CANCEL\",\n          { type: \"literal\", value: \"CANCEL\", description: \"\\\"CANCEL\\\"\" },\n          \"REGISTER\",\n          { type: \"literal\", value: \"REGISTER\", description: \"\\\"REGISTER\\\"\" },\n          \"SUBSCRIBE\",\n          { type: \"literal\", value: \"SUBSCRIBE\", description: \"\\\"SUBSCRIBE\\\"\" },\n          \"NOTIFY\",\n          { type: \"literal\", value: \"NOTIFY\", description: \"\\\"NOTIFY\\\"\" },\n          \"REFER\",\n          { type: \"literal\", value: \"REFER\", description: \"\\\"REFER\\\"\" },\n          function() {\n\n                              options.data.method = text();\n                              return options.data.method; },\n          function(status_code) {\n                            options.data.status_code = parseInt(status_code.join('')); },\n          function() {\n                            options.data.reason_phrase = text(); },\n          function() {\n                        options.data = text(); },\n          function() {\n                                  var idx, length;\n                                  length = options.data.multi_header.length;\n                                  for (idx = 0; idx < length; idx++) {\n                                    if (options.data.multi_header[idx].parsed === null) {\n                                      options.data = null;\n                                      break;\n                                    }\n                                  }\n                                  if (options.data !== null) {\n                                    options.data = options.data.multi_header;\n                                  } else {\n                                    options.data = -1;\n                                  }},\n          function() {\n                                  var header;\n                                  if(!options.data.multi_header) options.data.multi_header = [];\n                                  try {\n                                    header = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                                    delete options.data.uri;\n                                    delete options.data.displayName;\n                                    delete options.data.params;\n                                  } catch(e) {\n                                    header = null;\n                                  }\n                                  options.data.multi_header.push( { 'position': peg$currPos,\n                                                            'offset': offset(),\n                                                            'parsed': header\n                                                          });},\n          function(displayName) {\n                                  displayName = text().trim();\n                                  if (displayName[0] === '\\\"') {\n                                    displayName = displayName.substring(1, displayName.length-1);\n                                  }\n                                  options.data.displayName = displayName; },\n          \"q\",\n          { type: \"literal\", value: \"q\", description: \"\\\"q\\\"\" },\n          function(q) {\n                                  if(!options.data.params) options.data.params = {};\n                                  options.data.params['q'] = q; },\n          \"expires\",\n          { type: \"literal\", value: \"expires\", description: \"\\\"expires\\\"\" },\n          function(expires) {\n                                  if(!options.data.params) options.data.params = {};\n                                  options.data.params['expires'] = expires; },\n          function(delta_seconds) {\n                                  return parseInt(delta_seconds.join('')); },\n          \"0\",\n          { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n          function() {\n                                  return parseFloat(text()); },\n          function(param, value) {\n                                  if(!options.data.params) options.data.params = {};\n                                  if (value === null){\n                                    value = undefined;\n                                  }\n                                  else {\n                                    value = value[1];\n                                  }\n                                  options.data.params[param.toLowerCase()] = value;},\n          \"render\",\n          { type: \"literal\", value: \"render\", description: \"\\\"render\\\"\" },\n          \"session\",\n          { type: \"literal\", value: \"session\", description: \"\\\"session\\\"\" },\n          \"icon\",\n          { type: \"literal\", value: \"icon\", description: \"\\\"icon\\\"\" },\n          \"alert\",\n          { type: \"literal\", value: \"alert\", description: \"\\\"alert\\\"\" },\n          function() {\n                                      if (options.startRule === 'Content_Disposition') {\n                                        options.data.type = text().toLowerCase();\n                                      }\n                                    },\n          \"handling\",\n          { type: \"literal\", value: \"handling\", description: \"\\\"handling\\\"\" },\n          \"optional\",\n          { type: \"literal\", value: \"optional\", description: \"\\\"optional\\\"\" },\n          \"required\",\n          { type: \"literal\", value: \"required\", description: \"\\\"required\\\"\" },\n          function(length) {\n                                  options.data = parseInt(length.join('')); },\n          function() {\n                                  options.data = text(); },\n          \"text\",\n          { type: \"literal\", value: \"text\", description: \"\\\"text\\\"\" },\n          \"image\",\n          { type: \"literal\", value: \"image\", description: \"\\\"image\\\"\" },\n          \"audio\",\n          { type: \"literal\", value: \"audio\", description: \"\\\"audio\\\"\" },\n          \"video\",\n          { type: \"literal\", value: \"video\", description: \"\\\"video\\\"\" },\n          \"application\",\n          { type: \"literal\", value: \"application\", description: \"\\\"application\\\"\" },\n          \"message\",\n          { type: \"literal\", value: \"message\", description: \"\\\"message\\\"\" },\n          \"multipart\",\n          { type: \"literal\", value: \"multipart\", description: \"\\\"multipart\\\"\" },\n          \"x-\",\n          { type: \"literal\", value: \"x-\", description: \"\\\"x-\\\"\" },\n          function(cseq_value) {\n                            options.data.value=parseInt(cseq_value.join('')); },\n          function(expires) {options.data = expires; },\n          function(event_type) {\n                                 options.data.event = event_type.toLowerCase(); },\n          function() {\n                          var tag = options.data.tag;\n                            options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                            if (tag) {options.data.setParam('tag',tag)}\n                          },\n          \"tag\",\n          { type: \"literal\", value: \"tag\", description: \"\\\"tag\\\"\" },\n          function(tag) {options.data.tag = tag; },\n          function(forwards) {\n                            options.data = parseInt(forwards.join('')); },\n          function(min_expires) {options.data = min_expires; },\n          function() {\n                                  options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                                },\n          \"digest\",\n          { type: \"literal\", value: \"Digest\", description: \"\\\"Digest\\\"\" },\n          \"realm\",\n          { type: \"literal\", value: \"realm\", description: \"\\\"realm\\\"\" },\n          function(realm) { options.data.realm = realm; },\n          \"domain\",\n          { type: \"literal\", value: \"domain\", description: \"\\\"domain\\\"\" },\n          \"nonce\",\n          { type: \"literal\", value: \"nonce\", description: \"\\\"nonce\\\"\" },\n          function(nonce) { options.data.nonce=nonce; },\n          \"opaque\",\n          { type: \"literal\", value: \"opaque\", description: \"\\\"opaque\\\"\" },\n          function(opaque) { options.data.opaque=opaque; },\n          \"stale\",\n          { type: \"literal\", value: \"stale\", description: \"\\\"stale\\\"\" },\n          \"true\",\n          { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n          function() { options.data.stale=true; },\n          \"false\",\n          { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n          function() { options.data.stale=false; },\n          \"algorithm\",\n          { type: \"literal\", value: \"algorithm\", description: \"\\\"algorithm\\\"\" },\n          \"md5\",\n          { type: \"literal\", value: \"MD5\", description: \"\\\"MD5\\\"\" },\n          \"md5-sess\",\n          { type: \"literal\", value: \"MD5-sess\", description: \"\\\"MD5-sess\\\"\" },\n          function(algorithm) {\n                                options.data.algorithm=algorithm.toUpperCase(); },\n          \"qop\",\n          { type: \"literal\", value: \"qop\", description: \"\\\"qop\\\"\" },\n          \"auth-int\",\n          { type: \"literal\", value: \"auth-int\", description: \"\\\"auth-int\\\"\" },\n          \"auth\",\n          { type: \"literal\", value: \"auth\", description: \"\\\"auth\\\"\" },\n          function(qop_value) {\n                                  options.data.qop || (options.data.qop=[]);\n                                  options.data.qop.push(qop_value.toLowerCase()); },\n          function(rack_value) {\n                            options.data.value=parseInt(rack_value.join('')); },\n          function() {\n                            var idx, length;\n                            length = options.data.multi_header.length;\n                            for (idx = 0; idx < length; idx++) {\n                              if (options.data.multi_header[idx].parsed === null) {\n                                options.data = null;\n                                break;\n                              }\n                            }\n                            if (options.data !== null) {\n                              options.data = options.data.multi_header;\n                            } else {\n                              options.data = -1;\n                            }},\n          function() {\n                            var header;\n                            if(!options.data.multi_header) options.data.multi_header = [];\n                            try {\n                              header = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                              delete options.data.uri;\n                              delete options.data.displayName;\n                              delete options.data.params;\n                            } catch(e) {\n                              header = null;\n                            }\n                            options.data.multi_header.push( { 'position': peg$currPos,\n                                                      'offset': offset(),\n                                                      'parsed': header\n                                                    });},\n          function() {\n                        options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                      },\n          function() {\n                                if (!(options.data.replaces_from_tag && options.data.replaces_to_tag)) {\n                                  options.data = -1;\n                                }\n                              },\n          function() {\n                                options.data = {\n                                  call_id: options.data\n                                };\n                              },\n          \"from-tag\",\n          { type: \"literal\", value: \"from-tag\", description: \"\\\"from-tag\\\"\" },\n          function(from_tag) {\n                                options.data.replaces_from_tag = from_tag;\n                              },\n          \"to-tag\",\n          { type: \"literal\", value: \"to-tag\", description: \"\\\"to-tag\\\"\" },\n          function(to_tag) {\n                                options.data.replaces_to_tag = to_tag;\n                              },\n          \"early-only\",\n          { type: \"literal\", value: \"early-only\", description: \"\\\"early-only\\\"\" },\n          function() {\n                                options.data.early_only = true;\n                              },\n          function(r) {return r;},\n          function(first, rest) { return list(first, rest); },\n          function(value) {\n                          if (options.startRule === 'Require') {\n                            options.data = value || [];\n                          }\n                        },\n          function(rseq_value) {\n                            options.data.value=parseInt(rseq_value.join('')); },\n          \"active\",\n          { type: \"literal\", value: \"active\", description: \"\\\"active\\\"\" },\n          \"pending\",\n          { type: \"literal\", value: \"pending\", description: \"\\\"pending\\\"\" },\n          \"terminated\",\n          { type: \"literal\", value: \"terminated\", description: \"\\\"terminated\\\"\" },\n          function() {\n                                  options.data.state = text(); },\n          \"reason\",\n          { type: \"literal\", value: \"reason\", description: \"\\\"reason\\\"\" },\n          function(reason) {\n                                  if (typeof reason !== 'undefined') options.data.reason = reason; },\n          function(expires) {\n                                  if (typeof expires !== 'undefined') options.data.expires = expires; },\n          \"retry_after\",\n          { type: \"literal\", value: \"retry_after\", description: \"\\\"retry_after\\\"\" },\n          function(retry_after) {\n                                  if (typeof retry_after !== 'undefined') options.data.retry_after = retry_after; },\n          \"deactivated\",\n          { type: \"literal\", value: \"deactivated\", description: \"\\\"deactivated\\\"\" },\n          \"probation\",\n          { type: \"literal\", value: \"probation\", description: \"\\\"probation\\\"\" },\n          \"rejected\",\n          { type: \"literal\", value: \"rejected\", description: \"\\\"rejected\\\"\" },\n          \"timeout\",\n          { type: \"literal\", value: \"timeout\", description: \"\\\"timeout\\\"\" },\n          \"giveup\",\n          { type: \"literal\", value: \"giveup\", description: \"\\\"giveup\\\"\" },\n          \"noresource\",\n          { type: \"literal\", value: \"noresource\", description: \"\\\"noresource\\\"\" },\n          \"invariant\",\n          { type: \"literal\", value: \"invariant\", description: \"\\\"invariant\\\"\" },\n          function(value) {\n                          if (options.startRule === 'Supported') {\n                            options.data = value || [];\n                          }\n                        },\n          function() {\n                        var tag = options.data.tag;\n                          options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                          if (tag) {options.data.setParam('tag',tag)}\n                        },\n          \"ttl\",\n          { type: \"literal\", value: \"ttl\", description: \"\\\"ttl\\\"\" },\n          function(via_ttl_value) {\n                                options.data.ttl = via_ttl_value; },\n          \"maddr\",\n          { type: \"literal\", value: \"maddr\", description: \"\\\"maddr\\\"\" },\n          function(via_maddr) {\n                                options.data.maddr = via_maddr; },\n          \"received\",\n          { type: \"literal\", value: \"received\", description: \"\\\"received\\\"\" },\n          function(via_received) {\n                                options.data.received = via_received; },\n          \"branch\",\n          { type: \"literal\", value: \"branch\", description: \"\\\"branch\\\"\" },\n          function(via_branch) {\n                                options.data.branch = via_branch; },\n          \"rport\",\n          { type: \"literal\", value: \"rport\", description: \"\\\"rport\\\"\" },\n          function() {\n                                if(typeof response_port !== 'undefined')\n                                  options.data.rport = response_port.join(''); },\n          function(via_protocol) {\n                                options.data.protocol = via_protocol; },\n          { type: \"literal\", value: \"UDP\", description: \"\\\"UDP\\\"\" },\n          { type: \"literal\", value: \"TCP\", description: \"\\\"TCP\\\"\" },\n          { type: \"literal\", value: \"TLS\", description: \"\\\"TLS\\\"\" },\n          { type: \"literal\", value: \"SCTP\", description: \"\\\"SCTP\\\"\" },\n          function(via_transport) {\n                                options.data.transport = via_transport; },\n          function() {\n                                options.data.host = text(); },\n          function(via_sent_by_port) {\n                                options.data.port = parseInt(via_sent_by_port.join('')); },\n          function(ttl) {\n                                return parseInt(ttl.join('')); },\n          function(deltaSeconds) {\n                                if (options.startRule === 'Session_Expires') {\n                                  options.data.deltaSeconds = deltaSeconds;\n                                }\n                              },\n          \"refresher\",\n          { type: \"literal\", value: \"refresher\", description: \"\\\"refresher\\\"\" },\n          \"uas\",\n          { type: \"literal\", value: \"uas\", description: \"\\\"uas\\\"\" },\n          \"uac\",\n          { type: \"literal\", value: \"uac\", description: \"\\\"uac\\\"\" },\n          function(endpoint) {\n                                if (options.startRule === 'Session_Expires') {\n                                  options.data.refresher = endpoint;\n                                }\n                              },\n          function(deltaSeconds) {\n                                if (options.startRule === 'Min_SE') {\n                                  options.data = deltaSeconds;\n                                }\n                              },\n          \"stuns\",\n          { type: \"literal\", value: \"stuns\", description: \"\\\"stuns\\\"\" },\n          \"stun\",\n          { type: \"literal\", value: \"stun\", description: \"\\\"stun\\\"\" },\n          function(scheme) {\n                                options.data.scheme = scheme; },\n          function(host) {\n                                options.data.host = host; },\n          \"?transport=\",\n          { type: \"literal\", value: \"?transport=\", description: \"\\\"?transport=\\\"\" },\n          \"turns\",\n          { type: \"literal\", value: \"turns\", description: \"\\\"turns\\\"\" },\n          \"turn\",\n          { type: \"literal\", value: \"turn\", description: \"\\\"turn\\\"\" },\n          function() {\n                                options.data.transport = transport; },\n          function() {\n                            options.data = text(); }\n        ],\n\n        peg$bytecode = [\n          peg$decode(\". \\\"\\\"2 3!\"),\n          peg$decode(\"0\\\"\\\"\\\"1!3#\"),\n          peg$decode(\"0$\\\"\\\"1!3%\"),\n          peg$decode(\"0&\\\"\\\"1!3'\"),\n          peg$decode(\"7'*# \\\"7(\"),\n          peg$decode(\"0(\\\"\\\"1!3)\"),\n          peg$decode(\"0*\\\"\\\"1!3+\"),\n          peg$decode(\".,\\\"\\\"2,3-\"),\n          peg$decode(\"..\\\"\\\"2.3/\"),\n          peg$decode(\"00\\\"\\\"1!31\"),\n          peg$decode(\".2\\\"\\\"2233*\\x89 \\\".4\\\"\\\"2435*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"7)*# \\\"7,\"),\n          peg$decode(\".F\\\"\\\"2F3G*} \\\".H\\\"\\\"2H3I*q \\\".J\\\"\\\"2J3K*e \\\".L\\\"\\\"2L3M*Y \\\".N\\\"\\\"2N3O*M \\\".P\\\"\\\"2P3Q*A \\\".R\\\"\\\"2R3S*5 \\\".T\\\"\\\"2T3U*) \\\".V\\\"\\\"2V3W\"),\n          peg$decode(\"!!.Y\\\"\\\"2Y3Z+7$7#+-%7#+#%'#%$## X$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!! \\\\7$,#&7$\\\"+-$7 +#%'\\\"%$\\\"# X\\\"# X*# \\\" [+@$ \\\\7$+&$,#&7$\\\"\\\"\\\" X+'%4\\\"6]\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*# \\\" [\"),\n          peg$decode(\"! \\\\7'*# \\\"7(,)&7'*# \\\"7(\\\"+A$.8\\\"\\\"2839+1%7/+'%4#6^# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!! \\\\72+&$,#&72\\\"\\\"\\\" X+o$ \\\\! \\\\7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X,@&! \\\\7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"0_\\\"\\\"1!3`*# \\\"73\"),\n          peg$decode(\"0a\\\"\\\"1!3b\"),\n          peg$decode(\"0c\\\"\\\"1!3d\"),\n          peg$decode(\"7!*) \\\"0e\\\"\\\"1!3f\"),\n          peg$decode(\"! \\\\7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".g\\\"\\\"2g3h*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x9E$,\\x9B&7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".g\\\"\\\"2g3h*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+! (%\"),\n          peg$decode(\"! \\\\7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".g\\\"\\\"2g3h*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x92$,\\x8F&7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".g\\\"\\\"2g3h*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+! (%\"),\n          peg$decode(\".T\\\"\\\"2T3U*\\xE3 \\\".V\\\"\\\"2V3W*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".k\\\"\\\"2k3l*\\xBF \\\".:\\\"\\\"2:3;*\\xB3 \\\".D\\\"\\\"2D3E*\\xA7 \\\".2\\\"\\\"2233*\\x9B \\\".8\\\"\\\"2839*\\x8F \\\".m\\\"\\\"2m3n*\\x83 \\\"7&*} \\\".4\\\"\\\"2435*q \\\".o\\\"\\\"2o3p*e \\\".q\\\"\\\"2q3r*Y \\\".6\\\"\\\"2637*M \\\".>\\\"\\\"2>3?*A \\\".s\\\"\\\"2s3t*5 \\\".u\\\"\\\"2u3v*) \\\"7'*# \\\"7(\"),\n          peg$decode(\"! \\\\7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".g\\\"\\\"2g3h*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".i\\\"\\\"2i3j*\\x8F \\\".k\\\"\\\"2k3l*\\x83 \\\".8\\\"\\\"2839*w \\\".m\\\"\\\"2m3n*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".o\\\"\\\"2o3p*M \\\".q\\\"\\\"2q3r*A \\\".6\\\"\\\"2637*5 \\\".s\\\"\\\"2s3t*) \\\".u\\\"\\\"2u3v+\\u0134$,\\u0131&7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".g\\\"\\\"2g3h*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".i\\\"\\\"2i3j*\\x8F \\\".k\\\"\\\"2k3l*\\x83 \\\".8\\\"\\\"2839*w \\\".m\\\"\\\"2m3n*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".o\\\"\\\"2o3p*M \\\".q\\\"\\\"2q3r*A \\\".6\\\"\\\"2637*5 \\\".s\\\"\\\"2s3t*) \\\".u\\\"\\\"2u3v\\\"\\\"\\\" X+! (%\"),\n          peg$decode(\"!7/+A$.P\\\"\\\"2P3Q+1%7/+'%4#6w# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.4\\\"\\\"2435+1%7/+'%4#6x# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.>\\\"\\\"2>3?+1%7/+'%4#6y# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.T\\\"\\\"2T3U+1%7/+'%4#6z# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.V\\\"\\\"2V3W+1%7/+'%4#6{# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.k\\\"\\\"2k3l+1$7/+'%4\\\"6|\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+7$.i\\\"\\\"2i3j+'%4\\\"6}\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.D\\\"\\\"2D3E+1%7/+'%4#6~# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.2\\\"\\\"2233+1%7/+'%4#6# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.8\\\"\\\"2839+1%7/+'%4#6\\x80# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+1$7&+'%4\\\"6\\x81\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7&+1$7/+'%4\\\"6\\x81\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7=+W$ \\\\7G*) \\\"7K*# \\\"7F,/&7G*) \\\"7K*# \\\"7F\\\"+-%7>+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"0\\x82\\\"\\\"1!3\\x83*A \\\"0\\x84\\\"\\\"1!3\\x85*5 \\\"0\\x86\\\"\\\"1!3\\x87*) \\\"73*# \\\"7.\"),\n          peg$decode(\"!!7/+U$7&+K% \\\\7J*# \\\"7K,)&7J*# \\\"7K\\\"+-%7&+#%'$%$$# X$## X$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!7/+`$7&+V%! \\\\7J*# \\\"7K,)&7J*# \\\"7K\\\"+! (%+2%7&+(%4$6\\x88$!!%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*G \\\".L\\\"\\\"2L3M*; \\\"0\\x89\\\"\\\"1!3\\x8A*/ \\\"0\\x86\\\"\\\"1!3\\x87*# \\\"73\"),\n          peg$decode(\"!.m\\\"\\\"2m3n+K$0\\x8B\\\"\\\"1!3\\x8C*5 \\\"0\\x8D\\\"\\\"1!3\\x8E*) \\\"0\\x8F\\\"\\\"1!3\\x90+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+Q$.8\\\"\\\"2839+A%7O*# \\\" [+1%7S+'%4$6\\x91$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+k$.8\\\"\\\"2839+[%7O*# \\\" [+K%7S+A%7_+7%7l*# \\\" [+'%4&6\\x92& %$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x93\\\"\\\"1$3\\x94*) \\\"/\\x95\\\"\\\"1#3\\x96+' 4!6\\x97!! %\"),\n          peg$decode(\"!7P+b$!.8\\\"\\\"2839+-$7R+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+7%.:\\\"\\\"2:3;+'%4#6\\x98# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" \\\\7+*) \\\"7-*# \\\"7Q+2$,/&7+*) \\\"7-*# \\\"7Q\\\"\\\"\\\" X\"),\n          peg$decode(\".<\\\"\\\"2<3=*q \\\".>\\\"\\\"2>3?*e \\\".@\\\"\\\"2@3A*Y \\\".B\\\"\\\"2B3C*M \\\".D\\\"\\\"2D3E*A \\\".2\\\"\\\"2233*5 \\\".6\\\"\\\"2637*) \\\".4\\\"\\\"2435\"),\n          peg$decode(\"! \\\\7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E,e&7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\\\"+& 4!6\\x99! %\"),\n          peg$decode(\"!7T+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\x9A! %\"),\n          peg$decode(\"! \\\\!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X,>&!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X\\\"+G$7W+=%.J\\\"\\\"2J3K*# \\\" [+'%4#6\\x9B# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" \\\\0\\x9C\\\"\\\"1!3\\x9D+,$,)&0\\x9C\\\"\\\"1!3\\x9D\\\"\\\"\\\" X\"),\n          peg$decode(\"!0$\\\"\\\"1!3%+A$ \\\\0\\x9E\\\"\\\"1!3\\x9F,)&0\\x9E\\\"\\\"1!3\\x9F\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.o\\\"\\\"2o3p+A$7Y+7%.q\\\"\\\"2q3r+'%4#6\\xA0# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!7Z+\\xBF$.8\\\"\\\"2839+\\xAF%7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'-%$-# X$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0838 \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+\\xAF$7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%',%$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0795 \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+\\x95$7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u070C \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+{$7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u069D \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+a$7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0648 \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+G$7Z+=%.8\\\"\\\"2839+-%7[+#%'$%$$# X$## X$\\\"# X\\\"# X*\\u060D \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+-$7[+#%'\\\"%$\\\"# X\\\"# X*\\u05EC \\\"!.\\xA1\\\"\\\"2\\xA13\\xA2+-$7Z+#%'\\\"%$\\\"# X\\\"# X*\\u05CB \\\"!7Z+\\xA5$.\\xA1\\\"\\\"2\\xA13\\xA2+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'+%$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0538 \\\"!7Z+\\xB6$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\x8B%.\\xA1\\\"\\\"2\\xA13\\xA2+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0494 \\\"!7Z+\\xC7$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\x9C%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+q%.\\xA1\\\"\\\"2\\xA13\\xA2+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%')%$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u03DF \\\"!7Z+\\xD8$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\xAD%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\x82%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+W%.\\xA1\\\"\\\"2\\xA13\\xA2+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0319 \\\"!7Z+\\xE9$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+=%.\\xA1\\\"\\\"2\\xA13\\xA2+-%7[+#%''%$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0242 \\\"!7Z+\\u0114$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\xE9%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+=%.\\xA1\\\"\\\"2\\xA13\\xA2+-%7Z+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0140 \\\"!7Z+\\u0135$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\u010A%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\xDF%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\xB4%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+\\x89%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+^%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+3%.\\xA1\\\"\\\"2\\xA13\\xA2+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X+& 4!6\\xA3! %\"),\n          peg$decode(\"!7#+S$7#*# \\\" [+C%7#*# \\\" [+3%7#*# \\\" [+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7Z+=$.8\\\"\\\"2839+-%7Z+#%'#%$## X$\\\"# X\\\"# X*# \\\"7\\\\\"),\n          peg$decode(\"!7]+u$.J\\\"\\\"2J3K+e%7]+[%.J\\\"\\\"2J3K+K%7]+A%.J\\\"\\\"2J3K+1%7]+'%4'6\\xA4' %$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xA5\\\"\\\"2\\xA53\\xA6+3$0\\xA7\\\"\\\"1!3\\xA8+#%'\\\"%$\\\"# X\\\"# X*\\xA0 \\\"!.\\xA9\\\"\\\"2\\xA93\\xAA+=$0\\xAB\\\"\\\"1!3\\xAC+-%7!+#%'#%$## X$\\\"# X\\\"# X*o \\\"!.\\xAD\\\"\\\"2\\xAD3\\xAE+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X*D \\\"!0\\xAF\\\"\\\"1!3\\xB0+-$7!+#%'\\\"%$\\\"# X\\\"# X*# \\\"7!\"),\n          peg$decode(\"!!7!*# \\\" [+c$7!*# \\\" [+S%7!*# \\\" [+C%7!*# \\\" [+3%7!*# \\\" [+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\xB1!! %\"),\n          peg$decode(\" \\\\!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X\\\"\"),\n          peg$decode(\"7a*A \\\"7b*; \\\"7c*5 \\\"7d*/ \\\"7e*) \\\"7f*# \\\"7g\"),\n          peg$decode(\"!/\\xB2\\\"\\\"1*3\\xB3+b$/\\xB4\\\"\\\"1#3\\xB5*G \\\"/\\xB6\\\"\\\"1#3\\xB7*; \\\"/\\xB8\\\"\\\"1$3\\xB9*/ \\\"/\\xBA\\\"\\\"1#3\\xBB*# \\\"76+(%4\\\"6\\xBC\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xBD\\\"\\\"1%3\\xBE+J$/\\xBF\\\"\\\"1%3\\xC0*/ \\\"/\\xC1\\\"\\\"1\\\"3\\xC2*# \\\"76+(%4\\\"6\\xC3\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC4\\\"\\\"1'3\\xC5+2$7\\x8F+(%4\\\"6\\xC6\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC7\\\"\\\"1$3\\xC8+2$7\\xEF+(%4\\\"6\\xC9\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCA\\\"\\\"1&3\\xCB+2$7T+(%4\\\"6\\xCC\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCD\\\"\\\"1\\\"3\\xCE+R$!.>\\\"\\\"2>3?+-$76+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+'%4\\\"6\\xCF\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7h+T$!.>\\\"\\\"2>3?+-$7i+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+)%4\\\"6\\xD0\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7j+&$,#&7j\\\"\\\"\\\" X+! (%\"),\n          peg$decode(\"! \\\\7j+&$,#&7j\\\"\\\"\\\" X+! (%\"),\n          peg$decode(\"7k*) \\\"7+*# \\\"7-\"),\n          peg$decode(\".o\\\"\\\"2o3p*e \\\".q\\\"\\\"2q3r*Y \\\".4\\\"\\\"2435*M \\\".8\\\"\\\"2839*A \\\".<\\\"\\\"2<3=*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"!.6\\\"\\\"2637+u$7m+k% \\\\!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X,>&!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7n+C$.>\\\"\\\"2>3?+3%7o+)%4#6\\xD1#\\\"\\\" %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" \\\\7p*) \\\"7+*# \\\"7-+2$,/&7p*) \\\"7+*# \\\"7-\\\"\\\"\\\" X\"),\n          peg$decode(\" \\\\7p*) \\\"7+*# \\\"7-,/&7p*) \\\"7+*# \\\"7-\\\"\"),\n          peg$decode(\".o\\\"\\\"2o3p*e \\\".q\\\"\\\"2q3r*Y \\\".4\\\"\\\"2435*M \\\".6\\\"\\\"2637*A \\\".8\\\"\\\"2839*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"7\\x90*# \\\"7r\"),\n          peg$decode(\"!7\\x8F+K$7'+A%7s+7%7'+-%7\\x84+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7M*# \\\"7t\"),\n          peg$decode(\"!7+G$.8\\\"\\\"2839+7%7u*# \\\"7x+'%4#6\\xD2# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7v*# \\\"7w+N$!.6\\\"\\\"2637+-$7\\x83+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xD3\\\"\\\"2\\xD33\\xD4+=$7\\x80+3%7w*# \\\" [+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.4\\\"\\\"2435+-$7{+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7z+5$ \\\\7y,#&7y\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7**) \\\"7+*# \\\"7-\"),\n          peg$decode(\"7+*\\x8F \\\"7-*\\x89 \\\".2\\\"\\\"2233*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7|+k$ \\\\!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X,>&!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7~,#&7~\\\"+k$ \\\\!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\" \\\\7~,#&7~\\\"\"),\n          peg$decode(\"7+*w \\\"7-*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7\\\"+\\x8D$ \\\\7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K,M&7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K\\\"+'%4\\\"6\\xD5\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\x81*# \\\"7\\x82\"),\n          peg$decode(\"!!7O+3$.:\\\"\\\"2:3;+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+-$7S+#%'\\\"%$\\\"# X\\\"# X*# \\\" [\"),\n          peg$decode(\" \\\\7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A+\\x8C$,\\x89&7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A\\\"\\\"\\\" X\"),\n          peg$decode(\" \\\\7y,#&7y\\\"\"),\n          peg$decode(\"!/\\x95\\\"\\\"1#3\\xD6+y$.4\\\"\\\"2435+i% \\\\7!+&$,#&7!\\\"\\\"\\\" X+P%.J\\\"\\\"2J3K+@% \\\\7!+&$,#&7!\\\"\\\"\\\" X+'%4%6\\xD7% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\".\\xD8\\\"\\\"2\\xD83\\xD9\"),\n          peg$decode(\".\\xDA\\\"\\\"2\\xDA3\\xDB\"),\n          peg$decode(\".\\xDC\\\"\\\"2\\xDC3\\xDD\"),\n          peg$decode(\".\\xDE\\\"\\\"2\\xDE3\\xDF\"),\n          peg$decode(\".\\xE0\\\"\\\"2\\xE03\\xE1\"),\n          peg$decode(\".\\xE2\\\"\\\"2\\xE23\\xE3\"),\n          peg$decode(\".\\xE4\\\"\\\"2\\xE43\\xE5\"),\n          peg$decode(\".\\xE6\\\"\\\"2\\xE63\\xE7\"),\n          peg$decode(\".\\xE8\\\"\\\"2\\xE83\\xE9\"),\n          peg$decode(\".\\xEA\\\"\\\"2\\xEA3\\xEB\"),\n          peg$decode(\"!7\\x85*S \\\"7\\x86*M \\\"7\\x88*G \\\"7\\x89*A \\\"7\\x8A*; \\\"7\\x8B*5 \\\"7\\x8C*/ \\\"7\\x8D*) \\\"7\\x8E*# \\\"76+& 4!6\\xEC! %\"),\n          peg$decode(\"!7\\x84+K$7'+A%7\\x91+7%7'+-%7\\x93+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x92+' 4!6\\xED!! %\"),\n          peg$decode(\"!7!+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(,G&7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(\\\"+& 4!6\\xEE! %\"),\n          peg$decode(\"!7\\xB5+_$ \\\\!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!79+R$!.:\\\"\\\"2:3;+-$79+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+'%4\\\"6\\xEF\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7:*j \\\"!7\\x97+_$ \\\\!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+& 4!6\\xF0! %\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ \\\\!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\xF1\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x99*# \\\" [+A$7@+7%7M+-%7?+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!76+_$ \\\\!7.+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7.+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\"7H+' 4!6\\xF2!! %\"),\n          peg$decode(\"7\\x9B*) \\\"7\\x9C*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\xF3\\\"\\\"1!3\\xF4+<$7<+2%7\\x9E+(%4#6\\xF5#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xF6\\\"\\\"1'3\\xF7+<$7<+2%7\\x9D+(%4#6\\xF8#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\xF9!! %\"),\n          peg$decode(\"!.\\xFA\\\"\\\"2\\xFA3\\xFB+x$!.J\\\"\\\"2J3K+S$7!*# \\\" [+C%7!*# \\\" [+3%7!*# \\\" [+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\" [+'%4\\\"6\\xFC\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+N$!7<+-$7\\xA0+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+)%4\\\"6\\xFD\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"76*) \\\"7T*# \\\"7H\"),\n          peg$decode(\"!7\\xA2+_$ \\\\!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xFE\\\"\\\"1&3\\xFF*G \\\"/\\u0100\\\"\\\"1'3\\u0101*; \\\"/\\u0102\\\"\\\"1$3\\u0103*/ \\\"/\\u0104\\\"\\\"1%3\\u0105*# \\\"76+& 4!6\\u0106! %\"),\n          peg$decode(\"7\\xA4*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0107\\\"\\\"1(3\\u0108+O$7<+E%/\\u0109\\\"\\\"1(3\\u010A*/ \\\"/\\u010B\\\"\\\"1(3\\u010C*# \\\"76+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ \\\\!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u010D!! %\"),\n          peg$decode(\"!7\\xA8+& 4!6\\u010E! %\"),\n          peg$decode(\"!7\\xA9+s$7;+i%7\\xAE+_% \\\\!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAA*# \\\"7\\xAB\"),\n          peg$decode(\"/\\u010F\\\"\\\"1$3\\u0110*S \\\"/\\u0111\\\"\\\"1%3\\u0112*G \\\"/\\u0113\\\"\\\"1%3\\u0114*; \\\"/\\u0115\\\"\\\"1%3\\u0116*/ \\\"/\\u0117\\\"\\\"1+3\\u0118*# \\\"7\\xAC\"),\n          peg$decode(\"/\\u0119\\\"\\\"1'3\\u011A*/ \\\"/\\u011B\\\"\\\"1)3\\u011C*# \\\"7\\xAC\"),\n          peg$decode(\"76*# \\\"7\\xAD\"),\n          peg$decode(\"!/\\u011D\\\"\\\"1\\\"3\\u011E+-$76+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAC*# \\\"76\"),\n          peg$decode(\"!76+7$7<+-%7\\xB0+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"76*# \\\"7H\"),\n          peg$decode(\"!7\\xB2+7$7.+-%7\\x8F+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u011F!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u0120!! %\"),\n          peg$decode(\"!7\\xB5+d$ \\\\!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u0121\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"!!77+k$ \\\\!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X,>&!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ \\\\!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0122\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0123\\\"\\\"1#3\\u0124+<$7<+2%76+(%4#6\\u0125#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0126!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u0127!! %\"),\n          peg$decode(\"! \\\\7\\x99,#&7\\x99\\\"+\\x81$7@+w%7M+m%7?+c% \\\\!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4%6\\u0128% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!/\\u0129\\\"\\\"1&3\\u012A+s$7.+i%7\\xC0+_% \\\\!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\"7\\xBE\"),\n          peg$decode(\"!76+s$7.+i%7\\xBF+_% \\\\!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+=$7<+3%76*# \\\"7H+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xC1*G \\\"7\\xC3*A \\\"7\\xC5*; \\\"7\\xC7*5 \\\"7\\xC8*/ \\\"7\\xC9*) \\\"7\\xCA*# \\\"7\\xBF\"),\n          peg$decode(\"!/\\u012B\\\"\\\"1%3\\u012C+7$7<+-%7\\xC2+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u012D!! %\"),\n          peg$decode(\"!/\\u012E\\\"\\\"1&3\\u012F+\\xA5$7<+\\x9B%7D+\\x91%7\\xC4+\\x87% \\\\! \\\\7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X,G&! \\\\7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X\\\"+-%7E+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7t*# \\\"7w\"),\n          peg$decode(\"!/\\u0130\\\"\\\"1%3\\u0131+7$7<+-%7\\xC6+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0132!! %\"),\n          peg$decode(\"!/\\u0133\\\"\\\"1&3\\u0134+<$7<+2%7I+(%4#6\\u0135#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0136\\\"\\\"1%3\\u0137+_$7<+U%!/\\u0138\\\"\\\"1$3\\u0139+& 4!6\\u013A! %*4 \\\"!/\\u013B\\\"\\\"1%3\\u013C+& 4!6\\u013D! %+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u013E\\\"\\\"1)3\\u013F+T$7<+J%/\\u0140\\\"\\\"1#3\\u0141*/ \\\"/\\u0142\\\"\\\"1(3\\u0143*# \\\"76+(%4#6\\u0144#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0145\\\"\\\"1#3\\u0146+\\x9E$7<+\\x94%7D+\\x8A%!7\\xCB+k$ \\\\!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X,>&!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+-%7E+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0147\\\"\\\"1(3\\u0148*/ \\\"/\\u0149\\\"\\\"1$3\\u014A*# \\\"76+' 4!6\\u014B!! %\"),\n          peg$decode(\"!76+_$ \\\\!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xCE+K$7.+A%7\\xCE+7%7.+-%7\\x8F+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u014C!! %\"),\n          peg$decode(\"!7\\xD0+c$ \\\\!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u014D\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+c$ \\\\!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u014E\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7L*T \\\"7\\x98*N \\\"!7@*# \\\" [+=$7t+3%7?*# \\\" [+#%'#%$## X$\\\"# X\\\"# X+c$ \\\\!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u014F\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xD3+c$ \\\\!7B+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0150\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x95+& 4!6\\u0151! %\"),\n          peg$decode(\"!/\\u0152\\\"\\\"1(3\\u0153+<$7<+2%76+(%4#6\\u0154#! %$## X$\\\"# X\\\"# X*j \\\"!/\\u0155\\\"\\\"1&3\\u0156+<$7<+2%76+(%4#6\\u0157#! %$## X$\\\"# X\\\"# X*: \\\"!/\\u0158\\\"\\\"1*3\\u0159+& 4!6\\u015A! %*# \\\"7\\x9F\"),\n          peg$decode(\"!!76+o$ \\\\!7A+2$76+(%4\\\"6\\u015B\\\"! %$\\\"# X\\\"# X,=&!7A+2$76+(%4\\\"6\\u015B\\\"! %$\\\"# X\\\"# X\\\"+)%4\\\"6\\u015C\\\"\\\"! %$\\\"# X\\\"# X*# \\\" [+' 4!6\\u015D!! %\"),\n          peg$decode(\"!7\\xD7+_$ \\\\!7A+-$7\\xD7+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD7+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+_$ \\\\!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! \\\\7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u015E!! %\"),\n          peg$decode(\"!7\\xDA+_$ \\\\!7B+-$7\\xDB+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xDB+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u015F\\\"\\\"1&3\\u0160*; \\\"/\\u0161\\\"\\\"1'3\\u0162*/ \\\"/\\u0163\\\"\\\"1*3\\u0164*# \\\"76+& 4!6\\u0165! %\"),\n          peg$decode(\"!/\\u0166\\\"\\\"1&3\\u0167+<$7<+2%7\\xDC+(%4#6\\u0168#! %$## X$\\\"# X\\\"# X*\\x83 \\\"!/\\xF6\\\"\\\"1'3\\xF7+<$7<+2%7\\x9D+(%4#6\\u0169#! %$## X$\\\"# X\\\"# X*S \\\"!/\\u016A\\\"\\\"1+3\\u016B+<$7<+2%7\\x9D+(%4#6\\u016C#! %$## X$\\\"# X\\\"# X*# \\\"7\\x9F\"),\n          peg$decode(\"/\\u016D\\\"\\\"1+3\\u016E*k \\\"/\\u016F\\\"\\\"1)3\\u0170*_ \\\"/\\u0171\\\"\\\"1(3\\u0172*S \\\"/\\u0173\\\"\\\"1'3\\u0174*G \\\"/\\u0175\\\"\\\"1&3\\u0176*; \\\"/\\u0177\\\"\\\"1*3\\u0178*/ \\\"/\\u0179\\\"\\\"1)3\\u017A*# \\\"76\"),\n          peg$decode(\"71*# \\\" [\"),\n          peg$decode(\"!!76+o$ \\\\!7A+2$76+(%4\\\"6\\u015B\\\"! %$\\\"# X\\\"# X,=&!7A+2$76+(%4\\\"6\\u015B\\\"! %$\\\"# X\\\"# X\\\"+)%4\\\"6\\u015C\\\"\\\"! %$\\\"# X\\\"# X*# \\\" [+' 4!6\\u017B!! %\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ \\\\!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u017C\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!7\\xE2+_$ \\\\!7A+-$7\\xE2+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xE2+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE9+s$7.+i%7\\xEC+_% \\\\!7B+-$7\\xE3+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xE3+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xE4*; \\\"7\\xE5*5 \\\"7\\xE6*/ \\\"7\\xE7*) \\\"7\\xE8*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u017D\\\"\\\"1#3\\u017E+<$7<+2%7\\xEF+(%4#6\\u017F#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0180\\\"\\\"1%3\\u0181+<$7<+2%7T+(%4#6\\u0182#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0183\\\"\\\"1(3\\u0184+B$7<+8%7\\\\*# \\\"7Y+(%4#6\\u0185#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0186\\\"\\\"1&3\\u0187+<$7<+2%76+(%4#6\\u0188#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0189\\\"\\\"1%3\\u018A+T$!7<+5$ \\\\7!,#&7!\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+'%4\\\"6\\u018B\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xEA+K$7;+A%76+7%7;+-%7\\xEB+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x95\\\"\\\"1#3\\xD6*# \\\"76+' 4!6\\u018C!! %\"),\n          peg$decode(\"!/\\xB4\\\"\\\"1#3\\u018D*G \\\"/\\xB6\\\"\\\"1#3\\u018E*; \\\"/\\xBA\\\"\\\"1#3\\u018F*/ \\\"/\\xB8\\\"\\\"1$3\\u0190*# \\\"76+' 4!6\\u0191!! %\"),\n          peg$decode(\"!7\\xED+H$!7C+-$7\\xEE+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\u0192! %\"),\n          peg$decode(\"!!7!*# \\\" [+c$7!*# \\\" [+S%7!*# \\\" [+C%7!*# \\\" [+3%7!*# \\\" [+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\u0193!! %\"),\n          peg$decode(\"!!7!+C$7!*# \\\" [+3%7!*# \\\" [+#%'#%$## X$\\\"# X\\\"# X+' 4!6\\u0194!! %\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!7\\x9D+d$ \\\\!7B+-$7\\xF2+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xF2+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u0195\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xF3*# \\\"7\\x9F\"),\n          peg$decode(\"!.\\u0196\\\"\\\"2\\u01963\\u0197+N$7<+D%.\\u0198\\\"\\\"2\\u01983\\u0199*) \\\".\\u019A\\\"\\\"2\\u019A3\\u019B+(%4#6\\u019C#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x9D+d$ \\\\!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u019D\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+7$70+-%7\\xF6+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" \\\\72*) \\\"74*# \\\"7.,/&72*) \\\"74*# \\\"7.\\\"\"),\n          peg$decode(\" \\\\7%,#&7%\\\"\"),\n          peg$decode(\"!7\\xF9+=$.8\\\"\\\"2839+-%7\\xFA+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u019E\\\"\\\"1%3\\u019F*) \\\"/\\u01A0\\\"\\\"1$3\\u01A1+' 4!6\\u01A2!! %\"),\n          peg$decode(\"!7\\xFB+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\\\*) \\\"7X*# \\\"7\\x82+' 4!6\\u01A3!! %\"),\n          peg$decode(\"! \\\\7\\xFD*) \\\"7-*# \\\"7\\xFE,/&7\\xFD*) \\\"7-*# \\\"7\\xFE\\\"+! (%\"),\n          peg$decode(\"7\\\"*S \\\"7!*M \\\".F\\\"\\\"2F3G*A \\\".J\\\"\\\"2J3K*5 \\\".H\\\"\\\"2H3I*) \\\".N\\\"\\\"2N3O\"),\n          peg$decode(\".L\\\"\\\"2L3M*\\x95 \\\".B\\\"\\\"2B3C*\\x89 \\\".<\\\"\\\"2<3=*} \\\".R\\\"\\\"2R3S*q \\\".T\\\"\\\"2T3U*e \\\".V\\\"\\\"2V3W*Y \\\".P\\\"\\\"2P3Q*M \\\".@\\\"\\\"2@3A*A \\\".D\\\"\\\"2D3E*5 \\\".2\\\"\\\"2233*) \\\".>\\\"\\\"2>3?\"),\n          peg$decode(\"!7\\u0100+h$.8\\\"\\\"2839+X%7\\xFA+N%!.\\u01A4\\\"\\\"2\\u01A43\\u01A5+-$7\\xEB+#%'\\\"%$\\\"# X\\\"# X*# \\\" [+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u01A6\\\"\\\"1%3\\u01A7*) \\\"/\\u01A8\\\"\\\"1$3\\u01A9+' 4!6\\u01A2!! %\"),\n          peg$decode(\"!7\\xEB+Q$/\\xB4\\\"\\\"1#3\\xB5*7 \\\"/\\xB6\\\"\\\"1#3\\xB7*+ \\\" \\\\7+,#&7+\\\"+'%4\\\"6\\u01AA\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\u0104+\\x8F$.F\\\"\\\"2F3G+%7\\u0103+u%.F\\\"\\\"2F3G+e%7\\u0103+[%.F\\\"\\\"2F3G+K%7\\u0103+A%.F\\\"\\\"2F3G+1%7\\u0105+'%4)6\\u01AB) %$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7#+A$7#+7%7#+-%7#+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\u0103+-$7\\u0103+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\u0103+7$7\\u0103+-%7\\u0103+#%'#%$## X$\\\"# X\\\"# X\")\n        ],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleIndices)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$decode(s) {\n      var bc = new Array(s.length), i;\n\n      for (i = 0; i < s.length; i++) {\n        bc[i] = s.charCodeAt(i) - 32;\n      }\n\n      return bc;\n    }\n\n    function peg$parseRule(index) {\n      var bc    = peg$bytecode[index],\n          ip    = 0,\n          ips   = [],\n          end   = bc.length,\n          ends  = [],\n          stack = [],\n          params, i;\n\n      function protect(object) {\n        return Object.prototype.toString.apply(object) === \"[object Array]\" ? [] : object;\n      }\n\n      while (true) {\n        while (ip < end) {\n          switch (bc[ip]) {\n            case 0:\n              stack.push(protect(peg$consts[bc[ip + 1]]));\n              ip += 2;\n              break;\n\n            case 1:\n              stack.push(peg$currPos);\n              ip++;\n              break;\n\n            case 2:\n              stack.pop();\n              ip++;\n              break;\n\n            case 3:\n              peg$currPos = stack.pop();\n              ip++;\n              break;\n\n            case 4:\n              stack.length -= bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 5:\n              stack.splice(-2, 1);\n              ip++;\n              break;\n\n            case 6:\n              stack[stack.length - 2].push(stack.pop());\n              ip++;\n              break;\n\n            case 7:\n              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 8:\n              stack.pop();\n              stack.push(input.substring(stack[stack.length - 1], peg$currPos));\n              ip++;\n              break;\n\n            case 9:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1]) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 10:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] === peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 11:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 12:\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                ends.push(end);\n                ips.push(ip);\n\n                end = ip + 2 + bc[ip + 1];\n                ip += 2;\n              } else {\n                ip += 2 + bc[ip + 1];\n              }\n\n              break;\n\n            case 13:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (input.length > peg$currPos) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 14:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 15:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 16:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 17:\n              stack.push(input.substr(peg$currPos, bc[ip + 1]));\n              peg$currPos += bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 18:\n              stack.push(peg$consts[bc[ip + 1]]);\n              peg$currPos += peg$consts[bc[ip + 1]].length;\n              ip += 2;\n              break;\n\n            case 19:\n              stack.push(peg$FAILED);\n              if (peg$silentFails === 0) {\n                peg$fail(peg$consts[bc[ip + 1]]);\n              }\n              ip += 2;\n              break;\n\n            case 20:\n              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];\n              ip += 2;\n              break;\n\n            case 21:\n              peg$reportedPos = peg$currPos;\n              ip++;\n              break;\n\n            case 22:\n              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);\n              for (i = 0; i < bc[ip + 3]; i++) {\n                params[i] = stack[stack.length - 1 - params[i]];\n              }\n\n              stack.splice(\n                stack.length - bc[ip + 2],\n                bc[ip + 2],\n                peg$consts[bc[ip + 1]].apply(null, params)\n              );\n\n              ip += 4 + bc[ip + 3];\n              break;\n\n            case 23:\n              stack.push(peg$parseRule(bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 24:\n              peg$silentFails++;\n              ip++;\n              break;\n\n            case 25:\n              peg$silentFails--;\n              ip++;\n              break;\n\n            default:\n              throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n          }\n        }\n\n        if (ends.length > 0) {\n          end = ends.pop();\n          ip = ips.pop();\n        } else {\n          break;\n        }\n      }\n\n      return stack[0];\n    }\n\n\n      options.data = {}; // Object to which header attributes will be assigned during parsing\n\n      function list (first, rest) {\n        return [first].concat(rest);\n      }\n\n\n    peg$result = peg$parseRule(peg$startRuleIndex);\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///374\n");

/***/ }),
/* 375 */
/*!************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/localparticipant.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ParticipantSignaling = __webpack_require__(/*! ../participant */ 228);\nvar LocalTrackPublicationV2 = __webpack_require__(/*! ./localtrackpublication */ 376);\n\n/**\n * @extends ParticipantSignaling\n * @property {number} revision\n * @emits LocalParticipantV2#updated\n */\n\nvar LocalParticipantV2 = function (_ParticipantSignaling) {\n  _inherits(LocalParticipantV2, _ParticipantSignaling);\n\n  /**\n   * Construct a {@link LocalParticipantV2}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {object} [options]\n   */\n  function LocalParticipantV2(encodingParameters, options) {\n    _classCallCheck(this, LocalParticipantV2);\n\n    options = Object.assign({\n      LocalTrackPublicationV2: LocalTrackPublicationV2\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (LocalParticipantV2.__proto__ || Object.getPrototypeOf(LocalParticipantV2)).call(this));\n\n    Object.defineProperties(_this, {\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _removeListeners: {\n        value: new Map()\n      },\n      _LocalTrackPublicationV2: {\n        value: options.LocalTrackPublicationV2\n      },\n      _publishedRevision: {\n        writable: true,\n        value: 0\n      },\n      _revision: {\n        writable: true,\n        value: 1\n      },\n      revision: {\n        enumerable: true,\n        get: function get() {\n          return this._revision;\n        }\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Set the {@link EncodingParameters}.\n   * @param {?EncodingParameters} encodingParameters\n   * @returns {this}\n   */\n\n\n  _createClass(LocalParticipantV2, [{\n    key: 'setParameters',\n    value: function setParameters(encodingParameters) {\n      this._encodingParameters.update(encodingParameters);\n      return this;\n    }\n\n    /**\n     * Update the {@link LocalParticipantV2} with the new state.\n     * @param {Published} published\n     * @returns {this}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(published) {\n      if (this._publishedRevision >= published.revision) {\n        return this;\n      }\n\n      this._publishedRevision = published.revision;\n\n      published.tracks.forEach(function (publicationState) {\n        var localTrackPublicationV2 = this.tracks.get(publicationState.id);\n        if (localTrackPublicationV2) {\n          localTrackPublicationV2.update(publicationState);\n        }\n      }, this);\n\n      return this;\n    }\n\n    /**\n     * Add a {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n     * or {@link MediaTrackSender} to the {@link LocalParticipantV2}.\n     * @param {DataTrackSender|MediaTrackSender} trackSender\n     * @param {string} name\n     * @returns {this}\n     */\n\n  }, {\n    key: 'addTrack',\n    value: function addTrack(trackSender, name) {\n      var _this2 = this;\n\n      var publication = new this._LocalTrackPublicationV2(trackSender, name);\n      _get(LocalParticipantV2.prototype.__proto__ || Object.getPrototypeOf(LocalParticipantV2.prototype), 'addTrack', this).call(this, publication);\n\n      var sid = publication.sid;\n\n\n      var updated = function updated() {\n        // NOTE(mmalavalli): The LocalParticipantV2's state is only published if\n        // the \"updated\" event is emitted due to LocalTrackPublicationV2's\n        // .isEnabled being toggled. We do not publish if it is fired due to the\n        // LocalTrackPublicationV2's .sid being set.\n        if (sid === publication.sid) {\n          _this2.didUpdate();\n          return;\n        }\n        sid = publication.sid;\n      };\n\n      publication.on('updated', updated);\n\n      this._removeListener(publication);\n      this._removeListeners.set(publication, function () {\n        return publication.removeListener('updated', updated);\n      });\n\n      this.didUpdate();\n\n      return this;\n    }\n\n    /**\n     * @private\n     * @param {LocalTrackPublicationV2} publication\n     * @returns {void}\n     */\n\n  }, {\n    key: '_removeListener',\n    value: function _removeListener(publication) {\n      var removeListener = this._removeListeners.get(publication);\n      if (removeListener) {\n        removeListener();\n      }\n    }\n\n    /**\n     * Get the current state of the {@link LocalParticipantV2}.\n     * @returns {object}\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      return {\n        revision: this.revision,\n        tracks: Array.from(this.tracks.values()).map(function (track) {\n          return track.getState();\n        })\n      };\n    }\n\n    /**\n     * Increment the revision for the {@link LocalParticipantV2}.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: 'didUpdate',\n    value: function didUpdate() {\n      this._revision++;\n      this.emit('updated');\n    }\n\n    /**\n     * Remove the {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n     * or {@link MediaTrackSender} from the {@link LocalParticipantV2}.\n     * @param {DataTrackSender|MediaTrackSender} trackSender\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'removeTrack',\n    value: function removeTrack(trackSender) {\n      var publication = this.tracks.get(trackSender.id);\n      if (!publication) {\n        return false;\n      }\n      var didDelete = _get(LocalParticipantV2.prototype.__proto__ || Object.getPrototypeOf(LocalParticipantV2.prototype), 'removeTrack', this).call(this, publication);\n      if (didDelete) {\n        this._removeListener(publication);\n        this.didUpdate();\n      }\n      return didDelete;\n    }\n  }]);\n\n  return LocalParticipantV2;\n}(ParticipantSignaling);\n\n/**\n * @interface Published\n * @property {number} revision\n * @property {Array<PublishedTrack>} tracks\n */\n\n/**\n * @typedef {CreatedTrack|ReadyTrack|FailedTrack} PublishedTrack\n */\n\n/**\n * @interface CreatedTrack\n * @property {Track.ID} id\n * @property {string} state - \"created\"\n */\n\n/**\n * @interface ReadyTrack\n * @property {Track.ID} id\n * @property {Track.SID} sid\n * @property {string} state - \"ready\"\n */\n\n/**\n * @interface FailedTrack\n * @property {Track.ID} id\n * @property {TrackError} error\n * @property {string} state - \"failed\"\n */\n\n/**\n * @interface TrackError\n * @property {number} code\n * @property {string} message\n */\n\n/**\n * @event LocalParticipantV2#updated\n */\n\nmodule.exports = LocalParticipantV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///375\n");

/***/ }),
/* 376 */
/*!*****************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/v2/localtrackpublication.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LocalTrackPublicationSignaling = __webpack_require__(/*! ../localtrackpublication */ 377);\nvar createTwilioError = __webpack_require__(/*! ../../util/twilio-video-errors */ 209).createTwilioError;\n\n/**\n * @extends LocalTrackPublicationSignaling\n */\n\nvar LocalTrackPublicationV2 = function (_LocalTrackPublicatio) {\n  _inherits(LocalTrackPublicationV2, _LocalTrackPublicatio);\n\n  /**\n   * Construct a {@link LocalTrackPublicationV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   */\n  function LocalTrackPublicationV2(trackSender, name) {\n    _classCallCheck(this, LocalTrackPublicationV2);\n\n    return _possibleConstructorReturn(this, (LocalTrackPublicationV2.__proto__ || Object.getPrototypeOf(LocalTrackPublicationV2)).call(this, trackSender, name));\n  }\n\n  /**\n   * Get the {@link LocalTrackPublicationV2#Representation} of a given {@link TrackSignaling}.\n   * @returns {LocalTrackPublicationV2#Representation} - without the SID\n   */\n\n\n  _createClass(LocalTrackPublicationV2, [{\n    key: 'getState',\n    value: function getState() {\n      return {\n        enabled: this.isEnabled,\n        id: this.id,\n        kind: this.kind,\n        name: this.name\n      };\n    }\n\n    /**\n     * Compare the {@link LocalTrackPublicationV2} to a {@link LocalTrackPublicationV2#Representation} of itself\n     * and perform any updates necessary.\n     * @param {PublishedTrack} track\n     * @returns {this}\n     * @fires TrackSignaling#updated\n     */\n\n  }, {\n    key: 'update',\n    value: function update(track) {\n      switch (track.state) {\n        case 'ready':\n          this.setSid(track.sid);\n          break;\n        case 'failed':\n          {\n            var error = track.error;\n            this.publishFailed(createTwilioError(error.code, error.message));\n            break;\n          }\n        default:\n          // 'created'\n          break;\n      }\n      return this;\n    }\n  }]);\n\n  return LocalTrackPublicationV2;\n}(LocalTrackPublicationSignaling);\n\n/**\n * The Room Signaling Protocol (RSP) representation of a {@link LocalTrackPublicationV2}.\n * @typedef {object} LocalTrackPublicationV2#Representation\n * @property {boolean} enabled\n * @property {Track.ID} id\n * @property {Track.Kind} kind\n * @property {string} name\n * @property {Track.SID} sid\n */\n\nmodule.exports = LocalTrackPublicationV2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvbG9jYWx0cmFja3B1YmxpY2F0aW9uLmpzP2UzYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKLGlEQUFpRCxhQUFhLHVGQUF1RixFQUFFLHVGQUF1Rjs7QUFFOU8sMENBQTBDLCtEQUErRCxxR0FBcUcsRUFBRSx5RUFBeUUsZUFBZSx5RUFBeUUsRUFBRSxFQUFFLHVIQUF1SDs7QUFFNWUscUNBQXFDLG1CQUFPLENBQUMsbUNBQTBCO0FBQ3ZFLHdCQUF3QixtQkFBTyxDQUFDLHlDQUFnQzs7QUFFaEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsOEJBQThCO0FBQ2hELGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGNBQWMsNkNBQTZDLGFBQWEscUJBQXFCO0FBQzdGLGVBQWUsdUNBQXVDO0FBQ3REOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQiw4QkFBOEIsT0FBTyw2Q0FBNkM7QUFDdEc7QUFDQSxlQUFlLGVBQWU7QUFDOUIsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEO0FBQ0EsMERBQTBELDhCQUE4QjtBQUN4RixhQUFhLE9BQU87QUFDcEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsU0FBUztBQUN2QixjQUFjLFdBQVc7QUFDekIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsVUFBVTtBQUN4Qjs7QUFFQSIsImZpbGUiOiIzNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvY2FsVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZyA9IHJlcXVpcmUoJy4uL2xvY2FsdHJhY2twdWJsaWNhdGlvbicpO1xudmFyIGNyZWF0ZVR3aWxpb0Vycm9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbC90d2lsaW8tdmlkZW8tZXJyb3JzJykuY3JlYXRlVHdpbGlvRXJyb3I7XG5cbi8qKlxuICogQGV4dGVuZHMgTG9jYWxUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nXG4gKi9cblxudmFyIExvY2FsVHJhY2tQdWJsaWNhdGlvblYyID0gZnVuY3Rpb24gKF9Mb2NhbFRyYWNrUHVibGljYXRpbykge1xuICBfaW5oZXJpdHMoTG9jYWxUcmFja1B1YmxpY2F0aW9uVjIsIF9Mb2NhbFRyYWNrUHVibGljYXRpbyk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb25WMn0uXG4gICAqIEBwYXJhbSB7RGF0YVRyYWNrU2VuZGVyfE1lZGlhVHJhY2tTZW5kZXJ9IHRyYWNrU2VuZGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBmdW5jdGlvbiBMb2NhbFRyYWNrUHVibGljYXRpb25WMih0cmFja1NlbmRlciwgbmFtZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhbFRyYWNrUHVibGljYXRpb25WMik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExvY2FsVHJhY2tQdWJsaWNhdGlvblYyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9jYWxUcmFja1B1YmxpY2F0aW9uVjIpKS5jYWxsKHRoaXMsIHRyYWNrU2VuZGVyLCBuYW1lKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9uVjIjUmVwcmVzZW50YXRpb259IG9mIGEgZ2l2ZW4ge0BsaW5rIFRyYWNrU2lnbmFsaW5nfS5cbiAgICogQHJldHVybnMge0xvY2FsVHJhY2tQdWJsaWNhdGlvblYyI1JlcHJlc2VudGF0aW9ufSAtIHdpdGhvdXQgdGhlIFNJRFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbFRyYWNrUHVibGljYXRpb25WMiwgW3tcbiAgICBrZXk6ICdnZXRTdGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW5hYmxlZDogdGhpcy5pc0VuYWJsZWQsXG4gICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICBraW5kOiB0aGlzLmtpbmQsXG4gICAgICAgIG5hbWU6IHRoaXMubmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlIHRoZSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9uVjJ9IHRvIGEge0BsaW5rIExvY2FsVHJhY2tQdWJsaWNhdGlvblYyI1JlcHJlc2VudGF0aW9ufSBvZiBpdHNlbGZcbiAgICAgKiBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBuZWNlc3NhcnkuXG4gICAgICogQHBhcmFtIHtQdWJsaXNoZWRUcmFja30gdHJhY2tcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKiBAZmlyZXMgVHJhY2tTaWduYWxpbmcjdXBkYXRlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUodHJhY2spIHtcbiAgICAgIHN3aXRjaCAodHJhY2suc3RhdGUpIHtcbiAgICAgICAgY2FzZSAncmVhZHknOlxuICAgICAgICAgIHRoaXMuc2V0U2lkKHRyYWNrLnNpZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gdHJhY2suZXJyb3I7XG4gICAgICAgICAgICB0aGlzLnB1Ymxpc2hGYWlsZWQoY3JlYXRlVHdpbGlvRXJyb3IoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vICdjcmVhdGVkJ1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvY2FsVHJhY2tQdWJsaWNhdGlvblYyO1xufShMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmcpO1xuXG4vKipcbiAqIFRoZSBSb29tIFNpZ25hbGluZyBQcm90b2NvbCAoUlNQKSByZXByZXNlbnRhdGlvbiBvZiBhIHtAbGluayBMb2NhbFRyYWNrUHVibGljYXRpb25WMn0uXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBMb2NhbFRyYWNrUHVibGljYXRpb25WMiNSZXByZXNlbnRhdGlvblxuICogQHByb3BlcnR5IHtib29sZWFufSBlbmFibGVkXG4gKiBAcHJvcGVydHkge1RyYWNrLklEfSBpZFxuICogQHByb3BlcnR5IHtUcmFjay5LaW5kfSBraW5kXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxuICogQHByb3BlcnR5IHtUcmFjay5TSUR9IHNpZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxUcmFja1B1YmxpY2F0aW9uVjI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvdjIvbG9jYWx0cmFja3B1YmxpY2F0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///376\n");

/***/ }),
/* 377 */
/*!**************************************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/localtrackpublication.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TrackSignaling = __webpack_require__(/*! ./track */ 258);\n\n/**\n * A {@link LocalTrackPublication} implementation\n * @extends TrackSignaling\n * @property {?Error} error - non-null if publication failed\n * @property {Track.ID} id\n */\n\nvar LocalTrackPublicationSignaling = function (_TrackSignaling) {\n  _inherits(LocalTrackPublicationSignaling, _TrackSignaling);\n\n  /**\n   * Construct a {@link LocalTrackPublicationSignaling}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   */\n  function LocalTrackPublicationSignaling(trackSender, name) {\n    _classCallCheck(this, LocalTrackPublicationSignaling);\n\n    var enabled = trackSender.kind === 'data' ? true : trackSender.track.enabled;\n\n    var _this = _possibleConstructorReturn(this, (LocalTrackPublicationSignaling.__proto__ || Object.getPrototypeOf(LocalTrackPublicationSignaling)).call(this, name, trackSender.kind, enabled));\n\n    _this.setTrackTransceiver(trackSender);\n    Object.defineProperties(_this, {\n      _error: {\n        value: null,\n        writable: true\n      },\n      error: {\n        enumerable: true,\n        get: function get() {\n          return this._error;\n        }\n      },\n      id: {\n        enumerable: true,\n        value: trackSender.id\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Rejects the SID's deferred promise with the given Error.\n   * @param {Error} error\n   * @returns {this}\n   */\n\n\n  _createClass(LocalTrackPublicationSignaling, [{\n    key: 'publishFailed',\n    value: function publishFailed(error) {\n      if (setError(this, error)) {\n        this.emit('updated');\n      }\n      return this;\n    }\n  }, {\n    key: 'setSid',\n    value: function setSid(sid) {\n      if (this._error) {\n        return this;\n      }\n      return _get(LocalTrackPublicationSignaling.prototype.__proto__ || Object.getPrototypeOf(LocalTrackPublicationSignaling.prototype), 'setSid', this).call(this, sid);\n    }\n  }]);\n\n  return LocalTrackPublicationSignaling;\n}(TrackSignaling);\n\n/**\n * @param {LocalTrackPublication} publication\n * @param {Error} error\n * @returns {boolean} updated\n */\n\n\nfunction setError(publication, error) {\n  if (publication._sid !== null || publication._error) {\n    return false;\n  }\n  publication._error = error;\n  return true;\n}\n\nmodule.exports = LocalTrackPublicationSignaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvbG9jYWx0cmFja3B1YmxpY2F0aW9uLmpzPzlmMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0NBQWdDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFampCLHFEQUFxRCxrREFBa0QsOERBQThELDBCQUEwQiw0Q0FBNEMsdUJBQXVCLGtCQUFrQixFQUFFLE9BQU8sd0NBQXdDLEVBQUUsRUFBRSw0QkFBNEIsbUJBQW1CLEVBQUUsT0FBTyx1QkFBdUIsNEJBQTRCLGtCQUFrQixFQUFFLDhCQUE4QixFQUFFOztBQUV4ZSxpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixpREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDBDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlLHFCQUFxQixtQkFBTyxDQUFDLGtCQUFTOztBQUV0QztBQUNBLE1BQU0sNEJBQTRCO0FBQ2xDO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsU0FBUztBQUN2Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHFDQUFxQztBQUN2RCxhQUFhLGlDQUFpQztBQUM5QyxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsZUFBZTtBQUNmOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLE1BQU07QUFDakIsYUFBYSxRQUFRO0FBQ3JCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIzNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVHJhY2tTaWduYWxpbmcgPSByZXF1aXJlKCcuL3RyYWNrJyk7XG5cbi8qKlxuICogQSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9ufSBpbXBsZW1lbnRhdGlvblxuICogQGV4dGVuZHMgVHJhY2tTaWduYWxpbmdcbiAqIEBwcm9wZXJ0eSB7P0Vycm9yfSBlcnJvciAtIG5vbi1udWxsIGlmIHB1YmxpY2F0aW9uIGZhaWxlZFxuICogQHByb3BlcnR5IHtUcmFjay5JRH0gaWRcbiAqL1xuXG52YXIgTG9jYWxUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nID0gZnVuY3Rpb24gKF9UcmFja1NpZ25hbGluZykge1xuICBfaW5oZXJpdHMoTG9jYWxUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nLCBfVHJhY2tTaWduYWxpbmcpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgTG9jYWxUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nfS5cbiAgICogQHBhcmFtIHtEYXRhVHJhY2tTZW5kZXJ8TWVkaWFUcmFja1NlbmRlcn0gdHJhY2tTZW5kZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIExvY2FsVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZyh0cmFja1NlbmRlciwgbmFtZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmcpO1xuXG4gICAgdmFyIGVuYWJsZWQgPSB0cmFja1NlbmRlci5raW5kID09PSAnZGF0YScgPyB0cnVlIDogdHJhY2tTZW5kZXIudHJhY2suZW5hYmxlZDtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmcpKS5jYWxsKHRoaXMsIG5hbWUsIHRyYWNrU2VuZGVyLmtpbmQsIGVuYWJsZWQpKTtcblxuICAgIF90aGlzLnNldFRyYWNrVHJhbnNjZWl2ZXIodHJhY2tTZW5kZXIpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF90aGlzLCB7XG4gICAgICBfZXJyb3I6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaWQ6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHRyYWNrU2VuZGVyLmlkXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlamVjdHMgdGhlIFNJRCdzIGRlZmVycmVkIHByb21pc2Ugd2l0aCB0aGUgZ2l2ZW4gRXJyb3IuXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmcsIFt7XG4gICAga2V5OiAncHVibGlzaEZhaWxlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1Ymxpc2hGYWlsZWQoZXJyb3IpIHtcbiAgICAgIGlmIChzZXRFcnJvcih0aGlzLCBlcnJvcikpIHtcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGVkJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTaWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTaWQoc2lkKSB7XG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2dldChMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmcucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9jYWxUcmFja1B1YmxpY2F0aW9uU2lnbmFsaW5nLnByb3RvdHlwZSksICdzZXRTaWQnLCB0aGlzKS5jYWxsKHRoaXMsIHNpZCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvY2FsVHJhY2tQdWJsaWNhdGlvblNpZ25hbGluZztcbn0oVHJhY2tTaWduYWxpbmcpO1xuXG4vKipcbiAqIEBwYXJhbSB7TG9jYWxUcmFja1B1YmxpY2F0aW9ufSBwdWJsaWNhdGlvblxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3JcbiAqIEByZXR1cm5zIHtib29sZWFufSB1cGRhdGVkXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRFcnJvcihwdWJsaWNhdGlvbiwgZXJyb3IpIHtcbiAgaWYgKHB1YmxpY2F0aW9uLl9zaWQgIT09IG51bGwgfHwgcHVibGljYXRpb24uX2Vycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHB1YmxpY2F0aW9uLl9lcnJvciA9IGVycm9yO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMb2NhbFRyYWNrUHVibGljYXRpb25TaWduYWxpbmc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS9zaWduYWxpbmcvbG9jYWx0cmFja3B1YmxpY2F0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///377\n");

/***/ }),
/* 378 */
/*!**********************************************************!*\
  !*** ./node_modules/twilio-video/es5/signaling/index.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* eslint consistent-return:0 */\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ParticipantSignaling = __webpack_require__(/*! ./participant */ 228);\nvar RoomSignaling = __webpack_require__(/*! ./room */ 257);\nvar StateMachine = __webpack_require__(/*! ../statemachine */ 215);\n\n/*\nSignaling States\n----------------\n\n              +---------+\n              |         |\n              | opening |\n         +--->|         |\n         |    +---------+\n    +--------+   |   |   +------+\n    |        |<--+   +-->|      |\n    | closed |<----------| open |\n    |        |<--+   +-->|      |\n    +--------+   |   |   +------+\n              +---------+   |\n              |         |<--+\n              | closing |\n              |         |\n              +---------+\n\n*/\n\nvar states = {\n  closed: ['opening'],\n  opening: ['closed', 'open'],\n  open: ['closed', 'closing'],\n  closing: ['closed', 'open']\n};\n\n/**\n * @extends StateMachine\n * @property {string} state - one of \"closed\", \"opening\", \"open\", or \"closing\"\n */\n\nvar Signaling = function (_StateMachine) {\n  _inherits(Signaling, _StateMachine);\n\n  /**\n   * Construct {@link Signaling}.\n   */\n  function Signaling() {\n    _classCallCheck(this, Signaling);\n\n    return _possibleConstructorReturn(this, (Signaling.__proto__ || Object.getPrototypeOf(Signaling)).call(this, 'closed', states));\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n\n\n  _createClass(Signaling, [{\n    key: '_close',\n    value: function _close(key) {\n      this.transition('closing', key);\n      this.transition('closed', key);\n      return Promise.resolve(this);\n    }\n\n    /**\n     * @private\n     */\n    // NOTE(mroberts): This is a dummy implementation suitable for testing.\n\n  }, {\n    key: '_connect',\n    value: function _connect(localParticipant, token, iceServerSource, encodingParameters, preferredCodecs, options) {\n      localParticipant.connect('PA00000000000000000000000000000000', 'test');\n      var sid = 'RM00000000000000000000000000000000';\n      var promise = Promise.resolve(new RoomSignaling(localParticipant, sid, options));\n      promise.cancel = function cancel() {};\n      return promise;\n    }\n\n    /**\n     * @private\n     */\n    // NOTE(mroberts): This is a dummy implementation suitable for testing.\n\n  }, {\n    key: '_open',\n    value: function _open(key) {\n      this.transition('opening', key);\n      this.transition('open', key);\n      return Promise.resolve(this);\n    }\n\n    /**\n     * Close the {@link Signaling}.\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      return this.bracket('close', function (key) {\n        switch (_this2.state) {\n          case 'closed':\n            return _this2;\n          case 'open':\n            return _this2._close(key);\n          default:\n            throw new Error('Unexpected Signaling state \"' + _this2.state + '\"');\n        }\n      });\n    }\n\n    /**\n     * Connect to a {@link RoomSignaling}.\n     * @param {ParticipantSignaling} localParticipant\n     * @param {string} token\n     * @param {IceServerSource} iceServerSource\n     * @param {EncodingParametersImpl} encodingParameters\n     * @param {PreferredCodecs} preferredCodecs\n     * @param {object} options\n     * @returns {Promise<function(): CancelablePromise<RoomSignaling>>}\n     */\n\n  }, {\n    key: 'connect',\n    value: function connect(localParticipant, token, iceServerSource, encodingParameters, preferredCodecs, options) {\n      var self = this;\n      return this.bracket('connect', function transition(key) {\n        switch (self.state) {\n          case 'closed':\n            return self._open(key).then(transition.bind(null, key));\n          case 'open':\n            // NOTE(mroberts): We don't need to hold the lock in _connect. Instead,\n            // we just need to ensure the Signaling remains open.\n            self.releaseLockCompletely(key);\n            return self._connect(localParticipant, token, iceServerSource, encodingParameters, preferredCodecs, options);\n          default:\n            throw new Error('Unexpected Signaling state \"' + self.state + '\"');\n        }\n      });\n    }\n\n    /**\n     * Create a local {@link ParticipantSignaling}.\n     * @returns {ParticipantSignaling}\n     */\n\n  }, {\n    key: 'createLocalParticipantSignaling',\n    value: function createLocalParticipantSignaling() {\n      return new ParticipantSignaling();\n    }\n\n    /**\n     * Open the {@link Signaling}.\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: 'open',\n    value: function open() {\n      var _this3 = this;\n\n      return this.bracket('open', function (key) {\n        switch (_this3.state) {\n          case 'closed':\n            return _this3._open(key);\n          case 'open':\n            return _this3;\n          default:\n            throw new Error('Unexpected Signaling state \"' + _this3.state + '\"');\n        }\n      });\n    }\n  }]);\n\n  return Signaling;\n}(StateMachine);\n\nmodule.exports = Signaling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///378\n");

/***/ }),
/* 379 */
/*!*******************************************************!*\
  !*** ./node_modules/twilio-video/es5/util/support.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* globals RTCPeerConnection, webkitRTCPeerConnection, mozRTCPeerConnection, navigator */\n\n\nvar guessBrowser = __webpack_require__(/*! ./ */ 206).guessBrowser;\n\n/**\n * Check whether PeerConnection API is supported.\n * @returns {boolean}\n */\nfunction isRTCPeerConnectionSupported() {\n  return typeof RTCPeerConnection !== 'undefined' || typeof webkitRTCPeerConnection !== 'undefined' || typeof mozRTCPeerConnection !== 'undefined';\n}\n\n/**\n * Check whether GetUserMedia API is supported.\n * @returns {boolean}\n */\nfunction isGetUserMediaSupported() {\n  return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) || !!navigator.getUserMedia || !!navigator.webkitGetUserMedia || !!navigator.mozGetUserMedia;\n}\n\n/**\n * Check if the current environment is supported by the SDK.\n * @returns {boolean}\n */\nfunction isSupported() {\n  return !!guessBrowser() && isGetUserMediaSupported() && isRTCPeerConnectionSupported();\n}\n\nmodule.exports = isSupported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL3N1cHBvcnQuanM/NGEzZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLGFBQUk7O0FBRS9CO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjM3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgUlRDUGVlckNvbm5lY3Rpb24sIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLCBtb3pSVENQZWVyQ29ubmVjdGlvbiwgbmF2aWdhdG9yICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBndWVzc0Jyb3dzZXIgPSByZXF1aXJlKCcuLycpLmd1ZXNzQnJvd3NlcjtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIFBlZXJDb25uZWN0aW9uIEFQSSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNSVENQZWVyQ29ubmVjdGlvblN1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIHR5cGVvZiBSVENQZWVyQ29ubmVjdGlvbiAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbW96UlRDUGVlckNvbm5lY3Rpb24gIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgR2V0VXNlck1lZGlhIEFQSSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNHZXRVc2VyTWVkaWFTdXBwb3J0ZWQoKSB7XG4gIHJldHVybiAhIShuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB8fCAhIW5hdmlnYXRvci5nZXRVc2VyTWVkaWEgfHwgISFuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhIHx8ICEhbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBzdXBwb3J0ZWQgYnkgdGhlIFNESy5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgcmV0dXJuICEhZ3Vlc3NCcm93c2VyKCkgJiYgaXNHZXRVc2VyTWVkaWFTdXBwb3J0ZWQoKSAmJiBpc1JUQ1BlZXJDb25uZWN0aW9uU3VwcG9ydGVkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdXBwb3J0ZWQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdHdpbGlvLXZpZGVvL2VzNS91dGlsL3N1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDM3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///379\n");

/***/ })
]));